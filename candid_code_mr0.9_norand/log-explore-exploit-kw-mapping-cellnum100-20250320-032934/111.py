# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict, deque

# Put tunable constant parameters below
RELEVANCE_DECAY = 0.9  # Decay factor for relevance score

# Put the metadata specifically maintained by the policy below. The policy maintains a hybrid queue and a grid structure. Each object has frequency, recency, insertion order, relevance score, and connection strengths with other items.
metadata = {
    'frequency': defaultdict(int),
    'recency': {},
    'insertion_order': {},
    'relevance_score': defaultdict(float),
    'connections': defaultdict(lambda: defaultdict(float)),
    'hybrid_queue': deque(),
    'grid': defaultdict(lambda: defaultdict(set)),
    'insertion_counter': 0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy identifies the eviction victim by first looking at the least frequency in the hybrid queue. If there are ties, it considers the least relevance score within the least recently used row and column intersection in the grid, prioritizing items with weaker connections.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_frequency = float('inf')
    min_relevance_score = float('inf')
    weakest_connection = float('inf')

    for key in metadata['hybrid_queue']:
        frequency = metadata['frequency'][key]
        if frequency < min_frequency:
            min_frequency = frequency
            candid_obj_key = key
        elif frequency == min_frequency:
            relevance_score = metadata['relevance_score'][key]
            if relevance_score < min_relevance_score:
                min_relevance_score = relevance_score
                candid_obj_key = key
            elif relevance_score == min_relevance_score:
                connection_strength = sum(metadata['connections'][key].values())
                if connection_strength < weakest_connection:
                    weakest_connection = connection_strength
                    candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the object's frequency is incremented, its recency is updated to the current timestamp, its relevance score is recalculated based on recent access patterns, and the strength of its connections with other frequently accessed items is reinforced. The object's position in the hybrid queue and grid is adjusted accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['relevance_score'][key] = RELEVANCE_DECAY * metadata['relevance_score'][key] + 1

    for other_key in cache_snapshot.cache:
        if other_key != key:
            metadata['connections'][key][other_key] += 1
            metadata['connections'][other_key][key] += 1

    metadata['hybrid_queue'].remove(key)
    metadata['hybrid_queue'].append(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy sets its frequency to 1, recency to the current timestamp, initializes its relevance score, and updates the grid structure. It also calculates initial connection strengths with other items and places the object in the appropriate position in the hybrid queue and grid.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['relevance_score'][key] = 1
    metadata['insertion_order'][key] = metadata['insertion_counter']
    metadata['insertion_counter'] += 1

    for other_key in cache_snapshot.cache:
        metadata['connections'][key][other_key] = 1
        metadata['connections'][other_key][key] = 1

    metadata['hybrid_queue'].append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the object's metadata from both the hybrid queue and the grid, adjusts the relevance scores and connection strengths of remaining items, and rebalances the grid structure if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['frequency'][evicted_key]
    del metadata['recency'][evicted_key]
    del metadata['relevance_score'][evicted_key]
    del metadata['insertion_order'][evicted_key]
    del metadata['connections'][evicted_key]

    for other_key in metadata['connections']:
        if evicted_key in metadata['connections'][other_key]:
            del metadata['connections'][other_key][evicted_key]

    metadata['hybrid_queue'].remove(evicted_key)