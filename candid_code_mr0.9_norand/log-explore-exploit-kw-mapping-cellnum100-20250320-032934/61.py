# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
ALPHA = 0.7  # Weight for recency in dynamic priority score
BETA = 0.3   # Weight for frequency in dynamic priority score

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached item, including access frequency, recency, a dynamic priority score, and a voting score from multiple eviction algorithms.
metadata = {
    'access_frequency': collections.defaultdict(int),
    'recency': collections.defaultdict(int),
    'dynamic_priority': collections.defaultdict(float),
    'voting_score': collections.defaultdict(float)
}

def calculate_dynamic_priority(key):
    return ALPHA * metadata['recency'][key] + BETA * metadata['access_frequency'][key]

def calculate_voting_score(key):
    # Example voting score calculation using dynamic priority
    return metadata['dynamic_priority'][key]

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates an eviction probability for each item based on its access frequency, recency, and dynamic priority score. Multiple eviction algorithms vote on which item to evict, and the item with the highest combined score is chosen.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    max_voting_score = -1
    
    for key in cache_snapshot.cache:
        metadata['dynamic_priority'][key] = calculate_dynamic_priority(key)
        metadata['voting_score'][key] = calculate_voting_score(key)
        
        if metadata['voting_score'][key] > max_voting_score:
            max_voting_score = metadata['voting_score'][key]
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the item are updated. The dynamic priority score is adjusted based on the new access pattern, and the voting scores from the eviction algorithms are recalculated.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['dynamic_priority'][key] = calculate_dynamic_priority(key)
    metadata['voting_score'][key] = calculate_voting_score(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its access frequency and recency are initialized. The dynamic priority score is set based on initial access patterns, and the voting scores from the eviction algorithms are calculated.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['dynamic_priority'][key] = calculate_dynamic_priority(key)
    metadata['voting_score'][key] = calculate_voting_score(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the metadata for the remaining items is adjusted to reflect the change in the cache state. The dynamic priority scores and voting scores are recalculated to adapt to the new access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['recency']:
        del metadata['recency'][evicted_key]
    if evicted_key in metadata['dynamic_priority']:
        del metadata['dynamic_priority'][evicted_key]
    if evicted_key in metadata['voting_score']:
        del metadata['voting_score'][evicted_key]
    
    for key in cache_snapshot.cache:
        metadata['dynamic_priority'][key] = calculate_dynamic_priority(key)
        metadata['voting_score'][key] = calculate_voting_score(key)