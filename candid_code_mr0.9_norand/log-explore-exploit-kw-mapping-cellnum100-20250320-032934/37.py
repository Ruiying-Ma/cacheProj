# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
STATE_TRANSITIONS = {'new': 'used', 'used': 'frequent'}
INITIAL_NEIGHBORHOOD_SCORE = 1

# Put the metadata specifically maintained by the policy below. Each cache line maintains a state representing its usage frequency (e.g., 'new', 'used', 'frequent') and a neighborhood score indicating the access patterns of neighboring cache lines.
cache_metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combination of the state and neighborhood score, prioritizing lines in the 'new' state with the lowest neighborhood score, and using LIFO within the same state and score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_score = float('inf')
    for key, cached_obj in cache_snapshot.cache.items():
        state, score = cache_metadata[key]
        if state == 'new' and score < min_score:
            min_score = score
            candid_obj_key = key
        elif state == 'new' and score == min_score:
            candid_obj_key = key

    if candid_obj_key is None:
        for key, cached_obj in cache_snapshot.cache.items():
            state, score = cache_metadata[key]
            if state == 'used' and score < min_score:
                min_score = score
                candid_obj_key = key
            elif state == 'used' and score == min_score:
                candid_obj_key = key

    if candid_obj_key is None:
        for key, cached_obj in cache_snapshot.cache.items():
            state, score = cache_metadata[key]
            if state == 'frequent' and score < min_score:
                min_score = score
                candid_obj_key = key
            elif state == 'frequent' and score == min_score:
                candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the state of the accessed line transitions to a higher usage frequency state (e.g., from 'new' to 'used'), and the neighborhood scores of adjacent lines are incremented to reflect increased spatial locality.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    state, score = cache_metadata[key]
    if state in STATE_TRANSITIONS:
        cache_metadata[key] = (STATE_TRANSITIONS[state], score)
    
    for neighbor_key in cache_snapshot.cache:
        if neighbor_key != key:
            neighbor_state, neighbor_score = cache_metadata[neighbor_key]
            cache_metadata[neighbor_key] = (neighbor_state, neighbor_score + 1)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the new cache line is assigned the 'new' state and a neighborhood score based on the access patterns of its neighbors, while the neighborhood scores of adjacent lines are updated to reflect the new insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    cache_metadata[key] = ('new', INITIAL_NEIGHBORHOOD_SCORE)
    
    for neighbor_key in cache_snapshot.cache:
        if neighbor_key != key:
            neighbor_state, neighbor_score = cache_metadata[neighbor_key]
            cache_metadata[neighbor_key] = (neighbor_state, neighbor_score + 1)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the states and neighborhood scores of remaining lines are adjusted to reflect the removal, with neighboring lines' scores decremented to account for the reduced spatial locality.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    del cache_metadata[evicted_key]
    
    for neighbor_key in cache_snapshot.cache:
        if neighbor_key != evicted_key:
            neighbor_state, neighbor_score = cache_metadata[neighbor_key]
            cache_metadata[neighbor_key] = (neighbor_state, max(0, neighbor_score - 1))