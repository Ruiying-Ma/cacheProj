# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for frequency
BETA = 0.3   # Weight for recency
GAMMA = 0.2  # Weight for priority score

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache item including access frequency, last access time, and a priority score. Additionally, it keeps track of the current workload and access patterns to dynamically adjust its strategy.
metadata = {}

def calculate_priority(frequency, last_access_time, current_time):
    return ALPHA * frequency + BETA * (current_time - last_access_time)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combination of the lowest priority score, least access frequency, and oldest last access time. It dynamically adjusts the weight of each factor based on the current workload and access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_priority = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        freq = metadata[key]['frequency']
        last_access = metadata[key]['last_access_time']
        priority = calculate_priority(freq, last_access, cache_snapshot.access_count)
        
        if priority < min_priority:
            min_priority = priority
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the last access time to the current time, and recalculates the priority score based on the updated frequency and recency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['frequency'] += 1
    metadata[key]['last_access_time'] = cache_snapshot.access_count
    metadata[key]['priority'] = calculate_priority(metadata[key]['frequency'], metadata[key]['last_access_time'], cache_snapshot.access_count)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency to 1, sets the last access time to the current time, and calculates an initial priority score. It also reassesses the overall cache strategy based on the current workload.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'frequency': 1,
        'last_access_time': cache_snapshot.access_count,
        'priority': calculate_priority(1, cache_snapshot.access_count, cache_snapshot.access_count)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes its metadata and recalculates the priority scores of the remaining items to ensure optimal cache performance based on the current access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    for key in cache_snapshot.cache:
        metadata[key]['priority'] = calculate_priority(metadata[key]['frequency'], metadata[key]['last_access_time'], cache_snapshot.access_count)