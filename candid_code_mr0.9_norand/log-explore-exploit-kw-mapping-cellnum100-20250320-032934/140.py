# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
SQ_CAPACITY_RATIO = 0.5  # Ratio of the cache capacity allocated to SQ
MAX_FREQUENCY = 3

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, group identifier, queue position (SQ or MQ), fitness score, recompression/reconstruction cost, and global statistics on access patterns and workload characteristics. It also tracks the state of the ghost queue (GQ) and local cache ID.
metadata = {
    'access_frequency': {},  # obj.key -> frequency
    'last_access_time': {},  # obj.key -> last access time
    'group_identifier': {},  # obj.key -> group id
    'queue_position': {},    # obj.key -> 'SQ' or 'MQ'
    'fitness_score': {},     # obj.key -> fitness score
    'recompression_cost': {},# obj.key -> recompression/reconstruction cost
    'ghost_queue': [],       # list of obj keys in GQ
    'local_cache_id': 0,     # local cache identifier
    'global_stats': {        # global statistics
        'access_patterns': {},
        'workload_characteristics': {}
    }
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first checks if SQ exceeds its capacity. If so, it moves items from SQ to MQ until an item with frequency less than 2 is found or MQ is full. If MQ is full, it reduces the frequency of items in MQ cyclically until an item with zero frequency is found and evicts it. If SQ is not full, it evaluates objects based on their fitness scores and recompression/reconstruction costs, prioritizing eviction of those with the lowest scores and minimal overhead. The evicted item is placed in GQ, and its frequency is no longer tracked. If GQ is full, the front item of GQ is removed.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    SQ_capacity = int(cache_snapshot.capacity * SQ_CAPACITY_RATIO)
    MQ_capacity = cache_snapshot.capacity - SQ_capacity

    # Check if SQ exceeds its capacity
    SQ_items = [key for key, pos in metadata['queue_position'].items() if pos == 'SQ']
    MQ_items = [key for key, pos in metadata['queue_position'].items() if pos == 'MQ']

    if sum(cache_snapshot.cache[key].size for key in SQ_items) > SQ_capacity:
        # Move items from SQ to MQ until an item with frequency < 2 is found or MQ is full
        while SQ_items and (sum(cache_snapshot.cache[key].size for key in MQ_items) < MQ_capacity):
            key = SQ_items.pop(0)
            if metadata['access_frequency'][key] < 2:
                candid_obj_key = key
                break
            metadata['queue_position'][key] = 'MQ'
            MQ_items.append(key)

    if not candid_obj_key:
        # If MQ is full, reduce frequency of items in MQ cyclically until an item with zero frequency is found and evict it
        if sum(cache_snapshot.cache[key].size for key in MQ_items) >= MQ_capacity:
            while MQ_items:
                key = MQ_items.pop(0)
                metadata['access_frequency'][key] -= 1
                if metadata['access_frequency'][key] == 0:
                    candid_obj_key = key
                    break
                MQ_items.append(key)

    if not candid_obj_key:
        # Evaluate objects based on their fitness scores and recompression/reconstruction costs
        candidates = sorted(cache_snapshot.cache.keys(), key=lambda k: (metadata['fitness_score'][k], metadata['recompression_cost'][k]))
        candid_obj_key = candidates[0]

    # Place the evicted item in GQ
    metadata['ghost_queue'].append(candid_obj_key)
    if len(metadata['ghost_queue']) > cache_snapshot.capacity:
        metadata['ghost_queue'].pop(0)

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increases the access frequency of the hit item if it is less than 3, updates its last access time, and adjusts the group priorities based on the updated access patterns. It also updates the queue position if necessary and increases the object's fitness score based on its recency and frequency of access. The global statistics are updated to reflect the current access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    if metadata['access_frequency'][key] < MAX_FREQUENCY:
        metadata['access_frequency'][key] += 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Adjust group priorities and update fitness score
    metadata['fitness_score'][key] = metadata['access_frequency'][key] / (cache_snapshot.access_count - metadata['last_access_time'][key] + 1)
    # Update global statistics
    metadata['global_stats']['access_patterns'][key] = metadata['access_frequency'][key]

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy assigns it to a group based on its access pattern or type, initializes its access frequency to 1, sets its last access time, and updates the overall cache access patterns and workload characteristics. It places the item in SQ or MQ based on whether it was in GQ. The initial fitness score is set based on the current workload characteristics. The global statistics are updated to include the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['group_identifier'][key] = 'default'  # Assign to a default group
    if key in metadata['ghost_queue']:
        metadata['queue_position'][key] = 'MQ'
        metadata['ghost_queue'].remove(key)
    else:
        metadata['queue_position'][key] = 'SQ'
    metadata['fitness_score'][key] = 1  # Initial fitness score
    metadata['recompression_cost'][key] = 0  # Initial recompression/reconstruction cost
    # Update global statistics
    metadata['global_stats']['access_patterns'][key] = metadata['access_frequency'][key]
    metadata['global_stats']['workload_characteristics'][key] = obj.size

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy updates the metadata of the affected group, recalculates group priorities, and adjusts the overall cache access patterns and workload characteristics. The global statistics are updated to remove the evicted object's contribution. The local cache synchronizes with other caches to optimize overall performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    group_id = metadata['group_identifier'][evicted_key]
    # Update metadata of the affected group
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_time'][evicted_key]
    del metadata['group_identifier'][evicted_key]
    del metadata['queue_position'][evicted_key]
    del metadata['fitness_score'][evicted_key]
    del metadata['recompression_cost'][evicted_key]
    # Update global statistics
    del metadata['global_stats']['access_patterns'][evicted_key]
    del metadata['global_stats']['workload_characteristics'][evicted_key]
    # Recalculate group priorities
    # (This is a placeholder, actual implementation would depend on specific group priority logic)
    # Synchronize with other caches (placeholder)
    # (This is a placeholder, actual implementation would depend on specific synchronization logic)