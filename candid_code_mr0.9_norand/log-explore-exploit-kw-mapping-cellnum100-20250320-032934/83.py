# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
USAGE_THRESHOLD = 10  # Threshold for promoting an item to a higher tier
BASE_USAGE_COUNTER = 1
INITIAL_TIER = 0

# Put the metadata specifically maintained by the policy below. Each cached object maintains a usage counter, tier level indicator, context relevance score predicted by a machine learning model, access frequency, last access timestamp, and a priority score derived from access patterns and contextual importance.
metadata = {}

def calculate_priority(obj_meta):
    # Priority score is a combination of infrequent access, older access timestamps, and lower contextual importance
    return (obj_meta['access_frequency'] * 0.5 + 
            (time.time() - obj_meta['last_access_timestamp']) * 0.3 + 
            obj_meta['context_relevance_score'] * 0.2)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first considering items in the lowest tier, selecting the item with the lowest priority score, which is calculated based on a combination of infrequent access, older access timestamps, and lower contextual importance. If multiple items have the same priority score, the item with the lowest usage counter is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_priority = float('inf')
    lowest_tier = float('inf')
    lowest_usage_counter = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        obj_meta = metadata[key]
        if obj_meta['tier'] < lowest_tier:
            lowest_tier = obj_meta['tier']
            lowest_priority = calculate_priority(obj_meta)
            lowest_usage_counter = obj_meta['usage_counter']
            candid_obj_key = key
        elif obj_meta['tier'] == lowest_tier:
            priority = calculate_priority(obj_meta)
            if priority < lowest_priority:
                lowest_priority = priority
                lowest_usage_counter = obj_meta['usage_counter']
                candid_obj_key = key
            elif priority == lowest_priority:
                if obj_meta['usage_counter'] < lowest_usage_counter:
                    lowest_usage_counter = obj_meta['usage_counter']
                    candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the usage counter and access frequency of the accessed item are incremented, the last access timestamp is updated to the current time, the context relevance score is updated using the machine learning model, and the priority score is recalculated. The item may be promoted to a higher tier if its usage counter exceeds a threshold.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    obj_meta = metadata[obj.key]
    obj_meta['usage_counter'] += 1
    obj_meta['access_frequency'] += 1
    obj_meta['last_access_timestamp'] = time.time()
    obj_meta['context_relevance_score'] = predict_context_relevance(obj)  # Assuming a function to predict context relevance
    obj_meta['priority_score'] = calculate_priority(obj_meta)
    
    if obj_meta['usage_counter'] > USAGE_THRESHOLD:
        obj_meta['tier'] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its metadata is initialized with a base usage counter, assigned to the lowest tier, an access frequency of 1, the current timestamp as the last access time, an initial context relevance score using the machine learning model, and a priority score based on its initial contextual importance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'usage_counter': BASE_USAGE_COUNTER,
        'tier': INITIAL_TIER,
        'access_frequency': 1,
        'last_access_timestamp': time.time(),
        'context_relevance_score': predict_context_relevance(obj),  # Assuming a function to predict context relevance
        'priority_score': calculate_priority({
            'usage_counter': BASE_USAGE_COUNTER,
            'tier': INITIAL_TIER,
            'access_frequency': 1,
            'last_access_timestamp': time.time(),
            'context_relevance_score': predict_context_relevance(obj)
        })
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the metadata of the evicted object is removed from the cache, the usage counters of all remaining items are reset, their context relevance scores are potentially recalculated, their tier levels are adjusted based on the updated usage counters and relevance scores, and the priority scores of remaining objects may be recalibrated if necessary to maintain relative prioritization.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata[evicted_obj.key]
    
    for key, cached_obj in cache_snapshot.cache.items():
        obj_meta = metadata[key]
        obj_meta['usage_counter'] = BASE_USAGE_COUNTER
        obj_meta['context_relevance_score'] = predict_context_relevance(cached_obj)  # Assuming a function to predict context relevance
        obj_meta['priority_score'] = calculate_priority(obj_meta)
        if obj_meta['usage_counter'] > USAGE_THRESHOLD:
            obj_meta['tier'] += 1
        else:
            obj_meta['tier'] = INITIAL_TIER