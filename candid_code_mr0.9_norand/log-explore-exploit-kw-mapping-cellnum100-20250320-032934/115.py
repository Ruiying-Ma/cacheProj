# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import deque, defaultdict

# Put tunable constant parameters below
INITIAL_EVICTION_PROBABILITY = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency, group identifier, eviction probability, FIFO queue position, usage state, neighborhood score, and LRU queue position for each cached object.
metadata = {
    'access_frequency': defaultdict(int),
    'recency': {},
    'group_identifier': {},
    'eviction_probability': defaultdict(lambda: INITIAL_EVICTION_PROBABILITY),
    'fifo_queue': deque(),
    'usage_state': defaultdict(lambda: 'new'),
    'neighborhood_score': defaultdict(int),
    'lru_queue': deque()
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates multiple eviction candidates by considering their access frequency, recency, group dependencies, eviction probabilities, FIFO queue position, usage state, neighborhood score, and LRU queue position. It selects the object or group with the highest combined eviction score, prioritizing 'new' state objects with the lowest neighborhood score, and uses LIFO within the same state and score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    highest_score = float('-inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (
            metadata['access_frequency'][key] * 0.1 +
            (cache_snapshot.access_count - metadata['recency'][key]) * 0.2 +
            metadata['eviction_probability'][key] * 0.3 +
            metadata['neighborhood_score'][key] * 0.4
        )
        
        if metadata['usage_state'][key] == 'new':
            score -= 1
        
        if score > highest_score:
            highest_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency to 1, recency to the current timestamp, group dependencies, lowers the eviction probability, and moves the object to the most-recently-used end of the LRU queue. The FIFO queue position remains unchanged. The state of the accessed line transitions to a higher usage frequency state, and the neighborhood scores of adjacent lines are incremented.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['eviction_probability'][key] *= 0.9
    metadata['usage_state'][key] = 'frequent'
    
    if key in metadata['lru_queue']:
        metadata['lru_queue'].remove(key)
    metadata['lru_queue'].append(key)
    
    # Update neighborhood scores
    for neighbor_key in metadata['fifo_queue']:
        if neighbor_key != key:
            metadata['neighborhood_score'][neighbor_key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency to 1, recency to the current timestamp, group identifier if applicable, sets an initial eviction probability, and places the object at the rear of the FIFO queue and the most-recently-used end of the LRU queue. The new cache line is assigned the 'new' state and a neighborhood score based on the access patterns of its neighbors, while the neighborhood scores of adjacent lines are updated.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['eviction_probability'][key] = INITIAL_EVICTION_PROBABILITY
    metadata['fifo_queue'].append(key)
    metadata['lru_queue'].append(key)
    metadata['usage_state'][key] = 'new'
    
    # Initialize neighborhood score based on neighbors
    neighborhood_score = 0
    for neighbor_key in metadata['fifo_queue']:
        if neighbor_key != key:
            neighborhood_score += metadata['neighborhood_score'][neighbor_key]
    metadata['neighborhood_score'][key] = neighborhood_score
    
    # Update neighborhood scores of adjacent lines
    for neighbor_key in metadata['fifo_queue']:
        if neighbor_key != key:
            metadata['neighborhood_score'][neighbor_key] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy recalculates the eviction probabilities for remaining items, updates group dependencies, adjusts the overall cache state, and removes the evicted object from both the FIFO and LRU queues. The states and neighborhood scores of remaining lines are adjusted, with neighboring lines' scores decremented.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    # Remove evicted object from metadata
    del metadata['access_frequency'][evicted_key]
    del metadata['recency'][evicted_key]
    del metadata['eviction_probability'][evicted_key]
    del metadata['usage_state'][evicted_key]
    del metadata['neighborhood_score'][evicted_key]
    
    if evicted_key in metadata['fifo_queue']:
        metadata['fifo_queue'].remove(evicted_key)
    if evicted_key in metadata['lru_queue']:
        metadata['lru_queue'].remove(evicted_key)
    
    # Recalculate eviction probabilities for remaining items
    for key in cache_snapshot.cache:
        metadata['eviction_probability'][key] *= 1.1
    
    # Adjust neighborhood scores of remaining lines
    for neighbor_key in metadata['fifo_queue']:
        metadata['neighborhood_score'][neighbor_key] -= 1