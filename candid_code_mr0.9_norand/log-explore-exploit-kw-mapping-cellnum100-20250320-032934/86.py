# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_EVICTION_PROBABILITY = 0.5
INITIAL_ADAPTATION_SCORE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency, group identifier, eviction probability, queue membership (T1, T2, B1, B2), a linked list of cached objects, and a dynamic adaptation score for each object.
metadata = {
    'access_frequency': {},
    'recency': {},
    'group_identifier': {},
    'eviction_probability': {},
    'adaptation_score': {},
    'queue_membership': {'T1': set(), 'T2': set(), 'B1': set(), 'B2': set()},
    'linked_list': [],
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates eviction candidates from T1 and T2 based on a combined score of access frequency, recency, group dependencies, eviction probability, and adaptation score. If T1 is not empty, it prioritizes T1 for eviction; otherwise, it evicts from T2. The object with the lowest combined score is chosen for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    candidate_queue = 'T1' if metadata['queue_membership']['T1'] else 'T2'
    
    for key in metadata['queue_membership'][candidate_queue]:
        score = (metadata['access_frequency'][key] + 
                 metadata['recency'][key] + 
                 metadata['eviction_probability'][key] + 
                 metadata['adaptation_score'][key])
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a hit, the policy updates the access frequency, recency, lowers the eviction probability, and updates the adaptation score of the accessed item. It moves the item to the most-recently-used end of T2 and reinforces group dependencies if accessed with other items in the same group. The object's position is also moved to the tail of the linked list.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['eviction_probability'][key] *= 0.9
    metadata['adaptation_score'][key] += 1
    
    if key in metadata['queue_membership']['T1']:
        metadata['queue_membership']['T1'].remove(key)
    metadata['queue_membership']['T2'].add(key)
    
    if key in metadata['linked_list']:
        metadata['linked_list'].remove(key)
    metadata['linked_list'].append(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency, group identifier, sets an initial eviction probability, and adaptation score based on initial access patterns. The item is placed in T1 or T2 based on its previous presence in B1 or B2, or as a new entry. It is also added to the tail of the linked list.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['group_identifier'][key] = obj.key.split('_')[0]  # Example group identifier
    metadata['eviction_probability'][key] = INITIAL_EVICTION_PROBABILITY
    metadata['adaptation_score'][key] = INITIAL_ADAPTATION_SCORE
    
    if key in metadata['queue_membership']['B1']:
        metadata['queue_membership']['B1'].remove(key)
        metadata['queue_membership']['T2'].add(key)
    elif key in metadata['queue_membership']['B2']:
        metadata['queue_membership']['B2'].remove(key)
        metadata['queue_membership']['T2'].add(key)
    else:
        metadata['queue_membership']['T1'].add(key)
    
    metadata['linked_list'].append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy recalculates eviction probabilities for remaining items, updates group dependencies, adjusts the overall cache state, and updates the adaptation scores of remaining objects. Evicted items are moved to B1 or B2, and redundant items in B1 or B2 are removed if necessary. The linked list is updated to remove the evicted object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['queue_membership']['T1']:
        metadata['queue_membership']['T1'].remove(evicted_key)
        metadata['queue_membership']['B1'].add(evicted_key)
    elif evicted_key in metadata['queue_membership']['T2']:
        metadata['queue_membership']['T2'].remove(evicted_key)
        metadata['queue_membership']['B2'].add(evicted_key)
    
    if evicted_key in metadata['linked_list']:
        metadata['linked_list'].remove(evicted_key)
    
    for key in metadata['queue_membership']['T1'].union(metadata['queue_membership']['T2']):
        metadata['eviction_probability'][key] *= 1.1
        metadata['adaptation_score'][key] -= 0.1