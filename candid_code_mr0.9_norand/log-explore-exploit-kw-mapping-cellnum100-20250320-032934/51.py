# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
BASE_USAGE_COUNTER = 1
USAGE_THRESHOLD = 5

# Put the metadata specifically maintained by the policy below. The policy maintains a graph of cached objects with edges representing access patterns, object sizes, usage counters, tier levels, context relevance scores, and a machine learning model for predicting future accesses and context relevance.
class CacheMetadata:
    def __init__(self):
        self.usage_counters = collections.defaultdict(int)
        self.tier_levels = collections.defaultdict(int)
        self.context_relevance_scores = collections.defaultdict(float)
        self.access_graph = collections.defaultdict(set)
        self.ml_model = self.dummy_ml_model()

    def dummy_ml_model(self):
        # Dummy ML model for context relevance score prediction
        return lambda obj: 1.0

cache_metadata = CacheMetadata()

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evicts the item in the lowest tier with the least number of edges and the lowest context relevance score. If there is a tie, it evicts the item with the largest object size. If there is still a tie, it evicts the item with the lowest usage counter.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_tier = float('inf')
    min_edges = float('inf')
    min_context_score = float('inf')
    max_size = -float('inf')
    min_usage_counter = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        tier = cache_metadata.tier_levels[key]
        edges = len(cache_metadata.access_graph[key])
        context_score = cache_metadata.context_relevance_scores[key]
        size = cached_obj.size
        usage_counter = cache_metadata.usage_counters[key]

        if (tier < min_tier or
            (tier == min_tier and edges < min_edges) or
            (tier == min_tier and edges == min_edges and context_score < min_context_score) or
            (tier == min_tier and edges == min_edges and context_score == min_context_score and size > max_size) or
            (tier == min_tier and edges == min_edges and context_score == min_context_score and size == max_size and usage_counter < min_usage_counter)):
            candid_obj_key = key
            min_tier = tier
            min_edges = edges
            min_context_score = context_score
            max_size = size
            min_usage_counter = usage_counter

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    The policy increments the usage counter of the accessed item, updates its context relevance score using the machine learning model, reinforces the edges in the graph, and may promote the item to a higher tier if its usage counter exceeds a threshold.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    cache_metadata.usage_counters[key] += 1
    cache_metadata.context_relevance_scores[key] = cache_metadata.ml_model(obj)

    if cache_metadata.usage_counters[key] > USAGE_THRESHOLD:
        cache_metadata.tier_levels[key] += 1

    for other_key in cache_snapshot.cache:
        if other_key != key:
            cache_metadata.access_graph[key].add(other_key)
            cache_metadata.access_graph[other_key].add(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    The policy initializes the usage counter to a base value, assigns the item to the lowest tier, calculates its initial context relevance score using the machine learning model, adds a new node to the graph, and initializes its edges based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    cache_metadata.usage_counters[key] = BASE_USAGE_COUNTER
    cache_metadata.tier_levels[key] = 0
    cache_metadata.context_relevance_scores[key] = cache_metadata.ml_model(obj)
    cache_metadata.access_graph[key] = set()

    for other_key in cache_snapshot.cache:
        cache_metadata.access_graph[key].add(other_key)
        cache_metadata.access_graph[other_key].add(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    The policy resets the usage counters of all remaining items, recalculates their context relevance scores, adjusts their tier levels, removes the corresponding node and its edges from the graph, and updates the machine learning model to exclude the evicted item.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del cache_metadata.usage_counters[evicted_key]
    del cache_metadata.tier_levels[evicted_key]
    del cache_metadata.context_relevance_scores[evicted_key]
    del cache_metadata.access_graph[evicted_key]

    for key in cache_metadata.access_graph:
        if evicted_key in cache_metadata.access_graph[key]:
            cache_metadata.access_graph[key].remove(evicted_key)

    for key in cache_snapshot.cache:
        cache_metadata.usage_counters[key] = BASE_USAGE_COUNTER
        cache_metadata.context_relevance_scores[key] = cache_metadata.ml_model(cache_snapshot.cache[key])
        if cache_metadata.usage_counters[key] > USAGE_THRESHOLD:
            cache_metadata.tier_levels[key] += 1