# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
BASE_USAGE_COUNTER = 1
USAGE_THRESHOLD = 5

# Put the metadata specifically maintained by the policy below. The policy maintains a usage counter, tier level indicator, context relevance score, a graph structure of cached items, and a machine learning model for predicting access patterns and context relevance.
usage_counter = collections.defaultdict(int)
tier_level = collections.defaultdict(lambda: 0)
context_relevance_score = collections.defaultdict(float)
graph_connections = collections.defaultdict(set)
recent_accesses = collections.deque(maxlen=100)

def predict_context_relevance(obj):
    # Dummy machine learning model for predicting context relevance
    return len(obj.key) / 10.0

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first considering items in the lowest tier, selecting the item with the least number of connections in the graph and the lowest context relevance score. If multiple items have the same score, the item with the lowest usage counter is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_tier = min(tier_level.values())
    candidates = [key for key, tier in tier_level.items() if tier == min_tier]
    
    if not candidates:
        return None
    
    min_connections = min(len(graph_connections[key]) for key in candidates)
    candidates = [key for key in candidates if len(graph_connections[key]) == min_connections]
    
    if not candidates:
        return None
    
    min_relevance = min(context_relevance_score[key] for key in candidates)
    candidates = [key for key in candidates if context_relevance_score[key] == min_relevance]
    
    if not candidates:
        return None
    
    candid_obj_key = min(candidates, key=lambda key: usage_counter[key])
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    The policy increments the usage counter of the accessed item, updates its context relevance score using the machine learning model, reinforces the connections in the graph, and may promote the item to a higher tier if its usage counter exceeds a threshold.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    usage_counter[obj.key] += 1
    context_relevance_score[obj.key] = predict_context_relevance(obj)
    
    if usage_counter[obj.key] > USAGE_THRESHOLD:
        tier_level[obj.key] += 1
    
    for recent_key in recent_accesses:
        if recent_key != obj.key:
            graph_connections[obj.key].add(recent_key)
            graph_connections[recent_key].add(obj.key)
    
    recent_accesses.append(obj.key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    The policy initializes the usage counter to a base value, assigns the item to the lowest tier, calculates its initial context relevance score using the machine learning model, adds a new node to the graph, and initializes its connections based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    usage_counter[obj.key] = BASE_USAGE_COUNTER
    tier_level[obj.key] = 0
    context_relevance_score[obj.key] = predict_context_relevance(obj)
    graph_connections[obj.key] = set()
    
    for recent_key in recent_accesses:
        graph_connections[obj.key].add(recent_key)
        graph_connections[recent_key].add(obj.key)
    
    recent_accesses.append(obj.key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    The policy resets the usage counters of all remaining items, recalculates their context relevance scores, adjusts their tier levels, removes the corresponding node and its edges from the graph, and updates the machine learning model to exclude the evicted item.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del usage_counter[evicted_obj.key]
    del tier_level[evicted_obj.key]
    del context_relevance_score[evicted_obj.key]
    del graph_connections[evicted_obj.key]
    
    for key in graph_connections:
        if evicted_obj.key in graph_connections[key]:
            graph_connections[key].remove(evicted_obj.key)
    
    for key in cache_snapshot.cache:
        usage_counter[key] = BASE_USAGE_COUNTER
        context_relevance_score[key] = predict_context_relevance(cache_snapshot.cache[key])
        if usage_counter[key] > USAGE_THRESHOLD:
            tier_level[key] += 1