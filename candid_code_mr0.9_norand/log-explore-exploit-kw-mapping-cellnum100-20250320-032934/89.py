# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for access frequency
BETA = 0.3   # Weight for recency
GAMMA = 0.1  # Weight for eviction probability
DELTA = 0.1  # Weight for historical access pattern score

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency (timestamp), group identifier, eviction probability, historical access pattern score, and a global adjustment factor. It also tracks the LRU queue for quick recency updates.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'recency': {},           # {obj.key: timestamp}
    'group_identifier': {},  # {obj.key: group_id}
    'eviction_probability': {},  # {obj.key: probability}
    'historical_access_pattern_score': {},  # {obj.key: score}
    'lru_queue': [],         # List of obj.keys in LRU order
    'global_adjustment_factor': 1.0  # Adjustment factor
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates multiple eviction candidates by calculating a composite score for each item, which is a weighted sum of access frequency, recency, eviction probability, and historical access pattern score. The item or group with the lowest composite score is selected for eviction, balancing between LRU and dynamic eviction probability.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        frequency = metadata['access_frequency'].get(key, 0)
        recency = metadata['recency'].get(key, 0)
        eviction_prob = metadata['eviction_probability'].get(key, 1.0)
        hap_score = metadata['historical_access_pattern_score'].get(key, 0)
        
        composite_score = (ALPHA * frequency +
                           BETA * (cache_snapshot.access_count - recency) +
                           GAMMA * eviction_prob +
                           DELTA * hap_score)
        
        if composite_score < min_score:
            min_score = composite_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, recency (timestamp), and historical access pattern score of the accessed item. It moves the item to the most-recently-used end of the LRU queue, lowers its eviction probability, reinforces group dependencies if accessed with other items in the same group, and fine-tunes the global adjustment factor to reflect the current workload.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['historical_access_pattern_score'][key] = metadata['historical_access_pattern_score'].get(key, 0) + 1
    metadata['eviction_probability'][key] = max(0, metadata['eviction_probability'].get(key, 1.0) - 0.01)
    
    if key in metadata['lru_queue']:
        metadata['lru_queue'].remove(key)
    metadata['lru_queue'].append(key)
    
    # Adjust global adjustment factor
    metadata['global_adjustment_factor'] *= 1.01

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency (timestamp), group identifier if applicable, and historical access pattern score. It sets an initial eviction probability based on the current cache state and access patterns, places the item at the most-recently-used end of the LRU queue, and updates the global adjustment factor to account for the new workload dynamics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['group_identifier'][key] = None  # Assuming no group identifier for simplicity
    metadata['historical_access_pattern_score'][key] = 1
    metadata['eviction_probability'][key] = 1.0 / (cache_snapshot.size + 1)
    
    metadata['lru_queue'].append(key)
    
    # Adjust global adjustment factor
    metadata['global_adjustment_factor'] *= 1.01

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the evicted item from the LRU queue, recalculates the eviction probabilities for remaining items, updates group dependencies to reflect the removal, adjusts the overall cache state to maintain balance between frequency, recency, and group access patterns, and recalculates the global adjustment factor to ensure it remains optimal for the current access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['lru_queue']:
        metadata['lru_queue'].remove(evicted_key)
    
    # Remove metadata for evicted object
    metadata['access_frequency'].pop(evicted_key, None)
    metadata['recency'].pop(evicted_key, None)
    metadata['group_identifier'].pop(evicted_key, None)
    metadata['eviction_probability'].pop(evicted_key, None)
    metadata['historical_access_pattern_score'].pop(evicted_key, None)
    
    # Recalculate eviction probabilities for remaining items
    total_size = sum(obj.size for obj in cache_snapshot.cache.values())
    for key in cache_snapshot.cache:
        metadata['eviction_probability'][key] = 1.0 / (total_size + 1)
    
    # Adjust global adjustment factor
    metadata['global_adjustment_factor'] *= 0.99