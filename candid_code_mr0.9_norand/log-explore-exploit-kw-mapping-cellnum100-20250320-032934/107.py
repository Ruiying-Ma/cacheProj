# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
T1_SIZE = 0.5  # Fraction of cache capacity allocated to T1
T2_SIZE = 0.5  # Fraction of cache capacity allocated to T2

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency, group identifier, eviction probability, stability score, queue membership (T1, T2, B1, B2), and a circular pointer. It also tracks multiple copies of frequently accessed data for fault tolerance.
metadata = {
    'access_frequency': {},  # {key: frequency}
    'recency': {},  # {key: last_access_time}
    'group_identifier': {},  # {key: group_id}
    'eviction_probability': {},  # {key: eviction_prob}
    'stability_score': {},  # {key: stability_score}
    'queue_membership': {},  # {key: queue_name}
    'circular_pointer': None,  # Points to the current candidate for eviction
    'T1': [],  # List of keys in T1
    'T2': [],  # List of keys in T2
    'B1': [],  # List of keys in B1
    'B2': [],  # List of keys in B2
    'replicas': {}  # {key: [replica_keys]}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates eviction candidates from T1 and T2 using the circular pointer, considering access frequency, recency, group dependencies, eviction probability, and stability score. It prioritizes T1 for eviction if not empty, otherwise T2. It evicts the least recently used copies of frequently accessed data only when necessary. Evicted items are moved to B1 or B2.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    if metadata['T1']:
        candid_obj_key = metadata['T1'].pop(0)
        metadata['B1'].append(candid_obj_key)
    elif metadata['T2']:
        candid_obj_key = metadata['T2'].pop(0)
        metadata['B2'].append(candid_obj_key)
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a hit, the policy updates access frequency, recency, stability score, and lowers eviction probability of the accessed item. It moves the item to the most-recently-used end of T2, reinforces group dependencies, and checks if the data should be replicated for fault tolerance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['stability_score'][key] += 1
    metadata['eviction_probability'][key] = max(0, metadata['eviction_probability'][key] - 0.1)
    
    if key in metadata['T1']:
        metadata['T1'].remove(key)
    if key in metadata['T2']:
        metadata['T2'].remove(key)
    
    metadata['T2'].append(key)
    metadata['queue_membership'][key] = 'T2'

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency, group identifier, eviction probability, and stability score. It determines if the new object should have multiple copies based on its initial access frequency and places it in T1 or T2 based on its previous presence in B1 or B2, or as a new entry at the current pointer location.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['group_identifier'][key] = None  # Initialize as needed
    metadata['eviction_probability'][key] = 0.5
    metadata['stability_score'][key] = 1
    
    if key in metadata['B1']:
        metadata['B1'].remove(key)
        metadata['T2'].append(key)
        metadata['queue_membership'][key] = 'T2'
    elif key in metadata['B2']:
        metadata['B2'].remove(key)
        metadata['T2'].append(key)
        metadata['queue_membership'][key] = 'T2'
    else:
        metadata['T1'].append(key)
        metadata['queue_membership'][key] = 'T1'

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy recalculates eviction probabilities for remaining items, updates group dependencies, and adjusts the overall cache state. It updates the metadata of remaining entries to reflect the removal and ensures necessary copies of frequently accessed data are maintained for fault tolerance. Evicted items are moved to B1 or B2, and redundant items in B1 or B2 are removed if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    if evicted_key in metadata['T1']:
        metadata['T1'].remove(evicted_key)
        metadata['B1'].append(evicted_key)
    elif evicted_key in metadata['T2']:
        metadata['T2'].remove(evicted_key)
        metadata['B2'].append(evicted_key)
    
    # Recalculate eviction probabilities and update metadata
    for key in cache_snapshot.cache:
        metadata['eviction_probability'][key] = min(1, metadata['eviction_probability'][key] + 0.1)
        metadata['stability_score'][key] = max(0, metadata['stability_score'][key] - 1)
    
    # Remove redundant items in B1 and B2 if necessary
    if len(metadata['B1']) > cache_snapshot.capacity * T1_SIZE:
        metadata['B1'].pop(0)
    if len(metadata['B2']) > cache_snapshot.capacity * T2_SIZE:
        metadata['B2'].pop(0)