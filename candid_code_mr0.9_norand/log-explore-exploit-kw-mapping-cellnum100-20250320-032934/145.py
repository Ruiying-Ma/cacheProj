# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
SQ_CAPACITY_RATIO = 0.5  # Ratio of the cache capacity allocated to SQ
GQ_CAPACITY = 100  # Maximum number of items in the ghost queue

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, group identifier, queue position (SQ or MQ), and overall cache access patterns. It also tracks the state of the ghost queue (GQ) and workload characteristics.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'last_access_time': {},  # {obj.key: last_access_time}
    'group_identifier': {},  # {obj.key: group_id}
    'queue_position': {},    # {obj.key: 'SQ' or 'MQ'}
    'ghost_queue': [],       # List of keys in the ghost queue (GQ)
    'group_priorities': {},  # {group_id: priority}
    'workload_characteristics': {},  # Custom workload characteristics
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    If SQ exceeds its capacity, move items to MQ until an item with frequency less than 2 is found or MQ is full. If MQ is full, reduce the frequency of items cyclically until an item with zero frequency is found and evict it. If SQ is not full, evict the item with the lowest access frequency or oldest last access time within the group with the least priority.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    SQ_capacity = int(cache_snapshot.capacity * SQ_CAPACITY_RATIO)
    MQ_capacity = cache_snapshot.capacity - SQ_capacity

    SQ_items = [key for key, pos in metadata['queue_position'].items() if pos == 'SQ']
    MQ_items = [key for key, pos in metadata['queue_position'].items() if pos == 'MQ']

    if sum(cache_snapshot.cache[key].size for key in SQ_items) > SQ_capacity:
        while SQ_items:
            key = SQ_items.pop(0)
            if metadata['access_frequency'][key] < 2 or len(MQ_items) >= MQ_capacity:
                candid_obj_key = key
                break
            metadata['queue_position'][key] = 'MQ'
            MQ_items.append(key)
    else:
        if MQ_items:
            while True:
                key = MQ_items.pop(0)
                metadata['access_frequency'][key] -= 1
                if metadata['access_frequency'][key] == 0:
                    candid_obj_key = key
                    break
                MQ_items.append(key)
        else:
            least_priority_group = min(metadata['group_priorities'], key=metadata['group_priorities'].get)
            candidates = [key for key in cache_snapshot.cache if metadata['group_identifier'][key] == least_priority_group]
            if candidates:
                candid_obj_key = min(candidates, key=lambda k: (metadata['access_frequency'][k], metadata['last_access_time'][k]))

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Increase the access frequency of the hit item if it is less than 3, update its last access time, adjust group priorities based on updated access patterns, and update the queue position if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    if metadata['access_frequency'][obj.key] < 3:
        metadata['access_frequency'][obj.key] += 1
    metadata['last_access_time'][obj.key] = cache_snapshot.access_count

    # Adjust group priorities based on updated access patterns
    group_id = metadata['group_identifier'][obj.key]
    metadata['group_priorities'][group_id] = metadata['group_priorities'].get(group_id, 0) + 1

    # Update queue position if necessary
    if metadata['queue_position'][obj.key] == 'SQ' and metadata['access_frequency'][obj.key] >= 2:
        metadata['queue_position'][obj.key] = 'MQ'

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    Assign the new object to a group based on its access pattern or type, initialize its access frequency to 1, set its last access time, update overall cache access patterns and workload characteristics, and place the item in SQ or MQ based on whether it was in GQ.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    metadata['access_frequency'][obj.key] = 1
    metadata['last_access_time'][obj.key] = cache_snapshot.access_count

    # Assign to a group based on access pattern or type
    group_id = 'default_group'  # This can be customized based on access patterns
    metadata['group_identifier'][obj.key] = group_id
    metadata['group_priorities'][group_id] = metadata['group_priorities'].get(group_id, 0)

    # Place the item in SQ or MQ based on whether it was in GQ
    if obj.key in metadata['ghost_queue']:
        metadata['queue_position'][obj.key] = 'MQ'
        metadata['ghost_queue'].remove(obj.key)
    else:
        metadata['queue_position'][obj.key] = 'SQ'

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Update the metadata of the affected group, recalculate group priorities, adjust overall cache access patterns and workload characteristics, place the evicted item in GQ, and remove the front item of GQ if it is full.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    group_id = metadata['group_identifier'][evicted_obj.key]
    metadata['group_priorities'][group_id] -= 1

    # Place the evicted item in GQ
    metadata['ghost_queue'].append(evicted_obj.key)
    if len(metadata['ghost_queue']) > GQ_CAPACITY:
        metadata['ghost_queue'].pop(0)

    # Remove metadata of the evicted object
    del metadata['access_frequency'][evicted_obj.key]
    del metadata['last_access_time'][evicted_obj.key]
    del metadata['group_identifier'][evicted_obj.key]
    del metadata['queue_position'][evicted_obj.key]