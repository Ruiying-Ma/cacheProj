# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_PROBABILITY_SCORE = 0.1
PROBABILITY_INCREMENT = 0.05
PROBABILITY_DECREMENT = 0.01
PARTITION_THRESHOLD = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains a probability score for each cached item, a state transition matrix to track access patterns, and partitions the cache into segments based on access frequency.
probability_scores = {}
state_transition_matrix = {}
partitions = {'high': set(), 'low': set()}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy probabilistically selects an item for eviction based on its probability score, with a higher chance of evicting less frequently accessed items. Each partition may use a different probability distribution for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    if partitions['low']:
        candid_obj_key = min(partitions['low'], key=lambda k: probability_scores[k])
    elif partitions['high']:
        candid_obj_key = min(partitions['high'], key=lambda k: probability_scores[k])
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the probability score of the accessed item is increased, and the state transition matrix is updated to reflect the new access pattern. The item may be moved to a different partition if its access frequency changes significantly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    probability_scores[key] = min(1.0, probability_scores[key] + PROBABILITY_INCREMENT)
    
    if probability_scores[key] > PARTITION_THRESHOLD:
        partitions['low'].discard(key)
        partitions['high'].add(key)
    else:
        partitions['high'].discard(key)
        partitions['low'].add(key)
    
    # Update state transition matrix
    if key not in state_transition_matrix:
        state_transition_matrix[key] = {}
    state_transition_matrix[key][cache_snapshot.access_count] = probability_scores[key]

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy assigns an initial probability score based on the object's expected access frequency and updates the state transition matrix. The object is placed in the appropriate partition based on its initial access frequency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    probability_scores[key] = INITIAL_PROBABILITY_SCORE
    
    if probability_scores[key] > PARTITION_THRESHOLD:
        partitions['high'].add(key)
    else:
        partitions['low'].add(key)
    
    # Initialize state transition matrix
    state_transition_matrix[key] = {cache_snapshot.access_count: probability_scores[key]}

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy adjusts the probability scores of remaining items to reflect the change in cache state, updates the state transition matrix, and may re-partition the cache if necessary to maintain optimal performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    if evicted_key in probability_scores:
        del probability_scores[evicted_key]
    if evicted_key in partitions['high']:
        partitions['high'].remove(evicted_key)
    if evicted_key in partitions['low']:
        partitions['low'].remove(evicted_key)
    if evicted_key in state_transition_matrix:
        del state_transition_matrix[evicted_key]
    
    # Adjust probability scores of remaining items
    for key in probability_scores:
        probability_scores[key] = max(0.0, probability_scores[key] - PROBABILITY_DECREMENT)
        
        if probability_scores[key] > PARTITION_THRESHOLD:
            partitions['low'].discard(key)
            partitions['high'].add(key)
        else:
            partitions['high'].discard(key)
            partitions['low'].add(key)