# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_EVICTION_PROBABILITY = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency, group identifier, eviction probability, and queue membership (T1, T2, B1, B2) for each cache item.
metadata = {
    'access_frequency': {},
    'recency': {},
    'group_identifier': {},
    'eviction_probability': {},
    'queue_membership': {'T1': set(), 'T2': set(), 'B1': set(), 'B2': set()}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates eviction candidates from T1 and T2 based on a combined score of access frequency, recency, group dependencies, and eviction probability. If T1 is not empty, it prioritizes T1 for eviction; otherwise, it evicts from T2. Evicted items are moved to B1 or B2 accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    def score(key):
        return (metadata['access_frequency'][key] + 
                metadata['recency'][key] + 
                metadata['eviction_probability'][key])

    if metadata['queue_membership']['T1']:
        candid_obj_key = min(metadata['queue_membership']['T1'], key=score)
    else:
        candid_obj_key = min(metadata['queue_membership']['T2'], key=score)
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a hit, the policy updates the access frequency, recency, and lowers the eviction probability of the accessed item. It moves the item to the most-recently-used end of T2 and reinforces group dependencies if accessed with other items in the same group.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['eviction_probability'][key] *= 0.9  # Lower eviction probability

    if key in metadata['queue_membership']['T1']:
        metadata['queue_membership']['T1'].remove(key)
    metadata['queue_membership']['T2'].add(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency, group identifier, and sets an initial eviction probability. The item is placed in T1 or T2 based on its previous presence in B1 or B2, or as a new entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['eviction_probability'][key] = INITIAL_EVICTION_PROBABILITY
    metadata['group_identifier'][key] = None  # Initialize group identifier

    if key in metadata['queue_membership']['B1']:
        metadata['queue_membership']['B1'].remove(key)
        metadata['queue_membership']['T2'].add(key)
    elif key in metadata['queue_membership']['B2']:
        metadata['queue_membership']['B2'].remove(key)
        metadata['queue_membership']['T2'].add(key)
    else:
        metadata['queue_membership']['T1'].add(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy recalculates eviction probabilities for remaining items, updates group dependencies, and adjusts the overall cache state. Evicted items are moved to B1 or B2, and redundant items in B1 or B2 are removed if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    if evicted_key in metadata['queue_membership']['T1']:
        metadata['queue_membership']['T1'].remove(evicted_key)
        metadata['queue_membership']['B1'].add(evicted_key)
    elif evicted_key in metadata['queue_membership']['T2']:
        metadata['queue_membership']['T2'].remove(evicted_key)
        metadata['queue_membership']['B2'].add(evicted_key)

    # Recalculate eviction probabilities for remaining items
    for key in cache_snapshot.cache:
        metadata['eviction_probability'][key] *= 1.1  # Increase eviction probability

    # Remove redundant items in B1 or B2 if necessary
    if len(metadata['queue_membership']['B1']) > cache_snapshot.capacity:
        metadata['queue_membership']['B1'].pop()
    if len(metadata['queue_membership']['B2']) > cache_snapshot.capacity:
        metadata['queue_membership']['B2'].pop()