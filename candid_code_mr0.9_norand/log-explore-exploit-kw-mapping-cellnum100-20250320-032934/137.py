# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
PRIORITY_THRESHOLD = 5
BASE_PRIORITY_LEVEL = 1
DEFAULT_EVICTION_PROBABILITY = 0.5
SUBSET_SIZE = 3

# Put the metadata specifically maintained by the policy below. The policy maintains a priority level for each cached item, a frequency count of accesses, and a random eviction probability for each item.
priority_levels = {}
frequency_counts = {}
eviction_probabilities = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects a victim by first choosing a random subset of cache items, then evicting the item with the highest eviction probability within that subset. This ensures a mix of randomness and selection pressure.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    cache_items = list(cache_snapshot.cache.keys())
    subset = cache_items[:SUBSET_SIZE]  # Deterministic subset selection
    max_prob = -1

    for key in subset:
        if eviction_probabilities[key] > max_prob:
            max_prob = eviction_probabilities[key]
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the frequency count of the accessed item is incremented. If the frequency count exceeds a threshold, the item's priority level is increased, and its eviction probability is decreased.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    frequency_counts[key] += 1

    if frequency_counts[key] > PRIORITY_THRESHOLD:
        priority_levels[key] += 1
        eviction_probabilities[key] = max(0, eviction_probabilities[key] - 0.1)  # Decrease eviction probability

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, it is assigned a base priority level, an initial frequency count of zero, and a default eviction probability. The policy ensures the new item starts with a fair chance of survival.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    priority_levels[key] = BASE_PRIORITY_LEVEL
    frequency_counts[key] = 0
    eviction_probabilities[key] = DEFAULT_EVICTION_PROBABILITY

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy recalculates the eviction probabilities of the remaining items based on their priority levels and frequency counts, ensuring the probabilities reflect the current state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    del priority_levels[evicted_key]
    del frequency_counts[evicted_key]
    del eviction_probabilities[evicted_key]

    for key in cache_snapshot.cache:
        eviction_probabilities[key] = 1 / (priority_levels[key] + 1)