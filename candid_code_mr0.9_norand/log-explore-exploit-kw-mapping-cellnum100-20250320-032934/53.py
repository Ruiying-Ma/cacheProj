# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for access frequency in composite score
BETA = 0.5   # Weight for recency in composite score

# Put the metadata specifically maintained by the policy below. The policy maintains a FIFO queue and metadata for each cached object, including access frequency, recency of access, and a dynamic priority score. It also tracks overall cache hit/miss rates and access patterns over time.
fifo_queue = []
metadata = {}

def calculate_composite_score(obj_key, cache_snapshot):
    freq = metadata[obj_key]['frequency']
    recency = metadata[obj_key]['recency']
    priority = metadata[obj_key]['priority']
    composite_score = ALPHA * freq + BETA * recency + priority
    return composite_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first checks the front of the FIFO queue. If the object at the front has the lowest composite score, it is evicted. Otherwise, it calculates the composite scores for all objects and evicts the one with the lowest score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = fifo_queue[0]
    lowest_score = calculate_composite_score(candid_obj_key, cache_snapshot)
    
    for key in cache_snapshot.cache:
        score = calculate_composite_score(key, cache_snapshot)
        if score < lowest_score:
            lowest_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and recency of the accessed object. It recalculates the dynamic priority score based on the updated access patterns and adjusts the composite score accordingly. The FIFO queue remains unchanged.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['frequency'] += 1
    metadata[key]['recency'] = cache_snapshot.access_count
    metadata[key]['priority'] = calculate_composite_score(key, cache_snapshot)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency, and dynamic priority score. It updates the overall cache statistics to reflect the new state of the cache and places the new object at the rear of the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'frequency': 1,
        'recency': cache_snapshot.access_count,
        'priority': 0
    }
    metadata[key]['priority'] = calculate_composite_score(key, cache_snapshot)
    fifo_queue.append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata and recalculates the composite scores for the remaining objects. It updates the overall cache statistics to reflect the eviction and adjusts the dynamic priority scores if necessary. The evicted object is also removed from the front of the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata[evicted_key]
    fifo_queue.remove(evicted_key)
    
    for key in cache_snapshot.cache:
        metadata[key]['priority'] = calculate_composite_score(key, cache_snapshot)