# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
LRU_WEIGHT = 0.4
LFU_WEIGHT = 0.4
RANDOM_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry including access frequency, recency, and a dynamic weight for LRU, LFU, and random strategies. It also tracks the overall hit/miss ratio to adjust strategy weights.
metadata = {
    'access_frequency': {},  # key -> frequency
    'recency': {},           # key -> last access time
    'hit_miss_ratio': 0.0,   # hit/miss ratio
    'strategy_weights': {    # weights for LRU, LFU, and random strategies
        'LRU': LRU_WEIGHT,
        'LFU': LFU_WEIGHT,
        'RANDOM': RANDOM_WEIGHT
    }
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates an eviction score for each cache entry based on a weighted combination of LRU, LFU, and random strategies. The entry with the highest score is chosen as the eviction victim.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    max_score = -float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        lru_score = cache_snapshot.access_count - metadata['recency'][key]
        lfu_score = metadata['access_frequency'][key]
        random_score = 1  # constant since we cannot use randomness
        
        eviction_score = (metadata['strategy_weights']['LRU'] * lru_score +
                          metadata['strategy_weights']['LFU'] * lfu_score +
                          metadata['strategy_weights']['RANDOM'] * random_score)
        
        if eviction_score > max_score:
            max_score = eviction_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the accessed entry are updated. The hit/miss ratio is recalculated, and the weights for LRU, LFU, and random strategies are adjusted to reward the most effective strategy.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    
    # Update hit/miss ratio
    metadata['hit_miss_ratio'] = cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)
    
    # Adjust strategy weights (example logic, can be more complex)
    if metadata['hit_miss_ratio'] > 0.5:
        metadata['strategy_weights']['LRU'] += 0.1
        metadata['strategy_weights']['LFU'] += 0.1
        metadata['strategy_weights']['RANDOM'] -= 0.2
    else:
        metadata['strategy_weights']['LRU'] -= 0.1
        metadata['strategy_weights']['LFU'] -= 0.1
        metadata['strategy_weights']['RANDOM'] += 0.2

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and recency. The hit/miss ratio is updated, and the strategy weights are adjusted based on the current workload patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    
    # Update hit/miss ratio
    metadata['hit_miss_ratio'] = cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)
    
    # Adjust strategy weights (example logic, can be more complex)
    if metadata['hit_miss_ratio'] > 0.5:
        metadata['strategy_weights']['LRU'] += 0.1
        metadata['strategy_weights']['LFU'] += 0.1
        metadata['strategy_weights']['RANDOM'] -= 0.2
    else:
        metadata['strategy_weights']['LRU'] -= 0.1
        metadata['strategy_weights']['LFU'] -= 0.1
        metadata['strategy_weights']['RANDOM'] += 0.2

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy updates the hit/miss ratio and recalculates the weights for LRU, LFU, and random strategies to penalize the least effective strategy. The metadata for the evicted entry is removed.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['recency'][evicted_key]
    
    # Update hit/miss ratio
    metadata['hit_miss_ratio'] = cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)
    
    # Adjust strategy weights (example logic, can be more complex)
    if metadata['hit_miss_ratio'] > 0.5:
        metadata['strategy_weights']['LRU'] += 0.1
        metadata['strategy_weights']['LFU'] += 0.1
        metadata['strategy_weights']['RANDOM'] -= 0.2
    else:
        metadata['strategy_weights']['LRU'] -= 0.1
        metadata['strategy_weights']['LFU'] -= 0.1
        metadata['strategy_weights']['RANDOM'] += 0.2