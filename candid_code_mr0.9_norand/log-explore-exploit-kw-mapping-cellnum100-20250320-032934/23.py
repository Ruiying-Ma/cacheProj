# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
BASE_ACCESS_FREQUENCY = 1
BASE_RECENCY = 0
BASE_DYNAMIC_PRIORITY_SCORE = 1
BASE_USAGE_COUNTER = 0
BASE_TIER_LEVEL = 0
USAGE_COUNTER_THRESHOLD = 5

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, dynamic priority score, usage counter, tier level indicator, and context relevance score for each cached object. It also tracks overall cache hit/miss rates and access patterns over time.
metadata = {}

def calculate_context_relevance_score(obj):
    # Placeholder for the machine learning model to calculate context relevance score
    return 1

def calculate_dynamic_priority_score(obj):
    # Placeholder for the machine learning model to calculate dynamic priority score
    return 1

def composite_score(obj_key):
    meta = metadata[obj_key]
    return meta['context_relevance_score'] + meta['dynamic_priority_score']

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first considering items in the lowest tier, selecting the item with the lowest composite score, which combines context relevance score and dynamic priority score. If multiple items have the same composite score, the item with the lowest usage counter is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_tier = min(metadata.values(), key=lambda x: x['tier_level'])['tier_level']
    lowest_tier_items = {k: v for k, v in metadata.items() if v['tier_level'] == lowest_tier}
    
    if lowest_tier_items:
        candid_obj_key = min(lowest_tier_items, key=lambda k: (composite_score(k), metadata[k]['usage_counter']))
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the usage counter, updates the access frequency and recency, recalculates the dynamic priority score and context relevance score using the machine learning model, and may promote the item to a higher tier if its usage counter exceeds a threshold.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta['usage_counter'] += 1
    meta['access_frequency'] += 1
    meta['recency'] = cache_snapshot.access_count
    meta['dynamic_priority_score'] = calculate_dynamic_priority_score(obj)
    meta['context_relevance_score'] = calculate_context_relevance_score(obj)
    
    if meta['usage_counter'] > USAGE_COUNTER_THRESHOLD:
        meta['tier_level'] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency, dynamic priority score, and usage counter to base values, assigns it to the lowest tier, and calculates its initial context relevance score using the machine learning model. It also updates the overall cache statistics to reflect the new state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'access_frequency': BASE_ACCESS_FREQUENCY,
        'recency': cache_snapshot.access_count,
        'dynamic_priority_score': BASE_DYNAMIC_PRIORITY_SCORE,
        'usage_counter': BASE_USAGE_COUNTER,
        'tier_level': BASE_TIER_LEVEL,
        'context_relevance_score': calculate_context_relevance_score(obj)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata, resets the usage counters of all remaining items, potentially recalculates their context relevance scores, adjusts their tier levels based on the updated usage counters and relevance scores, and updates the overall cache statistics to reflect the eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in metadata:
        del metadata[evicted_obj.key]
    
    for key, meta in metadata.items():
        meta['usage_counter'] = BASE_USAGE_COUNTER
        meta['context_relevance_score'] = calculate_context_relevance_score(cache_snapshot.cache[key])
        if meta['usage_counter'] > USAGE_COUNTER_THRESHOLD:
            meta['tier_level'] += 1
        else:
            meta['tier_level'] = BASE_TIER_LEVEL