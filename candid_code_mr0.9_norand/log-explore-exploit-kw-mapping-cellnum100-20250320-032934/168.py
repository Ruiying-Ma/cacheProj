# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections
import time

# Put tunable constant parameters below
SQ_CAPACITY = 0.5  # Fraction of the total cache capacity allocated to SQ
MQ_CAPACITY = 0.5  # Fraction of the total cache capacity allocated to MQ
GQ_CAPACITY = 100  # Maximum number of objects in the ghost queue
PROMOTION_THRESHOLD = 5  # Access frequency threshold for promotion to a higher tier

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, criticality score, dynamic adjustment factor, queue position (SQ or MQ), hierarchical tier level, insertion timestamp, and a ghost queue (GQ) for recently evicted objects.
metadata = {
    'access_frequency': collections.defaultdict(int),
    'recency_timestamp': collections.defaultdict(int),
    'criticality_score': collections.defaultdict(float),
    'dynamic_adjustment_factor': collections.defaultdict(float),
    'queue_position': collections.defaultdict(str),
    'tier_level': collections.defaultdict(int),
    'insertion_timestamp': collections.defaultdict(int),
    'ghost_queue': collections.deque(maxlen=GQ_CAPACITY)
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first checks if SQ exceeds its capacity and moves objects to MQ or evicts based on frequency. If MQ is full, it reduces frequencies and evicts the first zero-frequency object. If no eviction occurs from SQ, it selects candidates with the lowest criticality score, then uses a weighted combination of access frequency and recency, and finally introduces randomness. If still undecided, it evicts from the lowest hierarchical tier, prioritizing oldest timestamps and lowest access frequency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    sq_capacity = int(SQ_CAPACITY * cache_snapshot.capacity)
    mq_capacity = int(MQ_CAPACITY * cache_snapshot.capacity)
    
    # Check if SQ exceeds its capacity
    sq_objects = [key for key, pos in metadata['queue_position'].items() if pos == 'SQ']
    if sum(cache_snapshot.cache[key].size for key in sq_objects) > sq_capacity:
        # Move objects from SQ to MQ or evict based on frequency
        for key in sq_objects:
            if metadata['access_frequency'][key] == 0:
                candid_obj_key = key
                break
            else:
                metadata['queue_position'][key] = 'MQ'
    
    if candid_obj_key is None:
        # Check if MQ is full
        mq_objects = [key for key, pos in metadata['queue_position'].items() if pos == 'MQ']
        if sum(cache_snapshot.cache[key].size for key in mq_objects) > mq_capacity:
            # Reduce frequencies and evict the first zero-frequency object
            for key in mq_objects:
                metadata['access_frequency'][key] -= 1
                if metadata['access_frequency'][key] == 0:
                    candid_obj_key = key
                    break
    
    if candid_obj_key is None:
        # Select candidates with the lowest criticality score
        candidates = sorted(cache_snapshot.cache.keys(), key=lambda k: (metadata['criticality_score'][k], metadata['access_frequency'][k], metadata['recency_timestamp'][k]))
        candid_obj_key = candidates[0]
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    The policy increments the access frequency, updates the recency timestamp, and adjusts the dynamic adjustment factor based on the current workload. It may promote the item to a higher tier if its access frequency surpasses a certain threshold. The criticality score is recalculated if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    metadata['access_frequency'][obj.key] += 1
    metadata['recency_timestamp'][obj.key] = cache_snapshot.access_count
    # Adjust dynamic adjustment factor based on current workload
    metadata['dynamic_adjustment_factor'][obj.key] = cache_snapshot.access_count / (cache_snapshot.hit_count + 1)
    # Promote to a higher tier if access frequency surpasses threshold
    if metadata['access_frequency'][obj.key] > PROMOTION_THRESHOLD:
        metadata['tier_level'][obj.key] += 1
    # Recalculate criticality score if necessary
    metadata['criticality_score'][obj.key] = metadata['access_frequency'][obj.key] / (cache_snapshot.access_count - metadata['insertion_timestamp'][obj.key] + 1)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    The policy initializes the access frequency to 1, sets the recency timestamp, assigns a criticality score, sets the dynamic adjustment factor according to the current workload, and places the object in SQ or MQ based on its presence in GQ. It assigns the current timestamp and places the object in the lowest tier. It checks if the cache is nearing capacity to adjust the eviction threshold if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    metadata['access_frequency'][obj.key] = 1
    metadata['recency_timestamp'][obj.key] = cache_snapshot.access_count
    metadata['criticality_score'][obj.key] = 1 / (cache_snapshot.access_count + 1)
    metadata['dynamic_adjustment_factor'][obj.key] = cache_snapshot.access_count / (cache_snapshot.hit_count + 1)
    metadata['insertion_timestamp'][obj.key] = cache_snapshot.access_count
    metadata['tier_level'][obj.key] = 0
    if obj.key in metadata['ghost_queue']:
        metadata['queue_position'][obj.key] = 'MQ'
    else:
        metadata['queue_position'][obj.key] = 'SQ'
    # Check if the cache is nearing capacity to adjust the eviction threshold if necessary
    if cache_snapshot.size + obj.size > cache_snapshot.capacity:
        evict(cache_snapshot, obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    The policy recalibrates the dynamic adjustment factor, updates overall access pattern statistics, and places the evicted object in GQ. The object's frequency is no longer tracked, and the front of GQ is removed if GQ is full. It recalculates the current cache usage and may adjust the hierarchical tier thresholds and eviction criteria based on the new state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    metadata['dynamic_adjustment_factor'][obj.key] = cache_snapshot.access_count / (cache_snapshot.hit_count + 1)
    metadata['ghost_queue'].append(evicted_obj.key)
    if len(metadata['ghost_queue']) > GQ_CAPACITY:
        metadata['ghost_queue'].popleft()
    # Remove evicted object's frequency tracking
    del metadata['access_frequency'][evicted_obj.key]
    del metadata['recency_timestamp'][evicted_obj.key]
    del metadata['criticality_score'][evicted_obj.key]
    del metadata['dynamic_adjustment_factor'][evicted_obj.key]
    del metadata['queue_position'][evicted_obj.key]
    del metadata['tier_level'][evicted_obj.key]
    del metadata['insertion_timestamp'][evicted_obj.key]