# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict, deque

# Put tunable constant parameters below
LRU_WEIGHT = 0.4
LFU_WEIGHT = 0.4
FIFO_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for access frequency, recency, data importance, and group similarity. It also tracks the performance of different eviction strategies (LRU, LFU, FIFO) to dynamically select the best one.
access_frequency = defaultdict(int)
recency = {}
data_importance = defaultdict(int)
group_similarity = defaultdict(set)
fifo_queue = deque()
strategy_performance = {'LRU': 0, 'LFU': 0, 'FIFO': 0}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy uses a decision-making process triggered by a cache miss, evaluating access frequency, recency, and data importance. It selects the least recently used item within the least frequently accessed group, while also considering the performance of different eviction strategies to choose the best candidate.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        lru_score = cache_snapshot.access_count - recency[key]
        lfu_score = access_frequency[key]
        fifo_score = fifo_queue.index(key) if key in fifo_queue else float('inf')
        
        combined_score = (LRU_WEIGHT * lru_score) + (LFU_WEIGHT * lfu_score) + (FIFO_WEIGHT * fifo_score)
        
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and recency of the accessed item, adjusts its data importance score, and records the hit to evaluate the performance of the current eviction strategy.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    access_frequency[obj.key] += 1
    recency[obj.key] = cache_snapshot.access_count
    data_importance[obj.key] += 1
    strategy_performance['LRU'] += 1
    strategy_performance['LFU'] += 1
    strategy_performance['FIFO'] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency, and data importance. It also updates the group similarity metadata and records the insertion to evaluate the performance of the current eviction strategy.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    access_frequency[obj.key] = 1
    recency[obj.key] = cache_snapshot.access_count
    data_importance[obj.key] = 1
    fifo_queue.append(obj.key)
    group_similarity[obj.key].add(obj.key)
    strategy_performance['LRU'] += 1
    strategy_performance['LFU'] += 1
    strategy_performance['FIFO'] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy updates the metadata by removing the evicted item's records, adjusting the group similarity, and recording the eviction event to evaluate the performance of the current eviction strategy.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del access_frequency[evicted_obj.key]
    del recency[evicted_obj.key]
    del data_importance[evicted_obj.key]
    fifo_queue.remove(evicted_obj.key)
    group_similarity.pop(evicted_obj.key, None)
    strategy_performance['LRU'] += 1
    strategy_performance['LFU'] += 1
    strategy_performance['FIFO'] += 1