# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
MODULAR_SECTIONS = 4  # Number of modular sections

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, access trend (growth rate), and modular section identifiers for each cache item. It also tracks real-time access patterns and workload characteristics.
metadata = {
    'access_frequency': {},  # Dictionary to store access frequency of each object
    'growth_rate': {},       # Dictionary to store growth rate of each object
    'modular_section': {},   # Dictionary to store modular section of each object
    'access_patterns': {},   # Dictionary to store access patterns
    'workload_characteristics': {}  # Dictionary to store workload characteristics
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by identifying items with the lowest priority, which is determined by a combination of low access frequency, negative or zero growth rate, and the specific modular section's strategy.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_priority = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_freq = metadata['access_frequency'].get(key, 0)
        growth_rate = metadata['growth_rate'].get(key, 0)
        modular_section = metadata['modular_section'].get(key, 0)
        
        # Calculate priority based on access frequency, growth rate, and modular section
        priority = access_freq + growth_rate + modular_section
        
        if priority < lowest_priority:
            lowest_priority = priority
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increases the access frequency and recalculates the growth rate for the accessed item. It also updates the real-time access patterns and workload characteristics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    # Update access frequency
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    
    # Update growth rate
    last_access_time = metadata['access_patterns'].get(key, current_time)
    metadata['growth_rate'][key] = (metadata['access_frequency'][key] - 1) / (current_time - last_access_time + 1)
    
    # Update access patterns
    metadata['access_patterns'][key] = current_time
    
    # Update workload characteristics (example: total hits)
    metadata['workload_characteristics']['total_hits'] = cache_snapshot.hit_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and growth rate. It assigns the object to a modular section based on its initial access pattern and updates the overall workload characteristics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    # Initialize access frequency and growth rate
    metadata['access_frequency'][key] = 1
    metadata['growth_rate'][key] = 0
    
    # Assign to a modular section
    metadata['modular_section'][key] = hash(key) % MODULAR_SECTIONS
    
    # Update access patterns
    metadata['access_patterns'][key] = current_time
    
    # Update workload characteristics (example: total inserts)
    metadata['workload_characteristics']['total_inserts'] = cache_snapshot.miss_count

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy adjusts the metadata of the remaining items in the modular section to reflect the change. It also updates the real-time access patterns and workload characteristics to ensure efficient cache management.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    # Remove metadata of the evicted object
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['growth_rate']:
        del metadata['growth_rate'][evicted_key]
    if evicted_key in metadata['modular_section']:
        del metadata['modular_section'][evicted_key]
    if evicted_key in metadata['access_patterns']:
        del metadata['access_patterns'][evicted_key]
    
    # Update workload characteristics (example: total evictions)
    metadata['workload_characteristics']['total_evictions'] = metadata['workload_characteristics'].get('total_evictions', 0) + 1