# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
ACCESS_THRESHOLD = 5
RECENCY_THRESHOLD = 10

# Put the metadata specifically maintained by the policy below. The policy maintains historical access patterns, a decision tree model, dynamic thresholds for access frequency and recency, and performance metrics for different eviction strategies.
historical_access_patterns = collections.defaultdict(lambda: {'access_count': 0, 'last_access': 0})
decision_tree_conditions = {'access_count_threshold': ACCESS_THRESHOLD, 'recency_threshold': RECENCY_THRESHOLD}
performance_metrics = {'hits': 0, 'misses': 0, 'evictions': 0}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy predicts future access patterns using historical data, evaluates conditions using a decision tree, and applies dynamic thresholds to identify candidates. It then selects the eviction victim based on the most suitable strategy from an ensemble of models.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_score = float('inf')
    for key, cached_obj in cache_snapshot.cache.items():
        access_count = historical_access_patterns[key]['access_count']
        last_access = historical_access_patterns[key]['last_access']
        recency = cache_snapshot.access_count - last_access
        score = access_count * decision_tree_conditions['access_count_threshold'] + recency * decision_tree_conditions['recency_threshold']
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    The policy updates the historical access patterns with the latest access, adjusts the decision tree conditions, recalibrates the dynamic thresholds, and records the performance metrics of the current strategy.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    historical_access_patterns[obj.key]['access_count'] += 1
    historical_access_patterns[obj.key]['last_access'] = cache_snapshot.access_count
    performance_metrics['hits'] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    The policy incorporates the new object into the historical access patterns, updates the decision tree with the new data, recalculates the dynamic thresholds, and evaluates the performance impact of the insertion on the current strategy.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    historical_access_patterns[obj.key]['access_count'] = 1
    historical_access_patterns[obj.key]['last_access'] = cache_snapshot.access_count
    performance_metrics['misses'] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    The policy removes the evicted item from the historical access patterns, adjusts the decision tree to reflect the eviction, recalibrates the dynamic thresholds, and updates the performance metrics to assess the effectiveness of the chosen eviction strategy.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    if evicted_obj.key in historical_access_patterns:
        del historical_access_patterns[evicted_obj.key]
    performance_metrics['evictions'] += 1