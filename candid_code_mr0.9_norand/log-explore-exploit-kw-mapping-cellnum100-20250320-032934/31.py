# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_EVICTION_PROBABILITY = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency, group identifier, and eviction probability for each cache item. It also tracks the overall cache state to balance frequency, recency, and group access patterns.
metadata = {
    'access_frequency': {},  # obj.key -> frequency
    'recency': {},           # obj.key -> timestamp
    'group_identifier': {},  # obj.key -> group_id (if applicable)
    'eviction_probability': {}  # obj.key -> eviction probability
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates multiple eviction candidates by considering their access frequency, recency, group dependencies, and eviction probabilities. It selects the item or group with the highest combined eviction score for removal, prioritizing least-frequently-used and least-recently-used items.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        frequency = metadata['access_frequency'].get(key, 0)
        recency = metadata['recency'].get(key, 0)
        eviction_prob = metadata['eviction_probability'].get(key, INITIAL_EVICTION_PROBABILITY)
        
        # Calculate the eviction score
        score = (frequency + 1) * (cache_snapshot.access_count - recency) * eviction_prob
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the recency to the current timestamp, lowers the eviction probability, and reinforces group dependencies if accessed with other items in the same group.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['eviction_probability'][key] = max(0, metadata['eviction_probability'].get(key, INITIAL_EVICTION_PROBABILITY) - 0.1)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy sets its access frequency to 1, recency to the current timestamp, initializes its group identifier if applicable, and sets an initial eviction probability based on the current cache state and access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['eviction_probability'][key] = INITIAL_EVICTION_PROBABILITY
    # Assuming group_identifier is not applicable in this context

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the evicted item from the cache, recalculates the eviction probabilities for remaining items, updates group dependencies to reflect the removal, and adjusts the overall cache state to maintain balance between frequency, recency, and group access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['recency']:
        del metadata['recency'][evicted_key]
    if evicted_key in metadata['eviction_probability']:
        del metadata['eviction_probability'][evicted_key]
    if evicted_key in metadata['group_identifier']:
        del metadata['group_identifier'][evicted_key]
    
    # Recalculate eviction probabilities for remaining items
    for key in cache_snapshot.cache:
        metadata['eviction_probability'][key] = min(1, metadata['eviction_probability'].get(key, INITIAL_EVICTION_PROBABILITY) + 0.05)