# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections
import heapq

# Put tunable constant parameters below
RETRAIN_INTERVAL = 100  # Retrain the model every 100 accesses

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, and a machine learning model's prediction score for each cache entry. It also keeps a shared usage statistics table for collaborative caches.
access_frequency = collections.defaultdict(int)
recency_of_access = collections.defaultdict(int)
prediction_scores = collections.defaultdict(float)
shared_usage_statistics = collections.defaultdict(lambda: collections.defaultdict(int))
access_counter = 0

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by considering the least frequently accessed items, adjusted by their recency of access and the prediction score from the machine learning model. Collaborative caches share their statistics to make a collective decision.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (access_frequency[key] + 1) / (recency_of_access[key] + 1) * prediction_scores[key]
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the accessed entry are updated. The machine learning model is retrained periodically with the latest access patterns to improve prediction accuracy.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    global access_counter
    access_counter += 1
    access_frequency[obj.key] += 1
    recency_of_access[obj.key] = cache_snapshot.access_count
    
    if access_counter % RETRAIN_INTERVAL == 0:
        retrain_model()

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and recency. The machine learning model is updated with the new entry, and the shared usage statistics table is updated for collaborative caches.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    access_frequency[obj.key] = 1
    recency_of_access[obj.key] = cache_snapshot.access_count
    prediction_scores[obj.key] = 1.0  # Initialize with a default prediction score
    shared_usage_statistics[obj.key]['frequency'] = access_frequency[obj.key]
    shared_usage_statistics[obj.key]['recency'] = recency_of_access[obj.key]

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes its metadata from the cache and updates the shared usage statistics table. The machine learning model is retrained periodically to reflect the changes in the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    global access_counter
    access_counter += 1
    del access_frequency[evicted_obj.key]
    del recency_of_access[evicted_obj.key]
    del prediction_scores[evicted_obj.key]
    del shared_usage_statistics[evicted_obj.key]
    
    if access_counter % RETRAIN_INTERVAL == 0:
        retrain_model()

def retrain_model():
    '''
    This function retrains the machine learning model with the latest access patterns.
    '''
    # Placeholder for retraining logic
    pass