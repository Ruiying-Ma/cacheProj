# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
SQ_CAPACITY = 0.5  # Fraction of the total cache capacity allocated to SQ
MQ_CAPACITY = 0.3  # Fraction of the total cache capacity allocated to MQ
FIFO_CAPACITY = 0.2  # Fraction of the total cache capacity allocated to FIFO
GQ_CAPACITY = 0.1  # Fraction of the total cache capacity allocated to GQ

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access timestamp, priority score, group identifier, queue position (SQ, MQ, FIFO), dynamic eviction threshold, mode indicator (LRU or LFU), and the state of the ghost queue (GQ).
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'priority_score': {},
    'group_identifier': {},
    'queue_position': {},
    'dynamic_eviction_threshold': 0,
    'mode_indicator': 'LRU',
    'ghost_queue': []
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first checks if SQ exceeds its capacity and moves items to MQ if necessary. If MQ is full, it reduces frequencies cyclically until an item with zero frequency is found and evicts it. If SQ is not full, it evicts the item with the lowest priority score within the least priority group. If no items qualify, it uses the dynamic threshold and mode indicator to select an eviction victim from FIFO.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    sq_capacity = int(SQ_CAPACITY * cache_snapshot.capacity)
    mq_capacity = int(MQ_CAPACITY * cache_snapshot.capacity)
    fifo_capacity = int(FIFO_CAPACITY * cache_snapshot.capacity)
    
    sq_items = {k: v for k, v in cache_snapshot.cache.items() if metadata['queue_position'][k] == 'SQ'}
    mq_items = {k: v for k, v in cache_snapshot.cache.items() if metadata['queue_position'][k] == 'MQ'}
    fifo_items = {k: v for k, v in cache_snapshot.cache.items() if metadata['queue_position'][k] == 'FIFO'}
    
    if sum(obj.size for obj in sq_items.values()) > sq_capacity:
        # Move items from SQ to MQ if necessary
        for k in list(sq_items.keys()):
            if sum(obj.size for obj in mq_items.values()) + sq_items[k].size <= mq_capacity:
                metadata['queue_position'][k] = 'MQ'
                mq_items[k] = sq_items.pop(k)
            else:
                break
    
    if sum(obj.size for obj in mq_items.values()) > mq_capacity:
        # Reduce frequencies cyclically until an item with zero frequency is found and evict it
        while True:
            for k in list(mq_items.keys()):
                metadata['access_frequency'][k] -= 1
                if metadata['access_frequency'][k] <= 0:
                    candid_obj_key = k
                    break
            if candid_obj_key:
                break
    
    if not candid_obj_key:
        # Evict the item with the lowest priority score within the least priority group in SQ
        if sq_items:
            min_priority_score = min(metadata['priority_score'][k] for k in sq_items.keys())
            least_priority_group = min(metadata['group_identifier'][k] for k in sq_items.keys() if metadata['priority_score'][k] == min_priority_score)
            candid_obj_key = min((k for k in sq_items.keys() if metadata['group_identifier'][k] == least_priority_group), key=lambda k: metadata['priority_score'][k])
    
    if not candid_obj_key:
        # Use the dynamic threshold and mode indicator to select an eviction victim from FIFO
        if fifo_items:
            if metadata['mode_indicator'] == 'LRU':
                candid_obj_key = min(fifo_items.keys(), key=lambda k: metadata['last_access_timestamp'][k])
            else:
                candid_obj_key = min(fifo_items.keys(), key=lambda k: metadata['access_frequency'][k])
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the last access timestamp, recalculates the priority score, adjusts group priorities, updates the queue position if necessary, and recalculates the dynamic threshold and mode indicator based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    metadata['access_frequency'][obj.key] += 1
    metadata['last_access_timestamp'][obj.key] = cache_snapshot.access_count
    metadata['priority_score'][obj.key] = metadata['access_frequency'][obj.key] / (cache_snapshot.access_count - metadata['last_access_timestamp'][obj.key] + 1)
    
    # Adjust group priorities and queue positions if necessary
    # Recalculate dynamic threshold and mode indicator based on recent access patterns
    # This part is left as an exercise for the user to implement based on specific requirements

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy assigns it to a group, initializes its access frequency to 1, sets its last access timestamp, calculates its initial priority score, updates overall cache access patterns and workload characteristics, places the item in SQ, MQ, or FIFO based on its presence in GQ, and recalculates the dynamic threshold and mode indicator.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    metadata['access_frequency'][obj.key] = 1
    metadata['last_access_timestamp'][obj.key] = cache_snapshot.access_count
    metadata['priority_score'][obj.key] = 1 / (cache_snapshot.access_count + 1)
    metadata['group_identifier'][obj.key] = 0  # Assign to initial group
    metadata['queue_position'][obj.key] = 'SQ'  # Place in SQ initially
    
    # Update overall cache access patterns and workload characteristics
    # Recalculate dynamic threshold and mode indicator
    # This part is left as an exercise for the user to implement based on specific requirements

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy updates the metadata of the affected group, recalculates group priorities, adjusts overall cache access patterns and workload characteristics, places the evicted item in GQ, and updates the dynamic threshold and mode indicator. If GQ is full, the front item of GQ is removed.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    group_id = metadata['group_identifier'][evicted_obj.key]
    # Update the metadata of the affected group
    # Recalculate group priorities
    # Adjust overall cache access patterns and workload characteristics
    
    # Place the evicted item in GQ
    metadata['ghost_queue'].append(evicted_obj.key)
    if len(metadata['ghost_queue']) > int(GQ_CAPACITY * cache_snapshot.capacity):
        metadata['ghost_queue'].pop(0)
    
    # Update the dynamic threshold and mode indicator
    # This part is left as an exercise for the user to implement based on specific requirements