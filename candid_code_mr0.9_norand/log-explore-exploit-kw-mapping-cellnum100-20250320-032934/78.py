# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
# For simplicity, we will not use any tunable parameters in this example.

# Put the metadata specifically maintained by the policy below. The policy maintains a sequence of access times for each cached object, a chronological order of insertion times, and a predictive model that estimates future access probabilities.
access_times = collections.defaultdict(list)  # Dictionary to store access times for each object
insertion_order = collections.OrderedDict()  # Ordered dictionary to maintain insertion order
predictive_model = {}  # Placeholder for predictive model (simple frequency-based model)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first predicting future access patterns using the model, then considering the least likely to be accessed soon. If predictions are inconclusive, it falls back to evicting the oldest object based on insertion time.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    # Predict future access probabilities
    future_access_prob = {key: predictive_model.get(key, 0) for key in cache_snapshot.cache.keys()}
    
    # Find the object with the least future access probability
    min_prob = min(future_access_prob.values())
    candidates = [key for key, prob in future_access_prob.items() if prob == min_prob]
    
    if len(candidates) == 1:
        candid_obj_key = candidates[0]
    else:
        # Fall back to evicting the oldest object based on insertion time
        for key in insertion_order:
            if key in candidates:
                candid_obj_key = key
                break
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access time sequence for the object, reorders the chronological list if necessary, and retrains the predictive model with the new access data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    current_time = cache_snapshot.access_count
    access_times[obj.key].append(current_time)
    
    # Update insertion order
    if obj.key in insertion_order:
        insertion_order.move_to_end(obj.key)
    
    # Retrain predictive model
    predictive_model[obj.key] = len(access_times[obj.key]) / current_time

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy records the current time in the access sequence and chronological order, and updates the predictive model with the new object data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    current_time = cache_snapshot.access_count
    access_times[obj.key].append(current_time)
    insertion_order[obj.key] = current_time
    
    # Update predictive model
    predictive_model[obj.key] = len(access_times[obj.key]) / current_time

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the object's metadata from the access sequence, chronological order, and retrains the predictive model to exclude the evicted object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    if evicted_obj.key in access_times:
        del access_times[evicted_obj.key]
    if evicted_obj.key in insertion_order:
        del insertion_order[evicted_obj.key]
    if evicted_obj.key in predictive_model:
        del predictive_model[evicted_obj.key]