# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
DEFAULT_PROBABILITY_SCORE = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached object, including access frequency, recency of access, and a dynamically updated probability score representing the likelihood of future access.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the object with the lowest probability score, which is calculated based on a combination of its access frequency and recency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_prob_score = float('inf')
    for key, cached_obj in cache_snapshot.cache.items():
        prob_score = metadata[key]['probability_score']
        if prob_score < min_prob_score:
            min_prob_score = prob_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the recency timestamp, and recalculates the probability score for the accessed object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata[key]['access_frequency'] += 1
    metadata[key]['recency'] = cache_snapshot.access_count
    metadata[key]['probability_score'] = calculate_probability_score(metadata[key]['access_frequency'], metadata[key]['recency'])

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency to 1, sets the recency timestamp to the current time, and assigns an initial probability score based on a default likelihood of future access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata[key] = {
        'access_frequency': 1,
        'recency': cache_snapshot.access_count,
        'probability_score': DEFAULT_PROBABILITY_SCORE
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata and may adjust the probability scores of remaining objects to ensure the overall distribution remains balanced.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    # Optionally adjust the probability scores of remaining objects
    for key in metadata:
        metadata[key]['probability_score'] = calculate_probability_score(metadata[key]['access_frequency'], metadata[key]['recency'])

def calculate_probability_score(access_frequency, recency):
    '''
    This function calculates the probability score based on access frequency and recency.
    - Args:
        - `access_frequency`: The frequency of accesses for the object.
        - `recency`: The recency timestamp of the last access.
    - Return:
        - `probability_score`: The calculated probability score.
    '''
    # Example calculation: you can adjust this formula as needed
    return access_frequency / (recency + 1)