# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
DEFAULT_PRIORITY_SCORE = 1.0
DEFAULT_TRUST_LEVEL = 1.0
DEFAULT_ACCESS_FREQUENCY = 0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached object, including access frequency, last access time, priority score, trust level, and a unique fingerprint identifier.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score for each object based on its priority score, trust level, and access frequency. The object with the lowest composite score is evicted first.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_composite_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        composite_score = meta['priority_score'] * meta['trust_level'] / (meta['access_frequency'] + 1)
        if composite_score < min_composite_score:
            min_composite_score = composite_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency, last access time, and recalculates the priority score based on the new access pattern for the accessed object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    meta = metadata[key]
    meta['access_frequency'] += 1
    meta['last_access_time'] = cache_snapshot.access_count
    meta['priority_score'] = calculate_priority_score(meta)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata with default values for access frequency, last access time, priority score, trust level, and assigns a unique fingerprint identifier.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'access_frequency': DEFAULT_ACCESS_FREQUENCY,
        'last_access_time': cache_snapshot.access_count,
        'priority_score': DEFAULT_PRIORITY_SCORE,
        'trust_level': DEFAULT_TRUST_LEVEL,
        'fingerprint': generate_fingerprint(obj)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata from the cache and may adjust the priority scores of remaining objects to reflect the change in the cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata[evicted_key]
    for key, meta in metadata.items():
        meta['priority_score'] = calculate_priority_score(meta)

def calculate_priority_score(meta):
    '''
    Helper function to calculate the priority score based on the metadata.
    '''
    return meta['access_frequency'] + 1 / (meta['last_access_time'] + 1)

def generate_fingerprint(obj):
    '''
    Helper function to generate a unique fingerprint for an object.
    '''
    return hash(obj.key)