# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict, deque

# Put tunable constant parameters below
PATTERN_HISTORY_SIZE = 100  # Size of the global access pattern history

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, and access patterns for each cached object. It also keeps a global access pattern history to identify common access sequences.
access_frequency = defaultdict(int)
recency_of_access = {}
global_access_pattern_history = deque(maxlen=PATTERN_HISTORY_SIZE)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by evaluating a combination of low access frequency, long recency of access, and low relevance to identified access patterns. Objects that do not fit recent or frequent access patterns are prioritized for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        frequency = access_frequency[key]
        recency = recency_of_access[key]
        pattern_relevance = global_access_pattern_history.count(key)
        
        # Calculate a score based on frequency, recency, and pattern relevance
        score = frequency * 0.4 + (cache_snapshot.access_count - recency) * 0.4 + pattern_relevance * 0.2
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and recency of the accessed object. It also updates the global access pattern history to reflect the current access sequence.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] += 1
    recency_of_access[key] = cache_snapshot.access_count
    global_access_pattern_history.append(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and recency metadata. It also updates the global access pattern history to include the new object in the current access sequence.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 1
    recency_of_access[key] = cache_snapshot.access_count
    global_access_pattern_history.append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata and updates the global access pattern history to remove the evicted object from the current access sequence if it was part of it.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in access_frequency:
        del access_frequency[key]
    if key in recency_of_access:
        del recency_of_access[key]
    while key in global_access_pattern_history:
        global_access_pattern_history.remove(key)