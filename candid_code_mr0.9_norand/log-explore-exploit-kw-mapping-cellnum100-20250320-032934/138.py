# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_RELEVANCE_SCORE = 1
INITIAL_PREDICTION_SCORE = 1
INITIAL_ACCESS_FREQUENCY_SCORE = 1

# Put the metadata specifically maintained by the policy below. The policy maintains a relevance score for each cached object, a prediction score for future access likelihood, a standardized access frequency score, and a similarity group identifier.
metadata = {
    'relevance': {},  # key -> relevance score
    'prediction': {},  # key -> prediction score
    'access_frequency': {},  # key -> access frequency score
    'similarity_group': {}  # key -> similarity group identifier
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evicts the object with the lowest combined score of relevance, prediction, and standardized access frequency within the least frequently accessed similarity group.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_combined_score = float('inf')
    min_similarity_group = float('inf')
    
    # Find the least frequently accessed similarity group
    similarity_group_access_count = {}
    for key in cache_snapshot.cache:
        group = metadata['similarity_group'][key]
        if group not in similarity_group_access_count:
            similarity_group_access_count[group] = 0
        similarity_group_access_count[group] += 1
    
    least_frequent_group = min(similarity_group_access_count, key=similarity_group_access_count.get)
    
    # Find the object with the lowest combined score in the least frequently accessed similarity group
    for key, cached_obj in cache_snapshot.cache.items():
        if metadata['similarity_group'][key] == least_frequent_group:
            combined_score = (metadata['relevance'][key] + 
                              metadata['prediction'][key] + 
                              metadata['access_frequency'][key])
            if combined_score < min_combined_score:
                min_combined_score = combined_score
                candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the relevance score is increased, the prediction score is updated based on recent access patterns, and the standardized access frequency score is recalculated. The similarity group identifier remains unchanged.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['relevance'][key] += 1
    metadata['prediction'][key] = cache_snapshot.access_count
    metadata['access_frequency'][key] = cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the relevance score is initialized, the prediction score is set based on initial access patterns, the standardized access frequency score is calculated, and the object is assigned to a similarity group.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['relevance'][key] = INITIAL_RELEVANCE_SCORE
    metadata['prediction'][key] = cache_snapshot.access_count
    metadata['access_frequency'][key] = cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)
    metadata['similarity_group'][key] = hash(key) % 10  # Example similarity group assignment

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the relevance scores of remaining objects are adjusted, prediction scores are recalibrated, standardized access frequency scores are updated, and similarity groups are re-evaluated if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['relevance'][evicted_key]
    del metadata['prediction'][evicted_key]
    del metadata['access_frequency'][evicted_key]
    del metadata['similarity_group'][evicted_key]
    
    for key in cache_snapshot.cache:
        metadata['relevance'][key] = max(1, metadata['relevance'][key] - 1)
        metadata['prediction'][key] = cache_snapshot.access_count
        metadata['access_frequency'][key] = cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)
        # Re-evaluate similarity groups if necessary (not implemented in this example)