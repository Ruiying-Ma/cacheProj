# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
SQ_CAPACITY = 0.5  # Fraction of the total cache capacity allocated to SQ
GQ_CAPACITY = 100  # Maximum number of objects in the ghost queue

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, criticality score, dynamic adjustment factor, group identifier, eviction probability, FIFO queue position, usage state, neighborhood score, and queue position (SQ or MQ). It also tracks a ghost queue (GQ) for recently evicted objects.
metadata = {
    'access_frequency': {},
    'recency': {},
    'criticality_score': {},
    'dynamic_adjustment_factor': {},
    'group_identifier': {},
    'eviction_probability': {},
    'fifo_queue_position': {},
    'usage_state': {},
    'neighborhood_score': {},
    'queue_position': {},
    'ghost_queue': []
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first checks if SQ exceeds its capacity. If so, it moves objects to MQ or evicts based on frequency. If MQ is full, it reduces frequencies and evicts the first zero-frequency object. If no eviction occurs from SQ, it evaluates candidates based on a weighted combination of access frequency, recency, criticality score, group dependencies, eviction probabilities, FIFO queue position, usage state, and neighborhood score. It prioritizes 'new' state objects with the lowest neighborhood score and uses LIFO within the same state and score. Randomness is introduced to select the final eviction victim.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    sq_capacity = int(SQ_CAPACITY * cache_snapshot.capacity)
    sq_size = sum(o.size for k, o in cache_snapshot.cache.items() if metadata['queue_position'][k] == 'SQ')
    mq_size = cache_snapshot.size - sq_size

    if sq_size + obj.size > sq_capacity:
        # Move objects from SQ to MQ or evict based on frequency
        sq_objects = [k for k in cache_snapshot.cache if metadata['queue_position'][k] == 'SQ']
        sq_objects.sort(key=lambda k: metadata['access_frequency'][k])
        for k in sq_objects:
            if mq_size + cache_snapshot.cache[k].size <= cache_snapshot.capacity - sq_capacity:
                metadata['queue_position'][k] = 'MQ'
                mq_size += cache_snapshot.cache[k].size
                sq_size -= cache_snapshot.cache[k].size
            else:
                candid_obj_key = k
                break

    if candid_obj_key is None and mq_size + obj.size > cache_snapshot.capacity - sq_capacity:
        # Evict from MQ based on frequency
        mq_objects = [k for k in cache_snapshot.cache if metadata['queue_position'][k] == 'MQ']
        mq_objects.sort(key=lambda k: metadata['access_frequency'][k])
        for k in mq_objects:
            if metadata['access_frequency'][k] == 0:
                candid_obj_key = k
                break

    if candid_obj_key is None:
        # Evaluate candidates based on weighted combination
        candidates = list(cache_snapshot.cache.keys())
        candidates.sort(key=lambda k: (
            metadata['usage_state'][k],
            metadata['neighborhood_score'][k],
            -metadata['recency'][k]
        ))
        candid_obj_key = candidates[0]

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a hit, the policy increments the access frequency, updates the recency timestamp, adjusts the dynamic adjustment factor based on the current workload, recalculates the criticality score if necessary, updates group dependencies, lowers the eviction probability, and increments the neighborhood scores of adjacent lines. The state of the accessed line transitions to a higher usage frequency state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    metadata['access_frequency'][obj.key] += 1
    metadata['recency'][obj.key] = cache_snapshot.access_count
    # Adjust dynamic adjustment factor based on current workload
    # Recalculate criticality score if necessary
    # Update group dependencies
    metadata['eviction_probability'][obj.key] *= 0.9
    # Increment neighborhood scores of adjacent lines
    # Transition state to higher usage frequency state

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency to 1, sets the recency timestamp, assigns a criticality score, sets the dynamic adjustment factor according to the current workload, assigns a group identifier if applicable, sets an initial eviction probability, and places the object at the rear of the FIFO queue. The new cache line is assigned the 'new' state and a neighborhood score based on the access patterns of its neighbors. The neighborhood scores of adjacent lines are updated. The object is placed in SQ or MQ based on its presence in GQ.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    metadata['access_frequency'][obj.key] = 1
    metadata['recency'][obj.key] = cache_snapshot.access_count
    metadata['criticality_score'][obj.key] = 1  # Assign initial criticality score
    metadata['dynamic_adjustment_factor'][obj.key] = 1  # Set initial dynamic adjustment factor
    metadata['group_identifier'][obj.key] = None  # Assign group identifier if applicable
    metadata['eviction_probability'][obj.key] = 1  # Set initial eviction probability
    metadata['fifo_queue_position'][obj.key] = len(cache_snapshot.cache)
    metadata['usage_state'][obj.key] = 'new'
    metadata['neighborhood_score'][obj.key] = 1  # Assign initial neighborhood score
    # Update neighborhood scores of adjacent lines
    if obj.key in metadata['ghost_queue']:
        metadata['queue_position'][obj.key] = 'MQ'
        metadata['ghost_queue'].remove(obj.key)
    else:
        metadata['queue_position'][obj.key] = 'SQ'

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy recalibrates the dynamic adjustment factor, updates overall access pattern statistics, recalculates the eviction probabilities for remaining items, updates group dependencies, adjusts the overall cache state, and places the evicted object in GQ. The FIFO queue is updated to remove the evicted object and shift remaining objects forward. The states and neighborhood scores of remaining lines are adjusted, with neighboring lines' scores decremented. The front of GQ is removed if GQ is full.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    # Recalibrate dynamic adjustment factor
    # Update overall access pattern statistics
    # Recalculate eviction probabilities for remaining items
    # Update group dependencies
    # Adjust overall cache state
    metadata['ghost_queue'].append(evicted_obj.key)
    if len(metadata['ghost_queue']) > GQ_CAPACITY:
        metadata['ghost_queue'].pop(0)
    # Update FIFO queue to remove evicted object and shift remaining objects forward
    # Adjust states and neighborhood scores of remaining lines
    # Decrement neighborhood scores of neighboring lines