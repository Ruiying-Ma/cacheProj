# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
SQ_CAPACITY_RATIO = 0.5  # Ratio of the cache capacity allocated to SQ
GQ_CAPACITY = 100  # Maximum size of the ghost queue

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, group identifier, and queue position (SQ or MQ) for each cached item. It also tracks overall cache access patterns, workload characteristics, and the state of the ghost queue (GQ).
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'last_access_time': {},  # {obj.key: last_access_time}
    'group_identifier': {},  # {obj.key: group_id}
    'queue_position': {},    # {obj.key: 'SQ' or 'MQ'}
    'ghost_queue': [],       # List of keys in the ghost queue (GQ)
    'group_priority': {},    # {group_id: priority}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first checks if SQ exceeds its capacity. If so, it moves items from SQ to MQ until an item with frequency less than 2 is found or MQ is full. If MQ is full, it reduces the frequency of items in MQ cyclically until an item with zero frequency is found and evicts it. If SQ is not full, it identifies the group with the least priority and evicts the item with the lowest access frequency or oldest last access time within that group.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    SQ_capacity = int(cache_snapshot.capacity * SQ_CAPACITY_RATIO)
    MQ_capacity = cache_snapshot.capacity - SQ_capacity

    # Check if SQ exceeds its capacity
    SQ_items = [key for key, pos in metadata['queue_position'].items() if pos == 'SQ']
    MQ_items = [key for key, pos in metadata['queue_position'].items() if pos == 'MQ']

    if sum(cache_snapshot.cache[key].size for key in SQ_items) > SQ_capacity:
        # Move items from SQ to MQ until an item with frequency < 2 is found or MQ is full
        while SQ_items:
            item_key = SQ_items.pop(0)
            if metadata['access_frequency'][item_key] < 2:
                candid_obj_key = item_key
                break
            if sum(cache_snapshot.cache[key].size for key in MQ_items) < MQ_capacity:
                metadata['queue_position'][item_key] = 'MQ'
                MQ_items.append(item_key)
            else:
                break

    if candid_obj_key is None:
        # If MQ is full, reduce frequency cyclically until an item with zero frequency is found and evict it
        if sum(cache_snapshot.cache[key].size for key in MQ_items) >= MQ_capacity:
            while True:
                for item_key in MQ_items:
                    metadata['access_frequency'][item_key] -= 1
                    if metadata['access_frequency'][item_key] == 0:
                        candid_obj_key = item_key
                        break
                if candid_obj_key:
                    break

    if candid_obj_key is None:
        # If SQ is not full, identify the group with the least priority and evict the item with the lowest access frequency or oldest last access time within that group
        least_priority_group = min(metadata['group_priority'], key=metadata['group_priority'].get)
        group_items = [key for key, group in metadata['group_identifier'].items() if group == least_priority_group]
        candid_obj_key = min(group_items, key=lambda k: (metadata['access_frequency'][k], metadata['last_access_time'][k]))

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increases the access frequency of the hit item if it is less than 3, updates its last access time, and adjusts the group priorities based on the updated access patterns. It also updates the queue position if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    if metadata['access_frequency'][obj.key] < 3:
        metadata['access_frequency'][obj.key] += 1
    metadata['last_access_time'][obj.key] = cache_snapshot.access_count

    # Adjust group priorities based on updated access patterns
    group_id = metadata['group_identifier'][obj.key]
    metadata['group_priority'][group_id] = cache_snapshot.access_count

    # Update queue position if necessary
    if metadata['queue_position'][obj.key] == 'SQ' and metadata['access_frequency'][obj.key] >= 2:
        metadata['queue_position'][obj.key] = 'MQ'

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy assigns it to a group based on its access pattern or type, initializes its access frequency to 1, sets its last access time, and updates the overall cache access patterns and workload characteristics. It places the item in SQ or MQ based on whether it was in GQ.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata['access_frequency'][obj.key] = 1
    metadata['last_access_time'][obj.key] = cache_snapshot.access_count

    # Assign to a group based on access pattern or type (for simplicity, using a single group here)
    group_id = 'default_group'
    metadata['group_identifier'][obj.key] = group_id
    if group_id not in metadata['group_priority']:
        metadata['group_priority'][group_id] = cache_snapshot.access_count

    # Place the item in SQ or MQ based on whether it was in GQ
    if obj.key in metadata['ghost_queue']:
        metadata['queue_position'][obj.key] = 'MQ'
        metadata['ghost_queue'].remove(obj.key)
    else:
        metadata['queue_position'][obj.key] = 'SQ'

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy updates the metadata of the affected group, recalculates group priorities, and adjusts the overall cache access patterns and workload characteristics. The evicted item is placed in GQ, and its frequency is no longer tracked. If GQ is full, the front item of GQ is removed.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    group_id = metadata['group_identifier'][evicted_obj.key]
    del metadata['access_frequency'][evicted_obj.key]
    del metadata['last_access_time'][evicted_obj.key]
    del metadata['group_identifier'][evicted_obj.key]
    del metadata['queue_position'][evicted_obj.key]

    # Update the metadata of the affected group
    if not any(group_id == gid for gid in metadata['group_identifier'].values()):
        del metadata['group_priority'][group_id]

    # Place the evicted item in GQ
    metadata['ghost_queue'].append(evicted_obj.key)
    if len(metadata['ghost_queue']) > GQ_CAPACITY:
        metadata['ghost_queue'].pop(0)