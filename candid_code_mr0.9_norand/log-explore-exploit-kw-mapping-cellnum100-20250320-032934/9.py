# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_RECENCY = 0.5
WEIGHT_FREQUENCY = 0.5

# Put the metadata specifically maintained by the policy below. Each cached item maintains a timestamp of its last access, an access frequency counter, and a priority score calculated as a weighted sum of recency and frequency. Additionally, a global schedule predicts future access patterns.
metadata = {}
global_schedule = {}

def calculate_priority(timestamp, frequency, current_time):
    recency = current_time - timestamp
    priority = WEIGHT_RECENCY * recency + WEIGHT_FREQUENCY * frequency
    return priority

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evicts the item with the lowest priority score, considering both the weighted recency and frequency, and cross-referencing with the global schedule to ensure items predicted to be accessed soon are retained.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_priority = float('inf')
    current_time = cache_snapshot.access_count

    for key, cached_obj in cache_snapshot.cache.items():
        if key in global_schedule and global_schedule[key] > current_time:
            continue
        timestamp, frequency = metadata[key]
        priority = calculate_priority(timestamp, frequency, current_time)
        if priority < lowest_priority:
            lowest_priority = priority
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the item's timestamp is updated to the current time, its access frequency counter is incremented, and its priority score is recalculated based on the new recency and frequency values.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key
    timestamp, frequency = metadata[key]
    metadata[key] = (current_time, frequency + 1)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its timestamp is set to the current time, its access frequency counter is initialized to 1, and its priority score is calculated. The global schedule is updated to reflect the new access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key
    metadata[key] = (current_time, 1)
    global_schedule[key] = current_time + 1  # Example prediction, can be adjusted based on actual prediction logic

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the global schedule is adjusted to remove the evicted item from future predictions, and the priority scores of remaining items are recalculated if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    if evicted_key in global_schedule:
        del global_schedule[evicted_key]