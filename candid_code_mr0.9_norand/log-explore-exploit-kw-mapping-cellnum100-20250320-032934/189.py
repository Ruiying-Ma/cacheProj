# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
DEFAULT_RELIABILITY_SCORE = 1
DEFAULT_ACCESS_FREQUENCY = 1
DEFAULT_RECENCY = 0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached object, including access frequency, recency, state (based on access patterns), and a reliability score indicating the necessity of maintaining multiple copies.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates multiple eviction candidates simultaneously, considering their state, access frequency, recency, and reliability score. Objects in the least favorable state with the lowest reliability score are probabilistically chosen for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_score = float('inf')
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        score = meta['reliability_score'] - meta['access_frequency'] + (cache_snapshot.access_count - meta['recency'])
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the object are updated, its state is reassessed, and its reliability score is incremented to reflect its importance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    if key in metadata:
        metadata[key]['access_frequency'] += 1
        metadata[key]['recency'] = cache_snapshot.access_count
        metadata[key]['reliability_score'] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its initial access frequency and recency are set, its state is determined based on initial access patterns, and a default reliability score is assigned.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata[key] = {
        'access_frequency': DEFAULT_ACCESS_FREQUENCY,
        'recency': cache_snapshot.access_count,
        'reliability_score': DEFAULT_RELIABILITY_SCORE
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy updates the metadata to reflect the removal, adjusts the states of remaining objects if necessary, and recalculates the reliability scores to ensure data reliability and availability.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    # Adjust states and recalculate reliability scores if necessary
    for key, meta in metadata.items():
        meta['reliability_score'] = max(DEFAULT_RELIABILITY_SCORE, meta['reliability_score'] - 1)