# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
ALPHA = 0.5  # Control weight for access frequency in the composite score
BETA = 0.5   # Control weight for recency in the composite score

# Put the metadata specifically maintained by the policy below. The policy maintains a sorted list of cache entries based on a composite score derived from access frequency, recency, and size. It also keeps an index for quick lookup and a compaction counter to track fragmentation.

class CacheMetadata:
    def __init__(self):
        self.sorted_entries = []  # List of (composite_score, obj.key)
        self.index = {}  # Dictionary to map obj.key to its metadata: (access_count, timestamp, size)
        self.compaction_counter = 0  # Counter to track fragmentation

# Initialize the metadata container.
cache_metadata = CacheMetadata()

def compute_composite_score(access_count, timestamp, size, current_time):
    # Composite score based on access frequency and recency - lower scores are less preferable
    freq_score = access_count
    recency_score = current_time - timestamp
    return ALPHA * freq_score + BETA * recency_score - size

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the entry with the lowest composite score. If there are ties, it evicts the largest entry among them to maximize space recovery.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    candidates = []
    current_time = cache_snapshot.access_count

    for score, key in cache_metadata.sorted_entries:
        cached_obj = cache_snapshot.cache[key]
        access_count, timestamp, size = cache_metadata.index[key]
        composite_score = compute_composite_score(access_count, timestamp, size, current_time)
        
        if composite_score < min_score:
            candidates = [key]
            min_score = composite_score
        elif composite_score == min_score:
            candidates.append(key)
    
    if candidates:
        candid_obj_key = max(candidates, key=lambda k: cache_snapshot.cache[k].size)
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the recency timestamp, and re-sorts the list based on the new composite score. The index is updated to reflect any changes in positions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key

    # Update the frequency and timestamp
    access_count, _, size = cache_metadata.index[key]
    access_count += 1
    cache_metadata.index[key] = (access_count, current_time, size)

    # Recompute the composite score and re-sort the list
    cache_metadata.sorted_entries = sorted([(compute_composite_score(cnt, ts, sz, current_time), k) for k, (cnt, ts, sz) in cache_metadata.index.items()])

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy calculates its initial composite score, inserts it into the sorted list, updates the index for quick lookup, and increments the compaction counter if fragmentation is detected.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key

    access_count = 1  # Initial access
    cache_metadata.index[key] = (access_count, current_time, obj.size)

    composite_score = compute_composite_score(access_count, current_time, obj.size, current_time)
    cache_metadata.sorted_entries.append((composite_score, key))
    cache_metadata.sorted_entries.sort()

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the entry from the sorted list, updates the index to remove the entry, and decrements the compaction counter if the eviction reduces fragmentation.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key

    # Remove from index and sorted entries
    if key in cache_metadata.index:
        del cache_metadata.index[key]
        
    cache_metadata.sorted_entries = [(score, k) for score, k in cache_metadata.sorted_entries if k != key]
    cache_metadata.sorted_entries.sort()