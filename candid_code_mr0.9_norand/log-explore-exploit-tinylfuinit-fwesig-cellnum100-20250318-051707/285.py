# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
DEFAULT_MEMORY_SCHEDULING_PRIORITY = 1
DEFAULT_LATENCY_IMPACT_SCORE = 1
DEFAULT_PIPELINE_DEPTH_IMPACT = 1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, data coherence state, bandwidth usage statistics, write-back status, latency impact score, spatial locality score, memory scheduling priority, and pipeline depth impact for each cache line.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score that considers low access frequency, old last access time, low coherence state, high bandwidth usage, low spatial locality score, low memory scheduling priority, write-back necessity, high latency impact, and minimal impact on pipeline depth.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        score = (meta['access_frequency'] * 0.1 +
                 (cache_snapshot.access_count - meta['last_access_time']) * 0.2 +
                 meta['coherence_state'] * 0.1 +
                 meta['bandwidth_usage'] * 0.2 +
                 meta['spatial_locality_score'] * 0.1 +
                 meta['memory_scheduling_priority'] * 0.1 +
                 meta['write_back_status'] * 0.1 +
                 meta['latency_impact_score'] * 0.1 +
                 meta['pipeline_depth_impact'] * 0.1)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Immediately after a cache hit, the policy increments the access frequency, updates the last access time to the current time, checks the coherence state, recalculates the spatial locality score, adjusts the memory scheduling priority, refreshes the last access timestamp, recalculates the latency impact score, and recalculates the pipeline depth impact for the accessed cache line.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    meta = metadata[key]
    meta['access_frequency'] += 1
    meta['last_access_time'] = cache_snapshot.access_count
    # Assuming coherence state, spatial locality score, memory scheduling priority, latency impact score, and pipeline depth impact are recalculated based on some logic
    meta['coherence_state'] = 1  # Placeholder for actual coherence state calculation
    meta['spatial_locality_score'] = 1  # Placeholder for actual spatial locality score calculation
    meta['memory_scheduling_priority'] = DEFAULT_MEMORY_SCHEDULING_PRIORITY  # Placeholder for actual memory scheduling priority calculation
    meta['latency_impact_score'] = DEFAULT_LATENCY_IMPACT_SCORE  # Placeholder for actual latency impact score calculation
    meta['pipeline_depth_impact'] = DEFAULT_PIPELINE_DEPTH_IMPACT  # Placeholder for actual pipeline depth impact calculation

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    Immediately after inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, records the initial coherence state and bandwidth usage, calculates the initial spatial locality score, assigns a default memory scheduling priority, marks the write-back status as clean, assigns an initial latency impact score, and calculates the initial pipeline depth impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'access_frequency': 1,
        'last_access_time': cache_snapshot.access_count,
        'coherence_state': 1,  # Placeholder for initial coherence state
        'bandwidth_usage': obj.size,  # Assuming bandwidth usage is proportional to object size
        'spatial_locality_score': 1,  # Placeholder for initial spatial locality score
        'memory_scheduling_priority': DEFAULT_MEMORY_SCHEDULING_PRIORITY,
        'write_back_status': 0,  # 0 for clean, 1 for dirty
        'latency_impact_score': DEFAULT_LATENCY_IMPACT_SCORE,
        'pipeline_depth_impact': DEFAULT_PIPELINE_DEPTH_IMPACT
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Immediately after evicting the victim, the policy removes all associated metadata for the evicted cache line and updates the overall bandwidth usage statistics, memory scheduling priorities, latency impact scores, and pipeline depth impacts of remaining entries to optimize future access patterns and reflect the change in cache composition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    # Assuming overall bandwidth usage statistics, memory scheduling priorities, latency impact scores, and pipeline depth impacts are updated based on some logic
    for key, meta in metadata.items():
        meta['bandwidth_usage'] = sum(obj.size for obj in cache_snapshot.cache.values())  # Placeholder for actual bandwidth usage calculation
        meta['memory_scheduling_priority'] = DEFAULT_MEMORY_SCHEDULING_PRIORITY  # Placeholder for actual memory scheduling priority calculation
        meta['latency_impact_score'] = DEFAULT_LATENCY_IMPACT_SCORE  # Placeholder for actual latency impact score calculation
        meta['pipeline_depth_impact'] = DEFAULT_PIPELINE_DEPTH_IMPACT  # Placeholder for actual pipeline depth impact calculation