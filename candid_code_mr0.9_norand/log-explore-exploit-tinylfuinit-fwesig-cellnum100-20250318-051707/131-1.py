# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
ALIGNED_THRESHOLD = 64         # Example threshold for memory alignment - alignment factor
WEIGHT_ACCESS_FREQUENCY = 1.0  # Weight for access frequency
WEIGHT_LAST_ACCESS_TIME = 1.0  # Weight for last access time
WEIGHT_ALIGNMENT = 1.0         # Weight for memory alignment
WEIGHT_PREFETCH_SUCCESS = 1.0  # Weight for prefetch success rate

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache line including access frequency, last access time, memory alignment status, and prefetch success rate. It also tracks overall disk read speed and IO throughput.
metadata = {}
disk_read_speed = 100.0  # Hypothetical initial disk read speed
io_throughput = 100.0    # Hypothetical initial IO throughput

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, old last access time, poor memory alignment, and low prefetch success rate. It also considers the current disk read speed and IO throughput to minimize performance impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_score = float('inf')

    for candidate_key, candidate_obj in cache_snapshot.cache.items():
        meta = metadata[candidate_key]

        score = (meta['access_frequency'] * WEIGHT_ACCESS_FREQUENCY +
                 (cache_snapshot.access_count - meta['last_access_time']) * WEIGHT_LAST_ACCESS_TIME +
                 (meta['alignment_status']) * WEIGHT_ALIGNMENT +
                 (1 - meta['prefetch_success_rate']) * WEIGHT_PREFETCH_SUCCESS)

        if score < lowest_score:
            lowest_score = score
            candid_obj_key = candidate_key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the last access time, and adjusts the prefetch success rate based on whether the hit was a result of a prefetch. It also recalculates the memory alignment status if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta['access_frequency'] += 1
    meta['last_access_time'] = cache_snapshot.access_count
    # Adjust prefetch success rate as necessary, placeholder logic assumed as actual logic depends on external factors
    meta['prefetch_success_rate'] = min(meta['prefetch_success_rate'] + 0.01, 1.0)

    # Recalculate the memory alignment status if necessary (only an example condition)
    meta['alignment_status'] = obj.size % ALIGNED_THRESHOLD == 0

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency, sets the last access time to the current time, evaluates the memory alignment, and sets an initial prefetch success rate. It also updates the overall disk read speed and IO throughput metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'access_frequency': 1,
        'last_access_time': cache_snapshot.access_count,
        'alignment_status': obj.size % ALIGNED_THRESHOLD == 0,
        'prefetch_success_rate': 0.5  # Initial arbitrary prefetch success rate
    }
    global disk_read_speed, io_throughput
    # Placeholder logic to update disk read speed and IO throughput
    disk_read_speed = max(10.0, disk_read_speed - 1.0)
    io_throughput = max(10.0, io_throughput - 1.0)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata of the evicted object, recalculates the overall disk read speed and IO throughput, and adjusts the prefetch success rate for remaining objects based on the eviction's impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in metadata:
        del metadata[evicted_obj.key]
    
    global disk_read_speed, io_throughput
    # Placeholder logic to update disk read speed and IO throughput to account for the eviction
    disk_read_speed = min(100.0, disk_read_speed + 1.0)
    io_throughput = min(100.0, io_throughput + 1.0)

    # Adjust prefetch success rate for remaining objects based on some eviction impact logic
    for meta in metadata.values():
        meta['prefetch_success_rate'] = max(0.0, meta['prefetch_success_rate'] - 0.01)