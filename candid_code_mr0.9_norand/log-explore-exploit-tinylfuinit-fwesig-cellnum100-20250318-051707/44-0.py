# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
DEFAULT_MEMORY_SCHEDULING_PRIORITY = 1
INITIAL_LATENCY_IMPACT_SCORE = 1
INITIAL_PIPELINE_DEPTH_IMPACT = 1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access,
# spatial locality score, memory scheduling priority, write-back status, latency impact score, last access time, and
# pipeline depth impact for each cache entry.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score derived from the lowest access frequency, least recent access,
    lowest spatial locality score, lowest memory scheduling priority, write-back necessity, highest latency impact, and minimal impact on pipeline depth,
    prioritizing entries with the lowest composite score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]

        # Calculate composite score
        composite_score = (
            meta['access_frequency'] +
            (cache_snapshot.access_count - meta['recency_timestamp']) +
            meta['spatial_locality_score'] +
            meta['memory_scheduling_priority'] +
            meta['write_back_status'] +
            meta['latency_impact_score'] +
            meta['pipeline_depth_impact']
        )
        
        # Choose the object with the lowest composite score
        if composite_score < lowest_score:
            lowest_score = composite_score
            candid_obj_key = key
            
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the recency timestamp and last access time to the current time,
    recalculates the spatial locality score, adjusts the memory scheduling priority, refreshes the last access timestamp,
    recalculates the latency impact score, and recalculates the pipeline depth impact for the accessed cache line.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    if obj.key in metadata:
        meta = metadata[obj.key]
        meta['access_frequency'] += 1
        meta['recency_timestamp'] = cache_snapshot.access_count
        meta['last_access_time'] = cache_snapshot.access_count
        # Recalculate and update relevant scores using hypothetical functions
        meta['spatial_locality_score'] = calculate_spatial_locality_score(cache_snapshot, obj)
        meta['memory_scheduling_priority'] = calculate_memory_scheduling_priority(meta, cache_snapshot, obj)
        meta['latency_impact_score'] = calculate_latency_impact_score(meta, cache_snapshot, obj)
        meta['pipeline_depth_impact'] = calculate_pipeline_depth_impact(meta, cache_snapshot, obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the recency timestamp and last access time to the current time,
    calculates the initial spatial locality score, assigns a default memory scheduling priority, sets the last access timestamp to the current time,
    marks the write-back status as clean, assigns an initial latency impact score, and calculates the initial pipeline depth impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'access_frequency': 1,
        'recency_timestamp': cache_snapshot.access_count,
        'last_access_time': cache_snapshot.access_count,
        'spatial_locality_score': calculate_initial_spatial_locality_score(cache_snapshot, obj),
        'memory_scheduling_priority': DEFAULT_MEMORY_SCHEDULING_PRIORITY,
        'write_back_status': 0,
        'latency_impact_score': INITIAL_LATENCY_IMPACT_SCORE,
        'pipeline_depth_impact': INITIAL_PIPELINE_DEPTH_IMPACT
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy removes all associated metadata for the evicted entry and adjusts the memory scheduling priorities,
    latency impact scores, and pipeline depth impacts of remaining entries to optimize future access patterns and reflect the change in cache composition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in metadata:
        del metadata[evicted_obj.key]
    
    for key, meta in metadata.items():
        meta['memory_scheduling_priority'] = adjust_memory_scheduling_priority(meta, cache_snapshot)
        meta['latency_impact_score'] = adjust_latency_impact_score(meta, cache_snapshot)
        meta['pipeline_depth_impact'] = adjust_pipeline_depth_impact(meta, cache_snapshot)

# Hypothetical helper functions (must be defined properly according to your case's calculations)
def calculate_spatial_locality_score(cache_snapshot, obj):
    # Should implement the calculation logic here
    return 1

def calculate_initial_spatial_locality_score(cache_snapshot, obj):
    # Should implement the initial calculation logic here
    return 1

def calculate_memory_scheduling_priority(meta, cache_snapshot, obj):
    # Should implement the calculation logic here
    return 1

def calculate_latency_impact_score(meta, cache_snapshot, obj):
    # Should implement the calculation logic here
    return 1

def calculate_pipeline_depth_impact(meta, cache_snapshot, obj):
    # Should implement the calculation logic here
    return 1

def adjust_memory_scheduling_priority(meta, cache_snapshot):
    # Should implement the adjustment logic here
    return 1

def adjust_latency_impact_score(meta, cache_snapshot):
    # Should implement the adjustment logic here
    return 1

def adjust_pipeline_depth_impact(meta, cache_snapshot):
    # Should implement the adjustment logic here
    return 1