# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 0.4
WEIGHT_LAST_ACCESS_TIMESTAMP = 0.3
WEIGHT_DATA_COMPRESSION_RATIO = 0.2
WEIGHT_THROUGHPUT_IMPACT = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, data compression ratio, and throughput measurement for each cached object.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'data_compression_ratio': {},
    'throughput_impact': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, old access timestamp, low data compression ratio, and low throughput impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'].get(key, 0)
        last_access_timestamp = metadata['last_access_timestamp'].get(key, 0)
        data_compression_ratio = metadata['data_compression_ratio'].get(key, 1)
        throughput_impact = metadata['throughput_impact'].get(key, 1)
        
        score = (WEIGHT_ACCESS_FREQUENCY * access_frequency +
                 WEIGHT_LAST_ACCESS_TIMESTAMP * (cache_snapshot.access_count - last_access_timestamp) +
                 WEIGHT_DATA_COMPRESSION_RATIO * data_compression_ratio +
                 WEIGHT_THROUGHPUT_IMPACT * throughput_impact)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access timestamp to the current time, and recalculates the throughput measurement based on the current system load.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    # Assuming throughput impact is recalculated based on some system load metric
    metadata['throughput_impact'][key] = calculate_throughput_impact(cache_snapshot, obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, calculates the initial data compression ratio, and measures the initial throughput impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['data_compression_ratio'][key] = calculate_data_compression_ratio(obj)
    metadata['throughput_impact'][key] = calculate_throughput_impact(cache_snapshot, obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy removes all associated metadata for the evicted object and recalculates the overall cache hit rate and throughput measurement to reflect the current state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    metadata['access_frequency'].pop(key, None)
    metadata['last_access_timestamp'].pop(key, None)
    metadata['data_compression_ratio'].pop(key, None)
    metadata['throughput_impact'].pop(key, None)
    # Assuming overall cache hit rate and throughput measurement are recalculated based on current state
    recalculate_cache_hit_rate(cache_snapshot)
    recalculate_throughput_measurement(cache_snapshot)

def calculate_data_compression_ratio(obj):
    # Placeholder function to calculate data compression ratio
    return 1.0

def calculate_throughput_impact(cache_snapshot, obj):
    # Placeholder function to calculate throughput impact
    return 1.0

def recalculate_cache_hit_rate(cache_snapshot):
    # Placeholder function to recalculate cache hit rate
    pass

def recalculate_throughput_measurement(cache_snapshot):
    # Placeholder function to recalculate throughput measurement
    pass