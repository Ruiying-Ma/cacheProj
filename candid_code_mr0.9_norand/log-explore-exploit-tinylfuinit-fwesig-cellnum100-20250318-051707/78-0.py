# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time  # to use monotonic time for latency calculation

# Put tunable constant parameters below
REFERENCE_COUNT_WEIGHT = 1.0
MEMORY_ALLOCATION_RATE_WEIGHT = 1.0
CACHE_MISS_RATIO_WEIGHT = 1.0
ACCESS_LATENCY_WEIGHT = 1.0
COMPOSITE_SCORE_THRESHOLD = 1.0  # configurable threshold

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each object including its reference count, memory allocation rate, cache miss ratio, and access latency. Additionally, it keeps a global record of the overall cache miss ratio and memory allocation rate.
policy_metadata = {
    "reference_count": {},
    "memory_allocation_rate": {},
    "cache_miss_ratio": {},
    "access_latency": {},
    "global_cache_miss_ratio": 0.0,
    "global_memory_allocation_rate": 0.0
}

def _calculate_composite_score(key):
    ref_count = policy_metadata["reference_count"].get(key, 0)
    mem_alloc_rate = policy_metadata["memory_allocation_rate"].get(key, 0)
    cache_miss_ratio = policy_metadata["cache_miss_ratio"].get(key, 0)
    access_latency = policy_metadata["access_latency"].get(key, 0)
    
    score = (
        (ref_count * REFERENCE_COUNT_WEIGHT) + 
        (mem_alloc_rate * MEMORY_ALLOCATION_RATE_WEIGHT) +
        (cache_miss_ratio * CACHE_MISS_RATIO_WEIGHT) +
        ((time.monotonic() - access_latency) * ACCESS_LATENCY_WEIGHT)
    )
    return score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score for each object based on its reference count, memory allocation rate, cache miss ratio, and access latency. Objects with lower scores are prioritized for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')  # Initialize to a large value
    
    for key in cache_snapshot.cache:
        score = _calculate_composite_score(key)
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the reference count of the accessed object, updates its access latency to the current time, and recalculates its cache miss ratio based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    policy_metadata["reference_count"][key] = policy_metadata["reference_count"].get(key, 0) + 1
    policy_metadata["access_latency"][key] = time.monotonic()
    
    # Recalculate the cache miss ratio
    if cache_snapshot.access_count > 0:
        policy_metadata["cache_miss_ratio"][key] = cache_snapshot.miss_count / cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its reference count to 1, sets its memory allocation rate based on the size of the object, records the initial access latency, and updates the global cache miss ratio and memory allocation rate.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    policy_metadata["reference_count"][key] = 1
    policy_metadata["memory_allocation_rate"][key] = obj.size
    policy_metadata["access_latency"][key] = time.monotonic()
    
    # Update global cache miss ratio and memory allocation rate
    if len(cache_snapshot.cache) > 0:
        policy_metadata["global_cache_miss_ratio"] = cache_snapshot.miss_count / cache_snapshot.access_count
        total_alloc_rate = sum(o.size for o in cache_snapshot.cache.values())
        policy_metadata["global_memory_allocation_rate"] = total_alloc_rate / len(cache_snapshot.cache)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata, recalculates the global cache miss ratio and memory allocation rate, and adjusts the reference counts and access latencies of remaining objects to reflect the change in cache composition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in policy_metadata["reference_count"]:
        del policy_metadata["reference_count"][key]
    if key in policy_metadata["memory_allocation_rate"]:
        del policy_metadata["memory_allocation_rate"][key]
    if key in policy_metadata["cache_miss_ratio"]:
        del policy_metadata["cache_miss_ratio"][key]
    if key in policy_metadata["access_latency"]:
        del policy_metadata["access_latency"][key]

    # Adjust global cache miss ratio and memory allocation rate
    if len(cache_snapshot.cache) > 0:
        # Update global_cache_miss_ratio
        if cache_snapshot.access_count > 0:
            policy_metadata["global_cache_miss_ratio"] = cache_snapshot.miss_count / cache_snapshot.access_count

        # Update global_memory_allocation_rate
        total_alloc_rate = sum(o.size for o in cache_snapshot.cache.values())
        policy_metadata["global_memory_allocation_rate"] = total_alloc_rate / len(cache_snapshot.cache)
    else:
        # If the cache is now empty, reset the global rates
        policy_metadata["global_cache_miss_ratio"] = 0.0
        policy_metadata["global_memory_allocation_rate"] = 0.0