# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 1.0
WEIGHT_LAST_ACCESS_TIME = 1.0
WEIGHT_WRITE_BACK_STATUS = 1.0
WEIGHT_PIPELINE_DEPTH_IMPACT = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, write-back status, and pipeline depth impact for each cache line.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'last_access_time': {},  # {obj.key: last_access_time}
    'write_back_status': {},  # {obj.key: is_dirty}
    'pipeline_depth_impact': {}  # {obj.key: impact}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining least frequently accessed, oldest access time, write-back status (preferring clean lines), and minimal impact on pipeline depth.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (
            WEIGHT_ACCESS_FREQUENCY * metadata['access_frequency'][key] +
            WEIGHT_LAST_ACCESS_TIME * (cache_snapshot.access_count - metadata['last_access_time'][key]) +
            WEIGHT_WRITE_BACK_STATUS * (1 if metadata['write_back_status'][key] else 0) +
            WEIGHT_PIPELINE_DEPTH_IMPACT * metadata['pipeline_depth_impact'][key]
        )
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the last access time to the current time, and recalculates the pipeline depth impact for the accessed cache line.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Recalculate pipeline depth impact (dummy calculation for example)
    metadata['pipeline_depth_impact'][key] = metadata['access_frequency'][key] * 0.1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, marks the write-back status as clean, and calculates the initial pipeline depth impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['write_back_status'][key] = False  # Clean line
    # Initial pipeline depth impact (dummy calculation for example)
    metadata['pipeline_depth_impact'][key] = 0.1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all metadata associated with the evicted cache line and adjusts the pipeline depth impact for remaining cache lines if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    del metadata['access_frequency'][key]
    del metadata['last_access_time'][key]
    del metadata['write_back_status'][key]
    del metadata['pipeline_depth_impact'][key]
    # Adjust pipeline depth impact for remaining cache lines if necessary (dummy adjustment for example)
    for k in metadata['pipeline_depth_impact']:
        metadata['pipeline_depth_impact'][k] *= 0.9