# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 0.25
WEIGHT_LAST_ACCESS_TIMESTAMP = 0.25
WEIGHT_MEMORY_ALIGNMENT = 0.25
WEIGHT_BANDWIDTH_USAGE = 0.25
OUTDATED_SYNC_PRIORITY = 1.5

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, data synchronization status, memory alignment status, and bandwidth usage statistics for each cache entry.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, old access timestamp, poor memory alignment, and high bandwidth usage. Entries with outdated synchronization status are prioritized for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        score = (WEIGHT_ACCESS_FREQUENCY / meta['access_frequency'] +
                 WEIGHT_LAST_ACCESS_TIMESTAMP * (cache_snapshot.access_count - meta['last_access_timestamp']) +
                 WEIGHT_MEMORY_ALIGNMENT * meta['memory_alignment'] +
                 WEIGHT_BANDWIDTH_USAGE * meta['bandwidth_usage'])
        
        if not meta['data_sync_status']:
            score *= OUTDATED_SYNC_PRIORITY
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access timestamp to the current time, checks and updates the data synchronization status, and recalculates the memory alignment and bandwidth usage statistics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta['access_frequency'] += 1
    meta['last_access_timestamp'] = cache_snapshot.access_count
    meta['data_sync_status'] = True  # Assuming data is synchronized after access
    meta['memory_alignment'] = obj.size % 8  # Example calculation for memory alignment
    meta['bandwidth_usage'] = obj.size / (cache_snapshot.access_count - meta['last_access_timestamp'] + 1)  # Example calculation for bandwidth usage

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, marks the data synchronization status as up-to-date, assesses the memory alignment, and records initial bandwidth usage statistics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'access_frequency': 1,
        'last_access_timestamp': cache_snapshot.access_count,
        'data_sync_status': True,
        'memory_alignment': obj.size % 8,  # Example calculation for memory alignment
        'bandwidth_usage': obj.size  # Initial bandwidth usage
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata, recalculates overall cache bandwidth usage, and adjusts memory alignment statistics to reflect the current state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata[evicted_obj.key]
    
    # Recalculate overall cache bandwidth usage and memory alignment statistics
    total_bandwidth_usage = 0
    total_memory_alignment = 0
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        total_bandwidth_usage += meta['bandwidth_usage']
        total_memory_alignment += meta['memory_alignment']
    
    # Example of how to store overall statistics (if needed)
    cache_snapshot.total_bandwidth_usage = total_bandwidth_usage
    cache_snapshot.total_memory_alignment = total_memory_alignment