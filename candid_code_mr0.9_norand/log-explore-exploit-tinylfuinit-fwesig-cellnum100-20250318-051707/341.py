# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
VERSION_INCREMENT = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for access frequency, data consistency, algorithmic efficiency, and storage redundancy. Access frequency is tracked using a counter for each cache entry. Data consistency is ensured by maintaining a version number for each entry. Algorithmic efficiency is tracked using a timestamp for the last access. Storage redundancy is managed by keeping a reference count of how many times the data is duplicated across the cache.
access_frequency = {}
version_number = {}
last_access_timestamp = {}
reference_count = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score derived from the metadata. Entries with low access frequency, outdated version numbers, older timestamps, and higher redundancy are prioritized for eviction. The entry with the lowest composite score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (access_frequency[key] * 0.25 + 
                 version_number[key] * 0.25 + 
                 (cache_snapshot.access_count - last_access_timestamp[key]) * 0.25 + 
                 reference_count[key] * 0.25)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the access frequency counter is incremented, the version number is checked and updated if necessary, the timestamp is updated to the current time, and the reference count is verified to ensure data consistency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] += 1
    version_number[key] += VERSION_INCREMENT
    last_access_timestamp[key] = cache_snapshot.access_count
    reference_count[key] = 1  # Assuming no redundancy for simplicity

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the access frequency counter is initialized, the version number is set, the timestamp is recorded, and the reference count is updated to reflect the new entry. Any redundant data is flagged and managed accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 1
    version_number[key] = 1
    last_access_timestamp[key] = cache_snapshot.access_count
    reference_count[key] = 1  # Assuming no redundancy for simplicity

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the metadata for the evicted entry is cleared. The access frequency counters, version numbers, timestamps, and reference counts for remaining entries are re-evaluated to ensure optimal cache performance and data consistency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del access_frequency[evicted_key]
    del version_number[evicted_key]
    del last_access_timestamp[evicted_key]
    del reference_count[evicted_key]
    
    # Re-evaluate metadata for remaining entries
    for key in cache_snapshot.cache.keys():
        reference_count[key] = 1  # Assuming no redundancy for simplicity