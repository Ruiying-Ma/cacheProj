# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

from collections import defaultdict
import time

# Put tunable constant parameters below
FREQUENCY_WEIGHT = 1
AGE_WEIGHT = 1
REPLICATION_WEIGHT = 1
ACCESS_CONTROL_WEIGHT = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including dynamic access frequency indexing, replication status, access control levels, and cloud backup timestamps for each cached object.

access_frequency = defaultdict(int)
replication_status = defaultdict(bool)
access_control_level = defaultdict(int)
backup_timestamp = defaultdict(float)
age_timestamp = defaultdict(float)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combination of the lowest access frequency index, replication status (preferring non-replicated objects), and the oldest cloud backup timestamp, ensuring that objects with higher access control levels are retained longer.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    min_score = float('inf')
    candid_obj_key = None
    
    for obj_key, cached_obj in cache_snapshot.cache.items():
        frequency_score = access_frequency[obj_key] * FREQUENCY_WEIGHT
        replication_score = 0 if replication_status[obj_key] else REPLICATION_WEIGHT
        age_score = (cache_snapshot.access_count - age_timestamp[obj_key]) * AGE_WEIGHT
        control_level_score = access_control_level[obj_key] * ACCESS_CONTROL_WEIGHT
        
        total_score = frequency_score + replication_score + age_score - control_level_score
        
        if total_score < min_score:
            min_score = total_score
            candid_obj_key = obj_key
            
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the access frequency index is incremented, replication status is checked and updated if necessary, access control levels are re-evaluated, and the cloud backup timestamp is refreshed.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    obj_key = obj.key
    access_frequency[obj_key] += 1
    # Assuming we have a way to check and update replication status, access control level
    # For this code template, we simulate with constant values 
    replication_status[obj_key] = True # Simulate replication step
    access_control_level[obj_key] = 1 # Re-evaluates access control level
    backup_timestamp[obj_key] = time.time() # Refresh the backup timestamp
    age_timestamp[obj_key] = cache_snapshot.access_count # Update the last access time

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the access frequency index is initialized, replication status is set, access control levels are assigned, and the cloud backup timestamp is recorded.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    obj_key = obj.key
    access_frequency[obj_key] = 1 # Initialize access frequency
    replication_status[obj_key] = False # Assume new objects are not replicated initially
    access_control_level[obj_key] = 1 # Assign initial access control level
    backup_timestamp[obj_key] = time.time() # Record cloud backup timestamp
    age_timestamp[obj_key] = cache_snapshot.access_count # Record first access time

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the access frequency index is removed, replication status is cleared, access control levels are discarded, and the cloud backup timestamp is deleted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_obj_key = evicted_obj.key
    
    if evicted_obj_key in access_frequency:
        del access_frequency[evicted_obj_key]
    if evicted_obj_key in replication_status:
        del replication_status[evicted_obj_key]
    if evicted_obj_key in access_control_level:
        del access_control_level[evicted_obj_key]
    if evicted_obj_key in backup_timestamp:
        del backup_timestamp[evicted_obj_key]
    if evicted_obj_key in age_timestamp:
        del age_timestamp[evicted_obj_key]