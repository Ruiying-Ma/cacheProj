# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
DEFAULT_FREQUENCY = 1
DEFAULT_RECENCY = 0
DEFAULT_COST = 10
DEFAULT_PRIORITY = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, computational cost of generating the data, and resource allocation priority. Each cache entry is tagged with these attributes.
metadata = {}
composite_scores = {}

def calculate_composite_score(access_freq, recency, cost, priority):
    return priority + cost - (access_freq * 0.5 + recency * 0.5)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score based on the metadata attributes. Entries with the lowest composite score, which balances frequency, recency, computational cost, and priority, are chosen for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key in cache_snapshot.cache.keys():
        score = composite_scores[key]
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and recency of access for the hit entry. The computational cost and resource allocation priority remain unchanged.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['access_freq'] += 1
    metadata[key]['recency'] = cache_snapshot.access_count
    composite_scores[key] = calculate_composite_score(
        metadata[key]['access_freq'],
        metadata[key]['recency'],
        metadata[key]['cost'],
        metadata[key]['priority']
    )

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency and recency of access to default values, sets the computational cost based on the complexity of generating the data, and assigns a resource allocation priority based on system requirements.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'access_freq': DEFAULT_FREQUENCY,
        'recency': cache_snapshot.access_count,
        'cost': DEFAULT_COST,
        'priority': DEFAULT_PRIORITY
    }
    composite_scores[key] = calculate_composite_score(
        metadata[key]['access_freq'],
        metadata[key]['recency'],
        metadata[key]['cost'],
        metadata[key]['priority']
    )

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalculates the composite scores for remaining entries to ensure balanced resource allocation and updates the metadata to reflect the current state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    metadata.pop(evicted_key, None)
    composite_scores.pop(evicted_key, None)
    
    for key in cache_snapshot.cache.keys():
        composite_scores[key] = calculate_composite_score(
            metadata[key]['access_freq'],
            metadata[key]['recency'],
            metadata[key]['cost'],
            metadata[key]['priority']
        )