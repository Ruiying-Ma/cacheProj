# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQ = 1.0
WEIGHT_LAST_ACCESS_TIME = 1.0
WEIGHT_PRIORITY = 1.0
WEIGHT_QUEUE_LENGTH = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, data retention priority, and queue length. Each cache entry has a score calculated based on these factors.
metadata = {
    'access_frequency': defaultdict(int),
    'last_access_time': {},
    'data_retention_priority': {},
    'queue_length': 0,
    'scores': {}
}


def calculate_score(obj_key, current_time):
    freq = metadata['access_frequency'][obj_key]
    last_time = metadata['last_access_time'][obj_key]
    priority = metadata['data_retention_priority'][obj_key]
    queue_length = metadata['queue_length']
    score = (WEIGHT_ACCESS_FREQ * freq +
             WEIGHT_LAST_ACCESS_TIME * (current_time - last_time) +
             WEIGHT_PRIORITY * priority +
             WEIGHT_QUEUE_LENGTH * queue_length)
    return score


def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the cache entry with the lowest score, which is a weighted combination of infrequent access, older last access time, lower data retention priority, and longer queue length.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    min_score = float('inf')
    candid_obj_key = None
    current_time = cache_snapshot.access_count

    for key, cached_obj in cache_snapshot.cache.items():
        score = calculate_score(key, current_time)
        if score < min_score:
            min_score = score
            candid_obj_key = key

    return candid_obj_key


def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access time to the current time, and recalculates the score for the accessed entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    obj_key = obj.key
    
    metadata['access_frequency'][obj_key] += 1
    metadata['last_access_time'][obj_key] = current_time
    metadata['scores'][obj_key] = calculate_score(obj_key, current_time)


def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, assigns a data retention priority based on the object's type, and calculates the initial score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    obj_key = obj.key
    
    metadata['access_frequency'][obj_key] = 1
    metadata['last_access_time'][obj_key] = current_time
    metadata['data_retention_priority'][obj_key] = 1  # assuming a fixed priority since no type is given
    metadata['queue_length'] = len(cache_snapshot.cache)
    metadata['scores'][obj_key] = calculate_score(obj_key, current_time)


def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the metadata associated with the evicted entry and recalculates the queue length to reflect the current number of entries in the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_time'][evicted_key]
    del metadata['data_retention_priority'][evicted_key]
    del metadata['scores'][evicted_key]
    
    metadata['queue_length'] = len(cache_snapshot.cache) - 1