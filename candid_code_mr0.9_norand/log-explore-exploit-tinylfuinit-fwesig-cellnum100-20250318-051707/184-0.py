# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
WEIGHT_FREQ = 0.1
WEIGHT_ENERGY = 0.4
WEIGHT_CARBON = 0.3
WEIGHT_RELEVANCE = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, energy consumption of accessing the data, carbon footprint reduction potential, and relevance to sustainable agriculture.
metadata = {
    'freq': {}, # Access frequency
    'energy': {}, # Energy consumption
    'carbon': {}, # Carbon footprint reduction potential
    'relevance': {} # Relevance to sustainable agriculture
}

def calculate_score(key):
    # Use the weighted score combining the mentioned factors to calculate eviction suitability
    freq = metadata['freq'].get(key, 0)
    energy = metadata['energy'].get(key, 0)
    carbon = metadata['carbon'].get(key, 0)
    relevance = metadata['relevance'].get(key, 0)
    
    score = (WEIGHT_FREQ * (1 / (freq + 1)) + 
             WEIGHT_ENERGY * energy + 
             WEIGHT_CARBON * (1 - carbon) + 
             WEIGHT_RELEVANCE * (1 - relevance))
    return score

def evict(cache_snapshot, obj):
    """
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, high energy consumption, low carbon footprint reduction potential, and minimal relevance to sustainable agriculture.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    """
    candid_obj_key = None
    # Your code below
    min_score = float('inf')
    for key in cache_snapshot.cache:
        score = calculate_score(key)
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, recalculates the energy consumption based on recent access patterns, adjusts the carbon footprint reduction potential, and reassesses the relevance to sustainable agriculture.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    # Increment access frequency
    metadata['freq'][key] = metadata['freq'].get(key, 0) + 1

    # Recalculate the energy consumption based on recent access patterns
    freq = metadata['freq'][key]
    metadata['energy'][key] = 1 / math.log(freq + 1)

    # Adjust the carbon footprint reduction potential (this is a placeholder and detail may need to be provided)
    metadata['carbon'][key] = 1 / math.sqrt(freq + 1)
    
    # Reassess the relevance to sustainable agriculture (this is a placeholder and detail may need to be provided)
    metadata['relevance'][key] = freq / (freq + 10)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, estimates the energy consumption for future accesses, evaluates the carbon footprint reduction potential, and determines the initial relevance to sustainable agriculture.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    # Initialize the access frequency to 1
    metadata['freq'][key] = 1

    # Estimate the energy consumption for future accesses
    metadata['energy'][key] = 1

    # Evaluate the carbon footprint reduction potential
    metadata['carbon'][key] = 1 / math.sqrt(2)
    
    # Determine the initial relevance to sustainable agriculture
    metadata['relevance'][key] = 1 / 11

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy recalibrates the weighted scores of remaining objects, updates the overall energy consumption metrics, adjusts the carbon footprint reduction potential, and reassesses the relevance to sustainable agriculture for the remaining objects.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Remove the evicted object metadata
    key = evicted_obj.key
    if key in metadata['freq']:
        del metadata['freq'][key]
    if key in metadata['energy']:
        del metadata['energy'][key]
    if key in metadata['carbon']:
        del metadata['carbon'][key]
    if key in metadata['relevance']:
        del metadata['relevance'][key]

    # Recalibrate the metadata of remaining objects if necessary (this is a placeholder and details may need to be provided)
    for key in cache_snapshot.cache:
        freq = metadata['freq'].get(key, 0)
        if freq > 0:
            metadata['energy'][key] = 1 / math.log(freq + 1)
            metadata['carbon'][key] = 1 / math.sqrt(freq + 1)
            metadata['relevance'][key] = freq / (freq + 10)