# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
DATA_SENSITIVITY_LEVELS = {
    'low': 1,
    'medium': 2,
    'high': 3
}

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, data sensitivity level, and consensus score from distributed nodes.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'data_sensitivity_level': {},
    'consensus_score': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combination of the lowest access frequency, oldest last access timestamp, lowest data sensitivity level, and lowest consensus score from distributed nodes.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (
            metadata['access_frequency'][key] +
            cache_snapshot.access_count - metadata['last_access_timestamp'][key] +
            metadata['data_sensitivity_level'][key] +
            metadata['consensus_score'][key]
        )
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access timestamp to the current time, and recalculates the consensus score based on feedback from distributed nodes.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['consensus_score'][key] = calculate_consensus_score(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object into the cache, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, assigns a data sensitivity level based on predefined criteria, and calculates an initial consensus score from distributed nodes.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['data_sensitivity_level'][key] = assign_data_sensitivity_level(obj)
    metadata['consensus_score'][key] = calculate_consensus_score(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy removes all associated metadata and recalculates the consensus scores for remaining objects based on the updated state of the distributed nodes.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_timestamp'][evicted_key]
    del metadata['data_sensitivity_level'][evicted_key]
    del metadata['consensus_score'][evicted_key]
    
    for key in cache_snapshot.cache.keys():
        metadata['consensus_score'][key] = calculate_consensus_score(key)

def assign_data_sensitivity_level(obj):
    '''
    Assigns a data sensitivity level based on predefined criteria.
    - Args:
        - `obj`: The object for which the data sensitivity level is to be assigned.
    - Return:
        - `level`: The assigned data sensitivity level.
    '''
    # Example criteria based on object size
    if obj.size < 100:
        return DATA_SENSITIVITY_LEVELS['low']
    elif obj.size < 1000:
        return DATA_SENSITIVITY_LEVELS['medium']
    else:
        return DATA_SENSITIVITY_LEVELS['high']

def calculate_consensus_score(key):
    '''
    Calculates the consensus score based on feedback from distributed nodes.
    - Args:
        - `key`: The key of the object for which the consensus score is to be calculated.
    - Return:
        - `score`: The calculated consensus score.
    '''
    # Example calculation (this should be replaced with actual feedback mechanism)
    return 1  # Placeholder value