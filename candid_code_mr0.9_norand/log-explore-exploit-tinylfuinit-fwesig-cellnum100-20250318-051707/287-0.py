# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

from collections import defaultdict, deque
import time

# Put tunable constant parameters below
# Weights for the combined score (adjust as needed)
low_access_weight = 1
low_recency_weight = 1
high_fetch_cost_weight = 1
low_replacement_score_weight = 1
high_memory_usage_weight = 1
low_prefetching_success_weight = 1
context_irrelevance_weight = 1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency,
# recency of access, write buffer status, hit ratio, miss penalty statistics, cache residency time,
# access frequency patterns, replacement scores, fetch cost score, queue positions, memory usage patterns,
# prefetching success rates, and context tags for each cache entry.

cache_metadata = defaultdict(lambda: {
    'frequency': 0,
    'recency': 0,
    'write_buffer_status': False,
    'hit_ratio': 0.0,
    'residency_time': time.time(),
    'access_pattern': [],
    'replacement_score': 0,
    'fetch_cost': 0,
    'queue_position': 0,
    'memory_usage': 0,
    'prefetching_success_rate': 0,
    'context_tags': set()
})
fifo_queue = deque()

def calculate_combined_weighted_score(obj_key):
    meta = cache_metadata[obj_key]
    return (low_access_weight * meta['frequency'] +
            low_recency_weight * (time.time() - meta['recency']) +
            high_fetch_cost_weight * meta['fetch_cost'] +
            low_replacement_score_weight * meta['replacement_score'] +
            high_memory_usage_weight * meta['memory_usage'] +
            low_prefetching_success_weight * meta['prefetching_success_rate'] +
            context_irrelevance_weight * len(meta['context_tags']))

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first checks the FIFO queue for an object with zero frequency and evicts it. If no such object is found, it calculates a combined weighted score based on low access frequency, low recency, high fetch cost, low replacement score, high memory usage, low prefetching success, and context irrelevance, and evicts the object with the lowest score from the non-empty LRU queue with the smallest subscript.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    for key in fifo_queue:
        if cache_metadata[key]['frequency'] == 0:
            fifo_queue.remove(key)
            return key

    lowest_score = float('inf')
    for key in cache_snapshot.cache:
        score = calculate_combined_weighted_score(key)
        if score < lowest_score:
            lowest_score = score
            candid_obj_key = key
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the recency of access, moves the accessed item to the front of the Linked List, updates the hit ratio, resets the residency time, updates the access frequency pattern, updates the corresponding entry in the Hash Map, slightly decreases the fetch cost score, increases the prefetching success rate if applicable, and re-evaluates the context relevance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = cache_metadata[obj.key]
    meta['frequency'] += 1
    meta['recency'] = time.time()
    meta['hit_ratio'] = cache_snapshot.hit_count / cache_snapshot.access_count
    meta['residency_time'] = time.time()
    meta['access_pattern'].append(cache_snapshot.access_count)
    if 'prefetch' in meta['context_tags']:
        meta['prefetching_success_rate'] += 1
    meta['fetch_cost'] -= 1 if meta['fetch_cost'] > 0 else 0

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy adds the object to the Hash Map, inserts it into the Binary Tree with an initial frequency count, appends it to the end of the Linked List, places it in the next available slot in the Array, initializes the hit ratio to zero, sets the residency time, starts tracking the access frequency pattern, initializes the access frequency to 1, sets the recency of access, calculates the fetch cost score, sets initial memory usage patterns, starts tracking prefetching success, assigns context tags, and updates the write buffer status if the entry involves a write operation.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    meta = cache_metadata[obj.key]
    meta['frequency'] = 1
    meta['recency'] = time.time()
    meta['hit_ratio'] = 0.0
    meta['residency_time'] = time.time()
    meta['access_pattern'] = [cache_snapshot.access_count]
    meta['fetch_cost'] = obj.size  # Assuming fetch cost is proportional to the object size
    meta['memory_usage'] = obj.size
    meta['prefetching_success_rate'] = 0
    meta['context_tags'] = set()  # Empty set of context tags initially
    # Assuming write buffer status could be determined by some condition; currently false
    meta['write_buffer_status'] = False
    fifo_queue.append(obj.key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the object from the Hash Map, deletes its node from the Binary Tree, removes it from the Linked List, clears its slot in the Array, removes all metadata associated with the evicted cache line, recalculates the replacement scores for the remaining cache lines, adjusts the remaining cache lines' metadata to maintain relative rankings for eviction decisions, updates the overall cache hit rate and miss penalty statistics, and adjusts overall memory profiling to reflect the change in cache composition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in cache_metadata:
        del cache_metadata[evicted_obj.key]
    if evicted_obj.key in fifo_queue:
        fifo_queue.remove(evicted_obj.key)
    # Adjust overall cache hit rate and miss penalty statistics can be done here