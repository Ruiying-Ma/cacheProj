# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

from collections import defaultdict, deque
import time

# Put tunable constant parameters below
WEIGHTS = {
    'low_access_freq': 1.0, 
    'low_recency': 1.0, 
    'high_fetch_cost': 1.0, 
    'low_replacement_score': 1.0, 
    'high_memory_usage': 1.0, 
    'low_prefetch_success': 1.0, 
    'context_irrelevance': 1.0
}

# Put the metadata specifically maintained by the policy below. 
# The policy maintains a Hash Map for quick access, a Binary Tree for access frequencies, 
# a Linked List for order of access, an Array for cache data, hit ratio tracking, cache residency time, 
# access frequency patterns, replacement scores, fetch cost score, queue positions (FIFO or LRU), 
# memory usage patterns, prefetching success rates, and context tags.

hash_map = {}
bin_tree = defaultdict(int)
linked_list = deque()
array = []
hit_ratio = defaultdict(float)
residency_time = defaultdict(float)
access_freq_pattern = defaultdict(list)
replacement_scores = defaultdict(float)
fetch_cost_score = defaultdict(float)
queue_position = {}
memory_usage = defaultdict(float)
prefetch_success_rate = defaultdict(float)
context_tags = defaultdict(str)


def calculate_eviction_score(obj):
    score = (
        WEIGHTS['low_access_freq'] * bin_tree[obj.key] +
        WEIGHTS['low_recency'] * (time.time() - residency_time[obj.key]) +
        WEIGHTS['high_fetch_cost'] * fetch_cost_score[obj.key] +
        WEIGHTS['low_replacement_score'] * replacement_scores[obj.key] +
        WEIGHTS['high_memory_usage'] * memory_usage[obj.key] +
        WEIGHTS['low_prefetch_success'] * prefetch_success_rate[obj.key] +
        WEIGHTS['context_irrelevance'] * context_tags[obj.key].count('irrelevant')
    )
    return score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first checks the FIFO queue for an object with zero frequency and evicts it. If no such object is found, it calculates a combined weighted score based on low access frequency, low recency, high fetch cost, low replacement score, high memory usage, low prefetching success, and context irrelevance, and evicts the object with the lowest score from the non-empty LRU queue with the smallest subscript.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Check FIFO queue for object with zero frequency
    for key in linked_list:
        if bin_tree[key] == 0:
            candid_obj_key = key
            break
    
    if candid_obj_key is None:
        # Calculate scores and find object with the lowest score
        min_score = float('inf')
        for key in linked_list:
            current_score = calculate_eviction_score(cache_snapshot.cache[key])
            if current_score < min_score:
                min_score = current_score
                candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency in the Binary Tree, moves the accessed item to the front of the Linked List, updates the hit ratio, resets the residency time, updates the access frequency pattern, updates the corresponding entry in the Hash Map, updates the recency of access, slightly decreases the fetch cost score, increases the prefetching success rate if applicable, and re-evaluates the context relevance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    bin_tree[obj.key] += 1
    linked_list.remove(obj.key)
    linked_list.appendleft(obj.key)
    hit_ratio[obj.key] = cache_snapshot.hit_count / cache_snapshot.access_count if cache_snapshot.access_count else 0
    residency_time[obj.key] = time.time()
    access_freq_pattern[obj.key].append(bin_tree[obj.key])
    # recency of access is naturally updated by moving to front of linked-list so already catered
    # similarly no need to update hash_map for key directly
    
    fetch_cost_score[obj.key] *= 0.99  # slightly decrease
    prefetch_success_rate[obj.key] *= 1.01  # slight increase for successful hits
    # re-evaluate context relevance based on some heuristic or context (left as is for now)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy adds the object to the Hash Map, inserts it into the Binary Tree with an initial frequency count, appends it to the end of the Linked List, places it in the next available slot in the Array, initializes the hit ratio to zero, sets the residency time, starts tracking the access frequency pattern, initializes the access frequency to 1, sets the recency of access, calculates the fetch cost score, sets initial memory usage patterns, starts tracking prefetching success, assigns context tags, and places the object at the most-recently-used end of L1.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    hash_map[obj.key] = obj
    bin_tree[obj.key] = 1
    linked_list.append(obj.key)
    array.append(obj.key)
    hit_ratio[obj.key] = 0
    residency_time[obj.key] = time.time()
    access_freq_pattern[obj.key] = [1]
    replacement_scores[obj.key] = 0
    fetch_cost_score[obj.key] = obj.size / cache_snapshot.capacity
    memory_usage[obj.key] = obj.size
    prefetch_success_rate[obj.key] = 0
    context_tags[obj.key] = ""
    queue_position[obj.key] = "L1"

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the object from the Hash Map, deletes its node from the Binary Tree, removes it from the Linked List, clears its slot in the Array, removes all metadata associated with the evicted cache line, recalculates the replacement scores for the remaining cache lines, adjusts the remaining cache lines' metadata to maintain relative rankings for eviction decisions, and adjusts overall memory profiling to reflect the change in cache composition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del hash_map[evicted_obj.key]
    del bin_tree[evicted_obj.key]
    linked_list.remove(evicted_obj.key)
    array.remove(evicted_obj.key)
    del hit_ratio[evicted_obj.key]
    del residency_time[evicted_obj.key]
    del access_freq_pattern[evicted_obj.key]
    del replacement_scores[evicted_obj.key]
    del fetch_cost_score[evicted_obj.key]
    del memory_usage[evicted_obj.key]
    del prefetch_success_rate[evicted_obj.key]
    del context_tags[evicted_obj.key]
    del queue_position[evicted_obj.key]

    # Adjust replacement scores and other metadata for the remaining cache lines
    for key in array:
        replacement_scores[key] = calculate_eviction_score(cache_snapshot.cache[key])  # recompute scores

    # Adjust memory profiling
    # Assuming memory usage patterns needs to be recomputed or adjusted based on remaining objects
    for key in array:
        memory_usage[key] = cache_snapshot.cache[key].size