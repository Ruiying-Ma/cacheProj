# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
LATENCY_IMPACT_WEIGHT = 0.3
DATA_LOCALITY_WEIGHT = 0.2
ACCESS_FREQUENCY_WEIGHT = 0.2
RECENCY_WEIGHT = 0.1
MEMORY_SIZE_WEIGHT = 0.1
DISK_PRIORITY_WEIGHT = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, memory allocation size, coherence status, disk scheduling priorities, LRU queue position, last access time, write status, data locality score, latency impact score, and a circular pointer for each cache object.
metadata = {}
circular_pointer = None

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy uses the circular pointer to traverse the cache and calculates a composite score for each entry based on access frequency, recency of access, memory allocation size, coherence status, disk scheduling priorities, last access time, write status, data locality score, and latency impact score. It evicts the entry with the lowest composite score, with a preference for clean entries and considering disk scheduling priorities.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        composite_score = (
            ACCESS_FREQUENCY_WEIGHT * meta['access_frequency'] +
            RECENCY_WEIGHT * (cache_snapshot.access_count - meta['last_access_time']) +
            MEMORY_SIZE_WEIGHT * cached_obj.size +
            DISK_PRIORITY_WEIGHT * meta['disk_priority'] +
            DATA_LOCALITY_WEIGHT * meta['data_locality_score'] +
            LATENCY_IMPACT_WEIGHT * meta['latency_impact_score']
        )
        
        if meta['write_status'] == 'clean':
            composite_score *= 0.9  # Preference for clean entries
        
        if composite_score < min_score:
            min_score = composite_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Immediately after a hit, the policy increments the access frequency, updates the recency of access and last access time to the current time, recalculates the data locality score and latency impact score, updates the coherence status if necessary, adjusts disk scheduling priorities, moves the hit object to the most-recently-used end of the LRU queue, and keeps the pointer at its current position.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta['access_frequency'] += 1
    meta['recency'] = cache_snapshot.access_count
    meta['last_access_time'] = cache_snapshot.access_count
    meta['data_locality_score'] = calculate_data_locality_score(obj)
    meta['latency_impact_score'] = calculate_latency_impact_score(obj)
    meta['coherence_status'] = update_coherence_status(obj)
    meta['disk_priority'] = adjust_disk_priority(obj)
    move_to_mru_end(obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    Immediately after inserting a new object, the policy initializes the access frequency to 1, sets the recency of access and last access time to the current time, sets the initial memory allocation size and coherence status, marks the write status as clean, calculates initial data locality and latency impact scores, assigns a disk scheduling priority based on expected usage patterns, places the object at the current pointer location without moving the pointer, and moves the object to the most-recently-used end of the LRU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'access_frequency': 1,
        'recency': cache_snapshot.access_count,
        'last_access_time': cache_snapshot.access_count,
        'memory_size': obj.size,
        'coherence_status': 'initial',
        'disk_priority': assign_disk_priority(obj),
        'write_status': 'clean',
        'data_locality_score': calculate_data_locality_score(obj),
        'latency_impact_score': calculate_latency_impact_score(obj),
        'lru_position': circular_pointer
    }
    move_to_mru_end(obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Immediately after evicting a victim, the policy removes all associated metadata for the evicted entry, adjusts the data locality and latency impact scores of remaining entries if influenced, updates disk scheduling priorities for remaining objects, removes the evicted object from the LRU queue, and keeps the pointer at its current position.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata[evicted_obj.key]
    adjust_remaining_entries_after_eviction(evicted_obj)
    remove_from_lru_queue(evicted_obj)

def calculate_data_locality_score(obj):
    # Placeholder function to calculate data locality score
    return 0

def calculate_latency_impact_score(obj):
    # Placeholder function to calculate latency impact score
    return 0

def update_coherence_status(obj):
    # Placeholder function to update coherence status
    return 'updated'

def adjust_disk_priority(obj):
    # Placeholder function to adjust disk priority
    return 0

def assign_disk_priority(obj):
    # Placeholder function to assign initial disk priority
    return 0

def move_to_mru_end(obj):
    # Placeholder function to move object to the most-recently-used end of the LRU queue
    pass

def adjust_remaining_entries_after_eviction(evicted_obj):
    # Placeholder function to adjust remaining entries after eviction
    pass

def remove_from_lru_queue(evicted_obj):
    # Placeholder function to remove object from the LRU queue
    pass