# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
CLOUD_PRIORITY = 1
EDGE_PRIORITY = 0
LFU_WEIGHT = 1
LRU_WEIGHT = 1
SOURCE_WEIGHT = 1

# Put the metadata specifically maintained by the policy below. The policy maintains a FIFO queue, access frequency, last access time, data source (cloud or edge), and a blockchain ledger for tracking data integrity and access history.
fifo_queue = []
access_frequency = {}
last_access_time = {}
data_source = {}
blockchain_ledger = []

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining least frequently used, least recently used, and data source priority, with a preference for evicting cloud-sourced data over edge-sourced data. The evicted object is removed from the front of the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key in fifo_queue:
        freq = access_frequency[key]
        last_access = last_access_time[key]
        source_priority = CLOUD_PRIORITY if data_source[key] == 'cloud' else EDGE_PRIORITY
        
        score = (LFU_WEIGHT * freq) + (LRU_WEIGHT * (cache_snapshot.access_count - last_access)) + (SOURCE_WEIGHT * source_priority)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency, last access time, and appends an entry to the blockchain ledger recording the access event. No change is made to the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] += 1
    last_access_time[key] = cache_snapshot.access_count
    blockchain_ledger.append(f"Access: {key} at {cache_snapshot.access_count}")

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency, sets the last access time to the current time, records the data source, appends an entry to the blockchain ledger recording the insertion event, and puts the inserted object at the rear of the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 1
    last_access_time[key] = cache_snapshot.access_count
    data_source[key] = 'cloud'  # Assuming all new objects are from the cloud for this example
    blockchain_ledger.append(f"Insert: {key} at {cache_snapshot.access_count}")
    fifo_queue.append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the metadata associated with the evicted object, appends an entry to the blockchain ledger recording the eviction event, and removes the evicted object from the front of the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    del access_frequency[key]
    del last_access_time[key]
    del data_source[key]
    blockchain_ledger.append(f"Evict: {key} at {cache_snapshot.access_count}")
    fifo_queue.remove(key)