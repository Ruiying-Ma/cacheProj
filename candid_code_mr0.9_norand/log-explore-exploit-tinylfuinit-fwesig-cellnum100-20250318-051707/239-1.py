# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
ALPHA = 0.1  # Learning rate for updating priority score
BETA = 0.1   # Weight for access frequency in priority score
GAMMA = 0.1  # Weight for recency in priority score

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency, and a learned priority score for each cache object. The priority score is derived using a deep belief network trained via reinforcement learning and stochastic gradient descent.
metadata = {
    'access_frequency': collections.defaultdict(int),
    'recency': collections.defaultdict(int),
    'priority_score': collections.defaultdict(float)
}

def calculate_priority_score(key):
    frequency = metadata['access_frequency'][key]
    recency = metadata['recency'][key]
    priority_score = metadata['priority_score'][key]
    return ALPHA * priority_score + BETA * frequency - GAMMA * recency

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by evaluating the priority scores of all cache objects. The object with the lowest priority score, which is dynamically adjusted based on access patterns and reinforcement learning feedback, is selected for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_priority = float('inf')

    for key in cache_snapshot.cache:
        current_priority = calculate_priority_score(key)
        if current_priority < lowest_priority:
            lowest_priority = current_priority
            candid_obj_key = key
            
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the object are updated. The deep belief network adjusts the priority score based on the new access pattern using reinforcement learning principles.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['priority_score'][key] = calculate_priority_score(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and recency. The deep belief network assigns an initial priority score, which is then refined through reinforcement learning and stochastic gradient descent as more data is accessed.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['priority_score'][key] = calculate_priority_score(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy re-evaluates the priority scores of remaining objects using the deep belief network. The access frequency and recency metadata are adjusted to reflect the removal, ensuring the network adapts to the new cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
        del metadata['recency'][evicted_key]
        del metadata['priority_score'][evicted_key]
    
    # Re-evaluating priority scores of remaining objects
    for key in cache_snapshot.cache:
        metadata['priority_score'][key] = calculate_priority_score(key)