# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
ALPHA = 0.4  # Weight for access frequency
BETA = 0.4   # Weight for recency of access
GAMMA = 0.2  # Weight for write buffer status

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, and write buffer status for each cache entry. Additionally, it tracks the overall cache hit rate and miss penalty statistics.
metadata = {
    'access_frequency': collections.defaultdict(int),
    'recency': collections.defaultdict(int),
    'write_buffer': collections.defaultdict(bool),
    'hit_rate': 0,
    'miss_penalty': 0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted combination of least frequently accessed, least recently accessed, and entries with the least write buffer activity. It prioritizes evicting entries with lower access frequency and recency while considering write buffer status to minimize miss penalty.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        score = (ALPHA * metadata['access_frequency'][key] +
                 BETA * (cache_snapshot.access_count - metadata['recency'][key]) +
                 GAMMA * metadata['write_buffer'][key])
        
        if score < lowest_score:
            lowest_score = score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and recency metadata for the accessed entry. It also adjusts the overall cache hit rate statistics to reflect the successful access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata['access_frequency'][obj.key] += 1
    metadata['recency'][obj.key] = cache_snapshot.access_count

    # Update hit_rate
    if cache_snapshot.access_count > 0:
        metadata['hit_rate'] = (cache_snapshot.hit_count + 1) / (cache_snapshot.access_count + 1)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object into the cache, the policy initializes the access frequency and recency metadata for the new entry. It updates the write buffer status if the entry involves a write operation and adjusts the overall cache hit rate and miss penalty statistics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata['access_frequency'][obj.key] = 1
    metadata['recency'][obj.key] = cache_snapshot.access_count
    metadata['write_buffer'][obj.key] = False  # Adjust this as necessary depending on your definition of write buffer activity

    # Update hit_rate and miss_penalty
    if cache_snapshot.access_count > 0:
        metadata['hit_rate'] = cache_snapshot.hit_count / (cache_snapshot.access_count + 1)
    metadata['miss_penalty'] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the metadata associated with the evicted entry. It updates the overall cache hit rate and miss penalty statistics to reflect the eviction and adjusts the write buffer status if the evicted entry involved a write operation.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Remove metadata associated with the evicted entry
    del metadata['access_frequency'][evicted_obj.key]
    del metadata['recency'][evicted_obj.key]
    del metadata['write_buffer'][evicted_obj.key]

    # Update hit_rate and miss_penalty
    if cache_snapshot.access_count > 0:
        metadata['hit_rate'] = cache_snapshot.hit_count / cache_snapshot.access_count
    metadata['miss_penalty'] -= 1