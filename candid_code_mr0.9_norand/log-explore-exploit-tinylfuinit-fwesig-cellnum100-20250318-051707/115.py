# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections
import time

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 1
WEIGHT_LAST_ACCESS_TIMESTAMP = 1
WEIGHT_MEMORY_ALIGNMENT = 1
WEIGHT_BANDWIDTH_USAGE = 1
WEIGHT_DATA_SYNC_STATUS = 1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access timestamp, data synchronization status, memory alignment status, bandwidth usage statistics, and a FIFO queue position for each cache entry.
metadata = {
    'access_frequency': collections.defaultdict(int),
    'last_access_timestamp': collections.defaultdict(int),
    'data_sync_status': collections.defaultdict(bool),
    'memory_alignment_status': collections.defaultdict(bool),
    'bandwidth_usage_statistics': collections.defaultdict(int),
    'fifo_queue': collections.deque()
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy uses a pointer that traverses the FIFO queue in a circular manner, resetting frequencies to 0 until it finds an entry with zero frequency. It then calculates a weighted score based on low access frequency, old access timestamp, poor memory alignment, high bandwidth usage, and outdated synchronization status to choose the eviction victim.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    fifo_queue = metadata['fifo_queue']
    pointer = 0

    while True:
        if pointer >= len(fifo_queue):
            pointer = 0

        current_key = fifo_queue[pointer]
        if metadata['access_frequency'][current_key] == 0:
            break

        metadata['access_frequency'][current_key] = 0
        pointer += 1

    min_score = float('inf')
    for key in cache_snapshot.cache:
        score = (
            WEIGHT_ACCESS_FREQUENCY * metadata['access_frequency'][key] +
            WEIGHT_LAST_ACCESS_TIMESTAMP * (cache_snapshot.access_count - metadata['last_access_timestamp'][key]) +
            WEIGHT_MEMORY_ALIGNMENT * (not metadata['memory_alignment_status'][key]) +
            WEIGHT_BANDWIDTH_USAGE * metadata['bandwidth_usage_statistics'][key] +
            WEIGHT_DATA_SYNC_STATUS * (not metadata['data_sync_status'][key])
        )
        if score < min_score:
            min_score = score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a hit, the policy sets the access frequency to 1, updates the last access timestamp to the current time, checks and updates the data synchronization status, recalculates memory alignment and bandwidth usage statistics, and does not move the object in the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata['access_frequency'][obj.key] = 1
    metadata['last_access_timestamp'][obj.key] = cache_snapshot.access_count
    metadata['data_sync_status'][obj.key] = True  # Assuming data is always up-to-date after access
    metadata['memory_alignment_status'][obj.key] = True  # Assuming memory alignment is recalculated and is optimal
    metadata['bandwidth_usage_statistics'][obj.key] = 0  # Assuming bandwidth usage is recalculated

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy sets the access frequency to 1, sets the last access timestamp to the current time, marks the data synchronization status as up-to-date, assesses the memory alignment, records initial bandwidth usage statistics, and places the object at the rear of the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata['access_frequency'][obj.key] = 1
    metadata['last_access_timestamp'][obj.key] = cache_snapshot.access_count
    metadata['data_sync_status'][obj.key] = True  # Assuming data is up-to-date upon insertion
    metadata['memory_alignment_status'][obj.key] = True  # Assuming memory alignment is optimal upon insertion
    metadata['bandwidth_usage_statistics'][obj.key] = 0  # Initial bandwidth usage
    metadata['fifo_queue'].append(obj.key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata, recalculates overall cache bandwidth usage, adjusts memory alignment statistics, and moves all remaining objects in the FIFO queue one step forward to fill the vacancy.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata['access_frequency'][evicted_obj.key]
    del metadata['last_access_timestamp'][evicted_obj.key]
    del metadata['data_sync_status'][evicted_obj.key]
    del metadata['memory_alignment_status'][evicted_obj.key]
    del metadata['bandwidth_usage_statistics'][evicted_obj.key]
    metadata['fifo_queue'].remove(evicted_obj.key)
    # Recalculate overall cache bandwidth usage and memory alignment statistics if needed