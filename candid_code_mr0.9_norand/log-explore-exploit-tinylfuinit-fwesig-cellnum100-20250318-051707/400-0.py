# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Necessary imports
import copy

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for access frequency in composite score
BETA = 0.3   # Weight for recency in composite score
GAMMA = 0.2  # Weight for feature vector in composite score

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, and a preprocessed feature vector derived from historical access patterns using machine learning techniques.
metadata = {
    'access_freq': {},     # Stores access frequency for each object key
    'recency': {},         # Stores recency timestamp for each object key
    'feature_vector': {},  # Stores feature vectors for each object key
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by evaluating a composite score based on the feature vector, access frequency, and recency. The object with the lowest composite score is selected for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        freq = metadata['access_freq'][key]
        recency = metadata['recency'][key]
        feature_vector = metadata['feature_vector'][key]

        # Composite score calculation
        score = ALPHA * (1 / freq) + BETA * (cache_snapshot.access_count - recency) + GAMMA * sum(feature_vector)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the recency timestamp, and adjusts the feature vector using algorithmic adjustments to reflect the latest access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    # Update access frequency
    metadata['access_freq'][key] += 1
    # Update recency timestamp
    metadata['recency'][key] = cache_snapshot.access_count
    # Adjust feature vector (this is an example adjustment, please replace with actual method as necessary)
    metadata['feature_vector'][key] = [x * 1.01 for x in metadata['feature_vector'][key]]

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the recency timestamp to the current time, and generates an initial feature vector based on the object's characteristics and historical data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    # Initialize access frequency
    metadata['access_freq'][key] = 1
    # Set recency timestamp
    metadata['recency'][key] = cache_snapshot.access_count
    # Generate initial feature vector (the actual method of generating feature vector might be more complex)
    metadata['feature_vector'][key] = [obj.size]  # Example feature vector based on object size

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy removes the metadata associated with the evicted object and recalibrates the feature vectors of remaining objects to ensure the model remains valid and accurate.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    # Remove metadata of evicted object
    if evicted_key in metadata['access_freq']:
        del metadata['access_freq'][evicted_key]
    if evicted_key in metadata['recency']:
        del metadata['recency'][evicted_key]
    if evicted_key in metadata['feature_vector']:
        del metadata['feature_vector'][evicted_key]
    
    # Recalibrate feature vectors (this is an example adjustment, please replace with actual method as necessary)
    for key in cache_snapshot.cache:
        metadata['feature_vector'][key] = [x * 0.99 for x in metadata['feature_vector'][key]]