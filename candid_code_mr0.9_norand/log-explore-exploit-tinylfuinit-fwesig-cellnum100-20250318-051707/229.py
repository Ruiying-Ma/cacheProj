# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict, deque
import bisect

# Put tunable constant parameters below
FETCH_COST_WEIGHT = 1.0
REPLACEMENT_SCORE_WEIGHT = 1.0
MEMORY_USAGE_WEIGHT = 1.0
PREFETCH_SUCCESS_WEIGHT = 1.0
CONTEXT_RELEVANCE_WEIGHT = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains a Hash Map for quick access, a Binary Tree for access frequencies, a Linked List for order of access, an Array for cache data, hit ratio tracking, cache residency time, access frequency patterns, replacement scores, fetch cost score, queue positions (FIFO or LRU), memory usage patterns, prefetching success rates, and context tags.
cache_metadata = {
    'hash_map': {},  # key -> obj
    'frequency_tree': defaultdict(int),  # key -> frequency
    'access_order': deque(),  # keys in order of access
    'cache_array': [],  # list of keys
    'hit_ratio': {},  # key -> hit ratio
    'residency_time': {},  # key -> residency time
    'access_frequency_pattern': {},  # key -> access frequency pattern
    'replacement_scores': {},  # key -> replacement score
    'fetch_cost_score': {},  # key -> fetch cost score
    'queue_positions': {},  # key -> (FIFO or LRU)
    'memory_usage_patterns': {},  # key -> memory usage pattern
    'prefetching_success_rates': {},  # key -> prefetching success rate
    'context_tags': {},  # key -> context tags
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first checks the FIFO queue for an object with zero frequency and evicts it. If no such object is found, it calculates a combined weighted score based on low access frequency, low recency, high fetch cost, low replacement score, high memory usage, low prefetching success, and context irrelevance, and evicts the object with the lowest score from the non-empty LRU queue with the smallest subscript.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    # Check FIFO queue for an object with zero frequency
    for key in cache_metadata['access_order']:
        if cache_metadata['frequency_tree'][key] == 0:
            candid_obj_key = key
            break

    if candid_obj_key is None:
        # Calculate combined weighted score for eviction
        min_score = float('inf')
        for key in cache_metadata['access_order']:
            score = (
                cache_metadata['frequency_tree'][key] * FETCH_COST_WEIGHT +
                cache_metadata['replacement_scores'][key] * REPLACEMENT_SCORE_WEIGHT +
                cache_metadata['memory_usage_patterns'][key] * MEMORY_USAGE_WEIGHT +
                cache_metadata['prefetching_success_rates'][key] * PREFETCH_SUCCESS_WEIGHT +
                cache_metadata['context_tags'][key] * CONTEXT_RELEVANCE_WEIGHT
            )
            if score < min_score:
                min_score = score
                candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency in the Binary Tree, moves the accessed item to the front of the Linked List, updates the hit ratio, resets the residency time, updates the access frequency pattern, updates the corresponding entry in the Hash Map, updates the recency of access, slightly decreases the fetch cost score, increases the prefetching success rate if applicable, and re-evaluates the context relevance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    cache_metadata['frequency_tree'][key] += 1
    cache_metadata['access_order'].remove(key)
    cache_metadata['access_order'].appendleft(key)
    cache_metadata['hit_ratio'][key] = cache_snapshot.hit_count / cache_snapshot.access_count
    cache_metadata['residency_time'][key] = cache_snapshot.access_count
    cache_metadata['access_frequency_pattern'][key] += 1
    cache_metadata['hash_map'][key] = obj
    cache_metadata['fetch_cost_score'][key] -= 1
    cache_metadata['prefetching_success_rates'][key] += 1
    cache_metadata['context_tags'][key] = 1  # Re-evaluate context relevance

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy adds the object to the Hash Map, inserts it into the Binary Tree with an initial frequency count, appends it to the end of the Linked List, places it in the next available slot in the Array, initializes the hit ratio to zero, sets the residency time, starts tracking the access frequency pattern, initializes the access frequency to 1, sets the recency of access, calculates the fetch cost score, sets initial memory usage patterns, starts tracking prefetching success, assigns context tags, and places the object at the most-recently-used end of L1.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    cache_metadata['hash_map'][key] = obj
    cache_metadata['frequency_tree'][key] = 1
    cache_metadata['access_order'].append(key)
    cache_metadata['cache_array'].append(key)
    cache_metadata['hit_ratio'][key] = 0
    cache_metadata['residency_time'][key] = cache_snapshot.access_count
    cache_metadata['access_frequency_pattern'][key] = 1
    cache_metadata['replacement_scores'][key] = 0
    cache_metadata['fetch_cost_score'][key] = 1
    cache_metadata['queue_positions'][key] = 'LRU'
    cache_metadata['memory_usage_patterns'][key] = obj.size
    cache_metadata['prefetching_success_rates'][key] = 0
    cache_metadata['context_tags'][key] = 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the object from the Hash Map, deletes its node from the Binary Tree, removes it from the Linked List, clears its slot in the Array, removes all metadata associated with the evicted cache line, recalculates the replacement scores for the remaining cache lines, adjusts the remaining cache lines' metadata to maintain relative rankings for eviction decisions, and adjusts overall memory profiling to reflect the change in cache composition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    key = evicted_obj.key
    del cache_metadata['hash_map'][key]
    del cache_metadata['frequency_tree'][key]
    cache_metadata['access_order'].remove(key)
    cache_metadata['cache_array'].remove(key)
    del cache_metadata['hit_ratio'][key]
    del cache_metadata['residency_time'][key]
    del cache_metadata['access_frequency_pattern'][key]
    del cache_metadata['replacement_scores'][key]
    del cache_metadata['fetch_cost_score'][key]
    del cache_metadata['queue_positions'][key]
    del cache_metadata['memory_usage_patterns'][key]
    del cache_metadata['prefetching_success_rates'][key]
    del cache_metadata['context_tags'][key]
    
    # Recalculate replacement scores for remaining cache lines
    for key in cache_metadata['hash_map']:
        cache_metadata['replacement_scores'][key] = (
            cache_metadata['frequency_tree'][key] * FETCH_COST_WEIGHT +
            cache_metadata['memory_usage_patterns'][key] * MEMORY_USAGE_WEIGHT +
            cache_metadata['prefetching_success_rates'][key] * PREFETCH_SUCCESS_WEIGHT +
            cache_metadata['context_tags'][key] * CONTEXT_RELEVANCE_WEIGHT
        )