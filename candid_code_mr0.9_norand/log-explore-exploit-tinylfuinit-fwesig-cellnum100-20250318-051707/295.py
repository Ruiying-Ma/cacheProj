# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 0.2
WEIGHT_LAST_ACCESS_TIMESTAMP = 0.2
WEIGHT_MEMORY_FRAGMENTATION_SCORE = 0.2
WEIGHT_PARALLEL_ACCESS_COUNT = 0.2
WEIGHT_HOTNESS_SCORE = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access timestamp, memory fragmentation score, parallel access count, write buffer status, hotness score, cache hierarchy level, overall cache hit rate, and miss penalty statistics for each cache entry.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'memory_fragmentation_score': {},
    'parallel_access_count': {},
    'write_buffer_status': {},
    'hotness_score': {},
    'cache_hierarchy_level': {},
    'overall_cache_hit_rate': 0,
    'miss_penalty_statistics': 0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combined weighted score of low access frequency, old access timestamp, high memory fragmentation score, low parallel access count, and low hotness score. If multiple candidates have the same score, it evicts the one with the oldest last access timestamp and considers write buffer status to minimize miss penalty.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    for key, cached_obj in cache_snapshot.cache.items():
        score = (
            WEIGHT_ACCESS_FREQUENCY * metadata['access_frequency'].get(key, 0) +
            WEIGHT_LAST_ACCESS_TIMESTAMP * (cache_snapshot.access_count - metadata['last_access_timestamp'].get(key, 0)) +
            WEIGHT_MEMORY_FRAGMENTATION_SCORE * metadata['memory_fragmentation_score'].get(key, 0) +
            WEIGHT_PARALLEL_ACCESS_COUNT * metadata['parallel_access_count'].get(key, 0) +
            WEIGHT_HOTNESS_SCORE * metadata['hotness_score'].get(key, 0)
        )
        if score < min_score or (score == min_score and metadata['last_access_timestamp'].get(key, 0) < metadata['last_access_timestamp'].get(candid_obj_key, float('inf'))):
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the last access timestamp to the current time, recalculates the memory fragmentation score and hotness score, increments the parallel access count, adjusts the cache hierarchy level if necessary, and updates the overall cache hit rate statistics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['memory_fragmentation_score'][key] = calculate_memory_fragmentation_score(cache_snapshot, obj)
    metadata['hotness_score'][key] = calculate_hotness_score(cache_snapshot, obj)
    metadata['parallel_access_count'][key] = metadata['parallel_access_count'].get(key, 0) + 1
    metadata['cache_hierarchy_level'][key] = adjust_cache_hierarchy_level(cache_snapshot, obj)
    metadata['overall_cache_hit_rate'] = cache_snapshot.hit_count / cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, calculates initial memory fragmentation and hotness scores, sets the parallel access count to 1, sets the cache hierarchy level based on expected latency requirements, updates the write buffer status if the entry involves a write operation, and adjusts the overall cache hit rate and miss penalty statistics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['memory_fragmentation_score'][key] = calculate_memory_fragmentation_score(cache_snapshot, obj)
    metadata['hotness_score'][key] = calculate_hotness_score(cache_snapshot, obj)
    metadata['parallel_access_count'][key] = 1
    metadata['cache_hierarchy_level'][key] = adjust_cache_hierarchy_level(cache_snapshot, obj)
    metadata['write_buffer_status'][key] = update_write_buffer_status(obj)
    metadata['overall_cache_hit_rate'] = cache_snapshot.hit_count / cache_snapshot.access_count
    metadata['miss_penalty_statistics'] = calculate_miss_penalty_statistics(cache_snapshot)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata of the evicted entry, recalculates the overall memory fragmentation score for the remaining entries, updates the overall cache hit rate and miss penalty statistics, adjusts the write buffer status if the evicted entry involved a write operation, and may adjust the hotness scores of remaining data to maintain hierarchy and latency optimizations.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    metadata['access_frequency'].pop(evicted_key, None)
    metadata['last_access_timestamp'].pop(evicted_key, None)
    metadata['memory_fragmentation_score'].pop(evicted_key, None)
    metadata['parallel_access_count'].pop(evicted_key, None)
    metadata['write_buffer_status'].pop(evicted_key, None)
    metadata['hotness_score'].pop(evicted_key, None)
    metadata['cache_hierarchy_level'].pop(evicted_key, None)
    metadata['overall_cache_hit_rate'] = cache_snapshot.hit_count / cache_snapshot.access_count
    metadata['miss_penalty_statistics'] = calculate_miss_penalty_statistics(cache_snapshot)
    recalculate_memory_fragmentation_score(cache_snapshot)

def calculate_memory_fragmentation_score(cache_snapshot, obj):
    # Placeholder function to calculate memory fragmentation score
    return 0

def calculate_hotness_score(cache_snapshot, obj):
    # Placeholder function to calculate hotness score
    return 0

def adjust_cache_hierarchy_level(cache_snapshot, obj):
    # Placeholder function to adjust cache hierarchy level
    return 0

def update_write_buffer_status(obj):
    # Placeholder function to update write buffer status
    return 0

def calculate_miss_penalty_statistics(cache_snapshot):
    # Placeholder function to calculate miss penalty statistics
    return 0

def recalculate_memory_fragmentation_score(cache_snapshot):
    # Placeholder function to recalculate overall memory fragmentation score
    pass