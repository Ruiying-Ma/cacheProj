# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict, deque

# Put tunable constant parameters below
K = 10  # The decay frequency for CBF

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, write status, data locality score, a Count Bloom Filter (CBF) for frequency estimation, and a graph structure with nodes representing cached objects and edges representing access patterns. It also tracks sparsity scores for each object.
access_frequency = defaultdict(int)
last_access_time = {}
write_status = {}
data_locality_score = {}
cbf = defaultdict(int)
graph = defaultdict(set)
sparsity_score = {}

eviction_count = 0

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects a victim by first identifying nodes with the lowest sparsity score in the graph. Among these, it chooses the one with the lowest composite score derived from access frequency, last access time, data locality score, and write status, with a preference for clean entries.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    # Identify the nodes with the lowest sparsity score
    min_sparsity = min(sparsity_score.values())
    candid_objs = [key for key in cache_snapshot.cache.keys() if sparsity_score[key] == min_sparsity]

    # Choose the one with the lowest composite score:
    # composite_score = (access_frequency, last_access_time, data_locality_score, write_status)
    candid_obj_key = min(candid_objs, key=lambda key: (
        access_frequency[key],
        last_access_time[key],
        data_locality_score[key],
        write_status[key] == 'dirty'
    ))
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the last access time to the current time, recalculates the data locality score, increases the hit object's frequency in CBF, and reinforces the edges between the hit object and its neighboring nodes in the graph.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] += 1
    last_access_time[key] = cache_snapshot.access_count
    data_locality_score[key] = len(graph[key])
    cbf[key] += 1
    
    for neighbor in graph[key]:
        graph[neighbor].add(key)
        graph[key].add(neighbor)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, marks the write status as clean, calculates an initial data locality score, increases the inserted object's frequency in CBF, adds a new node to the graph, initializes its edges based on initial access patterns, and calculates an initial sparsity score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 1
    last_access_time[key] = cache_snapshot.access_count
    write_status[key] = 'clean'
    data_locality_score[key] = 0
    cbf[key] += 1
    graph[key] = set()

    for other_key in cache_snapshot.cache.keys():
        if other_key != key:
            graph[key].add(other_key)
            graph[other_key].add(key)

    sparsity_score[key] = 1.0 / (len(graph[key]) + 1)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata for the evicted entry, adjusts the data locality scores of remaining entries if influenced, decays CBF every K evictions, removes the corresponding node and its edges from the graph, and recalculates the sparsity scores for the remaining nodes.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    global eviction_count
    evicted_key = evicted_obj.key

    del access_frequency[evicted_key]
    del last_access_time[evicted_key]
    del write_status[evicted_key]
    del data_locality_score[evicted_key]

    # Decay the CBF every K evictions
    eviction_count += 1
    if eviction_count % K == 0:
        for key in cbf.keys():
            cbf[key] = max(0, cbf[key] - 1)

    del cbf[evicted_key]

    # Remove node from graph and adjust other nodes
    for neighbor in graph[evicted_key]:
        graph[neighbor].remove(evicted_key)
        sparsity_score[neighbor] = 1.0 / (len(graph[neighbor]) + 1)

    del graph[evicted_key]
    del sparsity_score[evicted_key]