# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQ = 0.4
WEIGHT_EVICTION_FREQ = 0.3
WEIGHT_COMPRESSION_RATIO = 0.2
WEIGHT_BANDWIDTH_USAGE = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, data compression ratio, and bandwidth usage for each cached object.
metadata = {
    'access_frequency': {},  # {obj.key: access_count}
    'last_access_timestamp': {},  # {obj.key: last_access_time}
    'eviction_frequency': {},  # {obj.key: eviction_count}
    'data_compression_ratio': {},  # {obj.key: compression_ratio}
    'bandwidth_usage': {}  # {obj.key: bandwidth_usage}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, high eviction frequency, low data compression ratio, and high bandwidth usage.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_freq = metadata['access_frequency'].get(key, 0)
        eviction_freq = metadata['eviction_frequency'].get(key, 0)
        compression_ratio = metadata['data_compression_ratio'].get(key, 1)
        bandwidth_usage = metadata['bandwidth_usage'].get(key, 0)
        
        score = (WEIGHT_ACCESS_FREQ * (1 / (access_freq + 1)) +
                 WEIGHT_EVICTION_FREQ * eviction_freq +
                 WEIGHT_COMPRESSION_RATIO * (1 / compression_ratio) +
                 WEIGHT_BANDWIDTH_USAGE * bandwidth_usage)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access timestamp, and recalculates the bandwidth efficiency based on the current access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    # Recalculate bandwidth usage (example calculation, can be adjusted)
    metadata['bandwidth_usage'][key] = metadata['access_frequency'][key] / (cache_snapshot.access_count - metadata['last_access_timestamp'][key] + 1)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, calculates the initial data compression ratio, and estimates the initial bandwidth usage.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    # Initial data compression ratio (example calculation, can be adjusted)
    metadata['data_compression_ratio'][key] = 1.0
    # Initial bandwidth usage (example calculation, can be adjusted)
    metadata['bandwidth_usage'][key] = 1.0

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy updates the eviction frequency for the evicted object, recalculates the overall data compression ratio for the remaining objects, and adjusts the bandwidth efficiency metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    metadata['eviction_frequency'][evicted_key] = metadata['eviction_frequency'].get(evicted_key, 0) + 1
    # Remove metadata for evicted object
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_timestamp'][evicted_key]
    del metadata['data_compression_ratio'][evicted_key]
    del metadata['bandwidth_usage'][evicted_key]
    
    # Recalculate overall data compression ratio and bandwidth usage for remaining objects
    for key in cache_snapshot.cache:
        # Example recalculation, can be adjusted
        metadata['data_compression_ratio'][key] = 1.0
        metadata['bandwidth_usage'][key] = metadata['access_frequency'][key] / (cache_snapshot.access_count - metadata['last_access_timestamp'][key] + 1)