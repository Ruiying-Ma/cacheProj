# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
ACCESS_FREQUENCY_WEIGHT = 0.4
LAST_ACCESS_TIME_WEIGHT = 0.3
PACKET_SIZE_WEIGHT = 0.2
NETWORK_TRAFFIC_RELEVANCE_WEIGHT = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, packet size, and network traffic patterns associated with each cached object.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score that considers low access frequency, older last access time, larger packet size, and lower relevance to current network traffic patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata[key]['access_frequency']
        last_access_time = metadata[key]['last_access_time']
        packet_size = metadata[key]['packet_size']
        network_traffic_relevance = metadata[key]['network_traffic_relevance']
        
        score = (ACCESS_FREQUENCY_WEIGHT * (1 / access_frequency) +
                 LAST_ACCESS_TIME_WEIGHT * (cache_snapshot.access_count - last_access_time) +
                 PACKET_SIZE_WEIGHT * packet_size +
                 NETWORK_TRAFFIC_RELEVANCE_WEIGHT * (1 - network_traffic_relevance))
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access time to the current time, and adjusts the relevance score based on the latest network traffic patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['access_frequency'] += 1
    metadata[key]['last_access_time'] = cache_snapshot.access_count
    metadata[key]['network_traffic_relevance'] = evaluate_network_traffic_relevance(obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, records the packet size, and evaluates the initial relevance score based on current network traffic patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'access_frequency': 1,
        'last_access_time': cache_snapshot.access_count,
        'packet_size': obj.size,
        'network_traffic_relevance': evaluate_network_traffic_relevance(obj)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalculates the overall traffic pattern relevance scores for the remaining objects and adjusts their metadata accordingly to reflect the new cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    for key in cache_snapshot.cache.keys():
        metadata[key]['network_traffic_relevance'] = evaluate_network_traffic_relevance(cache_snapshot.cache[key])

def evaluate_network_traffic_relevance(obj):
    '''
    This function evaluates the network traffic relevance score for a given object.
    - Args:
        - `obj`: The object for which to evaluate the relevance score.
    - Return:
        - `relevance_score`: A float representing the relevance score.
    '''
    # Placeholder function for evaluating network traffic relevance
    # In a real implementation, this would analyze current network traffic patterns
    relevance_score = 0.5  # Example fixed relevance score
    return relevance_score