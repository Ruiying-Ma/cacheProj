# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHTS = {
    "access_frequency": 1.0,
    "recency": 1.0,
    "pattern_score": 1.0,
    "spatial_locality": 1.0,
    "memory_scheduling_priority": 1.0,
    "write_back": 1.0,
    "latency_impact": 1.0,
    "pipeline_depth_impact": 1.0
}

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, pattern score, spatial locality score, memory scheduling priority, write-back status, latency impact score, last access time, and pipeline depth impact for each cache entry.
cache_metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score for each cache line, which is a weighted sum of access frequency, recency, pattern score, spatial locality score, memory scheduling priority, write-back necessity, latency impact, and pipeline depth impact. The line with the lowest composite score is chosen for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    def score(entry_metadata):
        return (WEIGHTS["access_frequency"] * entry_metadata.get("access_frequency", 0) +
                WEIGHTS["recency"] * (cache_snapshot.access_count - entry_metadata.get("recency", 0)) +
                WEIGHTS["pattern_score"] * entry_metadata.get("pattern_score", 0) +
                WEIGHTS["spatial_locality"] * entry_metadata.get("spatial_locality", 0) +
                WEIGHTS["memory_scheduling_priority"] * entry_metadata.get("memory_scheduling_priority", 0) +
                WEIGHTS["write_back"] * entry_metadata.get("write_back", 0) +
                WEIGHTS["latency_impact"] * entry_metadata.get("latency_impact", 0) +
                WEIGHTS["pipeline_depth_impact"] * entry_metadata.get("pipeline_depth_impact", 0))
    
    min_score = float('inf')
    candid_obj_key = None

    for key, entry in cache_snapshot.cache.items():
        entry_score = score(cache_metadata[key])
        if entry_score < min_score:
            min_score = entry_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Immediately after a cache hit, the policy increments the access frequency, updates the recency timestamp and last access time to the current time, adjusts the pattern score based on the observed memory access pattern, recalculates the spatial locality score, adjusts the memory scheduling priority, refreshes the last access timestamp, recalculates the latency impact score, and recalculates the pipeline depth impact for the accessed cache line.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = cache_metadata[obj.key]
    meta["access_frequency"] += 1
    meta["recency"] = cache_snapshot.access_count
    meta["last_access_time"] = cache_snapshot.access_count
    # Adjust and recalculate the various scores (logic omitted for brevity)
    # meta["pattern_score"] = ...
    # meta["spatial_locality"] = ...
    # meta["memory_scheduling_priority"] = ...
    # meta["latency_impact"] = ...
    # meta["pipeline_depth_impact"] = ...

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    Immediately after inserting a new object, the policy initializes the access frequency to 1, sets the recency timestamp and last access time to the current time, calculates the initial pattern score based on the current memory access pattern, calculates the initial spatial locality score, assigns a default memory scheduling priority, sets the last access timestamp to the current time, marks the write-back status as clean, assigns an initial latency impact score, and calculates the initial pipeline depth impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    cache_metadata[obj.key] = {
        "access_frequency": 1,
        "recency": cache_snapshot.access_count,
        "pattern_score": 0,  # Calculate based on observed access pattern
        "spatial_locality": 0,  # Calculate based on spatial locality heuristic
        "memory_scheduling_priority": 0,  # Default priority
        "write_back": 0,  # Clean, no write-back needed
        "latency_impact": 0,  # Initial latency impact
        "pipeline_depth_impact": 0,  # Initial pipeline depth impact
        "last_access_time": cache_snapshot.access_count
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Immediately after evicting the victim, the policy removes all associated metadata for the evicted entry and adjusts the pattern scores, memory scheduling priorities, latency impact scores, and pipeline depth impacts of remaining entries to optimize future access patterns and reflect the change in cache composition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in cache_metadata:
        del cache_metadata[evicted_obj.key]
    # Adjust and recalculate for remaining entries (logic omitted for brevity)
    # for key, meta in cache_metadata.items():
        # meta["pattern_score"] = ...
        # meta["memory_scheduling_priority"] = ...
        # meta["latency_impact"] = ...
        # meta["pipeline_depth_impact"] = ...