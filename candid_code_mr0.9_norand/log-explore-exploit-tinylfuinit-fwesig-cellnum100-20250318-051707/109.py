# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 1
WEIGHT_LAST_ACCESS_TIMESTAMP = 1
WEIGHT_MEMORY_ALIGNMENT = 1
WEIGHT_BANDWIDTH_USAGE = 1
WEIGHT_RECENCY = 1
WEIGHT_SYNC_STATUS = 2

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access timestamp, data synchronization status, memory alignment status, bandwidth usage statistics, and recency for each cache entry.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'data_sync_status': {},
    'memory_alignment': {},
    'bandwidth_usage': {},
    'recency': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, old access timestamp, poor memory alignment, high bandwidth usage, and least recency. Entries with outdated synchronization status are prioritized for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (
            WEIGHT_ACCESS_FREQUENCY * metadata['access_frequency'][key] +
            WEIGHT_LAST_ACCESS_TIMESTAMP * (cache_snapshot.access_count - metadata['last_access_timestamp'][key]) +
            WEIGHT_MEMORY_ALIGNMENT * metadata['memory_alignment'][key] +
            WEIGHT_BANDWIDTH_USAGE * metadata['bandwidth_usage'][key] +
            WEIGHT_RECENCY * (cache_snapshot.access_count - metadata['recency'][key]) +
            WEIGHT_SYNC_STATUS * (1 if not metadata['data_sync_status'][key] else 0)
        )
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, refreshes the last access timestamp to the current time, checks and updates the data synchronization status, recalculates the memory alignment and bandwidth usage statistics, and updates the recency to the current timestamp.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['data_sync_status'][key] = True  # Assuming data is synchronized after access
    metadata['memory_alignment'][key] = obj.size % 8  # Example memory alignment calculation
    metadata['bandwidth_usage'][key] += obj.size  # Example bandwidth usage calculation
    metadata['recency'][key] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, marks the data synchronization status as up-to-date, assesses the memory alignment, records initial bandwidth usage statistics, and sets the recency to the current timestamp.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['data_sync_status'][key] = True
    metadata['memory_alignment'][key] = obj.size % 8  # Example memory alignment calculation
    metadata['bandwidth_usage'][key] = obj.size  # Example bandwidth usage calculation
    metadata['recency'][key] = cache_snapshot.access_count

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata, recalculates overall cache bandwidth usage, adjusts memory alignment statistics to reflect the current state of the cache, and removes the recency information.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    del metadata['access_frequency'][key]
    del metadata['last_access_timestamp'][key]
    del metadata['data_sync_status'][key]
    del metadata['memory_alignment'][key]
    del metadata['bandwidth_usage'][key]
    del metadata['recency'][key]
    
    # Recalculate overall cache bandwidth usage and memory alignment statistics
    total_bandwidth_usage = sum(metadata['bandwidth_usage'].values())
    total_memory_alignment = sum(metadata['memory_alignment'].values())
    # These recalculations can be used for further policy decisions if needed