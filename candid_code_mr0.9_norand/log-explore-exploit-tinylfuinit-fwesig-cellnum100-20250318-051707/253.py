# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import hashlib

# Put tunable constant parameters below
REDUNDANCY_CHECK_CONSTANT = 1000

# Put the metadata specifically maintained by the policy below. The policy maintains a hash table for quick lookup, a redundancy check value for each cache line, a mapping of disk block allocations, and the size of each cache line.
hash_table = {}
redundancy_check_values = {}
disk_block_allocations = {}
cache_line_sizes = {}

def calculate_redundancy_check(obj):
    '''
    Calculate the redundancy check value for an object.
    - Args:
        - `obj`: The object for which to calculate the redundancy check value.
    - Return:
        - `redundancy_check_value`: The calculated redundancy check value.
    '''
    hash_value = hashlib.md5(obj.key.encode()).hexdigest()
    redundancy_check_value = sum(ord(char) for char in hash_value) % REDUNDANCY_CHECK_CONSTANT
    return redundancy_check_value

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the cache line with the lowest redundancy check value, ensuring that the least reliable data is evicted first.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_redundancy_check_value = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        if redundancy_check_values[key] < min_redundancy_check_value:
            min_redundancy_check_value = redundancy_check_values[key]
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the hash table to reflect the recent access, recalculates the redundancy check value to ensure data integrity, and verifies the disk block allocation remains consistent.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    hash_table[obj.key] = obj
    redundancy_check_values[obj.key] = calculate_redundancy_check(obj)
    disk_block_allocations[obj.key] = obj.size
    cache_line_sizes[obj.key] = obj.size

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy updates the hash table with the new entry, calculates and stores the redundancy check value for the new cache line, and records the disk block allocation and size of the new cache line.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    hash_table[obj.key] = obj
    redundancy_check_values[obj.key] = calculate_redundancy_check(obj)
    disk_block_allocations[obj.key] = obj.size
    cache_line_sizes[obj.key] = obj.size

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the entry from the hash table, clears the associated redundancy check value, updates the disk block allocation to reflect the freed space, and adjusts the cache line size metadata accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del hash_table[evicted_obj.key]
    del redundancy_check_values[evicted_obj.key]
    del disk_block_allocations[evicted_obj.key]
    del cache_line_sizes[evicted_obj.key]