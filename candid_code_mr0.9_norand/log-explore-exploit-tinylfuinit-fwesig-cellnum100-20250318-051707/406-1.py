# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

from collections import deque

# Put tunable constant parameters below
SQ_CAPACITY = 10  # Example constant, the capacity of SQ
MQ_CAPACITY = 10  # Example constant, the capacity of MQ
GQ_CAPACITY = 10  # Example constant, the capacity of GQ

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access timestamp, write-back status, latency impact score, and a circular pointer for each cache entry. Additionally, it maintains two FIFO queues (SQ and MQ) within the cache and a ghost FIFO queue (GQ) outside the cache.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'write_back_status': {},
    'latency_impact_score': {},
    'pointer': 0
}

SQ = deque()
MQ = deque()
GQ = deque()

def calculate_composite_score(obj_key):
    """Calculate the composite score based on access frequency, last access timestamp, write-back status, and latency impact score."""
    af = metadata['access_frequency'][obj_key]
    ts = metadata['last_access_timestamp'][obj_key]
    wb = metadata['write_back_status'][obj_key]
    latency = metadata['latency_impact_score'][obj_key]
    # Assuming lower score means higher priority for eviction
    return af + ts + wb + latency

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    If SQ exceeds its capacity, move objects from SQ to MQ until an object with frequency less than 2 is found or MQ is full. If MQ is full, use the circular pointer to traverse MQ and evict the entry with the lowest composite score based on access frequency, last access timestamp, write-back necessity, and latency impact. If SQ is not full, evict the object with frequency less than 2 from SQ.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    
    if len(SQ) > SQ_CAPACITY:
        while len(SQ) > 0:
            candidate = SQ.popleft()
            if metadata['access_frequency'][candidate] < 2 or len(MQ) == MQ_CAPACITY:
                break
            MQ.append(candidate)
    
    if len(MQ) == MQ_CAPACITY:
        min_score = float('inf')
        for candidate in MQ:
            score = calculate_composite_score(candidate)
            if score < min_score:
                min_score = score
                candid_obj_key = candidate
        MQ.remove(candid_obj_key)
    else:
        for candidate in SQ:
            if metadata['access_frequency'][candidate] < 2:
                candid_obj_key = candidate
                SQ.remove(candidate)
                break
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Increment the access frequency, refresh the last access timestamp to the current time, recalculate the latency impact score based on recent access patterns, and keep the pointer at its current position. If the hit object has frequency less than 3, increase its frequency by 1.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    
    # Assuming a function to recalculate latency impact score
    metadata['latency_impact_score'][key] = recalculate_latency_impact(key)

    if metadata['access_frequency'][key] < 3:
        metadata['access_frequency'][key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    Initialize the access frequency to 1, set the last access timestamp to the current time, mark the write-back status as clean, assign an initial latency impact score based on expected access latency, and place the object at the current pointer location without moving the pointer. If the object was in GQ, put it at the rear of MQ and remove it from GQ; otherwise, put it at the rear of SQ.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['write_back_status'][key] = 'clean'
    metadata['latency_impact_score'][key] = 0  # Assuming an initial value based on expected access latency

    if key in GQ:
        GQ.remove(key)
        MQ.append(key)
    else:
        SQ.append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Remove all associated metadata for the evicted entry, adjust the latency impact scores of remaining entries to reflect the change in cache composition, and keep the pointer at its current position. Put the evicted object at the rear of GQ and remove the front of GQ if GQ is full.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    del metadata['access_frequency'][key]
    del metadata['last_access_timestamp'][key]
    del metadata['write_back_status'][key]
    del metadata['latency_impact_score'][key]

    GQ.append(key)
    if len(GQ) > GQ_CAPACITY:
        GQ.popleft()

def recalculate_latency_impact(key):
    # Placeholder function to recalculate the latency impact score
    return 0  # Example return value