# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
DEFAULT_MEMORY_SCHEDULING_PRIORITY = 1
INITIAL_LATENCY_IMPACT_SCORE = 1
INITIAL_SPATIAL_LOCALITY_SCORE = 1
INITIAL_DYNAMIC_EVICTION_THRESHOLD = 10

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, spatial locality score, memory scheduling priority, write-back status, latency impact score, hit count, reference modification status, and a dynamic eviction threshold for each cache entry.
metadata = {
    'access_frequency': {},
    'recency_timestamp': {},
    'spatial_locality_score': {},
    'memory_scheduling_priority': {},
    'write_back_status': {},
    'latency_impact_score': {},
    'hit_count': {},
    'reference_modification_status': {},
    'dynamic_eviction_threshold': INITIAL_DYNAMIC_EVICTION_THRESHOLD
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score derived from the lowest access frequency, least recent access, lowest spatial locality score, lowest memory scheduling priority, write-back necessity, highest latency impact, lowest hit count, and reference modification status. Entries with a composite score below the dynamic eviction threshold and marked as unmodified are prioritized for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (
            metadata['access_frequency'][key] +
            metadata['recency_timestamp'][key] +
            metadata['spatial_locality_score'][key] +
            metadata['memory_scheduling_priority'][key] +
            metadata['latency_impact_score'][key] +
            metadata['hit_count'][key] +
            metadata['reference_modification_status'][key]
        )
        
        if score < min_score and metadata['write_back_status'][key] == 'clean':
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the recency timestamp, recalculates the spatial locality score, adjusts the memory scheduling priority, refreshes the last access timestamp, recalculates the latency impact score, increments the hit count, updates the reference modification status, and recalculates the dynamic eviction threshold based on the overall cache miss penalty.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency_timestamp'][key] = cache_snapshot.access_count
    metadata['spatial_locality_score'][key] += 1
    metadata['memory_scheduling_priority'][key] += 1
    metadata['latency_impact_score'][key] += 1
    metadata['hit_count'][key] += 1
    metadata['reference_modification_status'][key] = 1
    metadata['dynamic_eviction_threshold'] = sum(metadata['hit_count'].values()) / len(metadata['hit_count'])

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the recency timestamp to the current time, calculates the initial spatial locality score, assigns a default memory scheduling priority, sets the last access timestamp to the current time, marks the write-back status as clean, assigns an initial latency impact score, initializes the hit count to zero, sets the reference modification status to unmodified, and adjusts the dynamic eviction threshold to account for the new entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency_timestamp'][key] = cache_snapshot.access_count
    metadata['spatial_locality_score'][key] = INITIAL_SPATIAL_LOCALITY_SCORE
    metadata['memory_scheduling_priority'][key] = DEFAULT_MEMORY_SCHEDULING_PRIORITY
    metadata['write_back_status'][key] = 'clean'
    metadata['latency_impact_score'][key] = INITIAL_LATENCY_IMPACT_SCORE
    metadata['hit_count'][key] = 0
    metadata['reference_modification_status'][key] = 0
    metadata['dynamic_eviction_threshold'] = sum(metadata['hit_count'].values()) / len(metadata['hit_count'])

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy removes all associated metadata for the evicted entry, adjusts the memory scheduling priorities and latency impact scores of remaining entries, recalculates the dynamic eviction threshold based on the remaining entries' hit counts and the overall cache miss penalty, and reviews the reference modification status of other entries to ensure accurate tracking.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['recency_timestamp'][evicted_key]
    del metadata['spatial_locality_score'][evicted_key]
    del metadata['memory_scheduling_priority'][evicted_key]
    del metadata['write_back_status'][evicted_key]
    del metadata['latency_impact_score'][evicted_key]
    del metadata['hit_count'][evicted_key]
    del metadata['reference_modification_status'][evicted_key]
    
    for key in cache_snapshot.cache:
        metadata['memory_scheduling_priority'][key] += 1
        metadata['latency_impact_score'][key] += 1
    
    metadata['dynamic_eviction_threshold'] = sum(metadata['hit_count'].values()) / len(metadata['hit_count'])