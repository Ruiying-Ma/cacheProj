# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below
FREQUENCY_WEIGHT = 0.4
RECENCY_WEIGHT = 0.4
REPLICATION_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, replication count, and load distribution across cache nodes. It also tracks user access patterns to predict future access probabilities.
access_frequency = defaultdict(int)
last_access_time = defaultdict(int)
replication_count = defaultdict(int)
load_distribution = defaultdict(int)
predicted_access_probability = defaultdict(float)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combination of least frequently accessed, least recently accessed, and replication count. It prioritizes evicting items with lower predicted future access probabilities based on user access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        frequency = access_frequency[key]
        recency = cache_snapshot.access_count - last_access_time[key]
        replication = replication_count[key]
        predicted_prob = predicted_access_probability[key]
        
        score = (FREQUENCY_WEIGHT * frequency) + (RECENCY_WEIGHT * recency) + (REPLICATION_WEIGHT * replication) - predicted_prob
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and last access time of the accessed object. It also adjusts the predicted future access probability based on the current user access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    access_frequency[obj.key] += 1
    last_access_time[obj.key] = cache_snapshot.access_count
    predicted_access_probability[obj.key] = access_frequency[obj.key] / (cache_snapshot.hit_count + cache_snapshot.miss_count)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency and last access time. It also updates the replication count and adjusts load distribution to ensure balanced cache utilization.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    access_frequency[obj.key] = 1
    last_access_time[obj.key] = cache_snapshot.access_count
    replication_count[obj.key] = 1
    load_distribution[obj.key] = obj.size
    predicted_access_probability[obj.key] = access_frequency[obj.key] / (cache_snapshot.hit_count + cache_snapshot.miss_count)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy updates the replication count and load distribution metadata to reflect the removal. It also recalculates the predicted future access probabilities for remaining objects based on updated user access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del replication_count[evicted_obj.key]
    del load_distribution[evicted_obj.key]
    del access_frequency[evicted_obj.key]
    del last_access_time[evicted_obj.key]
    del predicted_access_probability[evicted_obj.key]
    
    total_accesses = cache_snapshot.hit_count + cache_snapshot.miss_count
    for key in cache_snapshot.cache:
        predicted_access_probability[key] = access_frequency[key] / total_accesses