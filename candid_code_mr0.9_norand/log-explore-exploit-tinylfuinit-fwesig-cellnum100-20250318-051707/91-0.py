# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
DEFAULT_MEM_SCHEDULING_PRIORITY = 1

# Put the metadata specifically maintained by the policy below. The policy maintains hit ratio, residency time, access frequency, recency of access, spatial locality score, memory scheduling priority, write-back status, and latency impact score for each cache line.
metadata = {
    'hit_ratio': {},
    'residency_time': {},
    'access_frequency': {},
    'recency_timestamp': {},
    'spatial_locality_score': {},
    'mem_sched_priority': {},
    'write_back_status': {},
    'latency_impact_score': {}
}

def calculate_composite_score(key):
    # Define your calculation logic here
    # Just a placeholder formula, adjust if needed
    replacement_score = (metadata['hit_ratio'][key] + 
                         metadata['access_frequency'][key] +
                         metadata['latency_impact_score'][key]) / 3  # example composite score
    return replacement_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score derived from the lowest replacement score and the lowest composite score, prioritizing entries with the lowest combined score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_composite_score = float('inf')

    for key in cache_snapshot.cache:
        score = calculate_composite_score(key)
        if score < min_composite_score:
            min_composite_score = score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the hit ratio and access frequency, resets the residency time, updates the recency timestamp, recalculates the spatial locality score, adjusts the memory scheduling priority, refreshes the last access timestamp, and recalculates the latency impact score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata['hit_ratio'][key] += 1
    metadata['access_frequency'][key] += 1
    metadata['residency_time'][key] = current_time
    metadata['recency_timestamp'][key] = current_time
    # Example calculation for spatial locality score and latency impact score
    metadata['spatial_locality_score'][key] = metadata['access_frequency'][key] / current_time
    metadata['latency_impact_score'][key] = metadata['access_frequency'][key] / metadata['residency_time'][key]
    metadata['mem_sched_priority'][key] = max(DEFAULT_MEM_SCHEDULING_PRIORITY, metadata['mem_sched_priority'][key])

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the hit ratio to zero, sets the residency time and recency timestamp to the current time, starts tracking the access frequency pattern, calculates the initial spatial locality score, assigns a default memory scheduling priority, sets the last access timestamp to the current time, marks the write-back status as clean, and assigns an initial latency impact score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata['hit_ratio'][key] = 0
    metadata['residency_time'][key] = current_time
    metadata['recency_timestamp'][key] = current_time
    metadata['access_frequency'][key] = 1
    metadata['spatial_locality_score'][key] = 1 / current_time
    metadata['mem_sched_priority'][key] = DEFAULT_MEM_SCHEDULING_PRIORITY
    metadata['write_back_status'][key] = 'clean'
    metadata['latency_impact_score'][key] = 1 / current_time

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy removes all associated metadata for the evicted entry, recalculates the replacement scores, adjusts the memory scheduling priorities and latency impact scores of remaining entries to optimize future access patterns and reflect the change in cache composition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    
    # Remove associated metadata
    if key in metadata['hit_ratio']:
        del metadata['hit_ratio'][key]
    if key in metadata['residency_time']:
        del metadata['residency_time'][key]
    if key in metadata['access_frequency']:
        del metadata['access_frequency'][key]
    if key in metadata['recency_timestamp']:
        del metadata['recency_timestamp'][key]
    if key in metadata['spatial_locality_score']:
        del metadata['spatial_locality_score'][key]
    if key in metadata['mem_sched_priority']:
        del metadata['mem_sched_priority'][key]
    if key in metadata['write_back_status']:
        del metadata['write_back_status'][key]
    if key in metadata['latency_impact_score']:
        del metadata['latency_impact_score'][key]

    # Adjust remaining entries
    for key in cache_snapshot.cache:
        metadata['mem_sched_priority'][key] = max(DEFAULT_MEM_SCHEDULING_PRIORITY, metadata['mem_sched_priority'][key])
        metadata['latency_impact_score'][key] = metadata['access_frequency'][key] / max(1, metadata['residency_time'][key])