# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import heapq

# Put tunable constant parameters below
baseline_performance_score = 100

# Put the metadata specifically maintained by the policy below. The policy maintains a hash table with nodes representing cached objects, including access frequency, last access timestamp, error rate of data reconciliation, performance score, and edges with weights indicating access patterns. Nodes are colored based on recency of access.
class Node:
    def __init__(self, obj, current_time):
        self.obj = obj
        self.color = "hot"
        self.access_frequency = 1
        self.last_access_timestamp = current_time
        self.error_rate = 0
        self.performance_score = baseline_performance_score
        self.edges = {}

class Metadata:
    def __init__(self):
        self.nodes = {}
        self.access_order = []

policy_metadata = Metadata()

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by identifying the node with the coldest color, lowest access frequency, oldest last access timestamp, highest error rate, and lowest performance score. If there are ties, it selects the node with the fewest edges.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj = None

    for node in policy_metadata.nodes.values():
        node_tuple = (
            node.color == "cold",
            node.access_frequency,
            node.last_access_timestamp,
            -node.error_rate,
            node.performance_score,
            len(node.edges),
            node.obj.key
        )

        if candid_obj is None or node_tuple < candid_obj:
            candid_obj = node_tuple

    if candid_obj:
        candid_obj_key = candid_obj[-1]
    else:
        candid_obj_key = None
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the node's color to hot, increments the access frequency, refreshes the last access timestamp, recalculates the error rate, adjusts the performance score, and increments the weights of edges from this node to the next accessed nodes.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    node = policy_metadata.nodes[obj.key]
    node.color = "hot"
    node.access_frequency += 1
    node.last_access_timestamp = current_time
    # error_rate and performance_score recalculations
    node.error_rate = node.access_frequency / max(1, current_time - node.last_access_timestamp)
    node.performance_score = baseline_performance_score / (1 + node.error_rate)
    policy_metadata.access_order.append(obj.key)

    # Increment edge weights
    for recent_key in policy_metadata.access_order[-5:]:
        if recent_key != obj.key:
            if recent_key not in node.edges:
                node.edges[recent_key] = 0
            node.edges[recent_key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy creates a new node with hot color, initializes access frequency to 1, sets the last access timestamp to the current time, estimates the initial error rate, assigns a baseline performance score, and creates edges from this node to recently accessed nodes with initial weights.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    node = Node(obj, current_time)
    policy_metadata.nodes[obj.key] = node
    policy_metadata.access_order.append(obj.key)

    # Create initial edges
    for recent_key in policy_metadata.access_order[-5:]:
        if recent_key != obj.key:
            node.edges[recent_key] = 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the corresponding node, recalculates the overall cache performance score, adjusts the error rate for remaining objects, updates algorithmic efficiency metrics, updates the colors of remaining nodes, and adjusts edge weights to maintain accurate access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del policy_metadata.nodes[evicted_key]

    # Recalculate cache performance score and adjust metrics
    total_performance_score = 0
    for node in policy_metadata.nodes.values():
        total_performance_score += node.performance_score
        node.color = "cold" if node.last_access_timestamp < cache_snapshot.access_count - 5 else "hot"

        # Adjust error rate
        node.error_rate = min(node.error_rate, 1.0)

        # Maintain edge weights
        for key in list(node.edges.keys()):
            if key not in policy_metadata.nodes:
                del node.edges[key]

    avg_performance_score = total_performance_score / max(1, len(policy_metadata.nodes))
    print(f'Cache performance score: {avg_performance_score}')