# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for access frequency
BETA = 0.3   # Weight for recency
GAMMA = 0.2  # Weight for resource allocation cost

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry including access frequency, recency of access, resource allocation cost, and a performance score calculated based on these factors.
metadata = {}

def calculate_performance_score(frequency, recency, allocation_cost):
    '''
    Calculate performance score as a combination of frequency, recency, and allocation cost.
    Lower scores indicate a higher likelihood of being evicted.
    '''
    return ALPHA * (1 / frequency) + BETA * recency + GAMMA * allocation_cost

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the entry with the lowest performance score, which is a weighted combination of low access frequency, high recency of access, and high resource allocation cost.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_performance_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        if meta['performance_score'] < min_performance_score:
            min_performance_score = meta['performance_score']
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency is incremented, the recency of access is updated to the current time, and the performance score is recalculated to reflect the increased frequency and updated recency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    meta = metadata[key]
    
    meta['frequency'] += 1
    meta['recency'] = current_time
    meta['performance_score'] = calculate_performance_score(
        meta['frequency'], 
        current_time - meta['insert_time'], 
        meta['allocation_cost']
    )

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the access frequency is initialized to 1, the recency of access is set to the current time, the resource allocation cost is recorded, and the performance score is calculated based on these initial values.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata[key] = {
        'frequency': 1,
        'recency': current_time,
        'insert_time': current_time,
        'allocation_cost': obj.size,
        'performance_score': calculate_performance_score(1, current_time, obj.size)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the metadata for the evicted entry is removed from the cache, and the performance scores of remaining entries are recalculated to ensure they reflect the current state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    current_time = cache_snapshot.access_count
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        meta['performance_score'] = calculate_performance_score(
            meta['frequency'], 
            current_time - meta['insert_time'], 
            meta['allocation_cost']
        )