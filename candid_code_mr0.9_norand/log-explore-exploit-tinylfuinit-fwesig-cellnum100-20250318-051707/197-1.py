# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_PAGE_RANKING_SCORE = 1
ERROR_CORRECTION_INITIAL_STATUS = False

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, memory bandwidth usage, page ranking score, and error correction code status for each cache entry.
metadata = {
    # obj.key: {'frequency': int, 'last_timestamp': int, 'page_rank': int, 'error_status': bool, 'mem_bandwidth_usage': int}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score derived from the page ranking algorithm, memory bandwidth usage, and error correction code status, prioritizing entries with lower scores and higher error rates.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    # Calculate composite score for each cached object
    for key, cached_obj in cache_snapshot.cache.items():
        data = metadata[key]
        score = data['page_rank'] + data['mem_bandwidth_usage']
        if data['error_status']:
            score += 1000  # High penalty for error status
        if score < min_score:
            min_score = score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and last access timestamp, recalculates the page ranking score, and checks the error correction code status to ensure data integrity.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    data = metadata[key]
    
    # Update metadata on hit
    data['frequency'] += 1
    data['last_timestamp'] = cache_snapshot.access_count
    data['page_rank'] = data['frequency'] // (cache_snapshot.access_count + 1 - data['last_timestamp'])
    # Assume a function check_error_status exists to verify error correction code
    data['error_status'] = check_error_status(obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency and last access timestamp, assigns an initial page ranking score, and verifies the error correction code status to ensure the new entry is error-free.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    
    # Initialize metadata
    metadata[key] = {
        'frequency': 1,
        'last_timestamp': cache_snapshot.access_count,
        'page_rank': INITIAL_PAGE_RANKING_SCORE,
        'error_status': check_error_status(obj),
        'mem_bandwidth_usage': 0  # Initialize memory bandwidth usage if needed
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalculates the page ranking scores for remaining entries, adjusts memory bandwidth usage statistics, and updates the error correction code status to reflect the current cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    for key, data in metadata.items():
        data['page_rank'] = data['frequency'] // (cache_snapshot.access_count + 1 - data['last_timestamp'])
        data['mem_bandwidth_usage'] += 1  # Assuming each operation adjusts bandwidth usage
        # Assume a function check_error_status exists to verify error correction code
        data['error_status'] = check_error_status(cache_snapshot.cache[key])

def check_error_status(obj):
    # Implement the actual error checking algorithm based on your requirement. Here we simply return False.
    return ERROR_CORRECTION_INITIAL_STATUS