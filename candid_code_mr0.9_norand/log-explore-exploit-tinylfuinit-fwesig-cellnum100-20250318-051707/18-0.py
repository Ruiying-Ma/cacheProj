# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
DATA_LOCALITY_DECAY = 0.9

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, write status, and data locality score for each cache entry.
access_frequency = {}
last_access_time = {}
write_status = {}  # True for dirty, False for clean
data_locality_score = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score derived from the least frequently accessed, least recently used, and lowest data locality score, with a preference for clean (non-dirty) entries to minimize write-backs.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    for key, entry in cache_snapshot.cache.items():
        score = (access_frequency[key] + 
                 (cache_snapshot.access_count - last_access_time[key]) + 
                 data_locality_score[key])
        if not write_status[key]:
            score -= 100  # Prefer eviction of clean entries by reducing score
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the last access time to the current time, and recalculates the data locality score based on the access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] += 1
    last_access_time[key] = cache_snapshot.access_count
    # Example of recalculating data locality score, assuming a simplistic decay model
    data_locality_score[key] *= DATA_LOCALITY_DECAY
    data_locality_score[key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, marks the write status as clean, and calculates an initial data locality score based on the insertion context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 1
    last_access_time[key] = cache_snapshot.access_count
    write_status[key] = False  # Initialized as clean
    # Initializing data locality score
    data_locality_score[key] = 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata for the evicted entry and adjusts the data locality scores of remaining entries if the evicted entry influenced their locality context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in access_frequency:
        del access_frequency[key]
    if key in last_access_time:
        del last_access_time[key]
    if key in write_status:
        del write_status[key]
    if key in data_locality_score:
        del data_locality_score[key]
    # Adjust data locality scores of remaining entries, if necessary; currently no-op