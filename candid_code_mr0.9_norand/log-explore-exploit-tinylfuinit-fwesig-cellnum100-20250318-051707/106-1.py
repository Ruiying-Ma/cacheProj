# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
MEMORY_PAGE_SIZE = 4096
INITIAL_ANOMALY_SCORE = 1.0
INITIAL_ACCESS_LATENCY = 1.0
INITIAL_UPDATE_FREQUENCY = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, predicted future access time, anomaly scores, cache index, memory page size, access latency, update frequency, and priority score for each cached object. It also tracks overall cache usage patterns and trends.
metadata = {}

def calculate_priority_score(access_freq, last_access_time, predicted_future_access_time, anomaly_score):
    return access_freq - last_access_time + predicted_future_access_time - anomaly_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combined score derived from the lowest predicted future access time, highest anomaly score, lowest access frequency, and lowest priority score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata.get(key, None)
        if meta:
            score = calculate_priority_score(
                meta['access_freq'],
                meta['last_access_time'],
                meta['predicted_future_access_time'],
                meta['anomaly_score']
            )
            if score < min_score:
                min_score = score
                candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata.get(obj.key, {})
    meta['last_access_time'] = cache_snapshot.access_count
    meta['access_freq'] += 1
    meta['predicted_future_access_time'] = cache_snapshot.access_count + 10  # Placeholder prediction
    meta['anomaly_score'] *= 0.9  # Assume anomaly score decreases
    meta['access_latency'] = 1.0  # Placeholder for actual computation
    meta['update_frequency'] += 1
    meta['priority_score'] = calculate_priority_score(
        meta['access_freq'],
        meta['last_access_time'],
        meta['predicted_future_access_time'],
        meta['anomaly_score']
    )
    metadata[obj.key] = meta

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    meta = {
        'access_freq': 1,
        'last_access_time': cache_snapshot.access_count,
        'predicted_future_access_time': cache_snapshot.access_count + 10,  # Placeholder prediction
        'anomaly_score': INITIAL_ANOMALY_SCORE,
        'cache_index': len(cache_snapshot.cache) - 1,
        'memory_page_size': MEMORY_PAGE_SIZE,
        'access_latency': INITIAL_ACCESS_LATENCY,
        'update_frequency': INITIAL_UPDATE_FREQUENCY,
        'priority_score': calculate_priority_score(1, cache_snapshot.access_count, cache_snapshot.access_count + 10, INITIAL_ANOMALY_SCORE)
    }
    metadata[obj.key] = meta

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in metadata:
        del metadata[evicted_obj.key]
    
    # Update overall cache usage patterns and trends
    total_access_freq = sum(meta['access_freq'] for meta in metadata.values())
    avg_access_freq = total_access_freq / len(metadata) if metadata else 0

    for key, meta in metadata.items():
        meta['anomaly_score'] = abs(meta['access_freq'] - avg_access_freq) / avg_access_freq if avg_access_freq else 0
        meta['priority_score'] = calculate_priority_score(
            meta['access_freq'],
            meta['last_access_time'],
            meta['predicted_future_access_time'],
            meta['anomaly_score']
        )
        metadata[key] = meta