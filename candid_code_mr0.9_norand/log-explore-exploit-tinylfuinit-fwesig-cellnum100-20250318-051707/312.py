# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import threading

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 1.0
WEIGHT_RECENCY = 1.0
WEIGHT_MEMORY_FOOTPRINT = 1.0
WEIGHT_THREAD_CONTENTION = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, memory footprint of cached objects, and thread access patterns.
access_frequency = {}
recency_timestamp = {}
memory_footprint = {}
thread_access_patterns = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, old recency, high memory footprint, and low thread contention.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (WEIGHT_ACCESS_FREQUENCY * access_frequency[key] +
                 WEIGHT_RECENCY * (cache_snapshot.access_count - recency_timestamp[key]) +
                 WEIGHT_MEMORY_FOOTPRINT * memory_footprint[key] +
                 WEIGHT_THREAD_CONTENTION * len(thread_access_patterns[key]))
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the recency timestamp, and records the thread that accessed the object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] += 1
    recency_timestamp[key] = cache_snapshot.access_count
    thread_id = threading.get_ident()
    if thread_id not in thread_access_patterns[key]:
        thread_access_patterns[key].append(thread_id)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency to 1, sets the recency timestamp to the current time, records its memory footprint, and logs the thread that performed the insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 1
    recency_timestamp[key] = cache_snapshot.access_count
    memory_footprint[key] = obj.size
    thread_access_patterns[key] = [threading.get_ident()]

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata for the evicted object and adjusts the overall cache memory footprint accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    del access_frequency[key]
    del recency_timestamp[key]
    del memory_footprint[key]
    del thread_access_patterns[key]