# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below

# Weight factors for composite score computation. These can be tuned.
WEIGHT_FREQ = 1
WEIGHT_LAST_ACCESS_TIME = 1
WEIGHT_LOCALITY_SCORE = 1
WEIGHT_RECENCY = 1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, write status, data locality score, and recency for each cache entry.
metadata = {
    'access_frequency': defaultdict(int),
    'last_access_time': {},
    'write_status': {},
    'data_locality_score': defaultdict(float),
    'recency': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score derived from the least frequently accessed, least recently used, lowest data locality score, and least recent recency, with a preference for clean entries to minimize write-backs.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        composite_score = (WEIGHT_FREQ * metadata['access_frequency'][key] +
                           WEIGHT_LAST_ACCESS_TIME * (cache_snapshot.access_count - metadata['last_access_time'][key]) +
                           WEIGHT_LOCALITY_SCORE * metadata['data_locality_score'][key] +
                           WEIGHT_RECENCY * (cache_snapshot.access_count - metadata['recency'][key]))
        
        # Prefer clean entries
        if metadata['write_status'][key] == 'dirty':
            composite_score *= 2
        
        if composite_score < min_score:
            min_score = composite_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Immediately after a hit, the policy increments the access frequency, updates the last access time to the current time, recalculates the data locality score based on the access pattern, and updates the recency to the current timestamp.
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['data_locality_score'][key] = compute_data_locality_score(key)
    metadata['recency'][key] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    Immediately after inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, marks the write status as clean, calculates an initial data locality score based on the insertion context, and sets the recency to the current timestamp.
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['write_status'][key] = 'clean'
    metadata['data_locality_score'][key] = compute_data_locality_score(key)
    metadata['recency'][key] = cache_snapshot.access_count

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Immediately after evicting a victim, the policy removes all associated metadata for the evicted entry and adjusts the data locality scores of remaining entries if the evicted entry influenced their locality context.
    '''
    key = evicted_obj.key
    del metadata['access_frequency'][key]
    del metadata['last_access_time'][key]
    del metadata['write_status'][key]
    del metadata['data_locality_score'][key]
    del metadata['recency'][key]
    
    for remaining_key in metadata['data_locality_score']:
        metadata['data_locality_score'][remaining_key] = compute_data_locality_score(remaining_key)

def compute_data_locality_score(obj_key):
    '''
    Dummy function to compute data locality score. This function should be replaced with the actual logic to compute the score.
    '''
    # Placeholder implementation: Adjust based on your specific context
    return len(obj_key)