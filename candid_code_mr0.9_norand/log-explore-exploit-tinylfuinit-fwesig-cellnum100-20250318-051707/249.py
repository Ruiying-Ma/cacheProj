# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import logging

# Put tunable constant parameters below
ACCESS_FREQUENCY_WEIGHT = 0.4
LAST_ACCESS_TIME_WEIGHT = 0.3
ERROR_COUNT_WEIGHT = 0.2
STATE_PERSISTENCE_WEIGHT = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, error count, and state persistence flags for each cached object.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, old last access time, high error count, and low state persistence priority.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata[key]['access_frequency']
        last_access_time = metadata[key]['last_access_time']
        error_count = metadata[key]['error_count']
        state_persistence = metadata[key]['state_persistence']
        
        score = (ACCESS_FREQUENCY_WEIGHT * access_frequency +
                 LAST_ACCESS_TIME_WEIGHT * (cache_snapshot.access_count - last_access_time) +
                 ERROR_COUNT_WEIGHT * error_count +
                 STATE_PERSISTENCE_WEIGHT * (1 - state_persistence))
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the last access time to the current time, resets the error count if applicable, and checks the state persistence flag for any necessary updates.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['access_frequency'] += 1
    metadata[key]['last_access_time'] = cache_snapshot.access_count
    metadata[key]['error_count'] = 0  # Reset error count if applicable
    # State persistence flag update logic can be added here if needed

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, initializes the error count to 0, and sets the state persistence flag based on the object's importance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'access_frequency': 1,
        'last_access_time': cache_snapshot.access_count,
        'error_count': 0,
        'state_persistence': 1  # Assuming importance is high initially
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata for the evicted object and may log the eviction event for performance tuning and error detection purposes.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    logging.info(f"Evicted object with key: {evicted_key}")