# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_LATENCY_IMPACT_SCORE = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, write-back status, and latency impact score for each cache entry.
metadata = {
    'access_frequency': {},  # key -> access frequency
    'last_access_timestamp': {},  # key -> last access timestamp
    'write_back_status': {},  # key -> write-back status (clean/dirty)
    'latency_impact_score': {}  # key -> latency impact score
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score derived from the least frequently accessed, oldest timestamp, write-back necessity, and highest latency impact, prioritizing entries with the lowest composite score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_composite_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_freq = metadata['access_frequency'].get(key, 0)
        last_access = metadata['last_access_timestamp'].get(key, 0)
        write_back = metadata['write_back_status'].get(key, 'clean')
        latency_impact = metadata['latency_impact_score'].get(key, 0)
        
        composite_score = (access_freq * 0.25) + (last_access * 0.25) + (1 if write_back == 'dirty' else 0 * 0.25) + (latency_impact * 0.25)
        
        if composite_score < min_composite_score:
            min_composite_score = composite_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access timestamp to the current time, and recalculates the latency impact score based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['latency_impact_score'][key] = calculate_latency_impact_score(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, marks the write-back status as clean, and assigns an initial latency impact score based on the object's expected access latency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['write_back_status'][key] = 'clean'
    metadata['latency_impact_score'][key] = INITIAL_LATENCY_IMPACT_SCORE

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy removes all associated metadata for the evicted entry and adjusts the latency impact scores of remaining entries to reflect the change in cache composition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_timestamp'][evicted_key]
    del metadata['write_back_status'][evicted_key]
    del metadata['latency_impact_score'][evicted_key]
    
    for key in metadata['latency_impact_score']:
        metadata['latency_impact_score'][key] = calculate_latency_impact_score(key)

def calculate_latency_impact_score(key):
    '''
    This function calculates the latency impact score for a given key.
    - Args:
        - `key`: The key of the object for which the latency impact score is to be calculated.
    - Return:
        - `latency_impact_score`: The calculated latency impact score.
    '''
    # Placeholder for actual latency impact score calculation logic
    return metadata['access_frequency'].get(key, 0) * 0.5 + metadata['last_access_timestamp'].get(key, 0) * 0.5