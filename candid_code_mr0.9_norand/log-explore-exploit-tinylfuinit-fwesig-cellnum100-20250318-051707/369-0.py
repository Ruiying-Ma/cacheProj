# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
predicted_access_factor = 0.5
bias_correction_factor = 0.3

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, and a statistical model predicting future access patterns. It also keeps track of feature-engineered attributes such as temporal access trends and user-specific biases.
metadata = {
    "access_time": collections.defaultdict(int),
    "access_freq": collections.defaultdict(int),
    "predicted_access": collections.defaultdict(float),
    "bias_correction": collections.defaultdict(float)
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by combining statistical predictions with real-time access patterns. It prioritizes objects with low predicted future access probability, adjusted for any detected biases in access frequency and recency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (predicted_access_factor * metadata["predicted_access"][key] + 
                 bias_correction_factor * metadata["bias_correction"][key] + 
                 (1 - predicted_access_factor - bias_correction_factor) * (cache_snapshot.access_count - metadata["access_time"][key]))
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and recency metadata for the accessed object. It also refines the statistical model using the new access data and adjusts for any detected biases in the access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata["access_time"][obj.key] = cache_snapshot.access_count
    metadata["access_freq"][obj.key] += 1
    metadata["predicted_access"][obj.key] = (metadata["access_freq"][obj.key] /
            (cache_snapshot.size + 1))
    metadata["bias_correction"][obj.key] -= 0.01

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and recency metadata. It also updates the statistical model to incorporate the new object and adjusts for any biases detected in the initial access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata["access_time"][obj.key] = cache_snapshot.access_count
    metadata["access_freq"][obj.key] = 1
    metadata["predicted_access"][obj.key] = 1 / (cache_snapshot.size + 1)
    metadata["bias_correction"][obj.key] = 0

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata and updates the statistical model to reflect the change in the cache composition. It also recalibrates any bias corrections based on the new set of cached objects.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in metadata["access_time"]:
        del metadata["access_time"][evicted_obj.key]
        del metadata["access_freq"][evicted_obj.key]
        del metadata["predicted_access"][evicted_obj.key]
        del metadata["bias_correction"][evicted_obj.key]

    for key in metadata["bias_correction"]:
        metadata["bias_correction"][key] += 0.01