# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_ACCESS_COUNT = 1
WEIGHT_LAST_ACCESS_TIME = 1
WEIGHT_WRITE_BACK_STATUS = 5 
WEIGHT_PIPELINE_DEPTH_IMPACT = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, write-back status, and pipeline depth impact for each cache line.
cache_metadata = {
    # 'key': {'access_frequency': 0, 'last_access_time': 0, 'write_back_status': 'clean', 'pipeline_depth_impact': 0}
}


def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining least frequently accessed, oldest access time, write-back status (preferring clean lines), and minimal impact on pipeline depth.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_score = float('inf')
    
    for key, cache_obj in cache_snapshot.cache.items():
        metadata = cache_metadata[key]
        score = (metadata['access_frequency'] * WEIGHT_ACCESS_COUNT +
                 (cache_snapshot.access_count - metadata['last_access_time']) * WEIGHT_LAST_ACCESS_TIME +
                 (WEIGHT_WRITE_BACK_STATUS if metadata['write_back_status'] == 'dirty' else 0) +
                 metadata['pipeline_depth_impact'] * WEIGHT_PIPELINE_DEPTH_IMPACT)
        
        if score < lowest_score:
            lowest_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the last access time to the current time, and recalculates the pipeline depth impact for the accessed cache line.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata = cache_metadata[obj.key]
    metadata['access_frequency'] += 1
    metadata['last_access_time'] = cache_snapshot.access_count
    # Recalculate the pipeline depth impact as needed (assuming it's a constant impact in this example):
    metadata['pipeline_depth_impact'] = 1 # Minimal example, recalculated or adjusted as needed in a real implementation.

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, marks the write-back status as clean, and calculates the initial pipeline depth impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    cache_metadata[obj.key] = {
        'access_frequency': 1,
        'last_access_time': cache_snapshot.access_count,
        'write_back_status': 'clean',
        'pipeline_depth_impact': 1  # Initial pipeline depth impact.
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all metadata associated with the evicted cache line and adjusts the pipeline depth impact for remaining cache lines if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in cache_metadata:
        del cache_metadata[evicted_obj.key]
    # Adjust pipeline depth impact for remaining cache lines if necessary. This is a minimal example, in practice this may need more sophisticated calculation.
    for metadata in cache_metadata.values():
        metadata['pipeline_depth_impact'] = max(0, metadata['pipeline_depth_impact'] - 1)