# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict, deque
import heapq
import time

# Put tunable constant parameters below
INITIAL_LATENCY_IMPACT = 0.5
WRITE_BACK_STATUS_CLEAN = False
WRITE_BACK_STATUS_DIRTY = True

# Put the metadata specifically maintained by the policy below. The policy maintains a Hash Map for quick access, a Binary Tree for access frequencies, a Linked List for order of access, an Array for cache data, access frequency, last access timestamp, write-back status, latency impact score, hit ratio, cache residency time, and access frequency patterns.
cache_metadata = {
    'hash_map': {},                   # Hash Map for quick access based on object key
    'freq_tree': defaultdict(set),    # Binary Tree for access frequencies
    'access_list': deque(),           # Linked List for order of access (key-based)
    'array': [],                      # Array for cache data
    'access_freq': {},                # Access frequency of objects
    'last_access_time': {},           # Last access time of objects
    'write_back_status': {},          # Write-back status of objects
    'latency_impact': {},             # Latency impact scores
    'hit_ratio': {},                  # Hit ratio of objects
    'residency_time': {},             # Residency time of objects in cache
    'access_freq_pattern': defaultdict(list),  # Access frequency patterns
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score derived from the least frequently accessed, oldest timestamp, write-back necessity, highest latency impact, low hit ratio, long residency time, and infrequent access patterns. If there are multiple candidates, it uses the Binary Tree to select the least frequently accessed item and the Linked List to select the oldest one among them.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Calculating composite scores
    scores = []

    for o_key, o in cache_snapshot.cache.items():
        freq = cache_metadata['access_freq'][o_key]
        last_access = cache_metadata['last_access_time'][o_key]
        write_back = cache_metadata['write_back_status'][o_key]
        latency_impact = cache_metadata['latency_impact'][o_key]
        hit_ratio = cache_metadata['hit_ratio'][o_key]
        residency = time.time() - cache_metadata['residency_time'][o_key]
        access_pattern = len(cache_metadata['access_freq_pattern'][o_key])

        composite_score = (0.25 / freq) + (0.25 * last_access) + (0.1 * write_back) - (0.2 * latency_impact) - (0.1 * hit_ratio) + (0.05 * residency) + (0.05 / access_pattern)
        scores.append((composite_score, o_key))
    
    # Select the object with the least composite score
    if scores:
        candid_obj_key = max(scores)[1]
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency in the Binary Tree, moves the accessed item to the front of the Linked List, updates the hit ratio by incrementing the hit count, resets the residency time, updates the access frequency pattern, refreshes the last access timestamp to the current time, recalculates the latency impact score based on recent access patterns, and updates the corresponding entry in the Hash Map.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    o_key = obj.key
    current_time = cache_snapshot.access_count
    
    # Update access frequency
    if o_key in cache_metadata['access_freq']:
        cache_metadata['freq_tree'][cache_metadata['access_freq'][o_key]].remove(o_key)
        cache_metadata['access_freq'][o_key] += 1
        cache_metadata['freq_tree'][cache_metadata['access_freq'][o_key]].add(o_key)
    else:
        cache_metadata['access_freq'][o_key] = 1
        cache_metadata['freq_tree'][1].add(o_key)

    # Move to front of access list
    cache_metadata['access_list'].remove(o_key)
    cache_metadata['access_list'].appendleft(o_key)

    # Update metadata
    cache_metadata['hit_ratio'][o_key] = (cache_snapshot.hit_count + 1) / (cache_snapshot.access_count + 1)
    cache_metadata['residency_time'][o_key] = current_time
    cache_metadata['last_access_time'][o_key] = current_time
    cache_metadata['latency_impact'][o_key] += 1  # Simplified for example
    cache_metadata['access_freq_pattern'][o_key].append(cache_metadata['access_freq'][o_key])

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy adds the object to the Hash Map, inserts it into the Binary Tree with an initial frequency count, appends it to the end of the Linked List, places it in the next available slot in the Array, initializes the access frequency to 1, sets the last access timestamp to the current time, marks the write-back status as clean, assigns an initial latency impact score based on the object's expected access latency, initializes the hit ratio to zero, sets the residency time to the current time, and starts tracking the access frequency pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    o_key = obj.key
    current_time = cache_snapshot.access_count

    # Add to Hash Map
    cache_metadata['hash_map'][o_key] = obj

    # Insert into Binary Tree
    cache_metadata['freq_tree'][1].add(o_key)

    # Append to end of Linked List
    cache_metadata['access_list'].append(o_key)

    # Place in next available slot in Array
    cache_metadata['array'].append(obj)

    # Initialize metadata
    cache_metadata['access_freq'][o_key] = 1
    cache_metadata['last_access_time'][o_key] = current_time
    cache_metadata['write_back_status'][o_key] = WRITE_BACK_STATUS_CLEAN
    cache_metadata['latency_impact'][o_key] = INITIAL_LATENCY_IMPACT
    cache_metadata['hit_ratio'][o_key] = 0
    cache_metadata['residency_time'][o_key] = current_time
    cache_metadata['access_freq_pattern'][o_key] = [1]

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy removes the object from the Hash Map, deletes its node from the Binary Tree, removes it from the Linked List, clears its slot in the Array, removes all metadata associated with the evicted cache line, adjusts the latency impact scores of remaining entries to reflect the change in cache composition, and recalculate the replacement scores for the remaining cache lines.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''

    e_key = evicted_obj.key

    # Remove from Hash Map
    del cache_metadata['hash_map'][e_key]

    # Delete from Binary Tree
    freq = cache_metadata['access_freq'][e_key]
    cache_metadata['freq_tree'][freq].remove(e_key)
    
    # Remove from Linked List
    cache_metadata['access_list'].remove(e_key)

    # Clear from Array
    cache_metadata['array'].remove(evicted_obj)

    # Remove all metadata
    del cache_metadata['access_freq'][e_key]
    del cache_metadata['last_access_time'][e_key]
    del cache_metadata['write_back_status'][e_key]
    del cache_metadata['latency_impact'][e_key]
    del cache_metadata['hit_ratio'][e_key]
    del cache_metadata['residency_time'][e_key]
    del cache_metadata['access_freq_pattern'][e_key]

    # Adjust latency impact scores and recalculate replacement scores
    for key in cache_snapshot.cache.keys():
        cache_metadata['latency_impact'][key] -= 0.1  # Simplified for example