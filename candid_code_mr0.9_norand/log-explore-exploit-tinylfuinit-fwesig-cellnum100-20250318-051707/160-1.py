# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import heapq
import time

# Put tunable constant parameters below
DEFAULT_DECAY_FACTOR = 0.9
DEFAULT_INITIAL_FREQ = 1

# Put the metadata specifically maintained by the policy below. The policy maintains a priority queue where each cache entry has a priority score, a timestamp of the last access, and an exponential decay factor. The priority score is calculated based on the frequency of access and the time since the last access, adjusted by the decay factor.
priority_queue = []  # Min-heap by priority score
meta_data = {}  # Dictionary to store metadata for each cache entry, indexed by object key

class EntryMetadata:
    def __init__(self, key, timestamp, freq, priority):
        self.key = key
        self.timestamp = timestamp
        self.freq = freq
        self.priority = priority

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the cache entry with the lowest priority score from the priority queue. This ensures that entries that are less frequently accessed and have older timestamps are more likely to be evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    # Your code below
    candid_obj_key = None
    if priority_queue:
        # The element with the lowest priority score is at index 0
        candid_obj_key = priority_queue[0][1]
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the timestamp of the accessed entry to the current time, recalculates its priority score by increasing the frequency count, and applies the exponential decay factor to adjust the score in the priority queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    current_time = cache_snapshot.access_count
    obj_key = obj.key
    if obj_key in meta_data:
        entry = meta_data[obj_key]
        entry.freq += 1
        time_diff = current_time - entry.timestamp
        entry.timestamp = current_time
        entry.priority = (entry.freq ** 2) * (DEFAULT_DECAY_FACTOR ** time_diff)
        
        # Rebuild the priority queue
        _rebuild_priority_queue()

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object into the cache, the policy assigns an initial priority score based on the current time and a default frequency count, logs the timestamp, and sets the exponential decay factor. The new entry is then added to the priority queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    current_time = cache_snapshot.access_count
    priority_score = (DEFAULT_INITIAL_FREQ ** 2) * (DEFAULT_DECAY_FACTOR ** 0)
    metadata = EntryMetadata(obj.key, current_time, DEFAULT_INITIAL_FREQ, priority_score)
    meta_data[obj.key] = metadata
    heapq.heappush(priority_queue, (priority_score, obj.key))  # Push to priority queue

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the entry from the priority queue, and recalculates the priority scores of remaining entries to ensure the queue remains correctly ordered. The timestamps and decay factors of remaining entries are also adjusted if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    if evicted_key in meta_data:
        del meta_data[evicted_key]
        _rebuild_priority_queue()

def _rebuild_priority_queue():
    global priority_queue
    priority_queue = [(meta.priority, meta.key) for meta in meta_data.values()]
    heapq.heapify(priority_queue)