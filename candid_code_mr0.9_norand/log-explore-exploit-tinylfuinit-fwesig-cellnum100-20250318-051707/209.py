# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
LATENCY_IMPACT_BASE = 10
REPLICATION_FACTOR_BASE = 1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access timestamp, write-back status, latency impact score, replication factor, and load distribution across cache nodes.
access_frequency = {}
last_access_timestamp = {}
write_back_status = {}
latency_impact_score = {}
replication_factor = {}
load_distribution = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite weighted score derived from the least frequently accessed, oldest timestamp, write-back necessity, highest latency impact, and lowest replication factor, ensuring balanced load across cache nodes.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (access_frequency[key] * 0.2 +
                 (cache_snapshot.access_count - last_access_timestamp[key]) * 0.2 +
                 write_back_status[key] * 0.2 +
                 latency_impact_score[key] * 0.2 +
                 replication_factor[key] * 0.2)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the last access timestamp to the current time, recalculates the latency impact score based on recent access patterns, and adjusts the load distribution metadata to reflect the current state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] += 1
    last_access_timestamp[key] = cache_snapshot.access_count
    latency_impact_score[key] = LATENCY_IMPACT_BASE / access_frequency[key]
    # Adjust load distribution if necessary (not specified how, so assuming a placeholder)
    load_distribution[key] = load_distribution.get(key, 0) + 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, marks the write-back status as clean, assigns an initial latency impact score based on the object's expected access latency, assigns an initial replication factor, and updates the load distribution to include the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 1
    last_access_timestamp[key] = cache_snapshot.access_count
    write_back_status[key] = 0  # Assuming 0 means clean
    latency_impact_score[key] = LATENCY_IMPACT_BASE
    replication_factor[key] = REPLICATION_FACTOR_BASE
    load_distribution[key] = 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy removes all associated metadata for the evicted entry, adjusts the latency impact scores of remaining entries to reflect the change in cache composition, recalculates the load distribution to ensure balance, and adjusts the replication factors of remaining objects if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del access_frequency[evicted_key]
    del last_access_timestamp[evicted_key]
    del write_back_status[evicted_key]
    del latency_impact_score[evicted_key]
    del replication_factor[evicted_key]
    del load_distribution[evicted_key]
    
    # Adjust latency impact scores and load distribution for remaining entries
    for key in cache_snapshot.cache:
        latency_impact_score[key] = LATENCY_IMPACT_BASE / access_frequency[key]
        load_distribution[key] = load_distribution.get(key, 0) + 1