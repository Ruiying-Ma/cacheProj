# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ACCESS_FREQ_WEIGHT = 1.0
RECENCY_WEIGHT = 0.5
MEMORY_USAGE_WEIGHT = 1.5
PREFETCH_SUCCESS_WEIGHT = 1.0
CONTEXT_IRRELEVANCE_WEIGHT = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency, memory usage patterns, prefetching success rates, and context tags for each cached object.
metadata = {
    'access_frequency': {},  # {obj.key: access_count}
    'recency': {},           # {obj.key: last_access_time}
    'memory_usage_patterns': {},  # {obj.key: size}
    'prefetch_success_rates': {}, # {obj.key: prefetch_success_rate (0 or 1)}
    'context_tags': {},  # {obj.key: context_relevance_score}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, low recency, high memory usage, low prefetching success, and context irrelevance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for obj_key, cached_obj in cache_snapshot.cache.items():
        # Calculate the weighted score
        access_freq = metadata['access_frequency'].get(obj_key, 0)
        recency = metadata['recency'].get(obj_key, 0)
        memory_usage = metadata['memory_usage_patterns'].get(obj_key, cached_obj.size)
        prefetch_success = metadata['prefetch_success_rates'].get(obj_key, 0)
        context_tag = metadata['context_tags'].get(obj_key, 0)
        
        score = (ACCESS_FREQ_WEIGHT * (1 / (1 + access_freq)) +
                 RECENCY_WEIGHT * (cache_snapshot.access_count - recency) +
                 MEMORY_USAGE_WEIGHT * memory_usage +
                 PREFETCH_SUCCESS_WEIGHT * (1 - prefetch_success) +
                 CONTEXT_IRRELEVANCE_WEIGHT * (1 / (1 + context_tag)))
                 
        if score < min_score:
            min_score = score
            candid_obj_key = obj_key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and recency metadata, increases the prefetching success rate if applicable, and re-evaluates the context relevance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    
    # Update access frequency and recency
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['recency'][key] = cache_snapshot.access_count
    
    # Assume prefetching success is binary and determined externally
    # Here we assume a hit indicates a successful prefetch if applicable
    metadata['prefetch_success_rates'][key] = 1
    
    # Re-evaluate context relevance
    # Assuming context relevance score is a computed value based on given system state
    metadata['context_tags'][key] = evaluate_context_relevance(cache_snapshot, obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency and recency, sets initial memory usage patterns, starts tracking prefetching success, and assigns context tags based on current system state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    
    # Initialize the access frequency and recency
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    
    # Set memory usage patterns
    metadata['memory_usage_patterns'][key] = obj.size
    
    # Start tracking prefetching success
    metadata['prefetch_success_rates'][key] = 0
    
    # Assign context tags based on current system state
    metadata['context_tags'][key] = evaluate_context_relevance(cache_snapshot, obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata and adjusts overall memory profiling to reflect the change in cache composition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    
    # Remove all associated metadata
    if key in metadata['access_frequency']:
        del metadata['access_frequency'][key]
    if key in metadata['recency']:
        del metadata['recency'][key]
    if key in metadata['memory_usage_patterns']:
        del metadata['memory_usage_patterns'][key]
    if key in metadata['prefetch_success_rates']:
        del metadata['prefetch_success_rates'][key]
    if key in metadata['context_tags']:
        del metadata['context_tags'][key]
    
    # Adjust overall memory profiling
    adjust_memory_profiling_post_eviction(cache_snapshot, obj, evicted_obj)

def evaluate_context_relevance(cache_snapshot, obj):
    '''
    Helper function to evaluate context relevance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to evaluate.
    - Return:
        - `context_relevance_score`: A score representing the context relevance.
    '''
    # Assume some arbitrary logic to compute context relevance
    # Here it's a placeholder representing any deterministic calculation.
    return 1

def adjust_memory_profiling_post_eviction(cache_snapshot, obj, evicted_obj):
    '''
    Helper function to adjust memory profiling after an eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted.
    - Return: `None`
    '''
    # Placeholder for actual implementation
    pass