# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.25  # Weight for access frequency
BETA = 0.25   # Weight for recency
GAMMA = 0.25  # Weight for memory footprint
DELTA = 0.25  # Weight for thread contention

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, memory footprint of cached objects, and thread access patterns.
metadata = {
    'access_frequency': {},  # obj.key -> int
    'recency': {},  # obj.key -> int
    'memory_footprint': {},  # obj.key -> int
    'thread_access': {}  # obj.key -> set of threads
}

import threading

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, old recency, high memory footprint, and low thread contention.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_keys = None
    # Your code below
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_freq = metadata['access_frequency'][key]
        recency = metadata['recency'][key]
        memory_footprint = metadata['memory_footprint'][key]
        thread_contention = len(metadata['thread_access'][key])
        
        score = (ALPHA * access_freq) + \
                (BETA * (cache_snapshot.access_count - recency)) + \
                (GAMMA * memory_footprint) + \
                (DELTA * thread_contention)
        
        if score < min_score:
            min_score = score
            candid_obj_keys = key
    
    return candid_obj_keys

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the recency timestamp, and records the thread that accessed the object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    thread_id = threading.get_ident()
    if thread_id not in metadata['thread_access'][key]:
        metadata['thread_access'][key].add(thread_id)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency to 1, sets the recency timestamp to the current time, records its memory footprint, and logs the thread that performed the insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['memory_footprint'][key] = obj.size
    metadata['thread_access'][key] = {threading.get_ident()}

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata for the evicted object and adjusts the overall cache memory footprint accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    key = evicted_obj.key
    if key in metadata['access_frequency']:
        del metadata['access_frequency'][key]
    if key in metadata['recency']:
        del metadata['recency'][key]
    if key in metadata['memory_footprint']:
        del metadata['memory_footprint'][key]
    if key in metadata['thread_access']:
        del metadata['thread_access'][key]