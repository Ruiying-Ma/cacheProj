# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
FETCH_COST_DECREASE_FACTOR = 0.9
LATENCY_MULTIPLIER = 1.1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, fetch cost score, write-back status, latency impact score, and a circular pointer for each cache line.
metadata = collections.defaultdict(lambda: {
    "access_frequency": 0,
    "recency_of_access": 0,
    "fetch_cost_score": float("inf"),
    "write_back_status": False,
    "latency_impact_score": 0.0,
})

circular_pointer = 0

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy uses the circular pointer to traverse the cache and calculates a composite score for each entry based on access frequency, recency of access, fetch cost score, write-back necessity, and latency impact. It evicts the entry with the lowest composite score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    global circular_pointer
    min_composite_score = float('inf')
    candid_obj_key = None

    cache_keys = list(cache_snapshot.cache.keys())
    for i in range(len(cache_keys)):
        key = cache_keys[(circular_pointer + i) % len(cache_keys)]
        meta = metadata[key]
        composite_score = (
            meta["access_frequency"] +
            (cache_snapshot.access_count - meta["recency_of_access"]) +
            meta["fetch_cost_score"] +
            (1 if meta["write_back_status"] else 0) +
            meta["latency_impact_score"]
        )
        
        if composite_score < min_composite_score:
            min_composite_score = composite_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the recency of access to the current time, slightly decreases the fetch cost score, recalculates the latency impact score based on recent access patterns, and keeps the pointer at its current position.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta["access_frequency"] += 1
    meta["recency_of_access"] = cache_snapshot.access_count
    meta["fetch_cost_score"] *= FETCH_COST_DECREASE_FACTOR
    meta["latency_impact_score"] = (
        meta["latency_impact_score"] * LATENCY_MULTIPLIER
    )

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the recency of access to the current time, calculates the fetch cost score based on the estimated miss penalty, marks the write-back status as clean, assigns an initial latency impact score based on expected access latency, and places the object at the current pointer location without moving the pointer.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    global circular_pointer
    meta = metadata[obj.key]
    meta["access_frequency"] = 1
    meta["recency_of_access"] = cache_snapshot.access_count
    meta["fetch_cost_score"] = obj.size  # Example measure of the cost
    meta["write_back_status"] = False
    meta["latency_impact_score"] = obj.size

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy removes all associated metadata for the evicted entry, adjusts the latency impact scores of remaining entries to reflect the change in cache composition, and keeps the pointer at its current position.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    global circular_pointer
    del metadata[evicted_obj.key]
    total_size = cache_snapshot.capacity - evicted_obj.size
    if total_size > 0:  # Prevent division by zero
        for key in cache_snapshot.cache.keys():
            metadata[key]["latency_impact_score"] *= (
                cache_snapshot.cache[key].size / total_size
            )