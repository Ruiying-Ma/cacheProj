# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import deque

# Put tunable constant parameters below
SQ_CAPACITY = 10
MQ_CAPACITY = 20
K = 3
L_CAPACITY = 5
GQ_CAPACITY = 30

# Put the metadata specifically maintained by the policy below. The policy maintains two FIFO queues (SQ and MQ), k LRU sub-queues (L1, L2,..., Lk), and a ghost FIFO queue (GQ) outside the cache. It tracks the access frequency and recency timestamp of each cached object.
SQ = deque()
MQ = deque()
L = [deque() for _ in range(K)]
GQ = deque()
frequency = {}
recency = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    If SQ exceeds its capacity, move objects from SQ to MQ until an object with frequency less than 2 is found or MQ is full. If MQ is full, reduce the frequency of objects in MQ cyclicly until an object with zero frequency is found and evict it. If SQ is not full, evict the object at the front of the FIFO queue. If the FIFO queue is empty, evict the least-recently-used object from the non-empty LRU queue with the smallest subscript.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    if len(SQ) > SQ_CAPACITY:
        while len(SQ) > SQ_CAPACITY:
            moved_obj = SQ.popleft()
            if frequency[moved_obj.key] < 2 or len(MQ) >= MQ_CAPACITY:
                break
            MQ.append(moved_obj)
    
    if len(MQ) >= MQ_CAPACITY:
        while True:
            for mq_obj in MQ:
                frequency[mq_obj.key] -= 1
                if frequency[mq_obj.key] == 0:
                    candid_obj_key = mq_obj.key
                    MQ.remove(mq_obj)
                    return candid_obj_key
    
    if len(SQ) > 0:
        candid_obj_key = SQ.popleft().key
    else:
        for i in range(K):
            if len(L[i]) > 0:
                candid_obj_key = L[i].popleft().key
                break
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Increase the hit object's frequency by 1 if it is less than 3. Set its recency as the current timestamp. If it is in Li, move it to the most-recently-used end of the queue with subscript j = min(i+1, k). If Lj is full, flush the least-recently-used object in Lj to the most-recently-used end of Li.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    if frequency[obj.key] < 3:
        frequency[obj.key] += 1
    recency[obj.key] = cache_snapshot.access_count
    
    for i in range(K):
        if obj in L[i]:
            L[i].remove(obj)
            j = min(i + 1, K - 1)
            if len(L[j]) >= L_CAPACITY:
                flushed_obj = L[j].popleft()
                L[i].append(flushed_obj)
            L[j].append(obj)
            break

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    Set the inserted object's frequency as 1 and its recency as the current timestamp. Put it at the rear of SQ and the most-recently-used end of L1. If L1 is full, flush the least-recently-used object in L1 to the most-recently-used end of the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    frequency[obj.key] = 1
    recency[obj.key] = cache_snapshot.access_count
    SQ.append(obj)
    if len(L[0]) >= L_CAPACITY:
        flushed_obj = L[0].popleft()
        SQ.append(flushed_obj)
    L[0].append(obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Put the evicted object at the rear of GQ. Remove it from the queue it resides in. If evicted from the FIFO queue, no further action is needed. If evicted from an LRU queue, ensure the FIFO queue is updated accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    GQ.append(evicted_obj)
    if evicted_obj in SQ:
        SQ.remove(evicted_obj)
    elif evicted_obj in MQ:
        MQ.remove(evicted_obj)
    else:
        for i in range(K):
            if evicted_obj in L[i]:
                L[i].remove(evicted_obj)
                break