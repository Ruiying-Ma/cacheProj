# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below
LATENCY_IMPACT_BASE = 10

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, access recency, load distribution across cache sets, and latency impact scores for each cached object.
access_frequency = defaultdict(int)
access_recency = {}
latency_impact_scores = {}
load_distribution = defaultdict(int)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by considering objects with the lowest combined score of access frequency, recency, and latency impact, while ensuring balanced load distribution across cache sets.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (access_frequency[key] + 
                 (cache_snapshot.access_count - access_recency[key]) + 
                 latency_impact_scores[key])
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and recency for the accessed object, recalculates its latency impact score, and adjusts the load distribution metadata to reflect the current state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] += 1
    access_recency[key] = cache_snapshot.access_count
    latency_impact_scores[key] = LATENCY_IMPACT_BASE / obj.size
    load_distribution[key] = cache_snapshot.size / cache_snapshot.capacity

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and recency, assigns an initial latency impact score based on object characteristics, and updates the load distribution metadata to account for the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 1
    access_recency[key] = cache_snapshot.access_count
    latency_impact_scores[key] = LATENCY_IMPACT_BASE / obj.size
    load_distribution[key] = cache_snapshot.size / cache_snapshot.capacity

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes its metadata, recalculates the load distribution across cache sets, and adjusts the latency impact scores for remaining objects to reflect the new cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del access_frequency[evicted_key]
    del access_recency[evicted_key]
    del latency_impact_scores[evicted_key]
    del load_distribution[evicted_key]
    
    for key in cache_snapshot.cache:
        load_distribution[key] = cache_snapshot.size / cache_snapshot.capacity
        latency_impact_scores[key] = LATENCY_IMPACT_BASE / cache_snapshot.cache[key].size