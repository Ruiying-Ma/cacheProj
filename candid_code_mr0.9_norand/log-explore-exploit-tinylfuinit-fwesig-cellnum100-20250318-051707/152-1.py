# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Import necessary modules
from collections import deque, defaultdict
import time

# Put tunable constant parameters below
INITIAL_LATENCY_SCORE = 1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access timestamp, write-back status, latency impact score, and recency for each cache entry. It also tracks the capacities and contents of two LRU queues (T1 and T2) and two FIFO ghost queues (B1 and B2).
metadata = {
    'access_frequency': defaultdict(int),
    'last_access_timestamp': {},
    'write_back_status': {},
    'latency_impact_score': defaultdict(lambda: INITIAL_LATENCY_SCORE),
    'recency': {},
    'T1': deque(),
    'T2': deque(),
    'B1': deque(),
    'B2': deque()
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score derived from the least frequently accessed, oldest timestamp, write-back necessity, highest latency impact, and recency, prioritizing entries with the lowest composite score. If T1 is not empty, the object at its least-recently-used end is evicted; otherwise, the object at T2's least-recently-used end is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None

    def score(ky):
        return (
            metadata['access_frequency'][ky],
            cache_snapshot.access_count - metadata['last_access_timestamp'][ky],
            metadata['write_back_status'][ky],
            metadata['latency_impact_score'][ky],
            cache_snapshot.access_count - metadata['recency'][ky]
        )

    # Check T1 and T2 queues
    if metadata['T1']:
        to_evict = sorted(metadata['T1'], key=score)[0]
    elif metadata['T2']:
        to_evict = sorted(metadata['T2'], key=score)[0]
    else:
        raise KeyError('No candidate for eviction')  # should never happen

    candid_obj_key = to_evict

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, refreshes the last access timestamp to the current time, recalculates the latency impact score based on recent access patterns, and updates the recency to the current timestamp. The hit object is moved to the most-recently-used end of T2.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['recency'][key] = cache_snapshot.access_count
    # Calculate the new latency impact score
    metadata['latency_impact_score'][key] = 1 / metadata['access_frequency'][key]

    # Move the object to the most-recently used end of T2
    if key in metadata['T1']:
        metadata['T1'].remove(key)
    if key not in metadata['T2']:
        metadata['T2'].append(key)
    else:
        metadata['T2'].remove(key)
        metadata['T2'].append(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, marks the write-back status as clean, assigns an initial latency impact score based on the object's expected access latency, and sets the recency to the current timestamp. If the object was in B1 or B2, it is placed at the most-recently-used end of T2; otherwise, it is placed at the most-recently-used end of T1.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['write_back_status'][key] = False
    metadata['latency_impact_score'][key] = INITIAL_LATENCY_SCORE
    metadata['recency'][key] = cache_snapshot.access_count
    
    if key in metadata['B1']:
        metadata['B1'].remove(key)
        metadata['T2'].append(key)
    elif key in metadata['B2']:
        metadata['B2'].remove(key)
        metadata['T2'].append(key)
    else:
        metadata['T1'].append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy removes all associated metadata for the evicted entry and adjusts the latency impact scores of remaining entries to reflect the change in cache composition. If the evicted object is from T1, it is moved to the rear of B1; if from T2, it is moved to the rear of B2. The recency is no longer tracked, and redundant objects are removed from the front of B1 or B2 if full.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    new_obj_key = obj.key

    # Remove metadata for the evicted entry
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_timestamp']:
        del metadata['last_access_timestamp'][evicted_key]
    if evicted_key in metadata['write_back_status']:
        del metadata['write_back_status'][evicted_key]
    if evicted_key in metadata['latency_impact_score']:
        del metadata['latency_impact_score'][evicted_key]
    if evicted_key in metadata['recency']:
        del metadata['recency'][evicted_key]

    # Move the evicted object to B1 or B2
    if evicted_key in metadata['T1']:
        metadata['T1'].remove(evicted_key)
        if len(metadata['B1']) >= cache_snapshot.capacity * 0.5:
            metadata['B1'].popleft()
        metadata['B1'].append(evicted_key)
    elif evicted_key in metadata['T2']:
        metadata['T2'].remove(evicted_key)
        if len(metadata['B2']) >= cache_snapshot.capacity * 0.5:
            metadata['B2'].popleft()
        metadata['B2'].append(evicted_key)
    
    # Adjust latency impact scores of remaining entries
    for key in metadata['latency_impact_score']:
        # Example adjustment logic
        metadata['latency_impact_score'][key] /= 1.1