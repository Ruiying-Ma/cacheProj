# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 1.0
WEIGHT_LAST_ACCESS_TIMESTAMP = 1.0
WEIGHT_MEMORY_FRAGMENTATION_SCORE = 1.0
WEIGHT_PARALLEL_ACCESS_COUNT = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, memory fragmentation score, and parallel access count for each cache entry.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'memory_fragmentation_score': {},
    'parallel_access_count': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, old access timestamp, high memory fragmentation score, and low parallel access count.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (
            WEIGHT_ACCESS_FREQUENCY * metadata['access_frequency'][key] +
            WEIGHT_LAST_ACCESS_TIMESTAMP * (cache_snapshot.access_count - metadata['last_access_timestamp'][key]) +
            WEIGHT_MEMORY_FRAGMENTATION_SCORE * metadata['memory_fragmentation_score'][key] +
            WEIGHT_PARALLEL_ACCESS_COUNT * metadata['parallel_access_count'][key]
        )
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the last access timestamp to the current time, recalculates the memory fragmentation score, and increments the parallel access count.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['memory_fragmentation_score'][key] = calculate_memory_fragmentation_score(cache_snapshot, obj)
    metadata['parallel_access_count'][key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, calculates the initial memory fragmentation score, and sets the parallel access count to 1.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['memory_fragmentation_score'][key] = calculate_memory_fragmentation_score(cache_snapshot, obj)
    metadata['parallel_access_count'][key] = 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the metadata associated with the evicted entry and recalculates the overall memory fragmentation score for the remaining entries.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_timestamp'][evicted_key]
    del metadata['memory_fragmentation_score'][evicted_key]
    del metadata['parallel_access_count'][evicted_key]
    
    for key in cache_snapshot.cache:
        metadata['memory_fragmentation_score'][key] = calculate_memory_fragmentation_score(cache_snapshot, cache_snapshot.cache[key])

def calculate_memory_fragmentation_score(cache_snapshot, obj):
    '''
    This function calculates the memory fragmentation score for a given object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object for which the memory fragmentation score is calculated.
    - Return:
        - `score`: The memory fragmentation score for the object.
    '''
    total_size = cache_snapshot.size
    if total_size == 0:
        return 0
    return obj.size / total_size