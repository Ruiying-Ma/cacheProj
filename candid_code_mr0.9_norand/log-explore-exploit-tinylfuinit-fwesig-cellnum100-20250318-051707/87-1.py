# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQ = 1.0
WEIGHT_TIMESTAMP = 1.0
WEIGHT_FRAG_SCORE = 1.0
WEIGHT_PARALLEL_COUNT = 1.0
WEIGHT_COMPOSITE_SCORE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access timestamp, memory fragmentation score, parallel access count, composite score, and an index for quick lookup.
class PolicyMetadata:
    def __init__(self):
        self.access_freq = {}
        self.last_access_timestamp = {}
        self.mem_frag_score = {}
        self.parallel_access_count = {}
        self.composite_score = {}
        self.index_lookup = {}
        self.sorted_list = []
        self.compaction_counter = 0

policy_metadata = PolicyMetadata()

def calculate_composite_score(key):
    freq_score = policy_metadata.access_freq[key] * WEIGHT_ACCESS_FREQ
    timestamp_score = (time.time() - policy_metadata.last_access_timestamp[key]) * WEIGHT_TIMESTAMP
    frag_score = policy_metadata.mem_frag_score[key] * WEIGHT_FRAG_SCORE
    parallel_score = policy_metadata.parallel_access_count[key] * WEIGHT_PARALLEL_COUNT
    composite_score = (freq_score + timestamp_score + frag_score + parallel_score) * WEIGHT_COMPOSITE_SCORE
    return composite_score

def update_sorted_list():
    policy_metadata.sorted_list.sort(key=lambda x: (policy_metadata.composite_score[x], -policy_metadata.index_lookup[x]))

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, old access timestamp, high memory fragmentation score, low parallel access count, and low composite score. If there are ties, it evicts the largest entry among them to maximize space recovery.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    max_size = 0
    min_score = float('inf')

    for key in cache_snapshot.cache.keys():
        current_score = calculate_composite_score(key)
        object_size = cache_snapshot.cache[key].size
        if current_score < min_score or (current_score == min_score and object_size > max_size):
            min_score = current_score
            max_size = object_size
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the last access timestamp to the current time, recalculates the memory fragmentation score, increments the parallel access count, updates the recency timestamp, recalculates the composite score, and re-sorts the list based on the new composite score. The index is updated to reflect any changes in positions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    policy_metadata.access_freq[key] += 1
    policy_metadata.last_access_timestamp[key] = cache_snapshot.access_count
    policy_metadata.parallel_access_count[key] += 1
    policy_metadata.composite_score[key] = calculate_composite_score(key)
    
    update_sorted_list()

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, calculates the initial memory fragmentation score, sets the parallel access count to 1, calculates the initial composite score, inserts it into the sorted list, updates the index for quick lookup, and increments the compaction counter if fragmentation is detected.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    policy_metadata.access_freq[key] = 1
    policy_metadata.last_access_timestamp[key] = cache_snapshot.access_count
    policy_metadata.mem_frag_score[key] = 0  # Initialize fragmentation score
    policy_metadata.parallel_access_count[key] = 1
    policy_metadata.composite_score[key] = calculate_composite_score(key)

    policy_metadata.sorted_list.append(key)
    policy_metadata.index_lookup[key] = len(policy_metadata.sorted_list) - 1
    update_sorted_list()
    policy_metadata.compaction_counter += 1  # Detect and increment for fragmentation

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the metadata associated with the evicted entry, recalculates the overall memory fragmentation score for the remaining entries, removes the entry from the sorted list, updates the index to remove the entry, and decrements the compaction counter if the eviction reduces fragmentation.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key

    del policy_metadata.access_freq[key]
    del policy_metadata.last_access_timestamp[key]
    del policy_metadata.mem_frag_score[key]
    del policy_metadata.parallel_access_count[key]
    del policy_metadata.composite_score[key]
    policy_metadata.sorted_list.remove(key)
    del policy_metadata.index_lookup[key]

    # Recalculate memory fragmentation score after removal
    for k in policy_metadata.mem_frag_score.keys():
        # Using a dummy recalculation strategy for fragmentation score
        policy_metadata.mem_frag_score[k] = 0  # Update this as needed

    update_sorted_list()
    policy_metadata.compaction_counter = max(0, policy_metadata.compaction_counter - 1)