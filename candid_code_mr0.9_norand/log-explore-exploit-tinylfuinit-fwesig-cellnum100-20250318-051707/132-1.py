# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
LFU_WEIGHT = 1.0
LRA_WEIGHT = 1.0
REPL_WEIGHT = 1.0
PRIO_WEIGHT = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, data replication status, and task priority level.
METADATA = {
    'access_frequency': {},
    'last_access_time': {},
    'replication_status': {},
    'task_priority': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining least frequently used, oldest access time, lowest replication necessity, and lowest task priority.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        frequency = METADATA['access_frequency'].get(key, 1)
        last_access = METADATA['last_access_time'].get(key, cache_snapshot.access_count)
        replication = METADATA['replication_status'].get(key, 0)
        priority = METADATA['task_priority'].get(key, 1)
        
        score = (LFU_WEIGHT * frequency +
                 LRA_WEIGHT * (cache_snapshot.access_count - last_access) +
                 REPL_WEIGHT * replication +
                 PRIO_WEIGHT * priority)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the last access time to the current time, and re-evaluates the task priority level based on the current system load.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    METADATA['access_frequency'][key] = METADATA['access_frequency'].get(key, 0) + 1
    METADATA['last_access_time'][key] = cache_snapshot.access_count
    METADATA['task_priority'][key] = compute_task_priority(cache_snapshot)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, determines the initial replication status, and assigns a task priority level based on the insertion context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    METADATA['access_frequency'][key] = 1
    METADATA['last_access_time'][key] = cache_snapshot.access_count
    METADATA['replication_status'][key] = determine_initial_replication_status(obj)
    METADATA['task_priority'][key] = compute_task_priority(cache_snapshot)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata, updates the replication strategy to ensure data consistency, and adjusts the task scheduling criterion to reflect the change in cache content.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in METADATA['access_frequency']:
        del METADATA['access_frequency'][key]
    if key in METADATA['last_access_time']:
        del METADATA['last_access_time'][key]
    if key in METADATA['replication_status']:
        del METADATA['replication_status'][key]
    if key in METADATA['task_priority']:
        del METADATA['task_priority'][key]
    
    update_replication_strategy(evicted_obj)
    adjust_task_scheduling(cache_snapshot)

def determine_initial_replication_status(obj):
    # Example implementation of initial replication status determination.
    # This would typically depend on specific policies and external constraints.
    return 0

def compute_task_priority(cache_snapshot):
    # Example task priority computation.
    # This can be based on various factors, including current system load, request context, etc.
    return 1

def update_replication_strategy(evicted_obj):
    # Update replication strategy to ensure data consistency
    pass

def adjust_task_scheduling(cache_snapshot):
    # Adjust the task scheduling criterion to reflect the change in cache content
    pass