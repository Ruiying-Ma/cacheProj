# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
LFU_WEIGHT = 1
LRU_WEIGHT = 1
REPLICATION_WEIGHT = 1
PRIORITY_WEIGHT = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, data replication status, and task priority level.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'replication_status': {},
    'task_priority': {}
}

def compute_score(key):
    lfu_score = metadata['access_frequency'].get(key, 0) * LFU_WEIGHT
    lru_score = metadata['last_access_time'].get(key, 0) * LRU_WEIGHT
    replication_score = metadata['replication_status'].get(key, 0) * REPLICATION_WEIGHT
    priority_score = metadata['task_priority'].get(key, 0) * PRIORITY_WEIGHT
    
    return lfu_score + lru_score + replication_score + priority_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining least frequently used, oldest access time, lowest replication necessity, and lowest task priority.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_score = float('inf')
    for key in cache_snapshot.cache.keys():
        score = compute_score(key)
        if score < lowest_score:
            lowest_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the last access time to the current time, and re-evaluates the task priority level based on the current system load.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Re-evaluate task priority (Naive implementation assuming system load is low)
    metadata['task_priority'][key] = metadata['task_priority'].get(key, 1)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, determines the initial replication status, and assigns a task priority level based on the insertion context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['replication_status'][key] = 0 # Example: 0 means not replicated yet
    metadata['task_priority'][key] = 1 # Example: assume initial priority level

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata, updates the replication strategy to ensure data consistency, and adjusts the task scheduling criterion to reflect the change in cache content.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in metadata['access_frequency']: del metadata['access_frequency'][key]
    if key in metadata['last_access_time']: del metadata['last_access_time'][key]
    if key in metadata['replication_status']: del metadata['replication_status'][key]
    if key in metadata['task_priority']: del metadata['task_priority'][key]
    
    # Adjust replication strategy and task scheduling (Naive implementation)
    for other_key in cache_snapshot.cache.keys():
        metadata['replication_status'][other_key] = metadata['replication_status'].get(other_key, 0) + 1