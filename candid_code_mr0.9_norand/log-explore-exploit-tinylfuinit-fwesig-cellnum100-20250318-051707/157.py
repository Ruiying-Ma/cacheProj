# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
HOT_COLOR = 1
COLD_COLOR = 0
INITIAL_EDGE_WEIGHT = 1

# Put the metadata specifically maintained by the policy below. The policy maintains a hash table where each key is a cached object and the value is a node in a graph. Each node has edges to other nodes representing access patterns, with weights indicating the frequency of transitions. Nodes are also colored based on recency of access, with a gradient from hot (recently accessed) to cold (least recently accessed).
class Node:
    def __init__(self, obj):
        self.obj = obj
        self.color = HOT_COLOR
        self.edges = {}  # key: obj.key, value: weight

cache_graph = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by identifying the coldest node (least recently accessed) with the lowest edge weights (least frequently accessed). If there are ties, it selects the node with the fewest edges, indicating the least connectivity in access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_color = float('inf')
    min_weight = float('inf')
    min_edges = float('inf')

    for key, node in cache_graph.items():
        if node.color < min_color:
            min_color = node.color
            min_weight = sum(node.edges.values())
            min_edges = len(node.edges)
            candid_obj_key = key
        elif node.color == min_color:
            total_weight = sum(node.edges.values())
            if total_weight < min_weight:
                min_weight = total_weight
                min_edges = len(node.edges)
                candid_obj_key = key
            elif total_weight == min_weight:
                if len(node.edges) < min_edges:
                    min_edges = len(node.edges)
                    candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the node's color to hot and increments the weights of edges from this node to the next accessed nodes. It also updates the hash table to reflect the new state of the node.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    node = cache_graph[obj.key]
    node.color = HOT_COLOR

    for other_key, other_node in cache_graph.items():
        if other_key != obj.key:
            if obj.key in other_node.edges:
                other_node.edges[obj.key] += 1
            else:
                other_node.edges[obj.key] = INITIAL_EDGE_WEIGHT

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy creates a new node in the graph, initializes its color to hot, and adds it to the hash table. It also creates edges from this node to recently accessed nodes with initial weights.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    new_node = Node(obj)
    cache_graph[obj.key] = new_node

    for other_key, other_node in cache_graph.items():
        if other_key != obj.key:
            new_node.edges[other_key] = INITIAL_EDGE_WEIGHT

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the corresponding node from the graph and the hash table. It also updates the colors of remaining nodes to reflect the new recency order and adjusts edge weights to maintain accurate access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del cache_graph[evicted_obj.key]

    for node in cache_graph.values():
        if evicted_obj.key in node.edges:
            del node.edges[evicted_obj.key]

    for node in cache_graph.values():
        node.color = max(COLD_COLOR, node.color - 1)