# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below
ACCESS_FREQUENCY_WEIGHT = 0.4
RECENCY_WEIGHT = 0.3
SIZE_WEIGHT = 0.2
COHERENCE_WEIGHT = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, memory allocation size, and coherence status of each cache object. Additionally, it tracks disk scheduling priorities for objects that may need to be fetched from or written to disk.
metadata = {
    'access_frequency': defaultdict(int),
    'recency': {},
    'size': {},
    'coherence_status': {},
    'disk_priority': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score derived from access frequency, recency, memory allocation size, and coherence status. Objects with lower scores are prioritized for eviction, with disk scheduling priorities influencing the final decision.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'][key]
        recency = cache_snapshot.access_count - metadata['recency'][key]
        size = cached_obj.size
        coherence_status = metadata['coherence_status'][key]
        disk_priority = metadata['disk_priority'][key]
        
        score = (ACCESS_FREQUENCY_WEIGHT * access_frequency +
                 RECENCY_WEIGHT * recency +
                 SIZE_WEIGHT * size +
                 COHERENCE_WEIGHT * coherence_status +
                 disk_priority)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and recency of the accessed object. It also checks and updates the coherence status if necessary, and adjusts disk scheduling priorities based on the current state of the object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    # Assuming coherence status and disk priority are updated based on some conditions
    metadata['coherence_status'][key] = check_coherence_status(obj)
    metadata['disk_priority'][key] = adjust_disk_priority(obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object into the cache, the policy initializes its access frequency and recency metadata. It sets the initial memory allocation size and coherence status, and assigns a disk scheduling priority based on the object's expected usage patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['size'][key] = obj.size
    metadata['coherence_status'][key] = initialize_coherence_status(obj)
    metadata['disk_priority'][key] = initialize_disk_priority(obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes its metadata from the cache. It may also update disk scheduling priorities for remaining objects to reflect the change in cache composition and ensure optimal future disk operations.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['recency'][evicted_key]
    del metadata['size'][evicted_key]
    del metadata['coherence_status'][evicted_key]
    del metadata['disk_priority'][evicted_key]
    # Assuming disk priorities are updated based on some conditions
    for key in cache_snapshot.cache:
        metadata['disk_priority'][key] = adjust_disk_priority(cache_snapshot.cache[key])

def check_coherence_status(obj):
    # Placeholder function to check and update coherence status
    return 1

def adjust_disk_priority(obj):
    # Placeholder function to adjust disk priority
    return 0

def initialize_coherence_status(obj):
    # Placeholder function to initialize coherence status
    return 1

def initialize_disk_priority(obj):
    # Placeholder function to initialize disk priority
    return 0