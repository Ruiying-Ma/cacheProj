# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
HOTNESS_WEIGHT = 0.5  # Weight for calculating hotness score

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache line including access frequency, last access timestamp, and a hotness score derived from a combination of frequency and recency. Additionally, it tracks the cache hierarchy level of each data item.
metadata = {}

def calculate_hotness(frequency, last_access_time, current_time):
    return frequency * HOTNESS_WEIGHT + (current_time - last_access_time) * (1 - HOTNESS_WEIGHT)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by identifying the coldest data, which is determined by the lowest hotness score. If multiple candidates have the same score, it evicts the one with the oldest last access timestamp.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_hotness_score = float('inf')
    oldest_timestamp = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        freq = metadata[key]['frequency']
        last_access = metadata[key]['last_access_time']
        hotness = calculate_hotness(freq, last_access, cache_snapshot.access_count)
        
        if hotness < lowest_hotness_score or (hotness == lowest_hotness_score and last_access < oldest_timestamp):
            lowest_hotness_score = hotness
            oldest_timestamp = last_access
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the last access timestamp, and recalculates the hotness score for the accessed data. It also adjusts the cache hierarchy level if necessary to optimize latency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['frequency'] += 1
    metadata[key]['last_access_time'] = cache_snapshot.access_count
    metadata[key]['hotness_score'] = calculate_hotness(metadata[key]['frequency'], metadata[key]['last_access_time'], cache_snapshot.access_count)
    # Adjust cache hierarchy level if necessary (not specified how, so we assume it's done elsewhere)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency to 1, sets the current timestamp as the last access time, and calculates an initial hotness score. The cache hierarchy level is set based on the expected latency requirements.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'frequency': 1,
        'last_access_time': cache_snapshot.access_count,
        'hotness_score': calculate_hotness(1, cache_snapshot.access_count, cache_snapshot.access_count),
        'hierarchy_level': 0  # Assuming initial hierarchy level is 0
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata of the evicted data and may adjust the hotness scores of remaining data to ensure the hierarchy and latency optimizations are maintained.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    # Adjust hotness scores of remaining data if necessary (not specified how, so we assume it's done elsewhere)