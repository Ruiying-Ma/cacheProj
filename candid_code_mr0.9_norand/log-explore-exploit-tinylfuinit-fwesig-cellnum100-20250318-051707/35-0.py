# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQ = 1
WEIGHT_LAST_ACCESS_TIME = 1
WEIGHT_COHERENCE_STATE = 1
WEIGHT_BANDWIDTH_USAGE = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, data coherence state, and bandwidth usage statistics for each cache line.
metadata = {
    'access_frequency': collections.defaultdict(int),
    'last_access_time': collections.defaultdict(int),
    'coherence_state': collections.defaultdict(int),
    'bandwidth_usage': collections.defaultdict(int),
    'total_bandwidth_usage': 0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score that considers low access frequency, old last access time, low coherence state, and high bandwidth usage.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key in cache_snapshot.cache:
        score = (
            WEIGHT_ACCESS_FREQ * (1 / (metadata['access_frequency'][key] + 1)) +
            WEIGHT_LAST_ACCESS_TIME * (cache_snapshot.access_count - metadata['last_access_time'][key]) +
            WEIGHT_COHERENCE_STATE * (1 / (metadata['coherence_state'][key] + 1)) +
            WEIGHT_BANDWIDTH_USAGE * metadata['bandwidth_usage'][key]
        )
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the last access time to the current time, and checks the coherence state to ensure data consistency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata['access_frequency'][obj.key] += 1
    metadata['last_access_time'][obj.key] = cache_snapshot.access_count
    # Check coherence state with application-specific logic
    # (assuming it is updated by some system in real time, here we just leave it unchanged)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, and records the initial coherence state and bandwidth usage.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata['access_frequency'][obj.key] = 1
    metadata['last_access_time'][obj.key] = cache_snapshot.access_count
    metadata['coherence_state'][obj.key] = 1  # Initialize coherence state to 1 for example
    bandwidth_usage = obj.size  # You can define bandwidth usage calculation based on object size (example)
    metadata['bandwidth_usage'][obj.key] = bandwidth_usage
    metadata['total_bandwidth_usage'] += bandwidth_usage

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the metadata associated with the evicted cache line and updates the overall bandwidth usage statistics to reflect the removal.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in metadata['bandwidth_usage']:
        metadata['total_bandwidth_usage'] -= metadata['bandwidth_usage'][evicted_obj.key]
        
    for met in ('access_frequency', 'last_access_time', 'coherence_state', 'bandwidth_usage'):
        if evicted_obj.key in metadata[met]:
            del metadata[met][evicted_obj.key]