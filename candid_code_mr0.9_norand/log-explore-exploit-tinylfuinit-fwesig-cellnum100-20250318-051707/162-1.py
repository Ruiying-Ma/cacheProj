# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

from collections import defaultdict

# Put tunable constant parameters below
DEFAULT_REPLICATION_FACTOR = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, replication factor, and load distribution across cache nodes.
access_frequency = defaultdict(int)
last_access_timestamp = defaultdict(int)
replication_factor = defaultdict(lambda: DEFAULT_REPLICATION_FACTOR)
load_distribution = defaultdict(int)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, oldest access timestamp, and lowest replication factor, ensuring balanced load across cache nodes.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        frequency = access_frequency[key]
        timestamp = last_access_timestamp[key]
        replication = replication_factor[key]
        
        # Compute a weighted score based on the criteria
        score = frequency * 0.4 + (cache_snapshot.access_count - timestamp) * 0.4 + replication * 0.2
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the last access timestamp, and adjusts the load distribution metadata to reflect the current state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    access_frequency[obj.key] += 1
    last_access_timestamp[obj.key] = cache_snapshot.access_count
    # Update the load distribution as necessary (example here assumes uniform load distribution change)
    load_distribution[obj.key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency, sets the current timestamp as the last access time, assigns an initial replication factor, and updates the load distribution to include the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    access_frequency[obj.key] = 1
    last_access_timestamp[obj.key] = cache_snapshot.access_count
    replication_factor[obj.key] = DEFAULT_REPLICATION_FACTOR
    # Initialize load distribution for the new object
    load_distribution[obj.key] = 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the object's metadata, recalculates the load distribution to ensure balance, and adjusts the replication factors of remaining objects if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Remove metadata of the evicted object
    if evicted_obj.key in access_frequency:
        del access_frequency[evicted_obj.key]
    if evicted_obj.key in last_access_timestamp:
        del last_access_timestamp[evicted_obj.key]
    if evicted_obj.key in replication_factor:
        del replication_factor[evicted_obj.key]
    if evicted_obj.key in load_distribution:
        del load_distribution[evicted_obj.key]
    
    # Adjust load distribution and replication factors if necessary (logic depends on the specific use case)
    # Here we assume a simple normalization of the load distribution
    total_load = sum(load_distribution.values())
    if total_load > 0:
        for key in load_distribution:
            load_distribution[key] = load_distribution[key] * 100 // total_load
    else:
        for key in load_distribution:
            load_distribution[key] = 1