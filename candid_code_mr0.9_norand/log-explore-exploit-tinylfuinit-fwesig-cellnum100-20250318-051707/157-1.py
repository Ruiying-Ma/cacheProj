# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
HOT_COLOR = 1
COLD_COLOR = 0
INITIAL_EDGE_WEIGHT = 1

# Put the metadata specifically maintained by the policy below. The policy maintains a hash table where each key is a cached object and the value is a node in a graph. Each node has edges to other nodes representing access patterns, with weights indicating the frequency of transitions. Nodes are also colored based on recency of access, with a gradient from hot (recently accessed) to cold (least recently accessed).

class GraphNode:
    def __init__(self, obj):
        self.obj = obj
        self.color = HOT_COLOR
        self.edges = {}

policy_graph = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by identifying the coldest node (least recently accessed) with the lowest edge weights (least frequently accessed). If there are ties, it selects the node with the fewest edges, indicating the least connectivity in access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_color = float('inf')
    min_weight_sum = float('inf')
    min_edge_count = float('inf')
    
    # Iterate over nodes to find the eviction candidate
    for key, node in policy_graph.items():
        if node.color < min_color:
            candid_obj_key = key
            min_color = node.color
            min_weight_sum = sum(node.edges.values())
            min_edge_count = len(node.edges)
        elif node.color == min_color:
            weight_sum = sum(node.edges.values())
            edge_count = len(node.edges)
            if weight_sum < min_weight_sum or (weight_sum == min_weight_sum and edge_count < min_edge_count):
                candid_obj_key = key
                min_weight_sum = weight_sum
                min_edge_count = edge_count
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the node's color to hot and increments the weights of edges from this node to the next accessed nodes. It also updates the hash table to reflect the new state of the node.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    node = policy_graph[key]
    # Update node color to hot
    node.color = HOT_COLOR
    # Increment edge weights
    for other_key, other_node in policy_graph.items():
        if other_key != key:
            if key in other_node.edges:
                other_node.edges[key] += 1
            else:
                other_node.edges[key] = INITIAL_EDGE_WEIGHT

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy creates a new node in the graph, initializes its color to hot, and adds it to the hash table. It also creates edges from this node to recently accessed nodes with initial weights.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    new_node = GraphNode(obj)
    policy_graph[key] = new_node
    
    # Create edges to other nodes
    for other_key, other_node in policy_graph.items():
        if other_key != key:
            other_node.edges[key] = INITIAL_EDGE_WEIGHT

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the corresponding node from the graph and the hash table. It also updates the colors of remaining nodes to reflect the new recency order and adjusts edge weights to maintain accurate access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in policy_graph:
        del policy_graph[evicted_key]
    
    # Update the colors to reflect new recency order
    for other_key, other_node in policy_graph.items():
        if other_node.color > COLD_COLOR:
            other_node.color -= 1
    
    # Adjust edges and weights
    for other_key, other_node in policy_graph.items():
        if evicted_key in other_node.edges:
            del other_node.edges[evicted_key]