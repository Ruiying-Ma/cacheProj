# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import deque, defaultdict
import time

# Put tunable constant parameters below
GQ_CAPACITY = 100  # Capacity of the ghost FIFO queue

# Put the metadata specifically maintained by the policy below. The policy maintains a Hash Map for quick access, a Binary Tree for access frequencies, a Linked List for access order, an Array for cache data, access frequency, last access timestamp, write-back status, latency impact score, and a ghost FIFO queue (GQ) for recently evicted objects.
hash_map = {}
binary_tree = defaultdict(int)
linked_list = deque()
array = []
access_frequency = defaultdict(int)
last_access_timestamp = {}
write_back_status = {}
latency_impact_score = {}
ghost_queue = deque(maxlen=GQ_CAPACITY)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the entry with the lowest composite score derived from access frequency, timestamp, write-back necessity, and latency impact. If multiple candidates have the same score, it uses the Linked List to select the oldest one. Evicted objects are placed at the rear of GQ, and the front of GQ is removed if GQ is full.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (access_frequency[key] + 
                 (cache_snapshot.access_count - last_access_timestamp[key]) + 
                 write_back_status[key] + 
                 latency_impact_score[key])
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
        elif score == min_score:
            if linked_list.index(cached_obj) < linked_list.index(cache_snapshot.cache[candid_obj_key]):
                candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency in the Binary Tree, refreshes the last access timestamp, recalculates the latency impact score, moves the accessed item to the front of the Linked List, updates the Hash Map, and increases the frequency by 1 if it is less than 3.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = min(access_frequency[key] + 1, 3)
    last_access_timestamp[key] = cache_snapshot.access_count
    latency_impact_score[key] = calculate_latency_impact(obj)
    
    if obj in linked_list:
        linked_list.remove(obj)
    linked_list.appendleft(obj)
    
    hash_map[key] = obj
    binary_tree[key] = access_frequency[key]

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency in the Binary Tree, sets the last access timestamp, marks the write-back status as clean, assigns an initial latency impact score, appends the object to the Linked List, places it in the Array, updates the Hash Map, and puts it at the rear of SQ if it was not in GQ, otherwise at the rear of MQ.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 1
    last_access_timestamp[key] = cache_snapshot.access_count
    write_back_status[key] = 0  # clean
    latency_impact_score[key] = calculate_latency_impact(obj)
    
    linked_list.appendleft(obj)
    array.append(obj)
    hash_map[key] = obj
    binary_tree[key] = access_frequency[key]
    
    if key in ghost_queue:
        ghost_queue.remove(key)
    ghost_queue.append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the object from the Hash Map, deletes its node from the Binary Tree, removes it from the Linked List, clears its slot in the Array, adjusts the latency impact scores of remaining entries, and places the evicted object at the rear of GQ.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    
    del hash_map[key]
    del binary_tree[key]
    linked_list.remove(evicted_obj)
    array.remove(evicted_obj)
    del access_frequency[key]
    del last_access_timestamp[key]
    del write_back_status[key]
    del latency_impact_score[key]
    
    ghost_queue.append(key)
    adjust_latency_impact_scores()

def calculate_latency_impact(obj):
    # Placeholder function to calculate latency impact score
    return obj.size

def adjust_latency_impact_scores():
    # Placeholder function to adjust latency impact scores of remaining entries
    pass