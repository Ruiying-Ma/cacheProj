# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
import time

# Parameters for weighted scoring
FREQUENCY_WEIGHT = 1.0
RECENCY_WEIGHT = 1.0
STALE_TOLERANCE_WEIGHT = 1.0
TRANSACTION_RATE_WEIGHT = 1.0
RESOURCE_USAGE_WEIGHT = 1.0

# Default values for new objects
DEFAULT_FREQUENCY = 1
DEFAULT_TRANSACTION_RATE = 1
DEFAULT_STALE_TOLERANCE = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access patterns (frequency and recency), consistency levels (staleness tolerance), transaction rates (number of transactions per unit time), and resource allocation (memory and CPU usage).
metadata = {
    'frequency': {},  # Key -> access frequency
    'recency': {},    # Key -> last accessed timestamp
    'stale_tolerance': {}, # Key -> staleness tolerance level
    'transaction_rate': {}, # Key -> transaction count
    'resource_usage': {}  # Key -> size of the object
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score derived from access patterns, consistency levels, transaction rates, and resource allocation. Objects with lower access frequency, higher staleness tolerance, lower transaction rates, and higher resource usage are prioritized for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (FREQUENCY_WEIGHT * metadata['frequency'][key]
                 + RECENCY_WEIGHT * (cache_snapshot.access_count - metadata['recency'][key])
                 + STALE_TOLERANCE_WEIGHT * metadata['stale_tolerance'][key]
                 + TRANSACTION_RATE_WEIGHT * metadata['transaction_rate'][key]
                 + RESOURCE_USAGE_WEIGHT * metadata['resource_usage'][key])
                 
        if score < min_score:
            min_score = score
            candid_obj_key = key
            
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access pattern metadata by increasing the frequency count and updating the recency timestamp. It also adjusts the transaction rate metadata by incrementing the transaction count and recalculates resource allocation based on current usage.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['transaction_rate'][key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access pattern metadata with a default frequency and current timestamp, sets the consistency level based on object properties, starts the transaction rate count, and updates resource allocation to account for the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['frequency'][key] = DEFAULT_FREQUENCY
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['stale_tolerance'][key] = DEFAULT_STALE_TOLERANCE
    metadata['transaction_rate'][key] = DEFAULT_TRANSACTION_RATE
    metadata['resource_usage'][key] = obj.size

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the metadata associated with the evicted object, recalculates resource allocation to reflect the freed resources, and adjusts transaction rates and access patterns to maintain overall cache efficiency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    del metadata['frequency'][evicted_key]
    del metadata['recency'][evicted_key]
    del metadata['stale_tolerance'][evicted_key]
    del metadata['transaction_rate'][evicted_key]
    del metadata['resource_usage'][evicted_key]
    
    metadata['resource_usage'][obj.key] = obj.size