# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
EXPIRATION_TIME = 3600  # 1 hour expiration time for simplicity

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry including usage frequency, last access time, expiration time, and a data freshness score calculated based on the time since last update and the importance of the data.
metadata = {}

def calculate_freshness_score(last_access_time, usage_frequency, current_time):
    # Example freshness score calculation: lower score means less fresh
    time_since_last_access = current_time - last_access_time
    freshness_score = time_since_last_access / usage_frequency
    return freshness_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first checking for any expired entries. If none are found, it selects the entry with the lowest data freshness score, considering both usage frequency and last access time to break ties.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    current_time = cache_snapshot.access_count

    # Check for expired entries
    for key, cached_obj in cache_snapshot.cache.items():
        if metadata[key]['expiration_time'] <= current_time:
            candid_obj_key = key
            break

    if candid_obj_key is None:
        # No expired entries, select the entry with the lowest freshness score
        lowest_freshness_score = float('inf')
        for key, cached_obj in cache_snapshot.cache.items():
            freshness_score = calculate_freshness_score(
                metadata[key]['last_access_time'],
                metadata[key]['usage_frequency'],
                current_time
            )
            if freshness_score < lowest_freshness_score:
                lowest_freshness_score = freshness_score
                candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the last access time to the current time, increments the usage frequency, and recalculates the data freshness score based on the new access time and usage pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key

    metadata[key]['last_access_time'] = current_time
    metadata[key]['usage_frequency'] += 1
    metadata[key]['freshness_score'] = calculate_freshness_score(
        metadata[key]['last_access_time'],
        metadata[key]['usage_frequency'],
        current_time
    )

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy sets the initial usage frequency to 1, the last access time to the current time, assigns an expiration time based on the data type, and calculates the initial data freshness score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key

    metadata[key] = {
        'usage_frequency': 1,
        'last_access_time': current_time,
        'expiration_time': current_time + EXPIRATION_TIME,
        'freshness_score': calculate_freshness_score(current_time, 1, current_time)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an entry, the policy logs the eviction event for usage pattern analysis, adjusts the overall cache usage statistics, and recalculates the data freshness scores for the remaining entries if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]

    # Recalculate freshness scores for remaining entries if necessary
    current_time = cache_snapshot.access_count
    for key in cache_snapshot.cache.keys():
        metadata[key]['freshness_score'] = calculate_freshness_score(
            metadata[key]['last_access_time'],
            metadata[key]['usage_frequency'],
            current_time
        )