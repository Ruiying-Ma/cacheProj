# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
WEIGHT_LFU = 0.4
WEIGHT_LRU = 0.4
WEIGHT_INVALIDATION = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, prefetching hints, and coherence status for each cache entry.
access_frequency = collections.defaultdict(int)
recency_of_access = collections.defaultdict(int)
prefetching_hints = collections.defaultdict(int)
coherence_status = collections.defaultdict(bool)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted combination of least frequently used, least recently accessed, and entries marked for invalidation due to coherence issues.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        lfu_score = access_frequency[key]
        lru_score = cache_snapshot.access_count - recency_of_access[key]
        invalidation_score = 1 if coherence_status[key] else 0
        
        score = (WEIGHT_LFU * lfu_score) + (WEIGHT_LRU * lru_score) + (WEIGHT_INVALIDATION * invalidation_score)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and recency of access for the hit entry, and adjusts prefetching hints based on access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    access_frequency[obj.key] += 1
    recency_of_access[obj.key] = cache_snapshot.access_count
    prefetching_hints[obj.key] += 1  # Example adjustment based on access patterns

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency and recency of access, sets prefetching hints based on the object's context, and ensures coherence status is up-to-date.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    access_frequency[obj.key] = 1
    recency_of_access[obj.key] = cache_snapshot.access_count
    prefetching_hints[obj.key] = 0  # Example initialization based on context
    coherence_status[obj.key] = False  # Example initialization

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalculates the weighted criteria for remaining entries, updates prefetching hints to reflect the new cache state, and ensures coherence status is maintained.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del access_frequency[evicted_obj.key]
    del recency_of_access[evicted_obj.key]
    del prefetching_hints[evicted_obj.key]
    del coherence_status[evicted_obj.key]
    
    for key in cache_snapshot.cache.keys():
        prefetching_hints[key] = max(prefetching_hints[key] - 1, 0)  # Example adjustment
        coherence_status[key] = False  # Example adjustment