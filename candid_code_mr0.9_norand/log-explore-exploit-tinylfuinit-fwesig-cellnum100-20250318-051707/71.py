# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ACCESS_LATENCY_WEIGHT = 1.0
UPDATE_FREQUENCY_WEIGHT = 1.0
TIME_SINCE_LAST_ACCESS_WEIGHT = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including cache index, memory page size, access latency, and update frequency for each cache entry. Additionally, it tracks a 'priority score' calculated based on a combination of these factors.
metadata = {}

def calculate_priority_score(access_latency, update_frequency, time_since_last_access):
    return (ACCESS_LATENCY_WEIGHT * access_latency +
            UPDATE_FREQUENCY_WEIGHT * update_frequency +
            TIME_SINCE_LAST_ACCESS_WEIGHT * time_since_last_access)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the cache entry with the lowest priority score. The priority score is computed as a weighted sum of access latency, update frequency, and the time since the last access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_priority_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_latency = metadata[key]['access_latency']
        update_frequency = metadata[key]['update_frequency']
        time_since_last_access = cache_snapshot.access_count - metadata[key]['last_access_time']
        priority_score = calculate_priority_score(access_latency, update_frequency, time_since_last_access)
        
        if priority_score < lowest_priority_score:
            lowest_priority_score = priority_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access latency and update frequency for the accessed entry. The priority score is recalculated to reflect the recent access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['access_latency'] = cache_snapshot.access_count - metadata[key]['last_access_time']
    metadata[key]['update_frequency'] += 1
    metadata[key]['last_access_time'] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the metadata for the new entry, including setting the initial access latency and update frequency. The priority score is calculated based on these initial values.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'access_latency': 0,
        'update_frequency': 1,
        'last_access_time': cache_snapshot.access_count
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the metadata associated with the evicted entry and recalculates the priority scores for the remaining entries to ensure they are up-to-date.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    for key in metadata:
        access_latency = metadata[key]['access_latency']
        update_frequency = metadata[key]['update_frequency']
        time_since_last_access = cache_snapshot.access_count - metadata[key]['last_access_time']
        metadata[key]['priority_score'] = calculate_priority_score(access_latency, update_frequency, time_since_last_access)