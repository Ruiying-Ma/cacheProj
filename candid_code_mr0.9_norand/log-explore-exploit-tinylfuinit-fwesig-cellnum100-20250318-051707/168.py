# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict, deque

# Put tunable constant parameters below
K = 10  # Number of evictions after which CBF decays

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, write status, data locality score, and a Count Bloom Filter (CBF) for frequency estimation. It uses a two-part cache structure with a small window cache (W) using LRU and a larger main cache (M) with a composite score-based eviction policy.
access_frequency = defaultdict(int)
last_access_time = defaultdict(int)
write_status = defaultdict(lambda: 'clean')
data_locality_score = defaultdict(float)
cbf = defaultdict(int)
window_cache = deque()  # LRU cache for W
eviction_count = 0

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    During eviction, the policy selects a victim based on a composite score derived from access frequency, last access time, data locality score, and write status, with a preference for clean entries. The least recently used object from W is compared with an object from M using CBF frequency, and the higher frequency object is retained. If W is empty, the victim is chosen from M using the composite score-based eviction policy.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    if window_cache:
        lru_w_key = window_cache[0]
        lru_w_freq = cbf[lru_w_key]
    else:
        lru_w_key = None
        lru_w_freq = float('inf')

    min_score = float('inf')
    for key, cached_obj in cache_snapshot.cache.items():
        score = (access_frequency[key] * 0.4 +
                 (cache_snapshot.access_count - last_access_time[key]) * 0.3 +
                 data_locality_score[key] * 0.2 +
                 (0 if write_status[key] == 'clean' else 1) * 0.1)
        if score < min_score:
            min_score = score
            candid_obj_key = key

    if lru_w_key and cbf[candid_obj_key] < lru_w_freq:
        candid_obj_key = lru_w_key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Immediately after a hit, the policy increments the access frequency, updates the last access time to the current time, recalculates the data locality score, and increases the hit object's frequency in CBF.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    access_frequency[obj.key] += 1
    last_access_time[obj.key] = cache_snapshot.access_count
    data_locality_score[obj.key] = calculate_data_locality_score(obj)
    cbf[obj.key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    Immediately after inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, marks the write status as clean, calculates an initial data locality score, and increases the inserted object's frequency in CBF. The object is added to W.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    access_frequency[obj.key] = 1
    last_access_time[obj.key] = cache_snapshot.access_count
    write_status[obj.key] = 'clean'
    data_locality_score[obj.key] = calculate_data_locality_score(obj)
    cbf[obj.key] += 1
    window_cache.append(obj.key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Immediately after evicting a victim, the policy removes all associated metadata for the evicted entry, adjusts the data locality scores of remaining entries if influenced, and decays CBF every K evictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    global eviction_count
    eviction_count += 1

    del access_frequency[evicted_obj.key]
    del last_access_time[evicted_obj.key]
    del write_status[evicted_obj.key]
    del data_locality_score[evicted_obj.key]
    del cbf[evicted_obj.key]

    if evicted_obj.key in window_cache:
        window_cache.remove(evicted_obj.key)

    if eviction_count % K == 0:
        decay_cbf()

def calculate_data_locality_score(obj):
    # Placeholder for actual data locality score calculation
    return 1.0

def decay_cbf():
    for key in cbf:
        cbf[key] = max(0, cbf[key] - 1)