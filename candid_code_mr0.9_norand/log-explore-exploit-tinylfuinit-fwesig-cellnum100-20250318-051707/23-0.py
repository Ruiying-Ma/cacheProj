# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time
from collections import defaultdict, deque
from sortedcontainers import SortedDict

# Put tunable constant parameters below
INITIAL_LATENCY_IMPACT_SCORE = 1

# Put the metadata specifically maintained by the policy below. The policy maintains a Hash Map for quick access, a Binary Tree for access frequencies, a Linked List for access order, and an Array for cache data. Additionally, it keeps access frequency, last access timestamp, write-back status, and latency impact score for each entry.
cache_hash_map = {}
access_frequency_tree = SortedDict()
linked_list = deque()
cache_array = []
entry_metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the entry with the lowest composite score derived from access frequency, timestamp, write-back necessity, and latency impact. If multiple candidates have the same score, it uses the Linked List to select the oldest one.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    composite_scores = []
    for key in cache_snapshot.cache:
        entry = entry_metadata[key]
        composite_score = (entry['frequency'] + 
                           (cache_snapshot.access_count - entry['last_access']) + 
                           entry['latency_impact_score'])
        composite_scores.append((composite_score, key))
    
    # Find the key with the lowest composite score and if tie, the oldest one.
    composite_scores.sort()
    candid_obj_key = composite_scores[0][1]
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency in the Binary Tree, refreshes the last access timestamp, recalculates the latency impact score, moves the accessed item to the front of the Linked List, and updates the Hash Map.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    entry = entry_metadata[key]
    
    # Update access frequency
    access_frequency_tree[entry['frequency']].remove(key)
    if not access_frequency_tree[entry['frequency']]:
        del access_frequency_tree[entry['frequency']]
    entry['frequency'] += 1
    if entry['frequency'] not in access_frequency_tree:
        access_frequency_tree[entry['frequency']] = set()
    access_frequency_tree[entry['frequency']].add(key)
    
    # Refresh last access timestamp
    entry['last_access'] = cache_snapshot.access_count
    
    # Recalculate latency impact score - Assume it is incremented by 1 for simplicity
    entry['latency_impact_score'] += 1
    
    # Move the accessed item to the front of the Linked List
    linked_list.remove(key)
    linked_list.appendleft(key)
    
    # Update the Hash Map is done implicitly through reference
    
def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency in the Binary Tree, sets the last access timestamp, marks the write-back status as clean, assigns an initial latency impact score, appends the object to the Linked List, places it in the Array, and updates the Hash Map.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    
    # Initialize Metadata
    entry_metadata[key] = {
        'frequency': 1,
        'last_access': cache_snapshot.access_count,
        'write_back_status': 'clean',
        'latency_impact_score': INITIAL_LATENCY_IMPACT_SCORE
    }
    
    # Update Binary Tree
    if 1 not in access_frequency_tree:
        access_frequency_tree[1] = set()
    access_frequency_tree[1].add(key)
    
    # Append to Linked List
    linked_list.appendleft(key)
    
    # Place it in Array
    cache_array.append(obj)
    
    # Update Hash Map
    cache_hash_map[key] = obj
    
def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the object from the Hash Map, deletes its node from the Binary Tree, removes it from the Linked List, clears its slot in the Array, and adjusts the latency impact scores of remaining entries.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    
    # Remove from Hash Map
    del cache_hash_map[key]
    
    # Delete from Binary Tree
    access_frequency_tree[entry_metadata[key]['frequency']].remove(key)
    if not access_frequency_tree[entry_metadata[key]['frequency']]:
        del access_frequency_tree[entry_metadata[key]['frequency']]
    
    # Remove from Linked List
    linked_list.remove(key)
    
    # Clear from the Array
    cache_array.remove(evicted_obj)
    
    # Adjust latency impact scores of remaining entries
    for entry_key in entry_metadata:
        if entry_key != key:
            entry_metadata[entry_key]['latency_impact_score'] -= 1
    
    # Remove metadata
    del entry_metadata[key]