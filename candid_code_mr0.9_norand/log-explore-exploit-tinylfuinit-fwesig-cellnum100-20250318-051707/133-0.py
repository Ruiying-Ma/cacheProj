# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below
DEFAULT_WRITE_AMPLIFICATION = 1
DEFAULT_LATENCY_IMPACT = 10
LATENCY_HIT_SCORE = 5

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, write amplification count, and latency impact score for each cached object.
metadata = {
    "access_frequency": defaultdict(int),
    "recency": defaultdict(int),
    "write_amplification": defaultdict(lambda: DEFAULT_WRITE_AMPLIFICATION),
    "latency_impact": defaultdict(lambda: DEFAULT_LATENCY_IMPACT)
}

def composite_score(key):
    # A function to compute the composite score for an object based on access frequency, recency, write amplification count, and latency impact score
    freq = metadata["access_frequency"][key]
    recency = metadata["recency"][key]
    write_amplification = metadata["write_amplification"][key]
    latency_impact = metadata["latency_impact"][key]
    
    # The composite score (favoring lower frequency, higher write amplification, higher latency impact)
    return (freq, -recency, write_amplification, latency_impact)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score derived from the object's access frequency, recency, write amplification count, and latency impact score, prioritizing objects with low access frequency, high write amplification, and minimal latency impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_score = None
    for key in cache_snapshot.cache.keys():
        score = composite_score(key)
        if lowest_score is None or score < lowest_score:
            lowest_score = score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the recency timestamp, and recalculates the latency impact score based on the current hit latency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata["access_frequency"][obj.key] += 1
    metadata["recency"][obj.key] = cache_snapshot.access_count
    metadata["latency_impact"][obj.key] = LATENCY_HIT_SCORE

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the recency timestamp to the current time, assigns a default write amplification count, and calculates an initial latency impact score based on expected hit latency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata["access_frequency"][obj.key] = 1
    metadata["recency"][obj.key] = cache_snapshot.access_count
    metadata["write_amplification"][obj.key] = DEFAULT_WRITE_AMPLIFICATION
    metadata["latency_impact"][obj.key] = DEFAULT_LATENCY_IMPACT

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy removes all associated metadata for the evicted object and adjusts the write amplification count for remaining objects to reflect the reduced cache size.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata["access_frequency"][evicted_obj.key]
    del metadata["recency"][evicted_obj.key]
    del metadata["write_amplification"][evicted_obj.key]
    del metadata["latency_impact"][evicted_obj.key]
    
    # Adjust write amplification count for remaining objects
    for key in cache_snapshot.cache.keys():
        metadata["write_amplification"][key] += 1