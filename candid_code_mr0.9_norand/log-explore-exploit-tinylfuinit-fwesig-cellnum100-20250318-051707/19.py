# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

from collections import deque, defaultdict

# Put tunable constant parameters below
DATA_LOCALITY_WEIGHT = 1.0
ACCESS_FREQUENCY_WEIGHT = 1.0
LAST_ACCESS_TIME_WEIGHT = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains a LRU queue, access frequency, last access time, write status, and data locality score for each cache entry.
lru_queue = deque()
access_frequency = defaultdict(int)
last_access_time = {}
write_status = {}
data_locality_score = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score derived from the least frequently accessed, least recently used, and lowest data locality score, with a preference for clean entries. The LRU queue helps in quickly identifying the least recently used entries.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key in lru_queue:
        if key in cache_snapshot.cache:
            composite_score = (
                ACCESS_FREQUENCY_WEIGHT * access_frequency[key] +
                LAST_ACCESS_TIME_WEIGHT * (cache_snapshot.access_count - last_access_time[key]) +
                DATA_LOCALITY_WEIGHT * data_locality_score[key]
            )
            if write_status[key] == 'clean':
                composite_score -= 1  # Prefer clean entries

            if composite_score < min_score:
                min_score = composite_score
                candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a hit, the policy increments the access frequency, updates the last access time to the current time, recalculates the data locality score, and moves the hit object to the most-recently-used end of the LRU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] += 1
    last_access_time[key] = cache_snapshot.access_count
    data_locality_score[key] = calculate_data_locality_score(obj)
    
    # Move to the most-recently-used end of the LRU queue
    lru_queue.remove(key)
    lru_queue.append(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, marks the write status as clean, calculates an initial data locality score, and places the object at the most-recently-used end of the LRU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 1
    last_access_time[key] = cache_snapshot.access_count
    write_status[key] = 'clean'
    data_locality_score[key] = calculate_data_locality_score(obj)
    
    # Place at the most-recently-used end of the LRU queue
    lru_queue.append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata for the evicted entry, adjusts the data locality scores of remaining entries if influenced, and removes the evicted object from the LRU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in access_frequency:
        del access_frequency[key]
    if key in last_access_time:
        del last_access_time[key]
    if key in write_status:
        del write_status[key]
    if key in data_locality_score:
        del data_locality_score[key]
    
    # Remove from the LRU queue
    if key in lru_queue:
        lru_queue.remove(key)

def calculate_data_locality_score(obj):
    '''
    This function calculates the data locality score for an object.
    - Args:
        - `obj`: The object for which to calculate the data locality score.
    - Return:
        - `score`: The calculated data locality score.
    '''
    # Placeholder for actual data locality score calculation logic
    return 1.0