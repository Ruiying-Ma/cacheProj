# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_REP_FACTOR = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, replication factor, and load distribution across cache nodes.
metadata = {
    'access_frequency': {},  # Maps object key to access frequency
    'last_access_timestamp': {},  # Maps object key to last access timestamp
    'replication_factor': {},  # Maps object key to replication factor
    'load_distribution': {}  # Maps object key to load distribution
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, oldest access timestamp, and lowest replication factor, ensuring balanced load across cache nodes.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        freq = metadata['access_frequency'].get(key, 0)
        last_access = metadata['last_access_timestamp'].get(key, float('inf'))
        rep_factor = metadata['replication_factor'].get(key, INITIAL_REP_FACTOR)
        # Compute score: weight factors can be adjusted as needed
        score = freq * 0.5 + (cache_snapshot.access_count - last_access) * 0.3 + rep_factor * 0.2
        if score < min_score:
            min_score = score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the last access timestamp, and adjusts the load distribution metadata to reflect the current state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    # Load distribution update logic can be added here if needed

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency, sets the current timestamp as the last access time, assigns an initial replication factor, and updates the load distribution to include the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['replication_factor'][key] = INITIAL_REP_FACTOR
    metadata['load_distribution'][key] = 1  # Assumes load distribution initializes to 1 per new object

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the object's metadata, recalculates the load distribution to ensure balance, and adjusts the replication factors of remaining objects if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_timestamp']:
        del metadata['last_access_timestamp'][evicted_key]
    if evicted_key in metadata['replication_factor']:
        del metadata['replication_factor'][evicted_key]
    if evicted_key in metadata['load_distribution']:
        del metadata['load_distribution'][evicted_key]

    # Recalculate load distribution after eviction if needed
    total_load = sum(metadata['load_distribution'].values())
    for key in metadata['load_distribution']:
        metadata['load_distribution'][key] = metadata['load_distribution'][key] / total_load
    
    # Adjust replication factors if necessary
    for key in metadata['replication_factor']:
        metadata['replication_factor'][key] = max(metadata['replication_factor'][key] - 1, 1)