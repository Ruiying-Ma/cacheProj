# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time
import collections

# Put tunable constant parameters below
K = 10  # Decay interval for CBF

# Put the metadata specifically maintained by the policy below. The policy maintains latency measurement, last access time, insertion time, load balancing score, global cache hit rate, dynamic threshold for data retention period, access frequency, write status, data locality score, and a Count Bloom Filter (CBF) for frequency estimation.
metadata = {
    'latency_measurements': {},
    'last_access_times': {},
    'insertion_times': {},
    'load_balancing_scores': {},
    'global_cache_hit_rate': 0.0,
    'dynamic_threshold': 0.0,
    'access_frequencies': {},
    'write_statuses': {},
    'data_locality_scores': {},
    'cbf': collections.Counter(),
    'window_cache': collections.deque(maxlen=100),
    'total_hits': 0,
    'total_accesses': 0,
    'eviction_count': 0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the eviction victim by first identifying entries with the highest latency measurements and lowest load balancing scores. Among these, it uses a composite score derived from access frequency, last access time, data locality score, and write status, with a preference for clean entries. The least recently used object from a small window cache (W) is compared with an object from the main cache (M) using CBF frequency, and the higher frequency object is retained.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    if not cache_snapshot.cache:
        return None

    candidate_objects = list(cache_snapshot.cache.values())
    candidate_objects.sort(key=lambda o: (
        -metadata['latency_measurements'].get(o.key, 0),
        metadata['load_balancing_scores'].get(o.key, float('inf'))
    ))

    selected_obj = candidate_objects[0]
    selected_obj_key = selected_obj.key
    for cand in candidate_objects:
        composite_score = (
            metadata['access_frequencies'].get(cand.key, 0),
            metadata['last_access_times'].get(cand.key, 0),
            metadata['data_locality_scores'].get(cand.key, 0),
            metadata['write_statuses'].get(cand.key, 'clean') == 'clean'
        )
        
        selected_composite_score = (
            metadata['access_frequencies'].get(selected_obj_key, 0),
            metadata['last_access_times'].get(selected_obj_key, 0),
            metadata['data_locality_scores'].get(selected_obj_key, 0),
            metadata['write_statuses'].get(selected_obj_key, 'clean') == 'clean'
        )
        
        if composite_score < selected_composite_score:
            selected_obj = cand
            selected_obj_key = selected_obj.key

    window_cache_key = None
    if metadata['window_cache']:
        window_cache_key = metadata['window_cache'][-1].key

    if window_cache_key and metadata['cbf'][obj.key] < metadata['cbf'][window_cache_key]:
        selected_obj_key = window_cache_key

    return selected_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the last access time to the current time, increments the access frequency, recalculates the load balancing score based on the frequency of access and latency measurement, recalculates the data locality score, increases the hit object's frequency in CBF, and updates the global cache hit rate.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    obj_key = obj.key
    
    metadata['last_access_times'][obj_key] = current_time
    metadata['access_frequencies'][obj_key] = metadata['access_frequencies'].get(obj_key, 0) + 1
    metadata['cbf'][obj_key] += 1
    
    total_frequency = metadata['access_frequencies'][obj_key]
    latency_measurement = metadata['latency_measurements'].get(obj_key, 0)
    
    metadata['load_balancing_scores'][obj_key] = calculate_load_balancing_score(total_frequency, latency_measurement)
    metadata['data_locality_scores'][obj_key] = calculate_data_locality_score(obj)
    
    metadata['total_hits'] += 1
    metadata['total_accesses'] += 1
    metadata['global_cache_hit_rate'] = metadata['total_hits'] / metadata['total_accesses']

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy sets the initial latency measurement, insertion time, and last access time to the current time, initializes the load balancing score, access frequency to 1, write status as clean, calculates an initial data locality score, increases the inserted object's frequency in CBF, adds the object to the window cache (W), and adjusts the dynamic threshold for data retention period based on the current cache hit rate.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    obj_key = obj.key
    
    metadata['latency_measurements'][obj_key] = measure_latency(obj)
    metadata['insertion_times'][obj_key] = current_time
    metadata['last_access_times'][obj_key] = current_time
    metadata['access_frequencies'][obj_key] = 1
    metadata['write_statuses'][obj_key] = 'clean'
    metadata['data_locality_scores'][obj_key] = calculate_data_locality_score(obj)

    metadata['cbf'][obj_key] += 1
    metadata['load_balancing_scores'][obj_key] = calculate_load_balancing_score(1, metadata['latency_measurements'][obj_key])
    metadata['window_cache'].append(obj)
    metadata['global_cache_hit_rate'] = metadata['total_hits'] / (metadata['total_accesses'] + 1)
    metadata['dynamic_threshold'] = adjust_dynamic_threshold(metadata['global_cache_hit_rate'])

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy recalculates the global cache hit rate, may adjust the dynamic threshold for data retention period, updates the load balancing scores and data locality scores of remaining entries if influenced, decays CBF every K evictions, and removes all associated metadata for the evicted entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key

    # Remove metadata related to the evicted object
    if evicted_key in metadata['latency_measurements']:
        del metadata['latency_measurements'][evicted_key]
    if evicted_key in metadata['last_access_times']:
        del metadata['last_access_times'][evicted_key]
    if evicted_key in metadata['insertion_times']:
        del metadata['insertion_times'][evicted_key]
    if evicted_key in metadata['load_balancing_scores']:
        del metadata['load_balancing_scores'][evicted_key]
    if evicted_key in metadata['access_frequencies']:
        del metadata['access_frequencies'][evicted_key]
    if evicted_key in metadata['write_statuses']:
        del metadata['write_statuses'][evicted_key]
    if evicted_key in metadata['data_locality_scores']:
        del metadata['data_locality_scores'][evicted_key]
    if evicted_key in metadata['cbf']:
        del metadata['cbf'][evicted_key]
    if evicted_key in metadata['window_cache']:
        metadata['window_cache'].remove(evicted_obj)

    metadata['total_accesses'] += 1
    metadata['global_cache_hit_rate'] = metadata['total_hits'] / metadata['total_accesses']

    # Decay Count Bloom Filter
    metadata['eviction_count'] += 1
    if metadata['eviction_count'] % K == 0:
        for key in metadata['cbf']:
            metadata['cbf'][key] = max(0, metadata['cbf'][key] - 1)

def measure_latency(obj):
    # Dummy latency measurement
    return obj.size

def calculate_load_balancing_score(frequency, latency):
    # Dummy load balancing score calculation
    return frequency / (latency + 1)

def calculate_data_locality_score(obj):
    # Dummy data locality score calculation
    return obj.size / 100.0

def adjust_dynamic_threshold(hit_rate):
    # Dummy dynamic threshold adjustment
    return hit_rate * 2