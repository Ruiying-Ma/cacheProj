# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import deque

# Put tunable constant parameters below

# Put the metadata specifically maintained by the policy below. The policy maintains a LRU queue, access frequency, last access time, write status, and data locality score for each cache entry.
cache_metadata = {
    'lru_queue': deque(),
    'access_frequency': {},
    'last_access_time': {},
    'write_status': {},
    'data_locality_score': {},
}


def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score derived from the least frequently accessed, least recently used, and lowest data locality score, with a preference for clean entries. The LRU queue helps in quickly identifying the least recently used entries.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    current_time = cache_snapshot.access_count

    for key in cache_metadata['lru_queue']:
        access_freq = cache_metadata['access_frequency'][key]
        last_time = cache_metadata['last_access_time'][key]
        locality_score = cache_metadata['data_locality_score'][key]
        write_status = cache_metadata['write_status'][key]

        # Composite score, with lower is better
        score = (access_freq + 1) * (current_time - last_time) * locality_score
        if write_status == 'clean':
            score *= 0.9  # Preference for clean entries

        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key


def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a hit, the policy increments the access frequency, updates the last access time to the current time, recalculates the data locality score, and moves the hit object to the most-recently-used end of the LRU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count

    cache_metadata['access_frequency'][key] += 1
    cache_metadata['last_access_time'][key] = current_time
    cache_metadata['data_locality_score'][key] = 1 / cache_metadata['access_frequency'][key]

    cache_metadata['lru_queue'].remove(key)
    cache_metadata['lru_queue'].append(key)


def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, marks the write status as clean, calculates an initial data locality score, and places the object at the most-recently-used end of the LRU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count

    cache_metadata['access_frequency'][key] = 1
    cache_metadata['last_access_time'][key] = current_time
    cache_metadata['write_status'][key] = 'clean'
    cache_metadata['data_locality_score'][key] = 1

    cache_metadata['lru_queue'].append(key)


def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata for the evicted entry, adjusts the data locality scores of remaining entries if influenced, and removes the evicted object from the LRU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key

    del cache_metadata['access_frequency'][key]
    del cache_metadata['last_access_time'][key]
    del cache_metadata['write_status'][key]
    del cache_metadata['data_locality_score'][key]

    cache_metadata['lru_queue'].remove(key)