# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WRITE_AMPLIFICATION_FACTOR_BASE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access timestamp, write amplification factor, integrity check status, data source, and a blockchain ledger for tracking data integrity and access history.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'write_amplification_factor': {},
    'integrity_check_status': {},
    'data_source': {},
    'blockchain_ledger': []
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combined score of lowest access frequency, highest write amplification factor, oldest last access timestamp, and data source priority, preferring cloud-sourced data over edge-sourced data, while ensuring the integrity check status is valid.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        if metadata['integrity_check_status'][key]:
            score = (
                metadata['access_frequency'][key] * -1 +
                metadata['write_amplification_factor'][key] +
                (cache_snapshot.access_count - metadata['last_access_timestamp'][key]) +
                (0 if metadata['data_source'][key] == 'cloud' else 1)
            )
            if score < min_score:
                min_score = score
                candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, refreshes the last access timestamp to the current time, recalculates the write amplification factor, performs an integrity check, and appends an entry to the blockchain ledger recording the access event.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['write_amplification_factor'][key] = WRITE_AMPLIFICATION_FACTOR_BASE * metadata['access_frequency'][key]
    metadata['integrity_check_status'][key] = True  # Assuming integrity check passes
    metadata['blockchain_ledger'].append(f"Access: {key} at {cache_snapshot.access_count}")

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, calculates the initial write amplification factor, performs an initial integrity check, records the data source, and appends an entry to the blockchain ledger recording the insertion event.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['write_amplification_factor'][key] = WRITE_AMPLIFICATION_FACTOR_BASE
    metadata['integrity_check_status'][key] = True  # Assuming initial integrity check passes
    metadata['data_source'][key] = 'cloud'  # Assuming data source is cloud for simplicity
    metadata['blockchain_ledger'].append(f"Insert: {key} at {cache_snapshot.access_count}")

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy removes all associated metadata for the evicted block, recalculates the write amplification factor for remaining blocks, performs an integrity check on the cache, and appends an entry to the blockchain ledger recording the eviction event.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_timestamp'][evicted_key]
    del metadata['write_amplification_factor'][evicted_key]
    del metadata['integrity_check_status'][evicted_key]
    del metadata['data_source'][evicted_key]
    
    for key in cache_snapshot.cache.keys():
        metadata['write_amplification_factor'][key] = WRITE_AMPLIFICATION_FACTOR_BASE * metadata['access_frequency'][key]
        metadata['integrity_check_status'][key] = True  # Assuming integrity check passes
    
    metadata['blockchain_ledger'].append(f"Evict: {evicted_key} at {cache_snapshot.access_count}")