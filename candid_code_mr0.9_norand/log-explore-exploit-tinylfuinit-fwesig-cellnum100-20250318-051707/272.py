# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
ACCESS_LATENCY_WEIGHT = 0.4
ACCESS_FREQUENCY_WEIGHT = 0.3
DATA_RETENTION_PRIORITY_WEIGHT = 0.2
GAN_PREDICTION_WEIGHT = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access timestamp, data retention priority, temporal access patterns, synthetic data profiles generated using GANs, and overall cache access latency.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'data_retention_priority': {},
    'temporal_access_patterns': {},
    'synthetic_data_profiles': {},
    'overall_cache_access_latency': 0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, high access latency, low data retention priority, and least likelihood of being accessed soon as predicted by GAN-generated synthetic data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'].get(key, 0)
        last_access_timestamp = metadata['last_access_timestamp'].get(key, 0)
        data_retention_priority = metadata['data_retention_priority'].get(key, 0)
        synthetic_data_profile = metadata['synthetic_data_profiles'].get(key, 0)
        
        access_latency = cache_snapshot.access_count - last_access_timestamp
        score = (ACCESS_LATENCY_WEIGHT * access_latency +
                 ACCESS_FREQUENCY_WEIGHT * (1 / (access_frequency + 1)) +
                 DATA_RETENTION_PRIORITY_WEIGHT * (1 / (data_retention_priority + 1)) +
                 GAN_PREDICTION_WEIGHT * synthetic_data_profile)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the last access timestamp to the current time, recalculates access latency, refines the synthetic data profile using the latest access information, and adjusts data retention priority if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['overall_cache_access_latency'] = cache_snapshot.access_count - metadata['last_access_timestamp'][key]
    # Refine synthetic data profile and adjust data retention priority if necessary
    # This is a placeholder for the actual GAN-based refinement logic
    metadata['synthetic_data_profiles'][key] = metadata['synthetic_data_profiles'].get(key, 0) + 1
    metadata['data_retention_priority'][key] = metadata['data_retention_priority'].get(key, 0) + 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes access frequency to 1, sets the last access timestamp to the current time, assigns data retention priority based on the object's importance, initializes temporal access patterns, and generates an initial synthetic data profile using GANs based on similar objects' access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['data_retention_priority'][key] = 1  # Placeholder for actual importance calculation
    metadata['temporal_access_patterns'][key] = []  # Placeholder for actual temporal pattern initialization
    metadata['synthetic_data_profiles'][key] = 1  # Placeholder for actual GAN-based profile generation

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalculates overall cache access latency, recalibrates synthetic data profiles of remaining objects to ensure accurate future access predictions, adjusts overall access frequency trends, and modifies data retention priorities if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_timestamp']:
        del metadata['last_access_timestamp'][evicted_key]
    if evicted_key in metadata['data_retention_priority']:
        del metadata['data_retention_priority'][evicted_key]
    if evicted_key in metadata['temporal_access_patterns']:
        del metadata['temporal_access_patterns'][evicted_key]
    if evicted_key in metadata['synthetic_data_profiles']:
        del metadata['synthetic_data_profiles'][evicted_key]
    
    # Recalculate overall cache access latency
    metadata['overall_cache_access_latency'] = sum(
        cache_snapshot.access_count - metadata['last_access_timestamp'].get(key, 0)
        for key in cache_snapshot.cache
    ) / len(cache_snapshot.cache)
    
    # Recalibrate synthetic data profiles and adjust data retention priorities if necessary
    for key in cache_snapshot.cache:
        metadata['synthetic_data_profiles'][key] = metadata['synthetic_data_profiles'].get(key, 0) + 1
        metadata['data_retention_priority'][key] = metadata['data_retention_priority'].get(key, 0) + 1