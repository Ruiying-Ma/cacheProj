# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_LATENCY_IMPACT_SCORE = 10
WEIGHT_HIT_RATIO = 0.3
WEIGHT_RESIDENCY_TIME = 0.2
WEIGHT_ACCESS_FREQUENCY = 0.2
WEIGHT_LAST_ACCESS_TIMESTAMP = 0.1
WEIGHT_WRITE_BACK_STATUS = 0.1
WEIGHT_LATENCY_IMPACT = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains hit ratio, cache residency time, access frequency, last access timestamp, write-back status, latency impact score, and replacement score for each cache line.
metadata = {}

def calculate_replacement_score(obj, cache_snapshot):
    """
    Calculates the replacement score of an object based on its metadata.
    Args:
        obj: The object whose replacement score is to be calculated.
        cache_snapshot: The current snapshot of the cache.

    Returns:
        replacement_score: Calculated replacement score.
    """
    data = metadata[obj.key]
    current_time = cache_snapshot.access_count
    hit_ratio = data['hit_count'] / max(1, data['access_count'])
    residency_time = current_time - data['residency_time']
    access_frequency = data['access_frequency']
    last_access_timestamp = current_time - data['last_access_timestamp']
    write_back_status = data['write_back_status']
    latency_impact = data['latency_impact_score']
    
    replacement_score = (WEIGHT_HIT_RATIO * hit_ratio +
                         WEIGHT_RESIDENCY_TIME * residency_time +
                         WEIGHT_ACCESS_FREQUENCY * access_frequency +
                         WEIGHT_LAST_ACCESS_TIMESTAMP * last_access_timestamp +
                         WEIGHT_WRITE_BACK_STATUS * write_back_status +
                         WEIGHT_LATENCY_IMPACT * latency_impact)
                         
    return replacement_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combined score derived from the lowest replacement score and the lowest composite score, considering hit ratio, residency time, access frequency, last access timestamp, write-back necessity, and latency impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    min_score = float('inf')
    candid_obj_key = None

    for key, cached_obj in cache_snapshot.cache.items():
        score = calculate_replacement_score(cached_obj, cache_snapshot)
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    # If no valid candidate is found (shouldn't happen if cache is operational), return None
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    The policy increments the hit count, resets the residency time, updates the access frequency, refreshes the last access timestamp, and recalculates the latency impact score and replacement score based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    data = metadata[obj.key]
    
    data['hit_count'] += 1
    data['access_count'] += 1
    data['residency_time'] = current_time
    data['access_frequency'] += 1
    data['last_access_timestamp'] = current_time
    data['latency_impact_score'] = INITIAL_LATENCY_IMPACT_SCORE / max(1, data['access_count'])

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    The policy initializes the hit ratio to zero, sets the residency time to the current time, sets the access frequency to 1, sets the last access timestamp to the current time, marks the write-back status as clean, assigns an initial latency impact score, and calculates an initial replacement score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    metadata[obj.key] = {
        'hit_count': 0,
        'access_count': 1,
        'residency_time': current_time,
        'access_frequency': 1,
        'last_access_timestamp': current_time,
        'write_back_status': 0,  # clean
        'latency_impact_score': INITIAL_LATENCY_IMPACT_SCORE,
        'replacement_score': 0
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    The policy removes all metadata associated with the evicted cache line, recalculates the replacement scores and latency impact scores of the remaining cache lines to reflect the change in cache composition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in metadata:
        del metadata[evicted_obj.key]
        
    for key in cache_snapshot.cache.keys():
        if key in metadata:
            metadata[key]['replacement_score'] = calculate_replacement_score(cache_snapshot.cache[key], cache_snapshot)