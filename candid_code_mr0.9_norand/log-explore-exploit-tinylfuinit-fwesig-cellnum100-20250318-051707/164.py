# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict, deque
import bisect

# Put tunable constant parameters below
FETCH_COST_DECREASE = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains a Hash Map for quick access, a Binary Tree for access frequencies, a Linked List for order of access, an Array for cache data, hit ratio tracking, cache residency time, access frequency patterns, replacement scores, fetch cost score, and queue positions (FIFO or LRU).
hash_map = {}
binary_tree = defaultdict(int)
linked_list = deque()
array = []
hit_ratio = defaultdict(float)
residency_time = {}
access_frequency_pattern = defaultdict(list)
replacement_scores = defaultdict(float)
fetch_cost_score = defaultdict(float)
fifo_queue = deque()
lru_queues = [deque() for _ in range(3)]  # Assuming 3 levels of LRU queues

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first checks the FIFO queue for an object with zero frequency and evicts it. If no such object is found, it calculates a combined score based on low access frequency, low recency of access, high fetch cost, and low replacement score, and evicts the object with the lowest score from the non-empty LRU queue with the smallest subscript.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Check FIFO queue for zero frequency object
    for key in fifo_queue:
        if binary_tree[key] == 0:
            candid_obj_key = key
            break
    
    if candid_obj_key is None:
        # Calculate combined score for eviction
        min_score = float('inf')
        for lru_queue in lru_queues:
            for key in lru_queue:
                score = (binary_tree[key] * 0.25 + 
                         (cache_snapshot.access_count - residency_time[key]) * 0.25 + 
                         fetch_cost_score[key] * 0.25 + 
                         replacement_scores[key] * 0.25)
                if score < min_score:
                    min_score = score
                    candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency in the Binary Tree, moves the accessed item to the front of the Linked List, updates the hit ratio by incrementing the hit count, resets the residency time, updates the access frequency pattern, updates the corresponding entry in the Hash Map, updates the recency of access to the current time, and slightly decreases the fetch cost score. If the object is in an LRU queue, it is moved to the most-recently-used end of the next higher LRU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    binary_tree[key] += 1
    linked_list.remove(key)
    linked_list.appendleft(key)
    hit_ratio[key] = cache_snapshot.hit_count / cache_snapshot.access_count
    residency_time[key] = cache_snapshot.access_count
    access_frequency_pattern[key].append(cache_snapshot.access_count)
    hash_map[key] = obj
    fetch_cost_score[key] -= FETCH_COST_DECREASE
    
    for i in range(len(lru_queues)):
        if key in lru_queues[i]:
            lru_queues[i].remove(key)
            if i < len(lru_queues) - 1:
                lru_queues[i + 1].append(key)
            else:
                lru_queues[i].append(key)
            break

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy adds the object to the Hash Map, inserts it into the Binary Tree with an initial frequency count, appends it to the end of the Linked List, places it in the next available slot in the Array, initializes the hit ratio to zero, sets the residency time to the current time, starts tracking the access frequency pattern, initializes the access frequency to 1, sets the recency of access to the current time, calculates the fetch cost score, and places the object at the most-recently-used end of L1.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    hash_map[key] = obj
    binary_tree[key] = 1
    linked_list.append(key)
    array.append(obj)
    hit_ratio[key] = 0
    residency_time[key] = cache_snapshot.access_count
    access_frequency_pattern[key] = [cache_snapshot.access_count]
    fetch_cost_score[key] = obj.size  # Assuming fetch cost is proportional to size
    lru_queues[0].append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the object from the Hash Map, deletes its node from the Binary Tree, removes it from the Linked List, clears its slot in the Array, removes all metadata associated with the evicted cache line, recalculates the replacement scores for the remaining cache lines, and adjusts the remaining cache lines' metadata if necessary to maintain relative rankings for eviction decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    del hash_map[key]
    del binary_tree[key]
    linked_list.remove(key)
    array.remove(evicted_obj)
    del hit_ratio[key]
    del residency_time[key]
    del access_frequency_pattern[key]
    del replacement_scores[key]
    del fetch_cost_score[key]
    
    for lru_queue in lru_queues:
        if key in lru_queue:
            lru_queue.remove(key)
            break
    
    # Recalculate replacement scores for remaining cache lines
    for remaining_key in hash_map.keys():
        replacement_scores[remaining_key] = (binary_tree[remaining_key] * 0.25 + 
                                             (cache_snapshot.access_count - residency_time[remaining_key]) * 0.25 + 
                                             fetch_cost_score[remaining_key] * 0.25 + 
                                             hit_ratio[remaining_key] * 0.25)