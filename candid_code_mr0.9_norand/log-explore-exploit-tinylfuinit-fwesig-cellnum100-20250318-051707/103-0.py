# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

from collections import defaultdict

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 1
WEIGHT_LAST_ACCESS_TIME = 1
WEIGHT_DATA_RETRIEVAL_SPEED = 1
WEIGHT_PREFETCH_BUFFER_STATUS = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, data retrieval speed, and a prefetch buffer status for each cache entry.
metadata = {
    'access_frequency': defaultdict(int),
    'last_access_time': {},
    'data_retrieval_speed': {},  # Assume we have a way to measure and update this
    'prefetch_buffer_status': {}  # Assume we have a way to determine and update this
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, old last access time, slow data retrieval speed, and prefetch buffer status indicating low future use probability.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cache_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'].get(key, 0)
        last_access_time = metadata['last_access_time'].get(key, 0)
        data_retrieval_speed = metadata['data_retrieval_speed'].get(key, 0)
        prefetch_buffer_status = metadata['prefetch_buffer_status'].get(key, 0)
        
        score = (WEIGHT_ACCESS_FREQUENCY * access_frequency +
                 WEIGHT_LAST_ACCESS_TIME * (cache_snapshot.access_count - last_access_time) +
                 WEIGHT_DATA_RETRIEVAL_SPEED * data_retrieval_speed +
                 WEIGHT_PREFETCH_BUFFER_STATUS * prefetch_buffer_status)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access time to the current time, and adjusts the prefetch buffer status based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata['access_frequency'][obj.key] += 1
    metadata['last_access_time'][obj.key] = cache_snapshot.access_count
    # Assuming synthetic update methods for data_retrieval_speed and prefetch_buffer_status
    # These would need to be defined based on actual metrics collected
    metadata['data_retrieval_speed'][obj.key] = calculate_retrieval_speed(obj)
    metadata['prefetch_buffer_status'][obj.key] = adjust_prefetch_buffer_status(obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, records the data retrieval speed, and evaluates the prefetch buffer status for potential future accesses.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata['access_frequency'][obj.key] = 1
    metadata['last_access_time'][obj.key] = cache_snapshot.access_count
    metadata['data_retrieval_speed'][obj.key] = calculate_retrieval_speed(obj)
    metadata['prefetch_buffer_status'][obj.key] = evaluate_prefetch_buffer_status(obj)
  
def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata, recalculates the weighted scores for remaining entries, and adjusts the prefetch buffer status to optimize memory usage and retrieval speed.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Remove all associated metadata
    if evicted_obj.key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_obj.key]
    if evicted_obj.key in metadata['last_access_time']:
        del metadata['last_access_time'][evicted_obj.key]
    if evicted_obj.key in metadata['data_retrieval_speed']:
        del metadata['data_retrieval_speed'][evicted_obj.key]
    if evicted_obj.key in metadata['prefetch_buffer_status']:
        del metadata['prefetch_buffer_status'][evicted_obj.key]
    
    # Recalculate weighted scores for remaining entries
    for key in cache_snapshot.cache:
        _ = calculate_weighted_score(cache_snapshot, cache_snapshot.cache[key])
    
    # Adjust prefetch buffer status
    for key in cache_snapshot.cache:
        metadata['prefetch_buffer_status'][key] = optimize_prefetch_buffer_status(key)

# Placeholder functions for actual metric calculations
def calculate_retrieval_speed(obj):
    # Implementation details would vary
    return 1

def adjust_prefetch_buffer_status(obj):
    # Implementation details would vary
    return 0

def evaluate_prefetch_buffer_status(obj):
    # Implementation details would vary
    return 0

def calculate_weighted_score(cache_snapshot, obj):
    access_frequency = metadata['access_frequency'].get(obj.key, 0)
    last_access_time = metadata['last_access_time'].get(obj.key, 0)
    data_retrieval_speed = metadata['data_retrieval_speed'].get(obj.key, 0)
    prefetch_buffer_status = metadata['prefetch_buffer_status'].get(obj.key, 0)
    
    score = (WEIGHT_ACCESS_FREQUENCY * access_frequency +
             WEIGHT_LAST_ACCESS_TIME * (cache_snapshot.access_count - last_access_time) +
             WEIGHT_DATA_RETRIEVAL_SPEED * data_retrieval_speed +
             WEIGHT_PREFETCH_BUFFER_STATUS * prefetch_buffer_status)
    
    return score

def optimize_prefetch_buffer_status(key):
    # Example: Adjust based on access pattern trends
    # Implementation details would vary
    return metadata['prefetch_buffer_status'].get(key, 0)