# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
BASELINE_PERFORMANCE_SCORE = 100
INITIAL_ERROR_RATE = 0.01

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, error rate of data reconciliation, and a performance score derived from algorithmic efficiency metrics.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'error_rate': {},
    'performance_score': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score that factors in low access frequency, older last access timestamp, higher error rate in data reconciliation, and lower performance score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        composite_score = (
            metadata['access_frequency'][key] * 0.25 +
            (cache_snapshot.access_count - metadata['last_access_timestamp'][key]) * 0.25 +
            metadata['error_rate'][key] * 0.25 +
            metadata['performance_score'][key] * 0.25
        )
        
        if composite_score < min_score:
            min_score = composite_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access timestamp to the current time, recalculates the error rate of data reconciliation, and adjusts the performance score based on the latest algorithmic efficiency metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['error_rate'][key] = min(metadata['error_rate'][key] * 0.9, 1.0)  # Example adjustment
    metadata['performance_score'][key] = BASELINE_PERFORMANCE_SCORE / metadata['access_frequency'][key]

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, estimates the initial error rate of data reconciliation, and assigns a baseline performance score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['error_rate'][key] = INITIAL_ERROR_RATE
    metadata['performance_score'][key] = BASELINE_PERFORMANCE_SCORE

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalculates the overall cache performance score, adjusts the error rate of data reconciliation for remaining objects, and updates algorithmic efficiency metrics to reflect the new cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_timestamp'][evicted_key]
    del metadata['error_rate'][evicted_key]
    del metadata['performance_score'][evicted_key]
    
    # Recalculate overall cache performance score and adjust error rates for remaining objects
    total_performance_score = sum(metadata['performance_score'].values())
    for key in metadata['performance_score']:
        metadata['performance_score'][key] = BASELINE_PERFORMANCE_SCORE * (metadata['performance_score'][key] / total_performance_score)
        metadata['error_rate'][key] = min(metadata['error_rate'][key] * 1.1, 1.0)  # Example adjustment