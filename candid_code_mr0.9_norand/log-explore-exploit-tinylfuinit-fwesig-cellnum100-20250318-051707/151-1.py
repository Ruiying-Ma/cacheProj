# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 1.0
WEIGHT_RECENCY = 1.0
WEIGHT_PATTERN_SCORE = 1.0
WEIGHT_DATA_LOCALITY_SCORE = 1.0
WEIGHT_COHERENCE_STATUS = 1.0
COHERENCE_PENALTY = 1.5
PREFETCHING_HINT_INITIAL = 0
PATTERN_SCORE_INITIAL = 1
DATA_LOCALITY_SCORE_INITIAL = 1
RECENCY_INITIAL = 0
WRITE_STATUS_CLEAN = True

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, prefetching hints, coherence status, pattern score, write status, and data locality score for each cache entry.
cache_metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates a composite score for each cache entry using a weighted sum of access frequency, recency, pattern score, data locality score, and coherence status, with a preference for clean entries. The entry with the lowest composite score is chosen for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_composite_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        metadata = cache_metadata[key]
        composite_score = (
            WEIGHT_ACCESS_FREQUENCY / (metadata['access_frequency'] + 1) +
            WEIGHT_RECENCY / (cache_snapshot.access_count - metadata['recency'] + 1) +
            WEIGHT_PATTERN_SCORE * metadata['pattern_score'] +
            WEIGHT_DATA_LOCALITY_SCORE * metadata['data_locality_score'] +
            WEIGHT_COHERENCE_STATUS * (metadata['coherence_status'] + 
                                       (COHERENCE_PENALTY if not metadata['write_status'] else 0))
        )
        
        if composite_score < lowest_composite_score:
            lowest_composite_score = composite_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the recency to the current time, adjusts the pattern score and prefetching hints based on the observed memory access pattern, recalculates the data locality score, updates the write status if necessary, and ensures coherence status is maintained.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata = cache_metadata[key]
    
    metadata['access_frequency'] += 1
    metadata['recency'] = cache_snapshot.access_count
    metadata['pattern_score'] += 1  # A simple increment, could be more complex
    metadata['prefetching_hints'] += 1  # A simple increment, could be more complex
    metadata['data_locality_score'] += 1  # A simple increment, could be more complex
    metadata['coherence_status'] = 1  # Assuming coherence is always maintained
    metadata['write_status'] = WRITE_STATUS_CLEAN  # Assuming write status remains clean

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the recency to the current time, computes the pattern score and prefetching hints based on the current memory access pattern, marks the write status as clean, calculates an initial data locality score based on the insertion context, and ensures coherence status is up-to-date.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    cache_metadata[key] = {
        'access_frequency': 1,
        'recency': cache_snapshot.access_count,
        'pattern_score': PATTERN_SCORE_INITIAL,
        'prefetching_hints': PREFETCHING_HINT_INITIAL,
        'data_locality_score': DATA_LOCALITY_SCORE_INITIAL,
        'coherence_status': 1,
        'write_status': WRITE_STATUS_CLEAN
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy clears the metadata for the evicted entry, recalculates the composite scores for remaining entries, adjusts the pattern scores, prefetching hints, and data locality scores to reflect the new cache state, updates the write status of affected entries if necessary, and ensures coherence status is maintained.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in cache_metadata:
        del cache_metadata[evicted_key]

    # Adjust metadata for all remaining entries based on the new cache state
    for key in cache_snapshot.cache.keys():
        metadata = cache_metadata[key]
        metadata['pattern_score'] += 1
        metadata['prefetching_hints'] += 1
        metadata['data_locality_score'] += 1
        metadata['coherence_status'] = 1
        metadata['write_status'] = WRITE_STATUS_CLEAN