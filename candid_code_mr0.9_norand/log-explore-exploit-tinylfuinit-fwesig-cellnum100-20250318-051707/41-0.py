# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_FREQUENCY = 1
WEIGHT_TIME = 1
WEIGHT_WRITE_BACK = 1
WEIGHT_PIPE_DEPTH = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, write-back status, and pipeline depth impact for each cache line.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining least frequently accessed, oldest access time, write-back status (preferring clean lines), and minimal impact on pipeline depth.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[cached_obj.key]
        score = (WEIGHT_FREQUENCY * meta['access_frequency'] 
                + WEIGHT_TIME * (cache_snapshot.access_count - meta['last_access_time']) 
                + WEIGHT_WRITE_BACK * meta['write_back'] 
                + WEIGHT_PIPE_DEPTH * meta['pipeline_depth_impact'])
        
        if score < min_score:
            min_score = score
            candid_obj_key = cached_obj.key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the last access time to the current time, and recalculates the pipeline depth impact for the accessed cache line.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta['access_frequency'] += 1
    meta['last_access_time'] = cache_snapshot.access_count
    meta['pipeline_depth_impact'] = calculate_pipeline_depth_impact(cache_snapshot, obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, marks the write-back status as clean, and calculates the initial pipeline depth impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'access_frequency': 1,
        'last_access_time': cache_snapshot.access_count,
        'write_back': 0,  # clean
        'pipeline_depth_impact': calculate_pipeline_depth_impact(cache_snapshot, obj)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all metadata associated with the evicted cache line and adjusts the pipeline depth impact for remaining cache lines if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Remove metadata associated with the evicted cache line
    del metadata[evicted_obj.key]

    # Adjust the pipeline depth impact for remaining cache lines if necessary
    adjust_pipeline_depth_impact(cache_snapshot, obj)

def calculate_pipeline_depth_impact(cache_snapshot, obj):
    # Calculation logic for pipeline depth impact can be implemented here. This is a placeholder function.
    return 0

def adjust_pipeline_depth_impact(cache_snapshot, obj):
    # Adjust pipeline depth impact based on the current state. This is a placeholder function.
    pass