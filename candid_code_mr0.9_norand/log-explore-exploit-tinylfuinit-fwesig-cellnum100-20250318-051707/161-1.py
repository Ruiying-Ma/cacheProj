# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
latency_weight = 1.0
frequency_weight = 1.0
priority_weight = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, and data retention priority for each cache line. It also tracks the overall cache access latency to dynamically adjust eviction criteria.

metadata = {
    # Dictionary to hold metadata for each cache line
    # key: (frequency, last_access_time, retention_priority, access_latency)
}

overall_access_latency = 0

def calculate_latency(current_time, last_access_time):
    return current_time - last_access_time

def recalculate_overall_latency(cache_snapshot):
    global overall_access_latency
    total_latency = 0
    for obj in cache_snapshot.cache.values():
        total_latency += metadata[obj.key][3]
    overall_access_latency = total_latency / len(cache_snapshot.cache) if cache_snapshot.cache else 0

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, high access latency, and low data retention priority. The cache line with the lowest score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    current_time = cache_snapshot.access_count

    for cached_obj in cache_snapshot.cache.values():
        frequency, last_access_time, retention_priority, access_latency = metadata[cached_obj.key]
        score = (latency_weight * access_latency) - (frequency_weight * frequency) + (priority_weight * (1 - retention_priority))
        if score < min_score:
            min_score = score
            candid_obj_key = cached_obj.key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the access frequency is incremented, the last access timestamp is updated to the current time, and the access latency is recalculated based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    frequency, last_access_time, retention_priority, _ = metadata[obj.key]
    latency = calculate_latency(current_time, last_access_time)
    metadata[obj.key] = (frequency + 1, current_time, retention_priority, latency)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the access frequency is initialized to 1, the last access timestamp is set to the current time, and the data retention priority is assigned based on the object's importance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    retention_priority = float(obj.size) / cache_snapshot.capacity # Example priority based on object size
    metadata[obj.key] = (1, current_time, retention_priority, 0)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalculates the overall cache access latency to ensure it reflects the current state of the cache and adjusts the data retention priorities if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in metadata:
        del metadata[evicted_obj.key]
    
    recalculate_overall_latency(cache_snapshot)
    # Example adjustment: Reduce retention priority slightly after an eviction
    for key in metadata:
        frequency, last_access_time, retention_priority, access_latency = metadata[key]
        new_priority = max(0, retention_priority - 0.01)
        metadata[key] = (frequency, last_access_time, new_priority, access_latency)