# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
MEMORY_PAGE_SIZE = 4096

# Put the metadata specifically maintained by the policy below. The policy maintains cache index, memory page size, access latency, update frequency, priority score, and recency timestamp for each cache entry. It also tracks the LRU queue (L1, L2,..., Lk) each entry belongs to.
cache_metadata = {}
LRU_queues = [[]] # at least one LRU queue

def calculate_priority(obj, metadata):
    lat = metadata["access_latency"]
    freq = metadata["update_frequency"]
    rec_time = metadata["recency_timestamp"]
    return lat / ((1 + freq) * rec_time)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first checks the non-empty LRU queue with the smallest subscript and selects the least-recently-used entry. If multiple candidates exist, it chooses the one with the lowest priority score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    for queue in LRU_queues:
        if queue:
            # Find the object with the lowest priority score in this queue
            lru_obj_key = min(queue, key=lambda k: calculate_priority(cache_snapshot.cache[k], cache_metadata[k]))
            candid_obj_key = lru_obj_key
            break
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access latency, update frequency, and recency timestamp for the accessed entry. It recalculates the priority score and moves the entry to the most-recently-used end of the next higher LRU queue, flushing if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    obj_key = obj.key
    metadata = cache_metadata[obj_key]
    metadata["access_latency"] += 1
    metadata["update_frequency"] += 1
    metadata["recency_timestamp"] = cache_snapshot.access_count
    priority_score = calculate_priority(obj, metadata)
    metadata["priority_score"] = priority_score
    
    # Move to the most-recently-used end of the next higher LRU queue
    current_queue_idx = metadata["lru_queue"]
    next_queue_idx = current_queue_idx + 1
    if next_queue_idx >= len(LRU_queues):
        LRU_queues.append([])  # Create a new LRU queue if necessary
    
    LRU_queues[current_queue_idx].remove(obj_key)
    LRU_queues[next_queue_idx].append(obj_key)
    metadata["lru_queue"] = next_queue_idx

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the metadata including access latency, update frequency, recency timestamp, and priority score. The entry is placed at the most-recently-used end of L1.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    obj_key = obj.key
    metadata = {
        "access_latency": 1,
        "update_frequency": 1,
        "recency_timestamp": cache_snapshot.access_count,
        "priority_score": 1.0 / cache_snapshot.access_count,
        "lru_queue": 0
    }
    cache_metadata[obj_key] = metadata
    LRU_queues[0].append(obj_key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the metadata associated with the evicted entry and recalculates the priority scores for the remaining entries. It also updates the LRU queues to reflect the eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    evicted_metadata = cache_metadata.pop(evicted_key, None)

    if evicted_metadata:
        lru_queue_idx = evicted_metadata["lru_queue"]
        LRU_queues[lru_queue_idx].remove(evicted_key)
    
    for key in cache_snapshot.cache:
        metadata = cache_metadata[key]
        priority_score = calculate_priority(cache_snapshot.cache[key], metadata)
        metadata["priority_score"] = priority_score