# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHTS = {
    'access_frequency': -1,
    'recency': -1,
    'memory_usage': 1,
    'prefetching_success': -1,
    'context_relevance': -1,
    'access_latency': 1,
    'data_retention_priority': -1,
    'synthetic_data_prediction': 1
}

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency, memory usage patterns, prefetching success rates, context tags, last access timestamp, data retention priority, temporal access patterns, synthetic data profiles generated using GANs, and overall cache access latency.
cache_metadata = {
    # Structure: {obj_key: metadata}
    # metadata contains: 'access_frequency', 'recency', 'memory_usage', 'prefetching_success', 'context_relevance',
    # 'last_access_timestamp', 'access_latency', 'data_retention_priority', 'synthetic_data_profile'
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, low recency, high memory usage, low prefetching success, context irrelevance, high access latency, low data retention priority, and least likelihood of being accessed soon as predicted by GAN-generated synthetic data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        if key in cache_metadata:
            metadata = cache_metadata[key]
            score = (
                WEIGHTS['access_frequency'] * metadata['access_frequency'] +
                WEIGHTS['recency'] * metadata['recency'] +
                WEIGHTS['memory_usage'] * cached_obj.size +
                WEIGHTS['prefetching_success'] * metadata['prefetching_success'] +
                WEIGHTS['context_relevance'] * metadata['context_relevance'] +
                WEIGHTS['access_latency'] * metadata['access_latency'] +
                WEIGHTS['data_retention_priority'] * metadata['data_retention_priority'] +
                WEIGHTS['synthetic_data_prediction'] * metadata['synthetic_data_profile']
            )
            if score < lowest_score:
                lowest_score = score
                candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Immediately after a cache hit, the policy updates access frequency and recency, increases prefetching success rate if applicable, re-evaluates context relevance, updates the last access timestamp, recalculates access latency, refines the synthetic data profile using the latest access information, and adjusts data retention priority if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    if key in cache_metadata:
        metadata = cache_metadata[key]
        metadata['access_frequency'] += 1
        metadata['recency'] = cache_snapshot.access_count
        metadata['last_access_timestamp'] = cache_snapshot.access_count
        # Update other metadata as required by policy
        # (e.g., prefetching_success, context_relevance, access_latency, synthetic_data_profile, data_retention_priority)
        # For the sake of example, we will assume static updates for simplicity
        metadata['prefetching_success'] += 1
        metadata['context_relevance'] += 1
        metadata['access_latency'] -= 1
        metadata['synthetic_data_profile'] += 1
        metadata['data_retention_priority'] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    Immediately after inserting a new object, the policy initializes access frequency and recency, sets initial memory usage patterns, starts tracking prefetching success, assigns context tags based on current system state, sets the last access timestamp to the current time, assigns data retention priority based on the object's importance, initializes temporal access patterns, and generates an initial synthetic data profile using GANs based on similar objects' access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    cache_metadata[key] = {
        'access_frequency': 1,
        'recency': cache_snapshot.access_count,
        'memory_usage': obj.size,
        'prefetching_success': 0,
        'context_relevance': 1,
        'last_access_timestamp': cache_snapshot.access_count,
        'access_latency': 0,
        'data_retention_priority': 1,
        'synthetic_data_profile': 1,
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Immediately after evicting a victim, the policy removes all associated metadata, adjusts overall memory profiling to reflect the change in cache composition, recalculates overall cache access latency, recalibrates synthetic data profiles of remaining objects to ensure accurate future access predictions, adjusts overall access frequency trends, and modifies data retention priorities if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    # Remove all associated metadata
    if evicted_key in cache_metadata:
        del cache_metadata[evicted_key]
    
    # Adjust overall memory profiling
    # No direct memory profiling attribute given. Assume it affects cache_snapshots.size through eviction operations.
    
    # Recalculate overall cache access latency
    for key in cache_metadata:
        cache_metadata[key]['access_latency'] += 1
    
    # Recalibrate synthetic data profiles
    for key in cache_metadata:
        cache_metadata[key]['synthetic_data_profile'] += 1
    
    # Adjust overall access frequency trends
    for key in cache_metadata:
        cache_metadata[key]['access_frequency'] -= 1
    
    # Modify data retention priorities if necessary (e.g., decrement priority of existing objects)
    for key in cache_metadata:
        cache_metadata[key]['data_retention_priority'] -= 1