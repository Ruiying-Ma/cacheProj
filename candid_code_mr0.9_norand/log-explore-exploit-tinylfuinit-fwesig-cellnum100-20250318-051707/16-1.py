# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Import required modules
from collections import defaultdict
import time

# Put tunable constant parameters below
LATENCY_IMPACT_CONSTANT = 1  # Example constant value for latency impact calculation

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, write-back status, and latency impact score for each cache entry.
access_frequency = defaultdict(int)
last_access_timestamp = defaultdict(int)
write_back_status = defaultdict(str)
latency_impact_score = defaultdict(int)

def calculate_latency_impact(obj_key):
    # Placeholder function to represent latency impact score computation
    return access_frequency[obj_key] * LATENCY_IMPACT_CONSTANT

def composite_score(obj_key, current_time):
    freq_score = access_frequency[obj_key]
    last_access_score = current_time - last_access_timestamp[obj_key]
    write_back_score = 1 if write_back_status[obj_key] == "dirty" else 0
    latency_score = latency_impact_score[obj_key]
    return freq_score + last_access_score + write_back_score + latency_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score derived from the least frequently accessed, oldest timestamp, write-back necessity, and highest latency impact, prioritizing entries with the lowest composite score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    current_time = cache_snapshot.access_count
    
    for key in cache_snapshot.cache:
        score = composite_score(key, current_time)
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access timestamp to the current time, and recalculates the latency impact score based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    access_frequency[obj.key] += 1
    last_access_timestamp[obj.key] = current_time
    latency_impact_score[obj.key] = calculate_latency_impact(obj.key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, marks the write-back status as clean, and assigns an initial latency impact score based on the object's expected access latency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    access_frequency[obj.key] = 1
    last_access_timestamp[obj.key] = current_time
    write_back_status[obj.key] = "clean"  # Initially set to 'clean'
    latency_impact_score[obj.key] = calculate_latency_impact(obj.key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy removes all associated metadata for the evicted entry and adjusts the latency impact scores of remaining entries to reflect the change in cache composition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del access_frequency[evicted_obj.key]
    del last_access_timestamp[evicted_obj.key]
    del write_back_status[evicted_obj.key]
    del latency_impact_score[evicted_obj.key]
    
    # Adjust latency impact scores of remaining entries
    for key in cache_snapshot.cache:
        latency_impact_score[key] = calculate_latency_impact(key)