# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
EXPLAINABILITY_WEIGHT = 0.2
ACCESS_FREQUENCY_WEIGHT = 0.4
RECENCY_WEIGHT = 0.4

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency, and a generative model's prediction score for future access likelihood. It also includes explainability scores to understand the reasoning behind each prediction.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'recency': {},  # {obj.key: last_access_time}
    'prediction_score': {},  # {obj.key: prediction_score}
    'explainability_score': {}  # {obj.key: explainability_score}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combination of low access frequency, low recency, and low prediction scores from the generative model. Items with the lowest explainability scores are prioritized for eviction to ensure transparency in decision-making.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (ACCESS_FREQUENCY_WEIGHT * metadata['access_frequency'].get(key, 0) +
                 RECENCY_WEIGHT * (cache_snapshot.access_count - metadata['recency'].get(key, 0)) +
                 EXPLAINABILITY_WEIGHT * metadata['explainability_score'].get(key, 0))
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the access frequency and recency metadata are updated to reflect the latest access. The generative model's prediction score is recalibrated based on the new access pattern, and the explainability score is adjusted to reflect the updated prediction rationale.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['prediction_score'][key] = metadata['access_frequency'][key] / (cache_snapshot.access_count - metadata['recency'][key] + 1)
    metadata['explainability_score'][key] = 1 / (metadata['prediction_score'][key] + 1)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency and recency metadata. The generative model generates an initial prediction score for future access likelihood, and an initial explainability score is assigned to understand the prediction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['prediction_score'][key] = 1 / (cache_snapshot.access_count - metadata['recency'][key] + 1)
    metadata['explainability_score'][key] = 1 / (metadata['prediction_score'][key] + 1)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalibrates the generative model to improve future predictions. The access frequency and recency metadata are adjusted to reflect the removal, and the explainability scores are updated to ensure the reasoning behind the eviction is clear.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['recency']:
        del metadata['recency'][evicted_key]
    if evicted_key in metadata['prediction_score']:
        del metadata['prediction_score'][evicted_key]
    if evicted_key in metadata['explainability_score']:
        del metadata['explainability_score'][evicted_key]
    
    # Recalibrate generative model (dummy recalibration for illustration)
    for key in metadata['prediction_score']:
        metadata['prediction_score'][key] = metadata['access_frequency'][key] / (cache_snapshot.access_count - metadata['recency'][key] + 1)
        metadata['explainability_score'][key] = 1 / (metadata['prediction_score'][key] + 1)