# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for frequency
BETA = 0.3  # Weight for recency
GAMMA = 0.2  # Weight for size

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, and load distribution across cache lines. It also tracks the size of each cached object to optimize memory usage.
access_frequency = {}
recency_of_access = {}
size_metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted combination of least frequently used, least recently used, and the size of the object. It aims to balance load distribution and optimize memory usage by evicting larger, less accessed objects first.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        frequency = access_frequency.get(key, 0)
        recency = recency_of_access.get(key, 0)
        size = cached_obj.size
        score = ALPHA * frequency + BETA * (cache_snapshot.access_count - recency) + GAMMA * size
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and recency of the accessed object. It also adjusts the load distribution metadata to reflect the current state of cache line utilization.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = access_frequency.get(key, 0) + 1
    recency_of_access[key] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy updates the access frequency to an initial value, sets the recency to the current time, and recalculates load distribution to ensure balanced utilization across cache lines. It also updates the size metadata to account for the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 1
    recency_of_access[key] = cache_snapshot.access_count
    size_metadata[key] = obj.size

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the access frequency and recency data for the evicted object, recalculates load distribution to reflect the removal, and updates the size metadata to free up memory space.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in access_frequency:
        del access_frequency[key]
    if key in recency_of_access:
        del recency_of_access[key]
    if key in size_metadata:
        del size_metadata[key]