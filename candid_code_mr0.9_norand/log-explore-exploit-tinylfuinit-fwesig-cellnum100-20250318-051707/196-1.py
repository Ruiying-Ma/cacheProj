# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for access frequency
BETA = 0.3   # Weight for last access time
GAMMA = 0.1  # Weight for load forecast
DELTA = 0.1  # Weight for sanitized status

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, load forecast metrics, data sanitization status, and error correction flags for each cache entry.
cache_metadata = {
    # Key: object key
    # Value: dictionary with metadata (access_frequency, last_access_time, load_forecast, is_sanitized, has_error)
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted heuristic combining least frequently used, oldest access time, lowest load forecast, and sanitized status. Entries with errors are prioritized for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        metadata = cache_metadata[key]
        score = (
            ALPHA * -metadata['access_frequency']
            + BETA * (cache_snapshot.access_count - metadata['last_access_time'])
            + GAMMA * metadata['load_forecast']
            + DELTA * (0 if metadata['is_sanitized'] else 1)
            - (10 if metadata['has_error'] else 0)  # Strongly prioritize evicting error entries
        )

        if score < min_score:
            min_score = score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access time to the current time, adjusts load forecast metrics based on recent access patterns, and verifies the data sanitization status.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    cache_metadata[key]['access_frequency'] += 1
    cache_metadata[key]['last_access_time'] = cache_snapshot.access_count
    # Simplified load forecast adjustment
    cache_metadata[key]['load_forecast'] = math.log(1 + cache_metadata[key]['access_frequency'])
    # Re-verify data sanitization status (simplified as True for the purpose of this example)
    cache_metadata[key]['is_sanitized'] = True

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, estimates initial load forecast metrics, and performs data sanitization checks while setting error correction flags if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    cache_metadata[key] = {
        'access_frequency': 1,
        'last_access_time': cache_snapshot.access_count,
        'load_forecast': 1.0,  # Initial load forecast
        'is_sanitized': True,  # Initial data sanitization status
        'has_error': False  # Initial error correction flags
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalculates load forecast metrics for remaining entries, updates global data sanitization status, and adjusts error correction flags to ensure cache integrity.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in cache_metadata:
        del cache_metadata[evicted_key]
    # Recalculate load forecast metrics for remaining entries
    for key, metadata in cache_metadata.items():
        metadata['load_forecast'] = math.log(1 + metadata['access_frequency'])
    # Update global data sanitization status (simplified approach)
    global_data_sanitized = all(metadata['is_sanitized'] for metadata in cache_metadata.values())
    # Adjust error correction flags if necessary (simplified as no-op in this example)