# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Set tunable constant parameters below
FETCH_COST = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains a Hash Map for quick access, a Binary Tree for access frequencies, a Linked List for order of access, an Array for cache data, and metadata for each cache line including access frequency, recency of access, fetch cost score, and queue position (FIFO or LRU).

import bisect
from collections import defaultdict, deque

# Hash Map for quick access
hash_map = {}

# Binary Tree for access frequencies (simulated using sorted array for simplicity)
freq_sorted = []

# Linked List for order of access
access_order = deque()

# Queues for FIFO and LRU management
fifo_queue = deque()
lru_queues = [deque(), deque()]  # Assuming L1 and L2 for simplicity

# Metadata
metadata = {}

class MetaData:
    def __init__(self, frequency=1, recency=0, fetch_cost_score=FETCH_COST, queue_position='FIFO'):
        self.frequency = frequency
        self.recency = recency
        self.fetch_cost_score = fetch_cost_score
        self.queue_position = queue_position

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first checks the FIFO queue for an object with zero frequency and evicts it. If no such object is found, it calculates a combined score based on low access frequency, low recency of access, and high fetch cost for objects in the LRU queues and evicts the object with the lowest score from the non-empty LRU queue with the smallest subscript.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    
    # First, check the FIFO queue
    for fifo_obj_key in list(fifo_queue):
        if metadata[fifo_obj_key].frequency == 0:
            candid_obj_key = fifo_obj_key
            fifo_queue.remove(fifo_obj_key)
            break
    
    if candid_obj_key is None:
        # Calculate combined scores for objects in LRU queues
        min_score = float('inf')
        for lru_queue in lru_queues:
            for lru_obj_key in lru_queue:
                meta = metadata[lru_obj_key]
                combined_score = (meta.frequency * 0.4) + ((cache_snapshot.access_count - meta.recency) * 0.4) - (meta.fetch_cost_score * 0.2)
                if combined_score < min_score:
                    min_score = combined_score
                    candid_obj_key = lru_obj_key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency in the Binary Tree is updated, the accessed item is moved to the front of the Linked List, the access frequency is incremented, the recency of access is updated to the current time, and the fetch cost score is slightly decreased. If the object is in an LRU queue, it is moved to the most-recently-used end of the next higher LRU queue. If the higher LRU queue is full, the least-recently-used object in that queue is moved to the most-recently-used end of the current LRU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    obj_key = obj.key
    
    meta = metadata[obj_key]
    meta.frequency += 1
    meta.recency = cache_snapshot.access_count
    meta.fetch_cost_score = max(0, meta.fetch_cost_score - 0.1)
    
    access_order.remove(obj_key)
    access_order.appendleft(obj_key)
    
    # Update frequency in Binary Tree (sorted array for simplicity)
    freq_sorted.remove((meta.frequency - 1, obj_key))
    bisect.insort(freq_sorted, (meta.frequency, obj_key))
    
    # Update LRU queues
    for i in range(len(lru_queues)):
        if obj_key in lru_queues[i]:
            lru_queues[i].remove(obj_key)
            if i + 1 < len(lru_queues):
                lru_queues[i + 1].append(obj_key)
                if len(lru_queues[i + 1]) > cache_snapshot.capacity - len(fifo_queue):
                    moved_key = lru_queues[i + 1].popleft()
                    lru_queues[i].append(moved_key)
            break

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the object is added to the Hash Map, inserted into the Binary Tree with an initial frequency count, appended to the end of the Linked List, placed in the next available slot in the Array, the access frequency is initialized to 1, the recency of access is set to the current time, and the fetch cost score is calculated. The object is placed at the most-recently-used end of L1. If L1 is full, the least-recently-used object in L1 is moved to the rear of the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    obj_key = obj.key
    
    hash_map[obj_key] = obj
    bisect.insort(freq_sorted, (1, obj_key))
    access_order.append(obj_key)
    
    metadata[obj_key] = MetaData(frequency=1, recency=cache_snapshot.access_count, fetch_cost_score=FETCH_COST, queue_position='L1')
    
    if len(lru_queues[0]) == cache_snapshot.capacity - len(fifo_queue):
        moved_key = lru_queues[0].popleft()
        fifo_queue.append(moved_key)
    lru_queues[0].append(obj_key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the object is removed from the Hash Map, deleted from the Binary Tree, removed from the Linked List, cleared from the Array, the metadata for the evicted cache line is cleared, objects behind the evicted object in the FIFO queue move one step forward to fill the vacancy, and the remaining cache lines' metadata are adjusted if necessary to maintain relative rankings for eviction decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    del hash_map[evicted_key]
    freq_sorted.remove((metadata[evicted_key].frequency, evicted_key))
    access_order.remove(evicted_key)
    
    for queue in lru_queues:
        if evicted_key in queue:
            queue.remove(evicted_key)
            break
    
    if evicted_key in fifo_queue:
        fifo_queue.remove(evicted_key)

    del metadata[evicted_key]