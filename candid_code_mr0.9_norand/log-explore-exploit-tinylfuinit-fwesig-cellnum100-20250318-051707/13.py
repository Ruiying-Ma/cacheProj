# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
HIT_RATIO_WEIGHT = 0.5
RESIDENCY_TIME_WEIGHT = 0.3
ACCESS_FREQUENCY_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains hit ratio tracking for each cache line, cache residency time, access frequency patterns, and a replacement score for each cache line.
hit_ratios = collections.defaultdict(int)
residency_times = collections.defaultdict(int)
access_frequencies = collections.defaultdict(int)
replacement_scores = collections.defaultdict(float)

def calculate_replacement_score(key, cache_snapshot):
    hit_ratio = hit_ratios[key]
    residency_time = cache_snapshot.access_count - residency_times[key]
    access_frequency = access_frequencies[key]
    score = (HIT_RATIO_WEIGHT * (1 - hit_ratio) +
             RESIDENCY_TIME_WEIGHT * residency_time +
             ACCESS_FREQUENCY_WEIGHT * (1 / (access_frequency + 1)))
    return score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on the lowest replacement score, which is calculated using a combination of low hit ratio, long residency time, and infrequent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key in cache_snapshot.cache:
        score = calculate_replacement_score(key, cache_snapshot)
        replacement_scores[key] = score
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the hit ratio by incrementing the hit count, resets the residency time, and updates the access frequency pattern to reflect the recent access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    hit_ratios[obj.key] += 1
    residency_times[obj.key] = cache_snapshot.access_count
    access_frequencies[obj.key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the hit ratio to zero, sets the residency time to the current time, and starts tracking the access frequency pattern from the moment of insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    hit_ratios[obj.key] = 0
    residency_times[obj.key] = cache_snapshot.access_count
    access_frequencies[obj.key] = 0

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all metadata associated with the evicted cache line and recalculates the replacement scores for the remaining cache lines to ensure accurate future evictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del hit_ratios[evicted_obj.key]
    del residency_times[evicted_obj.key]
    del access_frequencies[evicted_obj.key]
    del replacement_scores[evicted_obj.key]
    
    for key in cache_snapshot.cache:
        replacement_scores[key] = calculate_replacement_score(key, cache_snapshot)