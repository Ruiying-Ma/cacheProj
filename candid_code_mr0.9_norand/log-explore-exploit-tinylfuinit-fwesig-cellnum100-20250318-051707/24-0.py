# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
LATENCY_IMPACT_FACTOR = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access timestamp, write-back status, latency impact score, and a circular pointer for each cache entry.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'write_back_status': {},
    'latency_impact_score': {},
    'circular_pointer': 0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy uses the circular pointer to traverse the cache and calculates a composite score for each entry based on access frequency, last access timestamp, write-back necessity, and latency impact. It evicts the entry with the lowest composite score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    def composite_score(key):
        freq = metadata['access_frequency'].get(key, 0)
        timestamp = metadata['last_access_timestamp'].get(key, 0)
        write_back = metadata['write_back_status'].get(key, 'clean')
        latency_score = metadata['latency_impact_score'].get(key, 0.0)
        score = (1 / freq) + (time.time() - timestamp) + latency_score
        if write_back == 'dirty':
            score += LATENCY_IMPACT_FACTOR
        return score
    
    min_score = float('inf')
    candid_obj_key = None
    cache_keys = list(cache_snapshot.cache.keys())

    for _ in range(len(cache_keys)):
        key = cache_keys[metadata['circular_pointer']]
        score = composite_score(key)
        if score < min_score:
            min_score = score
            candid_obj_key = key
        metadata['circular_pointer'] = (metadata['circular_pointer'] + 1) % len(cache_keys)
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, refreshes the last access timestamp to the current time, recalculates the latency impact score based on recent access patterns, and keeps the pointer at its current position.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['latency_impact_score'][key] = 1 / metadata['access_frequency'][key]  # Simple formula for latency impact

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, marks the write-back status as clean, assigns an initial latency impact score based on expected access latency, and places the object at the current pointer location without moving the pointer.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['write_back_status'][key] = 'clean'
    metadata['latency_impact_score'][key] = 1.0  # Initial latency impact score based on expected access latency

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy removes all associated metadata for the evicted entry, adjusts the latency impact scores of remaining entries to reflect the change in cache composition, and keeps the pointer at its current position.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in metadata['access_frequency']:
        del metadata['access_frequency'][key]
    if key in metadata['last_access_timestamp']:
        del metadata['last_access_timestamp'][key]
    if key in metadata['write_back_status']:
        del metadata['write_back_status'][key]
    if key in metadata['latency_impact_score']:
        del metadata['latency_impact_score'][key]