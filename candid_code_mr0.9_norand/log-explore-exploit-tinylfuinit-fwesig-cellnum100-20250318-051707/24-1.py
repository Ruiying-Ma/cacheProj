# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_LATENCY_IMPACT_SCORE = 10

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access timestamp, write-back status, latency impact score, and a circular pointer for each cache entry.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'write_back_status': {},
    'latency_impact_score': {},
    'circular_pointer': None
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy uses the circular pointer to traverse the cache and calculates a composite score for each entry based on access frequency, last access timestamp, write-back necessity, and latency impact. It evicts the entry with the lowest composite score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    circular_pointer = metadata['circular_pointer']
    min_score = float('inf')

    for _ in range(len(cache_snapshot.cache)):
        current_key = list(cache_snapshot.cache.keys())[circular_pointer]
        current_object = cache_snapshot.cache[current_key]

        composite_score = (
            metadata['access_frequency'][current_key] /
            ((cache_snapshot.access_count - metadata['last_access_timestamp'][current_key] + 1) *
             metadata['latency_impact_score'][current_key])
        )

        if composite_score < min_score:
            min_score = composite_score
            candid_obj_key = current_key

        circular_pointer = (circular_pointer + 1) % len(cache_snapshot.cache)

    metadata['circular_pointer'] = circular_pointer
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, refreshes the last access timestamp to the current time, recalculates the latency impact score based on recent access patterns, and keeps the pointer at its current position.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    if obj.key in cache_snapshot.cache:
        metadata['access_frequency'][obj.key] += 1
        metadata['last_access_timestamp'][obj.key] = cache_snapshot.access_count
        metadata['latency_impact_score'][obj.key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, marks the write-back status as clean, assigns an initial latency impact score based on expected access latency, and places the object at the current pointer location without moving the pointer.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    metadata['access_frequency'][obj.key] = 1
    metadata['last_access_timestamp'][obj.key] = cache_snapshot.access_count
    metadata['write_back_status'][obj.key] = 'clean'
    metadata['latency_impact_score'][obj.key] = INITIAL_LATENCY_IMPACT_SCORE

    if metadata['circular_pointer'] is None:
        metadata['circular_pointer'] = 0

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy removes all associated metadata for the evicted entry, adjusts the latency impact scores of remaining entries to reflect the change in cache composition, and keeps the pointer at its current position.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    del metadata['access_frequency'][evicted_obj.key]
    del metadata['last_access_timestamp'][evicted_obj.key]
    del metadata['write_back_status'][evicted_obj.key]
    del metadata['latency_impact_score'][evicted_obj.key]

    # Adjust the latency impact scores for remaining entries if needed
    for key in metadata['latency_impact_score']:
        metadata['latency_impact_score'][key] = max(1, metadata['latency_impact_score'][key] - 1)