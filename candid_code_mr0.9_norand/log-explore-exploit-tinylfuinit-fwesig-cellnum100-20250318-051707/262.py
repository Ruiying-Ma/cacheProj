# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
FETCH_COST_DECREASE = 0.9
MEMORY_ALIGNMENT_FACTOR = 1.0
BANDWIDTH_USAGE_FACTOR = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, fetch cost score, queue position, last access timestamp, data synchronization status, memory alignment status, and bandwidth usage statistics for each cache line.
metadata = collections.defaultdict(lambda: {
    'access_frequency': 0,
    'recency_of_access': 0,
    'fetch_cost_score': 1.0,
    'queue_position': 0,
    'last_access_timestamp': 0,
    'data_sync_status': True,
    'memory_alignment_status': MEMORY_ALIGNMENT_FACTOR,
    'bandwidth_usage': BANDWIDTH_USAGE_FACTOR
})

fifo_queue = collections.deque()

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first checks the FIFO queue for an object with zero frequency and evicts it. If no such object is found, it calculates a combined weighted score based on low access frequency, old access timestamp, poor memory alignment, high bandwidth usage, least recency, and high fetch cost, prioritizing entries with outdated synchronization status for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Check FIFO queue for zero frequency object
    for key in fifo_queue:
        if metadata[key]['access_frequency'] == 0:
            candid_obj_key = key
            break
    
    if candid_obj_key is None:
        # Calculate combined weighted score for eviction
        min_score = float('inf')
        for key, cached_obj in cache_snapshot.cache.items():
            score = (
                metadata[key]['access_frequency'] +
                (cache_snapshot.access_count - metadata[key]['last_access_timestamp']) +
                metadata[key]['fetch_cost_score'] +
                metadata[key]['memory_alignment_status'] +
                metadata[key]['bandwidth_usage'] +
                (cache_snapshot.access_count - metadata[key]['recency_of_access'])
            )
            if not metadata[key]['data_sync_status']:
                score += 1  # Prioritize outdated synchronization status
            if score < min_score:
                min_score = score
                candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the recency of access and last access timestamp to the current time, slightly decreases the fetch cost score, checks and updates the data synchronization status, recalculates memory alignment and bandwidth usage statistics, and updates the queue position if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['access_frequency'] += 1
    metadata[key]['recency_of_access'] = cache_snapshot.access_count
    metadata[key]['last_access_timestamp'] = cache_snapshot.access_count
    metadata[key]['fetch_cost_score'] *= FETCH_COST_DECREASE
    metadata[key]['data_sync_status'] = True  # Assume data is synchronized after access
    metadata[key]['memory_alignment_status'] = MEMORY_ALIGNMENT_FACTOR
    metadata[key]['bandwidth_usage'] = BANDWIDTH_USAGE_FACTOR
    # Update queue position if necessary
    if key in fifo_queue:
        fifo_queue.remove(key)
    fifo_queue.append(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the recency of access and last access timestamp to the current time, calculates the fetch cost score, marks the data synchronization status as up-to-date, assesses the memory alignment, records initial bandwidth usage statistics, and places the object at the most-recently-used end of L1.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['access_frequency'] = 1
    metadata[key]['recency_of_access'] = cache_snapshot.access_count
    metadata[key]['last_access_timestamp'] = cache_snapshot.access_count
    metadata[key]['fetch_cost_score'] = 1.0  # Initial fetch cost score
    metadata[key]['data_sync_status'] = True
    metadata[key]['memory_alignment_status'] = MEMORY_ALIGNMENT_FACTOR
    metadata[key]['bandwidth_usage'] = BANDWIDTH_USAGE_FACTOR
    fifo_queue.append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy clears all associated metadata, recalculates overall cache bandwidth usage, adjusts memory alignment statistics, removes the recency information, and updates the queue positions of remaining objects if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    # Clear all associated metadata
    if evicted_key in metadata:
        del metadata[evicted_key]
    if evicted_key in fifo_queue:
        fifo_queue.remove(evicted_key)
    # Recalculate overall cache bandwidth usage and adjust memory alignment statistics
    total_bandwidth_usage = sum(metadata[key]['bandwidth_usage'] for key in cache_snapshot.cache)
    total_memory_alignment = sum(metadata[key]['memory_alignment_status'] for key in cache_snapshot.cache)
    # Update queue positions of remaining objects if necessary
    for key in fifo_queue:
        metadata[key]['queue_position'] = fifo_queue.index(key)