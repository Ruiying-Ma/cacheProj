# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
DEFAULT_PRIORITY = 1
DEFAULT_FAULT_TOLERANCE_SCORE = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, data processing priority, and fault tolerance score for each cache entry.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by considering the lowest combination of access frequency, data processing priority, and fault tolerance score, while also factoring in the oldest last access timestamp.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_freq = metadata[key]['access_frequency']
        priority = metadata[key]['data_processing_priority']
        fault_tolerance = metadata[key]['fault_tolerance_score']
        last_access = metadata[key]['last_access_timestamp']
        
        score = access_freq + priority + fault_tolerance + (cache_snapshot.access_count - last_access)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access timestamp to the current time, and adjusts the fault tolerance score based on the success of parallel computations.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['access_frequency'] += 1
    metadata[key]['last_access_timestamp'] = cache_snapshot.access_count
    # Adjust fault tolerance score based on success of parallel computations (dummy implementation)
    metadata[key]['fault_tolerance_score'] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, assigns a data processing priority based on the object's importance, and calculates an initial fault tolerance score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'access_frequency': 1,
        'last_access_timestamp': cache_snapshot.access_count,
        'data_processing_priority': DEFAULT_PRIORITY,
        'fault_tolerance_score': DEFAULT_FAULT_TOLERANCE_SCORE
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalculates the fault tolerance scores for remaining entries to ensure system reliability, and may adjust data processing priorities to optimize future cache performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata[evicted_key]
    
    for key in cache_snapshot.cache.keys():
        # Recalculate fault tolerance scores (dummy implementation)
        metadata[key]['fault_tolerance_score'] += 1
        # Adjust data processing priorities (dummy implementation)
        metadata[key]['data_processing_priority'] += 1