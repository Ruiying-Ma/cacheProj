# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
RETENTION_WEIGHT = 1.0
ACCESS_FREQ_WEIGHT = 1.0
RECENCY_WEIGHT = 1.0
SPATIAL_LOC_WEIGHT = 1.0
MEMORY_SCHED_WEIGHT = 1.0
WRITE_BACK_WEIGHT = 1.0
LATENCY_IMPACT_WEIGHT = 1.0
PIPELINE_DEPTH_WEIGHT = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains update frequency, last access time, retention score, access frequency, recency of access, spatial locality score, memory scheduling priority, write-back status, latency impact score, and pipeline depth impact for each cache object.
cache_metadata = {}

def calculate_composite_score(metadata):
    return (
        RETENTION_WEIGHT * metadata['retention_score'] + 
        ACCESS_FREQ_WEIGHT * metadata['access_frequency'] + 
        RECENCY_WEIGHT * metadata['recency'] + 
        SPATIAL_LOC_WEIGHT * metadata['spatial_locality'] + 
        MEMORY_SCHED_WEIGHT * metadata['memory_scheduling'] + 
        WRITE_BACK_WEIGHT * metadata['write_back'] + 
        LATENCY_IMPACT_WEIGHT * metadata['latency_impact'] + 
        PIPELINE_DEPTH_WEIGHT * metadata['pipeline_depth']
    )

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score based on retention score, access frequency, recency of access, spatial locality score, memory scheduling priority, write-back status, latency impact score, and pipeline depth impact, evicting the object with the lowest composite score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float("inf")
    
    # Iterate through current cache to find the object with the lowest composite score
    for key, cached_obj in cache_snapshot.cache.items():
        score = calculate_composite_score(cache_metadata[key])
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Immediately after a cache hit, the policy increments the cache hit count and access frequency, updates the last access time and recency timestamp, recalculates the retention score, spatial locality score, memory scheduling priority, latency impact score, and pipeline depth impact for the accessed object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata = cache_metadata[obj.key]
    metadata['last_access_time'] = cache_snapshot.access_count
    metadata['recency'] = cache_snapshot.access_count
    metadata['access_frequency'] += 1
    metadata['retention_score'] = calculate_composite_score(metadata)
    # Update any other values specific to the cache policy
    # ...

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    Immediately after inserting a new object, the policy initializes the update frequency, access frequency, last access time, recency timestamp, spatial locality score, memory scheduling priority, write-back status, latency impact score, pipeline depth impact, and calculates the initial retention score based on these values.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    if obj.key not in cache_metadata:
        cache_metadata[obj.key] = {
            'update_frequency': 1,
            'access_frequency': 1,
            'last_access_time': cache_snapshot.access_count,
            'recency': cache_snapshot.access_count,
            'spatial_locality': 0, # Calculation if needed
            'memory_scheduling': 0, # Calculation if needed
            'write_back': 0, # Boolean if necessary
            'latency_impact': 0, # Calculation if needed
            'pipeline_depth': 0, # Calculation if needed
            'retention_score': 0
        }
    metadata = cache_metadata[obj.key]
    metadata['retention_score'] = calculate_composite_score(metadata)
    # Update any other values specific to the cache policy
    # ...

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Immediately after evicting an object, the policy removes all associated metadata for the evicted entry and recalculates the retention scores, memory scheduling priorities, latency impact scores, and pipeline depth impacts of remaining objects to reflect the current cache state and optimize future access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in cache_metadata:
        del cache_metadata[evicted_obj.key]

    for key in cache_snapshot.cache:
        metadata = cache_metadata[key]
        metadata['retention_score'] = calculate_composite_score(metadata)
        # Update any other values specific to the cache policy
        # ...