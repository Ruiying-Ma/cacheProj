# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

from collections import defaultdict

# Put tunable constant parameters below
FREQUENCY_WEIGHT = 1
RECENCY_WEIGHT = 1
WRITE_BUFFER_WEIGHT = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, and write buffer status for each cache entry. Additionally, it tracks the overall cache hit rate and miss penalty statistics.
access_frequency = defaultdict(int)
recency = {}
write_buffer_status = defaultdict(bool)
cache_hit_rate = 0
miss_penalty = 0

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted combination of least frequently accessed, least recently accessed, and entries with the least write buffer activity. It prioritizes evicting entries with lower access frequency and recency while considering write buffer status to minimize miss penalty.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    global access_frequency, recency, write_buffer_status

    candid_obj_key = None
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        freq = access_frequency[key]
        rec = cache_snapshot.access_count - recency[key]
        write_buffer = 1 if write_buffer_status[key] else 0
        score = (FREQUENCY_WEIGHT * freq + 
                 RECENCY_WEIGHT * rec + 
                 WRITE_BUFFER_WEIGHT * write_buffer)
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and recency metadata for the accessed entry. It also adjusts the overall cache hit rate statistics to reflect the successful access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    global access_frequency, recency
    access_frequency[obj.key] += 1
    recency[obj.key] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object into the cache, the policy initializes the access frequency and recency metadata for the new entry. It updates the write buffer status if the entry involves a write operation and adjusts the overall cache hit rate and miss penalty statistics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    global access_frequency, recency, write_buffer_status
    # Assuming obj has an attribute is_write to determine if it's a write operation.
    access_frequency[obj.key] = 1
    recency[obj.key] = cache_snapshot.access_count
    write_buffer_status[obj.key] = getattr(obj, 'is_write', False)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the metadata associated with the evicted entry. It updates the overall cache hit rate and miss penalty statistics to reflect the eviction and adjusts the write buffer status if the evicted entry involved a write operation.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    global access_frequency, recency, write_buffer_status
    if evicted_obj.key in access_frequency:
        del access_frequency[evicted_obj.key]
    if evicted_obj.key in recency:
        del recency[evicted_obj.key]
    if evicted_obj.key in write_buffer_status:
        del write_buffer_status[evicted_obj.key]