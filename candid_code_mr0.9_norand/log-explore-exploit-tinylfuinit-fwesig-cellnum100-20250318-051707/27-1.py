# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
FREQUENCY_WEIGHT = 1.0
LRU_WEIGHT = 1.0
LOCALE_WEIGHT = 1.0
RECENCY_WEIGHT = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, write status, data locality score, and recency for each cache entry.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score derived from the least frequently accessed, least recently used, lowest data locality score, and least recent recency, with a preference for clean entries to minimize write-backs.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        m = metadata[key]
        score = (FREQUENCY_WEIGHT * m['access_frequency'] +
                 LRU_WEIGHT * (cache_snapshot.access_count - m['last_access_time']) +
                 LOCALE_WEIGHT * m['data_locality_score'] +
                 RECENCY_WEIGHT * (cache_snapshot.access_count - m['recency']) +
                 (1 if m['is_clean'] else 0))
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Immediately after a hit, the policy increments the access frequency, updates the last access time to the current time, recalculates the data locality score based on the access pattern, and updates the recency to the current timestamp.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    m = metadata[obj.key]
    m['access_frequency'] += 1
    m['last_access_time'] = cache_snapshot.access_count
    m['data_locality_score'] = calculate_data_locality_score(cache_snapshot, obj)
    m['recency'] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    Immediately after inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, marks the write status as clean, calculates an initial data locality score based on the insertion context, and sets the recency to the current timestamp.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'access_frequency': 1,
        'last_access_time': cache_snapshot.access_count,
        'is_clean': True,
        'data_locality_score': calculate_data_locality_score(cache_snapshot, obj),
        'recency': cache_snapshot.access_count
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Immediately after evicting a victim, the policy removes all associated metadata for the evicted entry and adjusts the data locality scores of remaining entries if the evicted entry influenced their locality context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata[evicted_obj.key]
    for key, _ in cache_snapshot.cache.items():
        metadata[key]['data_locality_score'] = calculate_data_locality_score(cache_snapshot, key)

def calculate_data_locality_score(cache_snapshot, obj):
    '''
    Helper function to calculate data locality score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object for which the data locality score is calculated.
    - Return: `data_locality_score`: The calculated data locality score.
    '''
    # For simplicity, we assume a constant initial score; you can refine it as appropriate with more context
    
    return 1.0