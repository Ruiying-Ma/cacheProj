# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
NUM_PARTITIONS = 10

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including partition keys for cache segments, a redundant array for tracking access frequency, memory mapping for object locations, and a cache miss indicator for tracking recent misses.
partitions = {i: set() for i in range(NUM_PARTITIONS)}
redundant_array = {}
memory_mapping = {}
cache_miss_indicator = {i: 0 for i in range(NUM_PARTITIONS)}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by identifying the partition with the highest cache miss indicator, then selecting the least frequently accessed object within that partition using the redundant array.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Identify the partition with the highest cache miss indicator
    Partition_with_most_miss = max(cache_miss_indicator, key=cache_miss_indicator.get)
    # Select the least frequently accessed object within that partition
    least_freq = float('inf')
    for key in partitions[Partition_with_most_miss]:
        if redundant_array[key] < least_freq:
            least_freq = redundant_array[key]
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency in the redundant array for the accessed object and adjusts the memory mapping to reflect the recent access. The cache miss indicator remains unchanged.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Increment access frequency for the accessed object
    redundant_array[obj.key] += 1
    # Update the memory mapping
    memory_mapping[obj.key] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy updates the partition key to include the new object, initializes its access frequency in the redundant array, and updates the memory mapping to include the new object's location. The cache miss indicator is incremented for the partition where the insertion occurred.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Determine the partition for the new object
    partition = hash(obj.key) % NUM_PARTITIONS
    # Update the partition key
    partitions[partition].add(obj.key)
    # Initialize access frequency in the redundant array
    redundant_array[obj.key] = 1
    # Update the memory mapping
    memory_mapping[obj.key] = cache_snapshot.access_count
    # Increment the cache miss indicator for the respective partition
    cache_miss_indicator[partition] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the object's partition key, deletes its access frequency from the redundant array, and updates the memory mapping to remove the object's location. The cache miss indicator is decremented for the partition where the eviction occurred.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Determine the partition of the evicted object
    partition = hash(evicted_obj.key) % NUM_PARTITIONS
    # Remove the object's partition key
    partitions[partition].remove(evicted_obj.key)
    # Delete its access frequency from the redundant array
    del redundant_array[evicted_obj.key]
    # Update the memory mapping to remove the object's location
    del memory_mapping[evicted_obj.key]
    # Decrement the cache miss indicator for the respective partition
    cache_miss_indicator[partition] -= 1