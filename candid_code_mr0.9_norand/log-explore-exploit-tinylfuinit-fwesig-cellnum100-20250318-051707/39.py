# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
WRITE_AMPLIFICATION_WEIGHT = 1.0
ACCESS_FREQUENCY_WEIGHT = 1.0
LAST_ACCESS_TIMESTAMP_WEIGHT = 1.0
MEMORY_BANDWIDTH_USAGE_WEIGHT = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, read/write ratio, last access timestamp, and memory bandwidth usage for each cache entry.
metadata = {
    'access_frequency': {},
    'read_write_ratio': {},
    'last_access_timestamp': {},
    'memory_bandwidth_usage': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, high write amplification, old access timestamp, and high memory bandwidth usage.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'].get(key, 0)
        write_amplification = metadata['read_write_ratio'].get(key, 1)
        last_access_timestamp = metadata['last_access_timestamp'].get(key, 0)
        memory_bandwidth_usage = metadata['memory_bandwidth_usage'].get(key, 0)
        
        score = (WRITE_AMPLIFICATION_WEIGHT * write_amplification +
                 ACCESS_FREQUENCY_WEIGHT * (1 / (access_frequency + 1)) +
                 LAST_ACCESS_TIMESTAMP_WEIGHT * (cache_snapshot.access_count - last_access_timestamp) +
                 MEMORY_BANDWIDTH_USAGE_WEIGHT * memory_bandwidth_usage)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, adjusts the read/write ratio based on the type of access, updates the last access timestamp to the current time, and recalculates memory bandwidth usage.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['read_write_ratio'][key] = metadata['read_write_ratio'].get(key, 1)  # Assuming read access for simplicity
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['memory_bandwidth_usage'][key] = metadata['memory_bandwidth_usage'].get(key, 0) + obj.size

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the read/write ratio based on the initial access type, records the current timestamp as the last access time, and estimates initial memory bandwidth usage.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['read_write_ratio'][key] = 1  # Assuming read access for simplicity
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['memory_bandwidth_usage'][key] = obj.size

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata for the evicted entry and recalculates overall cache memory bandwidth usage to reflect the removal.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in metadata['access_frequency']:
        del metadata['access_frequency'][key]
    if key in metadata['read_write_ratio']:
        del metadata['read_write_ratio'][key]
    if key in metadata['last_access_timestamp']:
        del metadata['last_access_timestamp'][key]
    if key in metadata['memory_bandwidth_usage']:
        del metadata['memory_bandwidth_usage'][key]