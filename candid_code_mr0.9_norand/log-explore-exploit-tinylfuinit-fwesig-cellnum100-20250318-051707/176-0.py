# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import deque

# Put tunable constant parameters below
# Weights for composite score calculation
ACCESS_FREQ_WEIGHT = 0.2
RECENCY_WEIGHT = 0.2
SIZE_WEIGHT = 0.1
COHERENCE_WEIGHT = 0.1
DISK_PRIORITY_WEIGHT = 0.1
LAST_ACCESS_TIME_WEIGHT = 0.1
WRITE_STATUS_WEIGHT = 0.1
DATA_LOCALITY_WEIGHT = 0.05
LATENCY_IMPACT_WEIGHT = 0.05

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, memory allocation size, coherence status, disk scheduling priorities, LRU queue position, last access time, write status, data locality score, latency impact score, and a circular pointer for traversal.
cache_metadata = {
    'access_frequency': {},
    'recency': {},
    'allocation_size': {},
    'coherence_status': {},
    'disk_scheduling_priority': {},
    'lru_queue': deque(),
    'last_access_time': {},
    'write_status': {},
    'data_locality_score': {},
    'latency_impact_score': {},
    'pointer': 0
}

def _calculate_composite_score(key, current_time):
    return (
        ACCESS_FREQ_WEIGHT * cache_metadata['access_frequency'][key] +
        RECENCY_WEIGHT * (current_time - cache_metadata['recency'][key]) +
        SIZE_WEIGHT * cache_metadata['allocation_size'][key] +
        COHERENCE_WEIGHT * cache_metadata['coherence_status'][key] +
        DISK_PRIORITY_WEIGHT * cache_metadata['disk_scheduling_priority'][key] +
        LAST_ACCESS_TIME_WEIGHT * (current_time - cache_metadata['last_access_time'][key]) +
        WRITE_STATUS_WEIGHT * cache_metadata['write_status'][key] +
        DATA_LOCALITY_WEIGHT * cache_metadata['data_locality_score'][key] +
        LATENCY_IMPACT_WEIGHT * cache_metadata['latency_impact_score'][key]
    )

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy uses the circular pointer to traverse the cache and calculates a composite score for each entry based on access frequency, recency of access, memory allocation size, coherence status, disk scheduling priorities, last access time, write status, data locality score, and latency impact score. It evicts the entry with the lowest composite score, preferring clean entries and considering disk scheduling priorities.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    current_time = cache_snapshot.access_count
    min_score = float('inf')

    for key in cache_snapshot.cache:
        composite_score = _calculate_composite_score(key, current_time)
        if composite_score < min_score:
            min_score = composite_score
            candid_obj_key = key
    
    cache_metadata['pointer'] = (cache_metadata['pointer'] + 1) % len(cache_snapshot.cache)
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key

    cache_metadata['access_frequency'][key] += 1
    cache_metadata['recency'][key] = current_time
    cache_metadata['last_access_time'][key] = current_time
    # Update data locality score, latency impact score, and other fields as needed
    # Move to the end of the LRU queue
    cache_metadata['lru_queue'].remove(key)
    cache_metadata['lru_queue'].append(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key
    
    cache_metadata['access_frequency'][key] = 1
    cache_metadata['recency'][key] = current_time
    cache_metadata['last_access_time'][key] = current_time
    cache_metadata['allocation_size'][key] = obj.size
    cache_metadata['coherence_status'][key] = 0
    cache_metadata['disk_scheduling_priority'][key] = 1  # Arbitrary priority
    cache_metadata['write_status'][key] = 0  # Clean
    cache_metadata['data_locality_score'][key] = 1
    cache_metadata['latency_impact_score'][key] = 1
    
    cache_metadata['lru_queue'].append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    del cache_metadata['access_frequency'][key]
    del cache_metadata['recency'][key]
    del cache_metadata['allocation_size'][key]
    del cache_metadata['coherence_status'][key]
    del cache_metadata['disk_scheduling_priority'][key]
    del cache_metadata['last_access_time'][key]
    del cache_metadata['write_status'][key]
    del cache_metadata['data_locality_score'][key]
    del cache_metadata['latency_impact_score'][key]
    cache_metadata['lru_queue'].remove(key)