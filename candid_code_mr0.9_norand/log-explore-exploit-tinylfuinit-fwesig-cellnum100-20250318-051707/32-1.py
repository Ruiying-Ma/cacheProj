# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Tunable constant parameters
DEFAULT_LATENCY = 10
DEFAULT_LOAD_BALANCE_SCORE = 10
DEFAULT_DATA_LOCALITY_SCORE = 10
DEFAULT_DYNAMIC_THRESHOLD = 10

# Metadata specifically maintained by the policy
cache_metadata = {
    'latency': {},
    'last_access_time': {},
    'insertion_time': {},
    'load_balance_score': {},
    'access_frequency': {},
    'write_status': {},
    'data_locality_score': {},
}

global_cache_hit_rate = {'hit_rate': 0}
dynamic_threshold = {'threshold': DEFAULT_DYNAMIC_THRESHOLD}

def calculate_load_balance_score(frequency, latency):
    return frequency / (1 + latency)

def calculate_data_locality_score(last_access_time, current_time):
    return current_time - last_access_time

def update_global_cache_hit_rate(cache_snapshot):
    total_accesses = cache_snapshot.hit_count + cache_snapshot.miss_count
    if total_accesses == 0:
        global_cache_hit_rate['hit_rate'] = 0
    else:
        global_cache_hit_rate['hit_rate'] = cache_snapshot.hit_count / total_accesses

def adjust_dynamic_threshold():
    dynamic_threshold['threshold'] = DEFAULT_DYNAMIC_THRESHOLD / (1 + global_cache_hit_rate['hit_rate'])

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first identifying entries with the highest latency measurements and lowest load balancing scores. Among these, it selects the entry with the oldest insertion time and lowest data locality score, with a preference for clean entries to minimize write-backs.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candidates = []
    for key, cached_obj in cache_snapshot.cache.items():
        metadata = (
            cache_metadata['latency'][key], 
            cache_metadata['load_balance_score'][key], 
            cache_metadata['insertion_time'][key],
            cache_metadata['data_locality_score'][key],
            cache_metadata['write_status'][key] == 'clean'
        )
        candidates.append((metadata, key))
    
    candidates.sort(key=lambda x: (x[0][0], -x[0][1], x[0][2], x[0][3], -x[0][4]))
    candid_obj_key = candidates[0][1]
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the last access time to the current time, increments the access frequency, recalculates the load balancing score based on frequency of access and latency measurement, and updates the data locality score based on the access pattern. The global cache hit rate is also updated.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key

    cache_metadata['last_access_time'][key] = current_time
    cache_metadata['access_frequency'][key] += 1
    cache_metadata['load_balance_score'][key] = calculate_load_balance_score(
        cache_metadata['access_frequency'][key], cache_metadata['latency'][key]
    )
    cache_metadata['data_locality_score'][key] = calculate_data_locality_score(
        cache_metadata['last_access_time'][key], current_time
    )

    update_global_cache_hit_rate(cache_snapshot)
    
def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy sets the initial latency measurement, insertion time, and last access time to the current time, initializes the load balancing score, access frequency to 1, marks the write status as clean, calculates an initial data locality score, and adjusts the dynamic threshold for data retention period based on the current cache hit rate.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key

    cache_metadata['latency'][key] = DEFAULT_LATENCY
    cache_metadata['insertion_time'][key] = current_time
    cache_metadata['last_access_time'][key] = current_time
    cache_metadata['load_balance_score'][key] = DEFAULT_LOAD_BALANCE_SCORE
    cache_metadata['access_frequency'][key] = 1
    cache_metadata['write_status'][key] = 'clean'
    cache_metadata['data_locality_score'][key] = DEFAULT_DATA_LOCALITY_SCORE

    update_global_cache_hit_rate(cache_snapshot)
    adjust_dynamic_threshold()

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy recalculates the global cache hit rate, adjusts the dynamic threshold for data retention period, updates the load balancing scores and data locality scores of remaining entries, and removes all associated metadata for the evicted entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key

    # Remove metadata of evicted object
    del cache_metadata['latency'][evicted_key]
    del cache_metadata['last_access_time'][evicted_key]
    del cache_metadata['insertion_time'][evicted_key]
    del cache_metadata['load_balance_score'][evicted_key]
    del cache_metadata['access_frequency'][evicted_key]
    del cache_metadata['write_status'][evicted_key]
    del cache_metadata['data_locality_score'][evicted_key]

    update_global_cache_hit_rate(cache_snapshot)
    adjust_dynamic_threshold()

    current_time = cache_snapshot.access_count
    for key in cache_snapshot.cache:
        cache_metadata['load_balance_score'][key] = calculate_load_balance_score(
            cache_metadata['access_frequency'][key], cache_metadata['latency'][key]
        )
        cache_metadata['data_locality_score'][key] = calculate_data_locality_score(
            cache_metadata['last_access_time'][key], current_time
        )