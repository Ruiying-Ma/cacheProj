# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below
LFU_WEIGHT = 0.2
LRU_WEIGHT = 0.2
COHERENCE_WEIGHT = 0.2
MISS_RATE_WEIGHT = 0.1
REPLICATION_WEIGHT = 0.1
CONNECTIVITY_WEIGHT = 0.1
FAULT_TOLERANCE_WEIGHT = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, prefetching hints, coherence status, cache miss rate, replication factor, node connectivity status, and fault tolerance levels for each cache entry.
access_frequency = defaultdict(int)
recency_usage = defaultdict(int)
prefetching_hints = defaultdict(int)
coherence_status = defaultdict(int)
replication_factor = defaultdict(int)
node_connectivity = defaultdict(int)
fault_tolerance = defaultdict(int)

cache_miss_rate = 0
current_time = 0

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted combination of least frequently used, least recently accessed, entries marked for invalidation due to coherence issues, cache miss rate, replication factor, node connectivity, and fault tolerance. Entries with lower combined scores are evicted first.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    global current_time
    current_time += 1

    def eviction_score(cached_obj):
        key = cached_obj.key
        score = (
            LFU_WEIGHT * access_frequency[key] +
            LRU_WEIGHT * (current_time - recency_usage[key]) +
            COHERENCE_WEIGHT * coherence_status[key] +
            MISS_RATE_WEIGHT * cache_miss_rate +
            REPLICATION_WEIGHT * replication_factor[key] +
            CONNECTIVITY_WEIGHT * node_connectivity[key] +
            FAULT_TOLERANCE_WEIGHT * fault_tolerance[key]
        )
        return score

    candid_obj_key = min(cache_snapshot.cache.values(), key=eviction_score).key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Immediately after a cache hit, the policy updates the access frequency and recency of access for the hit entry, adjusts prefetching hints based on access patterns, decrements the cache miss rate slightly, increases the replication factor if accessed frequently, checks node connectivity, and adjusts fault tolerance levels based on node reliability.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    global cache_miss_rate
    global current_time
    key = obj.key

    access_frequency[key] += 1
    recency_usage[key] = current_time
    prefetching_hints[key] += 1
    cache_miss_rate = max(0, cache_miss_rate - 1)

    if access_frequency[key] > 10:
        replication_factor[key] += 1

    node_connectivity[key] += 1
    fault_tolerance[key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    Immediately after inserting a new object, the policy initializes the access frequency and recency of access, sets prefetching hints based on the object's context, ensures coherence status is up-to-date, increments the cache miss rate, sets an initial replication factor, assesses node connectivity for optimal placement, and assigns a fault tolerance level based on data criticality.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    global cache_miss_rate
    global current_time
    key = obj.key

    access_frequency[key] = 1
    recency_usage[key] = current_time
    prefetching_hints[key] = 1
    coherence_status[key] = 1
    cache_miss_rate += 1
    replication_factor[key] = 1
    node_connectivity[key] = 1
    fault_tolerance[key] = 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Immediately after evicting a victim, the policy recalculates the weighted criteria for remaining entries, updates prefetching hints to reflect the new cache state, ensures coherence status is maintained, recalculates the cache miss rate, adjusts the replication factor of remaining entries, re-evaluates node connectivity for optimal data distribution, and updates fault tolerance levels to reflect the current cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    global cache_miss_rate
    global current_time
    del access_frequency[evicted_obj.key]
    del recency_usage[evicted_obj.key]
    del prefetching_hints[evicted_obj.key]
    del coherence_status[evicted_obj.key]
    del replication_factor[evicted_obj.key]
    del node_connectivity[evicted_obj.key]
    del fault_tolerance[evicted_obj.key]

    for key in cache_snapshot.cache.keys():
        prefetching_hints[key] = 1
        coherence_status[key] = 1
        fault_tolerance[key] = 1