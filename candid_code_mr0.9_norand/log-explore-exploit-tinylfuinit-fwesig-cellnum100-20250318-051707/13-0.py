# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
ALPHA = 0.8  # Weight for hit ratio
BETA = 0.15  # Weight for residency time
GAMMA = 0.05  # Weight for access frequency

# Put the metadata specifically maintained by the policy below. The policy maintains hit ratio tracking for each cache line, cache residency time, access frequency patterns, and a replacement score for each cache line.
hit_count = collections.defaultdict(int)
access_frequency = collections.defaultdict(int)
insertion_time = collections.defaultdict(int)
replacement_score = collections.defaultdict(float)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on the lowest replacement score, which is calculated using a combination of low hit ratio, long residency time, and infrequent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        hit_ratio = hit_count[key] / max(1, cache_snapshot.access_count - insertion_time[key])
        residency_time = cache_snapshot.access_count - insertion_time[key]
        freq_pattern = access_frequency[key]
        score = (ALPHA * hit_ratio) + (BETA * residency_time) + (GAMMA * freq_pattern)
        replacement_score[key] = score

        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the hit ratio by incrementing the hit count, resets the residency time, and updates the access frequency pattern to reflect the recent access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    hit_count[obj.key] += 1
    access_frequency[obj.key] = cache_snapshot.access_count
    insertion_time[obj.key] = cache_snapshot.access_count  # Reset the residency time

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the hit ratio to zero, sets the residency time to the current time, and starts tracking the access frequency pattern from the moment of insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    hit_count[obj.key] = 0
    insertion_time[obj.key] = cache_snapshot.access_count  # Set the current time as residency time
    access_frequency[obj.key] = cache_snapshot.access_count  # Track access frequency from insertion time
    replacement_score[obj.key] = 0.0  # Initialize replacement score

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all metadata associated with the evicted cache line and recalculates the replacement scores for the remaining cache lines to ensure accurate future evictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in hit_count:
        del hit_count[evicted_obj.key]
    if evicted_obj.key in access_frequency:
        del access_frequency[evicted_obj.key]
    if evicted_obj.key in insertion_time:
        del insertion_time[evicted_obj.key]
    if evicted_obj.key in replacement_score:
        del replacement_score[evicted_obj.key]

    # Recalculate replacement scores for all remaining cache lines
    for key in cache_snapshot.cache:
        hit_ratio = hit_count[key] / max(1, cache_snapshot.access_count - insertion_time[key])
        residency_time = cache_snapshot.access_count - insertion_time[key]
        freq_pattern = access_frequency[key]
        replacement_score[key] = (ALPHA * hit_ratio) + (BETA * residency_time) + (GAMMA * freq_pattern)