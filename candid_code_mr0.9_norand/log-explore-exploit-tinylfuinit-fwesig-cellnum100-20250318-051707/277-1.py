# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
EXECUTION_LATENCY_WEIGHT = 0.25
CACHE_MISS_RATIO_WEIGHT = 0.25
REPLICATION_DELAY_WEIGHT = 0.25
STORAGE_EFFICIENCY_WEIGHT = 0.25

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry including execution latency, cache miss ratio, replication delay, and storage efficiency. Additionally, it tracks a composite score derived from these factors.

metadata = {}

def calculate_composite_score(execution_latency, cache_miss_ratio, replication_delay, storage_efficiency):
    return (EXECUTION_LATENCY_WEIGHT * execution_latency +
            CACHE_MISS_RATIO_WEIGHT * cache_miss_ratio +
            REPLICATION_DELAY_WEIGHT * replication_delay +
            STORAGE_EFFICIENCY_WEIGHT * storage_efficiency)
    
def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on the lowest composite score, which is calculated using a weighted sum of execution latency, cache miss ratio, replication delay, and storage efficiency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        score = metadata[key]['composite_score']
        if score < lowest_score:
            lowest_score = score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the execution latency by decreasing it slightly, improves the cache miss ratio, adjusts the replication delay based on recent access patterns, and recalculates the storage efficiency. The composite score is then updated accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    if key in metadata:
        metadata[key]['execution_latency'] *= 0.95  # Decrease slightly
        metadata[key]['cache_miss_ratio'] *= 0.95  # Improve cache miss ratio
        metadata[key]['replication_delay'] *= 0.95  # Adjust replication delay
        
        # Recalculate storage efficiency
        metadata[key]['storage_efficiency'] = 1 / obj.size

        # Update composite score
        metadata[key]['composite_score'] = calculate_composite_score(
            metadata[key]['execution_latency'],
            metadata[key]['cache_miss_ratio'],
            metadata[key]['replication_delay'],
            metadata[key]['storage_efficiency']
        )

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the execution latency, cache miss ratio, replication delay, and storage efficiency for the new entry. It then calculates the initial composite score based on these values.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'execution_latency': 1,
        'cache_miss_ratio': 1,
        'replication_delay': 1,
        'storage_efficiency': 1 / obj.size,
        'composite_score': calculate_composite_score(1, 1, 1, 1 / obj.size)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy redistributes the weights of execution latency, cache miss ratio, replication delay, and storage efficiency among the remaining entries to ensure balanced cache performance. The composite scores of remaining entries are recalculated.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Remove metadata of evicted object
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]

    # Recalculate weights and composite scores for the remaining entries
    for key, data in metadata.items():
        data['execution_latency'] *= 1.05  # Redistribute slightly
        data['cache_miss_ratio'] *= 1.05   # Redistribute slightly
        data['replication_delay'] *= 1.05  # Redistribute slightly
        
        # Recalculate storage efficiency
        data['storage_efficiency'] = 1 / cache_snapshot.cache[key].size

        # Update composite score
        data['composite_score'] = calculate_composite_score(
            data['execution_latency'],
            data['cache_miss_ratio'],
            data['replication_delay'],
            data['storage_efficiency']
        )