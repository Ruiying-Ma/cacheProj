# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_ENCRYPTION_STATUS = True
INITIAL_CACHE_MISS_LATENCY = 1.0
INITIAL_USER_SESSION_ACTIVITY = 0
INITIAL_SCALABILITY_FACTOR = 1.0
DECREASED_CACHE_MISS_LATENCY = 0.9
INCREASED_USER_SESSION_ACTIVITY = 1
ADJUSTED_SCALABILITY_FACTOR = 1.1
DECREASED_USER_SESSION_ACTIVITY = -1
RECALIBRATED_SCALABILITY_FACTOR = 0.9

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including encryption status, cache miss latency, user session activity, and scalability factor for each cached object.
metadatas = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combination of the least recently used (LRU) objects, highest cache miss latency, and lowest user session activity, while considering scalability factor to ensure efficient cache management.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        metadata = metadatas[key]
        score = (
            cache_snapshot.access_count - metadata['last_access_time'] + 
            metadata['cache_miss_latency'] -
            metadata['user_session_activity'] +
            metadata['scalability_factor']
        )
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the encryption status to ensure data security, decreases the cache miss latency, increases the user session activity, and adjusts the scalability factor to reflect the current load.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata = metadatas[key]
    metadata['encryption_status'] = True
    metadata['cache_miss_latency'] *= DECREASED_CACHE_MISS_LATENCY
    metadata['user_session_activity'] += INCREASED_USER_SESSION_ACTIVITY
    metadata['scalability_factor'] *= ADJUSTED_SCALABILITY_FACTOR
    metadata['last_access_time'] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy sets the initial encryption status, records the initial cache miss latency, tracks the user session activity, and updates the scalability factor to accommodate the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadatas[key] = {
        'encryption_status': INITIAL_ENCRYPTION_STATUS,
        'cache_miss_latency': INITIAL_CACHE_MISS_LATENCY,
        'user_session_activity': INITIAL_USER_SESSION_ACTIVITY,
        'scalability_factor': INITIAL_SCALABILITY_FACTOR,
        'last_access_time': cache_snapshot.access_count
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the encryption status, resets the cache miss latency, decreases the user session activity, and recalibrates the scalability factor to optimize remaining cache objects.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in metadatas:
        del metadatas[key]
    
    for key in cache_snapshot.cache.keys():
        metadatas[key]['user_session_activity'] += DECREASED_USER_SESSION_ACTIVITY
        metadatas[key]['scalability_factor'] *= RECALIBRATED_SCALABILITY_FACTOR