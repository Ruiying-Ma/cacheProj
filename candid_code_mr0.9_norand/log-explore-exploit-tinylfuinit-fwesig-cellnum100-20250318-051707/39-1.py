# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

import collections

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQ = 0.25
WEIGHT_WRITE_AMP = 0.25
WEIGHT_OLD_TIMESTAMP = 0.25
WEIGHT_MEMORY_BANDWIDTH = 0.25

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, read/write ratio, last access timestamp, and memory bandwidth usage for each cache entry.
metadata = collections.defaultdict(lambda : {
    'access_frequency': 0,
    'read_write_ratio': 1,
    'last_access_timestamp': 0,
    'memory_bandwidth_usage': 0,
})

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, high write amplification, old access timestamp, and high memory bandwidth usage.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        score = (
            WEIGHT_ACCESS_FREQ * (1 / (1 + meta['access_frequency'])) +
            WEIGHT_WRITE_AMP * meta['read_write_ratio'] +
            WEIGHT_OLD_TIMESTAMP * (cache_snapshot.access_count - meta['last_access_timestamp']) +
            WEIGHT_MEMORY_BANDWIDTH * meta['memory_bandwidth_usage']
        )
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, adjusts the read/write ratio based on the type of access, updates the last access timestamp to the current time, and recalculates memory bandwidth usage.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta['access_frequency'] += 1
    meta['last_access_timestamp'] = cache_snapshot.access_count
    # Assuming access is a read operation.
    meta['read_write_ratio'] = meta['read_write_ratio'] * 0.9 + 1 * 0.1
    meta['memory_bandwidth_usage'] = obj.size / (cache_snapshot.access_count - meta['last_access_timestamp'] + 1)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the read/write ratio based on the initial access type, records the current timestamp as the last access time, and estimates initial memory bandwidth usage.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'access_frequency': 1,
        'read_write_ratio': 1,
        'last_access_timestamp': cache_snapshot.access_count,
        'memory_bandwidth_usage': obj.size / cache_snapshot.access_count,
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata for the evicted entry and recalculates overall cache memory bandwidth usage to reflect the removal.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in metadata:
        del metadata[evicted_obj.key]
    # Update metadata for the overall cache memory bandwidth usage.
    # Simplified example, a more precise implementation would require additional data to track overall bandwidth.
    total_bandwidth_usage = sum(meta['memory_bandwidth_usage'] for meta in metadata.values())