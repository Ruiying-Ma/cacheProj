# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
FETCH_COST_DECREASE = 1
FETCH_COST_INITIAL = 100

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache line including access frequency, recency of access, fetch cost score, and queue position (FIFO or LRU).
metadata = {
    'fifo_queue': [],
    'lru_queues': [[] for _ in range(3)], # L1, L2, L3
    'info': {}  # Maps obj.key to (frequency, recency, fetch_cost, queue_type, queue_idx)
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first checks the FIFO queue for an object with zero frequency and evicts it. If no such object is found, it calculates a combined score based on low access frequency, low recency of access, and high fetch cost for objects in the LRU queues and evicts the object with the lowest score from the non-empty LRU queue with the smallest subscript.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    
    # Check FIFO queue for obj with frequency 0
    for key in metadata['fifo_queue']:
        if metadata['info'][key][0] == 0:
            candid_obj_key = key
            break
    
    # If no such obj found, calculate combined score
    if not candid_obj_key:
        evict_candidate = None
        min_score = float('inf')
        
        for queue in metadata['lru_queues']:
            for k in queue:
                freq, recency, fetch_cost, queue_type, queue_idx = metadata['info'][k]
                score = freq + recency / fetch_cost
                if score < min_score:
                    min_score = score
                    evict_candidate = k
            
            if evict_candidate:
                candid_obj_key = evict_candidate
                break
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency is incremented, the recency of access is updated to the current time, and the fetch cost score is slightly decreased. If the object is in an LRU queue, it is moved to the most-recently-used end of the next higher LRU queue. If the higher LRU queue is full, the least-recently-used object in that queue is moved to the most-recently-used end of the current LRU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    freq, recency, fetch_cost, queue_type, queue_idx = metadata['info'][key]
    
    # Update frequency, recency, and fetch cost
    freq += 1
    recency = cache_snapshot.access_count
    fetch_cost = max(0, fetch_cost - FETCH_COST_DECREASE)
    
    if queue_type.startswith('LRU'):
        current_lru_level = int(queue_type[-1])
        if current_lru_level < 3:
            metadata['lru_queues'][current_lru_level - 1].remove(key)
            next_lru_level = current_lru_level
            if len(metadata['lru_queues'][next_lru_level]) == len(metadata['lru_queues']):
                victim = metadata['lru_queues'][next_lru_level].pop(0)
                metadata['lru_queues'][current_lru_level - 1].append(victim)
                metadata['info'][victim] = (metadata['info'][victim][0], metadata['info'][victim][1], metadata['info'][victim][2], f'LRU{current_lru_level}', len(metadata['lru_queues'][current_lru_level - 1]) - 1)
            metadata['lru_queues'][next_lru_level].append(key)
            metadata['info'][key] = (freq, recency, fetch_cost, f'LRU{next_lru_level + 1}', len(metadata['lru_queues'][next_lru_level]) - 1)
        else:
            metadata['info'][key] = (freq, recency, fetch_cost, queue_type, queue_idx)
    else:
        metadata['info'][key] = (freq, recency, fetch_cost, queue_type, queue_idx)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the access frequency is initialized to 1, the recency of access is set to the current time, and the fetch cost score is calculated. The object is placed at the most-recently-used end of L1. If L1 is full, the least-recently-used object in L1 is moved to the rear of the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    freq = 1
    recency = cache_snapshot.access_count
    fetch_cost = FETCH_COST_INITIAL
    
    if len(metadata['lru_queues'][0]) >= len(metadata['fifo_queue']) + 1:
        moved_key = metadata['lru_queues'][0].pop(0)
        metadata['fifo_queue'].append(moved_key)
        metadata['info'][moved_key] = (metadata['info'][moved_key][0], metadata['info'][moved_key][1], metadata['info'][moved_key][2], 'FIFO', len(metadata['fifo_queue']) - 1)
    
    metadata['lru_queues'][0].append(key)
    metadata['info'][key] = (freq, recency, fetch_cost, 'LRU1', len(metadata['lru_queues'][0]) - 1)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the metadata for the evicted cache line is cleared. Objects behind the evicted object in the FIFO queue move one step forward to fill the vacancy. The remaining cache lines' metadata are adjusted if necessary to maintain relative rankings for eviction decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    
    if key in metadata['fifo_queue']:
        metadata['fifo_queue'].remove(key)
    else:
        for lru_queue in metadata['lru_queues']:
            if key in lru_queue:
                lru_queue.remove(key)
                break
    
    if key in metadata['info']:
        del metadata['info'][key]