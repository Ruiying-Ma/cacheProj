# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

from collections import deque
import time

# Put tunable constant parameters below
REPLACEMENT_COST_WEIGHT = 0.5
ACCESS_FREQ_WEIGHT = 0.3
RECENCY_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains encryption keys, authentication tokens, access control lists (ACLs), timestamps, access frequencies, hit ratios, residency times, access frequency patterns, replacement scores, fetch cost scores, and queue positions.

metadata = {
    'timestamps': {},  # key -> timestamp
    'access_frequencies': {},  # key -> access frequency
    'fifo_queue': deque(),  # list of keys in FIFO order
    'lru_queue': [],  # list of keys in LRU order
    'fetch_costs': {},  # key -> fetch cost score
    'access_control_levels': {},  # key -> ACL level
    'replacement_scores': {},  # key -> replacement score
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first checks the FIFO queue for an object with zero frequency and evicts it. If no such object is found, it calculates a combined score based on low access frequency, low recency of access, high fetch cost, low replacement score, and low access control level, and evicts the object with the lowest score from the non-empty LRU queue with the smallest subscript.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None

    # First check FIFO queue for zero-frequency object
    for key in metadata['fifo_queue']:
        if metadata['access_frequencies'].get(key, 0) == 0:
            candid_obj_key = key
            break

    # If not found, calculate combined score for objects in LRU queue
    if candid_obj_key is None:
        min_score = float('inf')
        for key in metadata['lru_queue']:
            if key in cache_snapshot.cache:
                frequency_score = metadata['access_frequencies'].get(key, 0)
                recency_score = cache_snapshot.access_count - metadata['timestamps'].get(key, 0)
                fetch_cost_score = metadata['fetch_costs'].get(key, 1)
                replacement_score = metadata['replacement_scores'].get(key, 0)
                acl_level = metadata['access_control_levels'].get(key, 0)

                combined_score = (REPLACEMENT_COST_WEIGHT * replacement_score +
                                  ACCESS_FREQ_WEIGHT * frequency_score +
                                  RECENCY_WEIGHT * recency_score)
                
                if combined_score < min_score:
                    min_score = combined_score
                    candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the timestamp to the current time, revalidates the authentication token, ensures the encryption key is still valid, increments the access frequency, moves the accessed item to the front of the Linked List, updates the hit ratio, resets the residency time, updates the access frequency pattern, updates the Hash Map, updates the recency of access, and slightly decreases the fetch cost score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count

    metadata['timestamps'][key] = current_time
    metadata['access_frequencies'][key] = metadata['access_frequencies'].get(key, 0) + 1
    metadata['fetch_costs'][key] = max(metadata['fetch_costs'].get(key, 1) - 0.01, 0)

    if key in metadata['lru_queue']:
        metadata['lru_queue'].remove(key)
    metadata['lru_queue'].append(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy assigns a new timestamp, generates a new encryption key, issues a new authentication token, updates the access control list, adds the object to the Hash Map, inserts it into the Binary Tree with an initial frequency count, appends it to the end of the Linked List, places it in the Array, initializes the hit ratio, sets the residency time, starts tracking the access frequency pattern, initializes the access frequency, sets the recency of access, calculates the fetch cost score, and places the object at the most-recently-used end of L1.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count

    metadata['timestamps'][key] = current_time
    metadata['access_frequencies'][key] = 1
    metadata['fetch_costs'][key] = obj.size
    metadata['replacement_scores'][key] = 0
    metadata['access_control_levels'][key] = 0  # Default ACL level

    metadata['fifo_queue'].append(key)
    metadata['lru_queue'].append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the corresponding encryption key, invalidates the authentication token, updates the access control list, removes the object from the Hash Map, deletes its node from the Binary Tree, removes it from the Linked List, clears its slot in the Array, removes all metadata associated with the evicted cache line, recalculates the replacement scores for the remaining cache lines, and adjusts the remaining cache lines' metadata if necessary to maintain relative rankings for eviction decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key

    if key in metadata['timestamps']:
        del metadata['timestamps'][key]
    if key in metadata['access_frequencies']:
        del metadata['access_frequencies'][key]
    if key in metadata['fetch_costs']:
        del metadata['fetch_costs'][key]
    if key in metadata['access_control_levels']:
        del metadata['access_control_levels'][key]
    if key in metadata['replacement_scores']:
        del metadata['replacement_scores'][key]

    if key in metadata['fifo_queue']:
        metadata['fifo_queue'].remove(key)
    if key in metadata['lru_queue']:
        metadata['lru_queue'].remove(key)