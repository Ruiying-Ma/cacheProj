# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
LATENCY_WEIGHT = 0.4
ACCESS_FREQ_WEIGHT = 0.3
SYNC_STATUS_WEIGHT = 0.2
LOAD_BALANCE_WEIGHT = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, synchronization status, latency measurements, and load distribution across cache nodes.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'synchronization_status': {},
    'latency_measurements': {},
    'load_distribution': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, high latency, outdated synchronization status, and load balancing needs to ensure even distribution across cache nodes.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_freq = metadata['access_frequency'].get(key, 0)
        latency = metadata['latency_measurements'].get(key, 0)
        sync_status = metadata['synchronization_status'].get(key, False)
        load_balance = metadata['load_distribution'].get(key, 0)
        
        score = (LATENCY_WEIGHT * latency) - (ACCESS_FREQ_WEIGHT * access_freq) + \
                (SYNC_STATUS_WEIGHT * (not sync_status)) + (LOAD_BALANCE_WEIGHT * load_balance)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access timestamp, checks and updates synchronization status, and records the latency measurement for the access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['synchronization_status'][key] = True
    metadata['latency_measurements'][key] = time.time() - metadata['last_access_timestamp'].get(key, time.time())

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, marks the synchronization status as up-to-date, and measures the initial latency for the insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['synchronization_status'][key] = True
    metadata['latency_measurements'][key] = time.time() - metadata['last_access_timestamp'][key]
    metadata['load_distribution'][key] = 0  # Initialize load distribution

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata, recalculates load distribution across cache nodes, and updates synchronization status for remaining objects to ensure coherence.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_timestamp']:
        del metadata['last_access_timestamp'][evicted_key]
    if evicted_key in metadata['synchronization_status']:
        del metadata['synchronization_status'][evicted_key]
    if evicted_key in metadata['latency_measurements']:
        del metadata['latency_measurements'][evicted_key]
    if evicted_key in metadata['load_distribution']:
        del metadata['load_distribution'][evicted_key]
    
    # Recalculate load distribution across cache nodes
    total_objects = len(cache_snapshot.cache)
    for key in cache_snapshot.cache:
        metadata['load_distribution'][key] = 1 / total_objects if total_objects > 0 else 0
    # Update synchronization status for remaining objects
    for key in cache_snapshot.cache:
        metadata['synchronization_status'][key] = True