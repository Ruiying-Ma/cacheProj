# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
WINDOW_CACHE_SIZE = 5
DECAY_INTERVAL = 100

# Put the metadata specifically maintained by the policy below. The policy maintains latency measurement, last access time, insertion time, load balancing score, global cache hit rate, dynamic threshold for data retention period, access frequency, write status, data locality score, and a Count Bloom Filter (CBF) for frequency estimation.
latency_measurement = {}
last_access_time = {}
insertion_time = {}
load_balancing_score = {}
data_locality_score = {}
access_frequency = {}
write_status = {}
cbf = collections.defaultdict(int)
window_cache = collections.OrderedDict()

global_cache_hit_rate = 0
dynamic_threshold = 0
eviction_count = 0

def evict(cache_snapshot, obj):
    global eviction_count
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the eviction victim by first identifying entries with the highest latency measurements and lowest load balancing scores. Among these, it uses a composite score derived from access frequency, last access time, data locality score, and write status, with a preference for clean entries. The least recently used object from a small window cache (W) is compared with an object from the main cache (M) using CBF frequency, and the higher frequency object is retained.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    candidate_entries = sorted(
        cache_snapshot.cache.values(),
        key=lambda x: (latency_measurement[x.key], -load_balancing_score[x.key])
    )

    candid_obj_key = min(
        candidate_entries,
        key=lambda x: (
            access_frequency[x.key],
            last_access_time[x.key],
            data_locality_score[x.key],
            write_status[x.key]
        )
    ).key

    eviction_window = list(window_cache.items())[:WINDOW_CACHE_SIZE]
    if eviction_window:
        window_candidate = list(eviction_window)[0][0]
        main_candidate = candid_obj_key
        if cbf[window_candidate] > cbf[main_candidate]:
            candid_obj_key = main_candidate
        else:
            candid_obj_key = window_candidate

    eviction_count += 1
    if eviction_count >= DECAY_INTERVAL:
        for key in cbf:
            cbf[key] *= 0.9
        eviction_count = 0
   
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the last access time to the current time, increments the access frequency, recalculates the load balancing score based on the frequency of access and latency measurement, recalculates the data locality score, increases the hit object's frequency in CBF, and updates the global cache hit rate.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    last_access_time[obj.key] = current_time
    access_frequency[obj.key] += 1
    load_balancing_score[obj.key] = access_frequency[obj.key] / (current_time - insertion_time[obj.key] + 1)
    data_locality_score[obj.key] = access_frequency[obj.key] / latency_measurement[obj.key]
    cbf[obj.key] += 1
    global cache_hit_rate
    global_cache_hit_rate = cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy sets the initial latency measurement, insertion time, and last access time to the current time, initializes the load balancing score, access frequency to 1, write status as clean, calculates an initial data locality score, increases the inserted object's frequency in CBF, adds the object to the window cache (W), and adjusts the dynamic threshold for data retention period based on the current cache hit rate.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    latency_measurement[obj.key] = 1  # Assuming initial latency is minimal as a starting point
    insertion_time[obj.key] = current_time
    last_access_time[obj.key] = current_time
    load_balancing_score[obj.key] = 1  # Initial load balancing score set to 1
    access_frequency[obj.key] = 1
    write_status[obj.key] = "clean"
    data_locality_score[obj.key] = 1  # Initial data locality score set to 1
    cbf[obj.key] += 1
    
    if len(window_cache) >= WINDOW_CACHE_SIZE:
        window_cache.popitem(last=False)
    window_cache[obj.key] = obj

    global dynamic_threshold
    dynamic_threshold = global_cache_hit_rate

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy recalculates the global cache hit rate, may adjust the dynamic threshold for data retention period, updates the load balancing scores and data locality scores of remaining entries if influenced, decays CBF every K evictions, and removes all associated metadata for the evicted entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    global cache_hit_rate
    cache_hit_rate = cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)

    if len(window_cache) >= WINDOW_CACHE_SIZE:
        window_cache.popitem(last=False)

    for remaining_key in cache_snapshot.cache:
        if remaining_key in latency_measurement:
            load_balancing_score[remaining_key] = access_frequency[remaining_key] / (cache_snapshot.access_count - insertion_time[remaining_key] + 1)
            data_locality_score[remaining_key] = access_frequency[remaining_key] / latency_measurement[remaining_key]

    if evicted_obj.key in cbf:
        del cbf[evicted_obj.key]
    if evicted_obj.key in latency_measurement:
        del latency_measurement[evicted_obj.key]

    if evicted_obj.key in last_access_time:
        del last_access_time[evicted_obj.key]
    if evicted_obj.key in insertion_time:
        del insertion_time[evicted_obj.key]
    if evicted_obj.key in access_frequency:
        del access_frequency[evicted_obj.key]
    if evicted_obj.key in load_balancing_score:
        del load_balancing_score[evicted_obj.key]
    if evicted_obj.key in data_locality_score:
        del data_locality_score[evicted_obj.key]
    if evicted_obj.key in write_status:
        del write_status[evicted_obj.key]