# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
ALIGNMENT_TOLERANCE = 64  # Example value: alignment boundary
PREFETCH_WEIGHT = 1
ACCESS_FREQ_WEIGHT = 1
LAST_ACCESS_TIME_WEIGHT = 1
MEM_ALIGNMENT_WEIGHT = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache line including access frequency, last access time, memory alignment status, and prefetch success rate. It also tracks overall disk read speed and IO throughput.
metadata = {
    'access_frequency': collections.defaultdict(int),
    'last_access_time': collections.defaultdict(int),
    'mem_alignment': collections.defaultdict(bool),
    'prefetch_success': collections.defaultdict(int),
}
overall_disk_read_speed = 1.0  # Placeholder value
io_throughput = 1.0  # Placeholder value

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, old last access time, poor memory alignment, and low prefetch success rate. It also considers the current disk read speed and IO throughput to minimize performance impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    min_score = float('inf')
    candid_obj_key = None
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (
            ACCESS_FREQ_WEIGHT / (metadata['access_frequency'][key] + 1) +
            LAST_ACCESS_TIME_WEIGHT * (cache_snapshot.access_count - metadata['last_access_time'][key]) +
            MEM_ALIGNMENT_WEIGHT * int(not metadata['mem_alignment'][key]) +
            PREFETCH_WEIGHT * (1 - metadata['prefetch_success'][key])
        )
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the last access time, and adjusts the prefetch success rate based on whether the hit was a result of a prefetch. It also recalculates the memory alignment status if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata['access_frequency'][obj.key] += 1
    metadata['last_access_time'][obj.key] = cache_snapshot.access_count

    # Assuming some condition checking for prefetched data hit
    prefetch_hit = False  # Placeholder code, should be replaced with actual check

    if prefetch_hit:
        metadata['prefetch_success'][obj.key] += 1

    # Recalculate memory alignment
    metadata['mem_alignment'][obj.key] = (obj.size % ALIGNMENT_TOLERANCE == 0)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency, sets the last access time to the current time, evaluates the memory alignment, and sets an initial prefetch success rate. It also updates the overall disk read speed and IO throughput metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata['access_frequency'][obj.key] = 1
    metadata['last_access_time'][obj.key] = cache_snapshot.access_count
    metadata['mem_alignment'][obj.key] = (obj.size % ALIGNMENT_TOLERANCE == 0)
    metadata['prefetch_success'][obj.key] = 0  # Initial prefetch rate assumed to start at 0

    # Update disk read speed and IO throughput metrics
    global overall_disk_read_speed, io_throughput
    overall_disk_read_speed = calculate_overall_disk_read_speed()
    io_throughput = calculate_io_throughput()

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata of the evicted object, recalculates the overall disk read speed and IO throughput, and adjusts the prefetch success rate for remaining objects based on the eviction's impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata['access_frequency'][evicted_obj.key]
    del metadata['last_access_time'][evicted_obj.key]
    del metadata['mem_alignment'][evicted_obj.key]
    del metadata['prefetch_success'][evicted_obj.key]

    # Recalculate disk read speed and IO throughput
    global overall_disk_read_speed, io_throughput
    overall_disk_read_speed = calculate_overall_disk_read_speed()
    io_throughput = calculate_io_throughput()

def calculate_overall_disk_read_speed():
    # Placeholder code, should be replaced with actual calculation logic
    return 1.0

def calculate_io_throughput():
    # Placeholder code, should be replaced with actual calculation logic
    return 1.0