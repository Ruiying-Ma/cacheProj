# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ANOMALY_SCORE_INITIAL = 0.5
LATENCY_METRIC_INITIAL = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, access patterns, anomaly scores, synchronization timestamps, and latency metrics for each cached object.
metadata = {
    'access_frequency': {},
    'anomaly_scores': {},
    'sync_timestamps': {},
    'latency_metrics': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combination of low access frequency, high anomaly scores, outdated synchronization timestamps, and high latency metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (
            metadata['access_frequency'][key] * -1 +  # lower frequency is better for eviction
            metadata['anomaly_scores'][key] +  # higher anomaly score is worse
            (cache_snapshot.access_count - metadata['sync_timestamps'][key]) +  # older timestamp is worse
            metadata['latency_metrics'][key]  # higher latency is worse
        )
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, recalculates the anomaly score based on recent access patterns, updates the synchronization timestamp to the current time, and adjusts the latency metrics based on the latest access latency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['anomaly_scores'][key] = calculate_anomaly_score(key, cache_snapshot)
    metadata['sync_timestamps'][key] = cache_snapshot.access_count
    metadata['latency_metrics'][key] = calculate_latency_metric(key, cache_snapshot)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the anomaly score based on initial access patterns, records the current time as the synchronization timestamp, and sets initial latency metrics based on the insertion latency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['anomaly_scores'][key] = ANOMALY_SCORE_INITIAL
    metadata['sync_timestamps'][key] = cache_snapshot.access_count
    metadata['latency_metrics'][key] = LATENCY_METRIC_INITIAL

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy removes all associated metadata for the evicted object and recalculates global metrics to ensure the remaining cache objects are optimized for access patterns, synchronization, and latency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['anomaly_scores'][evicted_key]
    del metadata['sync_timestamps'][evicted_key]
    del metadata['latency_metrics'][evicted_key]
    
    # Recalculate global metrics if needed (not specified in detail, so this is a placeholder)
    recalculate_global_metrics(cache_snapshot)

def calculate_anomaly_score(key, cache_snapshot):
    # Placeholder for actual anomaly score calculation logic
    return ANOMALY_SCORE_INITIAL

def calculate_latency_metric(key, cache_snapshot):
    # Placeholder for actual latency metric calculation logic
    return LATENCY_METRIC_INITIAL

def recalculate_global_metrics(cache_snapshot):
    # Placeholder for actual global metrics recalculation logic
    pass