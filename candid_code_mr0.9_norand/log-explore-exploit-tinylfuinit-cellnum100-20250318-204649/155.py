# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 0.25
WEIGHT_LAST_ACCESS_TIMESTAMP = 0.25
WEIGHT_DATA_PREPROCESSING_TIME = 0.25
WEIGHT_USER_ENGAGEMENT_SCORE = 0.25

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, data preprocessing time, and user engagement score for each cached object.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'data_preprocessing_time': {},
    'user_engagement_score': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, older last access timestamp, higher data preprocessing time, and lower user engagement score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'].get(key, 0)
        last_access_timestamp = metadata['last_access_timestamp'].get(key, 0)
        data_preprocessing_time = metadata['data_preprocessing_time'].get(key, 0)
        user_engagement_score = metadata['user_engagement_score'].get(key, 0)
        
        score = (WEIGHT_ACCESS_FREQUENCY * access_frequency +
                 WEIGHT_LAST_ACCESS_TIMESTAMP * (cache_snapshot.access_count - last_access_timestamp) +
                 WEIGHT_DATA_PREPROCESSING_TIME * data_preprocessing_time +
                 WEIGHT_USER_ENGAGEMENT_SCORE * (1 - user_engagement_score))
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access timestamp to the current time, and adjusts the user engagement score based on real-time analytics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['user_engagement_score'][key] = min(metadata['user_engagement_score'].get(key, 0) + 0.1, 1.0)  # Example adjustment

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, records the data preprocessing time, and assigns an initial user engagement score based on predictive analytics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['data_preprocessing_time'][key] = time.time()  # Example preprocessing time
    metadata['user_engagement_score'][key] = 0.5  # Example initial score

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata for the evicted object and recalculates the weighted scores for remaining objects to ensure optimal cache performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_timestamp']:
        del metadata['last_access_timestamp'][evicted_key]
    if evicted_key in metadata['data_preprocessing_time']:
        del metadata['data_preprocessing_time'][evicted_key]
    if evicted_key in metadata['user_engagement_score']:
        del metadata['user_engagement_score'][evicted_key]
    
    # Recalculate weighted scores for remaining objects (if needed)
    # This step is not explicitly required in the function, but can be done if necessary for optimization