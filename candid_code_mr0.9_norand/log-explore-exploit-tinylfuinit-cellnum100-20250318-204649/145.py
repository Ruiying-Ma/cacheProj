# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
TEMPORAL_DECAY_FACTOR = 0.1
DEFAULT_PRIORITY_SCORE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency, memory footprint, performance metrics, priority score, temporal decay factor, last access timestamp, cache hit rate, and storage capacity utilization.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'priority_score': {},
    'temporal_decay_factor': {},
    'memory_footprint': {},
    'performance_metrics': {},
    'weighted_score': {}
}

def calculate_weighted_score(key):
    freq = metadata['access_frequency'].get(key, 0)
    size = metadata['memory_footprint'].get(key, 0)
    priority = metadata['priority_score'].get(key, DEFAULT_PRIORITY_SCORE)
    decay = metadata['temporal_decay_factor'].get(key, TEMPORAL_DECAY_FACTOR)
    last_access = metadata['last_access_timestamp'].get(key, 0)
    current_time = time.time()
    age = current_time - last_access
    
    weighted_score = (1 / (freq + 1)) * size * (1 / priority) * decay * age
    metadata['weighted_score'][key] = weighted_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combined weighted score considering low usage frequency, high memory footprint, poor performance metrics, lowest priority score, highest temporal decay factor, and oldest last access timestamp.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key in cache_snapshot.cache.keys():
        calculate_weighted_score(key)
        if metadata['weighted_score'][key] < min_score:
            min_score = metadata['weighted_score'][key]
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates access frequency, refreshes last access timestamp, recalculates priority score, adjusts performance metrics, updates cache hit rate, and recalculates the weighted score for eviction consideration.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_timestamp'][key] = time.time()
    metadata['priority_score'][key] = metadata['priority_score'].get(key, DEFAULT_PRIORITY_SCORE)
    metadata['temporal_decay_factor'][key] = TEMPORAL_DECAY_FACTOR
    metadata['memory_footprint'][key] = obj.size
    metadata['performance_metrics'][key] = cache_snapshot.hit_count / cache_snapshot.access_count
    calculate_weighted_score(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes access frequency, sets last access timestamp, assigns default priority score, sets temporal decay factor, records memory footprint, updates storage capacity utilization, adjusts performance metrics, and recalculates cache hit rate and weighted score for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = time.time()
    metadata['priority_score'][key] = DEFAULT_PRIORITY_SCORE
    metadata['temporal_decay_factor'][key] = TEMPORAL_DECAY_FACTOR
    metadata['memory_footprint'][key] = obj.size
    metadata['performance_metrics'][key] = cache_snapshot.hit_count / cache_snapshot.access_count
    calculate_weighted_score(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes all metadata associated with the evicted entry, adjusts storage capacity utilization, recalculates cache hit rate, updates performance metrics, and recalculates weighted scores for remaining objects to ensure accurate eviction decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_timestamp']:
        del metadata['last_access_timestamp'][evicted_key]
    if evicted_key in metadata['priority_score']:
        del metadata['priority_score'][evicted_key]
    if evicted_key in metadata['temporal_decay_factor']:
        del metadata['temporal_decay_factor'][evicted_key]
    if evicted_key in metadata['memory_footprint']:
        del metadata['memory_footprint'][evicted_key]
    if evicted_key in metadata['performance_metrics']:
        del metadata['performance_metrics'][evicted_key]
    if evicted_key in metadata['weighted_score']:
        del metadata['weighted_score'][evicted_key]
    
    for key in cache_snapshot.cache.keys():
        calculate_weighted_score(key)