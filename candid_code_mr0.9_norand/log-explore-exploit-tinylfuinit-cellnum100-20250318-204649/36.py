# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 0.25
WEIGHT_DATA_REDUNDANCY = 0.25
WEIGHT_ACCESS_LATENCY = 0.25
WEIGHT_LAST_ACCESS_TIMESTAMP = 0.25

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, data redundancy score, and access latency history for each cached object.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'data_redundancy_score': {},
    'access_latency_history': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, high data redundancy, high access latency, and old last access timestamp.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'].get(key, 0)
        last_access_timestamp = metadata['last_access_timestamp'].get(key, 0)
        data_redundancy_score = metadata['data_redundancy_score'].get(key, 0)
        access_latency_history = metadata['access_latency_history'].get(key, [])
        
        if access_latency_history:
            avg_access_latency = sum(access_latency_history) / len(access_latency_history)
        else:
            avg_access_latency = 0
        
        score = (WEIGHT_ACCESS_FREQUENCY * (1 / (access_frequency + 1)) +
                 WEIGHT_DATA_REDUNDANCY * data_redundancy_score +
                 WEIGHT_ACCESS_LATENCY * avg_access_latency +
                 WEIGHT_LAST_ACCESS_TIMESTAMP * (cache_snapshot.access_count - last_access_timestamp))
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access timestamp to the current time, and recalculates the access latency history based on the latest access time.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_timestamp'][key] = current_time
    
    if key in metadata['access_latency_history']:
        last_access_time = metadata['last_access_timestamp'][key]
        latency = current_time - last_access_time
        metadata['access_latency_history'][key].append(latency)
    else:
        metadata['access_latency_history'][key] = [0]

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, calculates the initial data redundancy score, and starts tracking the access latency history.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = current_time
    metadata['data_redundancy_score'][key] = calculate_data_redundancy_score(obj)
    metadata['access_latency_history'][key] = [0]

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy removes all associated metadata for the evicted object and recalculates the overall cache data redundancy score to reflect the removal.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_timestamp']:
        del metadata['last_access_timestamp'][evicted_key]
    if evicted_key in metadata['data_redundancy_score']:
        del metadata['data_redundancy_score'][evicted_key]
    if evicted_key in metadata['access_latency_history']:
        del metadata['access_latency_history'][evicted_key]
    
    recalculate_overall_data_redundancy_score()

def calculate_data_redundancy_score(obj):
    '''
    This function calculates the data redundancy score for a given object.
    - Args:
        - `obj`: The object for which the data redundancy score is calculated.
    - Return:
        - `score`: The data redundancy score.
    '''
    # Placeholder for actual data redundancy score calculation logic
    return 0

def recalculate_overall_data_redundancy_score():
    '''
    This function recalculates the overall cache data redundancy score to reflect the removal of an object.
    - Return: `None`
    '''
    # Placeholder for actual overall data redundancy score recalculation logic
    pass