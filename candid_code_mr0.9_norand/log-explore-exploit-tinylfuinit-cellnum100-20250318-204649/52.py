# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
REPLICATION_WEIGHT = 0.5
ACCESS_FREQUENCY_WEIGHT = 0.2
LAST_ACCESS_TIME_WEIGHT = 0.3

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, replication status, load balancing metrics, cache hit rate, and storage capacity utilization for each cache entry.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'replication_status': {},
    'load_balancing_metrics': {},
    'cache_hit_rate': 0,
    'storage_capacity_utilization': 0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining least frequently accessed, oldest access time, replication status, load balancing needs, and storage capacity utilization. It prioritizes evicting entries that are infrequently accessed, have not been accessed recently, and are replicated.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'].get(key, 0)
        last_access_time = metadata['last_access_time'].get(key, 0)
        replication_status = metadata['replication_status'].get(key, 0)
        load_balancing_metric = metadata['load_balancing_metrics'].get(key, 0)
        
        score = (ACCESS_FREQUENCY_WEIGHT * access_frequency +
                 LAST_ACCESS_TIME_WEIGHT * (cache_snapshot.access_count - last_access_time) +
                 REPLICATION_WEIGHT * replication_status +
                 load_balancing_metric)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency counter, updates the last access timestamp, adjusts load balancing metrics, and recalculates the cache hit rate to reflect the successful access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Adjust load balancing metrics if necessary (not specified how, so we leave it as is)
    metadata['cache_hit_rate'] = cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency counter, last access timestamp, replication status, and load balancing metrics. It updates storage capacity utilization and recalculates the cache hit rate based on the current state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['replication_status'][key] = 0  # Assuming 0 means not replicated
    metadata['load_balancing_metrics'][key] = 0  # Initialize load balancing metrics
    metadata['storage_capacity_utilization'] = cache_snapshot.size / cache_snapshot.capacity
    metadata['cache_hit_rate'] = cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata associated with the evicted entry, recalculates load balancing metrics, adjusts storage capacity utilization, and recalculates the cache hit rate to ensure optimal performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_time']:
        del metadata['last_access_time'][evicted_key]
    if evicted_key in metadata['replication_status']:
        del metadata['replication_status'][evicted_key]
    if evicted_key in metadata['load_balancing_metrics']:
        del metadata['load_balancing_metrics'][evicted_key]
    
    metadata['storage_capacity_utilization'] = cache_snapshot.size / cache_snapshot.capacity
    metadata['cache_hit_rate'] = cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)