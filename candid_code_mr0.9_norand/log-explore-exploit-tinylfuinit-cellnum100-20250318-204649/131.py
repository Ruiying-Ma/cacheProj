# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
REDUNDANCY_SCORE_INITIAL = 1
NETWORK_THROUGHPUT_IMPACT_INITIAL = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, redundancy score, virtual machine ID, and network throughput impact.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'redundancy_score': {},
    'network_throughput_impact': {},
    'virtual_machine_id': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score derived from low access frequency, high redundancy score, older last access timestamp, and minimal network throughput impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'].get(key, 0)
        last_access_timestamp = metadata['last_access_timestamp'].get(key, 0)
        redundancy_score = metadata['redundancy_score'].get(key, REDUNDANCY_SCORE_INITIAL)
        network_throughput_impact = metadata['network_throughput_impact'].get(key, NETWORK_THROUGHPUT_IMPACT_INITIAL)
        
        composite_score = (1 / access_frequency) + redundancy_score + (cache_snapshot.access_count - last_access_timestamp) + network_throughput_impact
        
        if composite_score < min_score:
            min_score = composite_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access timestamp, and recalculates the redundancy score based on current data patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    # Recalculate redundancy score based on current data patterns (placeholder logic)
    metadata['redundancy_score'][key] = REDUNDANCY_SCORE_INITIAL  # Placeholder for actual calculation

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, assigns a redundancy score based on initial data analysis, and evaluates the network throughput impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['redundancy_score'][key] = REDUNDANCY_SCORE_INITIAL  # Placeholder for initial data analysis
    metadata['network_throughput_impact'][key] = NETWORK_THROUGHPUT_IMPACT_INITIAL  # Placeholder for initial evaluation

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata and recalculates the redundancy scores and network throughput impacts for remaining objects to ensure optimal cache performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    # Remove metadata associated with the evicted object
    metadata['access_frequency'].pop(evicted_key, None)
    metadata['last_access_timestamp'].pop(evicted_key, None)
    metadata['redundancy_score'].pop(evicted_key, None)
    metadata['network_throughput_impact'].pop(evicted_key, None)
    metadata['virtual_machine_id'].pop(evicted_key, None)
    
    # Recalculate redundancy scores and network throughput impacts for remaining objects (placeholder logic)
    for key in cache_snapshot.cache.keys():
        metadata['redundancy_score'][key] = REDUNDANCY_SCORE_INITIAL  # Placeholder for actual recalculation
        metadata['network_throughput_impact'][key] = NETWORK_THROUGHPUT_IMPACT_INITIAL  # Placeholder for actual recalculation