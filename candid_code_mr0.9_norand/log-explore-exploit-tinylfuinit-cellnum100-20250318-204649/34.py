# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
DEFAULT_PRIORITY_SCORE = 1.0
INITIAL_TEMPORAL_DECAY_FACTOR = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry including access frequency, last access timestamp, priority score, and a temporal decay factor.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combination of the lowest priority score and the highest temporal decay factor, ensuring that less frequently accessed and older entries are evicted first.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_priority_score = float('inf')
    max_temporal_decay_factor = float('-inf')

    for key, cached_obj in cache_snapshot.cache.items():
        obj_metadata = metadata[key]
        priority_score = obj_metadata['priority_score']
        temporal_decay_factor = obj_metadata['temporal_decay_factor']

        if (priority_score < min_priority_score) or (priority_score == min_priority_score and temporal_decay_factor > max_temporal_decay_factor):
            min_priority_score = priority_score
            max_temporal_decay_factor = temporal_decay_factor
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access timestamp to the current time, and recalculates the priority score based on the updated frequency and timestamp.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    obj_metadata = metadata[obj.key]
    obj_metadata['access_frequency'] += 1
    obj_metadata['last_access_timestamp'] = cache_snapshot.access_count
    obj_metadata['priority_score'] = obj_metadata['access_frequency'] / (cache_snapshot.access_count - obj_metadata['last_access_timestamp'] + 1)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, assigns a default priority score, and sets the temporal decay factor to its initial value.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'access_frequency': 1,
        'last_access_timestamp': cache_snapshot.access_count,
        'priority_score': DEFAULT_PRIORITY_SCORE,
        'temporal_decay_factor': INITIAL_TEMPORAL_DECAY_FACTOR
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all metadata associated with the evicted entry and may adjust the temporal decay factors of remaining entries to ensure adaptive replacement dynamics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata[evicted_obj.key]
    for key in metadata:
        metadata[key]['temporal_decay_factor'] *= 0.9  # Example adjustment factor