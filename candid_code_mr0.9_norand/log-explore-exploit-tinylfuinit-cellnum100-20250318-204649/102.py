# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
DEFAULT_PRIVACY_LEVEL = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including synchronization timestamps, coherence flags, privacy levels, and user access patterns. Synchronization timestamps track the last sync time with the main memory. Coherence flags indicate the consistency state of the cache lines. Privacy levels denote the sensitivity of the cached data. User access patterns record the frequency and recency of accesses by different users.
sync_timestamps = {}
coherence_flags = {}
privacy_levels = {}
user_access_patterns = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining the least recently used (LRU) data, lowest privacy level, and least frequently accessed by users. Data with outdated synchronization timestamps and incoherent states are prioritized for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        lru_score = cache_snapshot.access_count - sync_timestamps[key]
        privacy_score = privacy_levels[key]
        access_score = user_access_patterns[key]
        
        score = lru_score + privacy_score + access_score
        
        if coherence_flags[key] != 'valid':
            score -= 1000  # prioritize eviction of incoherent states
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the synchronization timestamp to the current time, sets the coherence flag to 'valid', adjusts the privacy level if necessary, and increments the access count for the user who accessed the data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    sync_timestamps[obj.key] = cache_snapshot.access_count
    coherence_flags[obj.key] = 'valid'
    # Adjust privacy level if necessary (not specified how, so we skip this step)
    user_access_patterns[obj.key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object into the cache, the policy initializes the synchronization timestamp to the current time, sets the coherence flag to 'valid', assigns a default privacy level based on the data type, and records the initial access pattern for the user who inserted the data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    sync_timestamps[obj.key] = cache_snapshot.access_count
    coherence_flags[obj.key] = 'valid'
    privacy_levels[obj.key] = DEFAULT_PRIVACY_LEVEL
    user_access_patterns[obj.key] = 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy logs the eviction event, resets the synchronization timestamp, clears the coherence flag, removes the privacy level, and deletes the user access pattern associated with the evicted data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Log the eviction event (not specified how, so we skip this step)
    sync_timestamps.pop(evicted_obj.key, None)
    coherence_flags.pop(evicted_obj.key, None)
    privacy_levels.pop(evicted_obj.key, None)
    user_access_patterns.pop(evicted_obj.key, None)