# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
ENTRY_LIFETIME = 1000  # Example predefined value for entry lifetime

# Put the metadata specifically maintained by the policy below. The policy maintains hit count, write count, entry lifetime, last update timestamp, access frequency, recency of access, write-back status, 'heat' score, and a FIFO queue with a circular pointer.
metadata = {
    'hit_count': {},
    'write_count': {},
    'entry_lifetime': {},
    'last_update_timestamp': {},
    'access_frequency': {},
    'recency_of_access': {},
    'write_back_status': {},
    'heat_score': {},
    'fifo_queue': [],
    'fifo_pointer': 0
}

def calculate_heat_score(obj_key):
    # Example heat score calculation based on metadata
    hit_count = metadata['hit_count'].get(obj_key, 0)
    write_count = metadata['write_count'].get(obj_key, 0)
    entry_lifetime = metadata['entry_lifetime'].get(obj_key, ENTRY_LIFETIME)
    last_update_timestamp = metadata['last_update_timestamp'].get(obj_key, 0)
    access_frequency = metadata['access_frequency'].get(obj_key, 0)
    recency_of_access = metadata['recency_of_access'].get(obj_key, 0)
    
    # Heat score formula (example)
    heat_score = (hit_count * 0.5) - (write_count * 0.3) + (entry_lifetime * 0.2) - (last_update_timestamp * 0.1) + (access_frequency * 0.4) - (recency_of_access * 0.1)
    return heat_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combined weighted score of low hit count, high write count, long entry lifetime, outdated last update timestamp, and low 'heat' score. If multiple entries have the same score, the circular pointer traverses the cache to find the first entry with zero frequency for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for obj_key in cache_snapshot.cache.keys():
        score = calculate_heat_score(obj_key)
        if score < min_score:
            min_score = score
            candid_obj_key = obj_key
    
    if candid_obj_key is None:
        # Traverse FIFO queue to find the first entry with zero frequency for eviction
        for i in range(len(metadata['fifo_queue'])):
            pointer = (metadata['fifo_pointer'] + i) % len(metadata['fifo_queue'])
            obj_key = metadata['fifo_queue'][pointer]
            if metadata['access_frequency'].get(obj_key, 0) == 0:
                candid_obj_key = obj_key
                metadata['fifo_pointer'] = (pointer + 1) % len(metadata['fifo_queue'])
                break
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the hit count and access frequency, updates the last update timestamp and recency timestamp, recalculates the 'heat' score, and sets the frequency to 1 in the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    obj_key = obj.key
    metadata['hit_count'][obj_key] = metadata['hit_count'].get(obj_key, 0) + 1
    metadata['access_frequency'][obj_key] = metadata['access_frequency'].get(obj_key, 0) + 1
    metadata['last_update_timestamp'][obj_key] = cache_snapshot.access_count
    metadata['recency_of_access'][obj_key] = cache_snapshot.access_count
    metadata['heat_score'][obj_key] = calculate_heat_score(obj_key)
    
    if obj_key in metadata['fifo_queue']:
        metadata['fifo_queue'].remove(obj_key)
    metadata['fifo_queue'].append(obj_key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the hit count and write count to zero, sets the entry lifetime to a predefined value, records the current timestamp as the last update time and recency timestamp, calculates the initial 'heat' score, sets write-back status, and places the object at the rear of the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    obj_key = obj.key
    metadata['hit_count'][obj_key] = 0
    metadata['write_count'][obj_key] = 0
    metadata['entry_lifetime'][obj_key] = ENTRY_LIFETIME
    metadata['last_update_timestamp'][obj_key] = cache_snapshot.access_count
    metadata['recency_of_access'][obj_key] = cache_snapshot.access_count
    metadata['heat_score'][obj_key] = calculate_heat_score(obj_key)
    metadata['write_back_status'][obj_key] = False
    
    metadata['fifo_queue'].append(obj_key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy resets the metadata for the evicted entry, may adjust the entry lifetime parameter based on overall cache performance metrics, removes all metadata associated with the evicted entry, recalculates the 'heat' scores for remaining entries, removes the entry from the FIFO queue, and shifts remaining objects forward to fill the vacancy.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['hit_count']:
        del metadata['hit_count'][evicted_key]
    if evicted_key in metadata['write_count']:
        del metadata['write_count'][evicted_key]
    if evicted_key in metadata['entry_lifetime']:
        del metadata['entry_lifetime'][evicted_key]
    if evicted_key in metadata['last_update_timestamp']:
        del metadata['last_update_timestamp'][evicted_key]
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['recency_of_access']:
        del metadata['recency_of_access'][evicted_key]
    if evicted_key in metadata['write_back_status']:
        del metadata['write_back_status'][evicted_key]
    if evicted_key in metadata['heat_score']:
        del metadata['heat_score'][evicted_key]
    
    if evicted_key in metadata['fifo_queue']:
        metadata['fifo_queue'].remove(evicted_key)
    
    for obj_key in cache_snapshot.cache.keys():
        metadata['heat_score'][obj_key] = calculate_heat_score(obj_key)