# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ENTRY_LIFETIME = 1000  # Predefined entry lifetime

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry including hit count, write count, entry lifetime, and last update timestamp.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low hit count, high write count, long entry lifetime, and outdated last update timestamp.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        hit_count = metadata[key]['hit_count']
        write_count = metadata[key]['write_count']
        entry_lifetime = metadata[key]['entry_lifetime']
        last_update_timestamp = metadata[key]['last_update_timestamp']
        
        score = (hit_count * -1) + (write_count * 1) + (entry_lifetime * 1) + (cache_snapshot.access_count - last_update_timestamp)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the hit count and updates the last update timestamp for the accessed entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['hit_count'] += 1
    metadata[key]['last_update_timestamp'] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the hit count and write count to zero, sets the entry lifetime to a predefined value, and records the current timestamp as the last update time.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'hit_count': 0,
        'write_count': 0,
        'entry_lifetime': ENTRY_LIFETIME,
        'last_update_timestamp': cache_snapshot.access_count
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy resets the metadata for the evicted entry and may adjust the entry lifetime parameter based on overall cache performance metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    # Optionally adjust ENTRY_LIFETIME based on cache performance metrics
    # For simplicity, we keep ENTRY_LIFETIME constant in this implementation