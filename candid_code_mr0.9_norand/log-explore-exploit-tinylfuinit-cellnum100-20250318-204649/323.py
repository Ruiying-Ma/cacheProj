# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, priority score (calculated using frequency and recency), type of data (static vs. dynamic), size of each cached object, and a combined LFU-LRU queue.
metadata = {
    'frequency': {},  # key -> access frequency
    'recency': {},    # key -> last access time
    'priority': {},   # key -> priority score
    'type': {},       # key -> type of data (static/dynamic)
    'size': {},       # key -> size of the object
    'lfu_lru_queue': []  # list of keys in LFU-LRU order
}

def calculate_priority(frequency, recency):
    # Example priority calculation: higher frequency and more recent access give higher priority
    return frequency / (recency + 1)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on the lowest priority score, with ties broken by the size of the object (preferring to evict larger objects first) and then by LFU-LRU position. Preference is given to retaining dynamic data over static data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_priority = float('inf')
    for key in metadata['lfu_lru_queue']:
        if metadata['priority'][key] < min_priority:
            min_priority = metadata['priority'][key]
            candid_obj_key = key
        elif metadata['priority'][key] == min_priority:
            if metadata['size'][key] > metadata['size'][candid_obj_key]:
                candid_obj_key = key
            elif metadata['size'][key] == metadata['size'][candid_obj_key]:
                if metadata['lfu_lru_queue'].index(key) < metadata['lfu_lru_queue'].index(candid_obj_key):
                    candid_obj_key = key
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Immediately after a hit, increment the access frequency, update the recency of access to the current time, recalculate the priority score, update the type of data if changed, ensure size metadata is accurate, and adjust the object's position in the LFU-LRU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['priority'][key] = calculate_priority(metadata['frequency'][key], metadata['recency'][key])
    # Adjust the object's position in the LFU-LRU queue
    metadata['lfu_lru_queue'].remove(key)
    metadata['lfu_lru_queue'].append(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    Immediately after insertion, initialize the access frequency to 1, set the recency of access to the current time, calculate the initial priority score, record the type of data, store the size of the object, and place the object in the appropriate position in the LFU-LRU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['priority'][key] = calculate_priority(metadata['frequency'][key], metadata['recency'][key])
    metadata['type'][key] = 'dynamic'  # Assuming new objects are dynamic by default
    metadata['size'][key] = obj.size
    metadata['lfu_lru_queue'].append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Immediately after eviction, remove all metadata associated with the evicted object, recalculate priority scores for remaining objects if necessary, adjust the type and size metadata to reflect the current cache composition, and remove the object from the LFU-LRU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    del metadata['frequency'][key]
    del metadata['recency'][key]
    del metadata['priority'][key]
    del metadata['type'][key]
    del metadata['size'][key]
    metadata['lfu_lru_queue'].remove(key)