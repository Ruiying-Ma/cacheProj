# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_DATA_BREACH_RISK = 1
WEIGHT_ACCESS_FREQUENCY = 1
WEIGHT_RECENCY = 1
WEIGHT_LATENCY = 1
WEIGHT_HEAT_SCORE = 1
WEIGHT_PRIORITY = 1

# Put the metadata specifically maintained by the policy below. The policy maintains user authentication status, security protocol adherence, password encryption level, data breach risk score, access frequency, recency of access, data retrieval latency, memory allocation efficiency, overall cache hit rate, write-back status, latency impact score, memory hierarchy level, block size, combined 'heat' score, usage frequency, last access timestamp, and priority score.
metadata = {
    'user_auth_status': {},
    'security_protocol_adherence': {},
    'password_encryption_level': {},
    'data_breach_risk_score': {},
    'access_frequency': {},
    'recency_of_access': {},
    'data_retrieval_latency': {},
    'memory_allocation_efficiency': 0,
    'overall_cache_hit_rate': 0,
    'write_back_status': {},
    'latency_impact_score': {},
    'memory_hierarchy_level': {},
    'block_size': {},
    'combined_heat_score': {},
    'usage_frequency': {},
    'last_access_timestamp': {},
    'priority_score': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted combination of the lowest data breach risk score, least frequently accessed, least recently accessed, highest latency objects, lowest combined 'heat' score, and lowest priority score, while ensuring optimal memory allocation efficiency and data integrity.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (
            WEIGHT_DATA_BREACH_RISK * metadata['data_breach_risk_score'][key] +
            WEIGHT_ACCESS_FREQUENCY * metadata['access_frequency'][key] +
            WEIGHT_RECENCY * (cache_snapshot.access_count - metadata['last_access_timestamp'][key]) +
            WEIGHT_LATENCY * metadata['data_retrieval_latency'][key] +
            WEIGHT_HEAT_SCORE * metadata['combined_heat_score'][key] +
            WEIGHT_PRIORITY * metadata['priority_score'][key]
        )
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates user authentication status, increases security protocol adherence score, re-evaluates data breach risk score, increments access frequency, updates recency timestamp, usage frequency, last access timestamp, recalculates data retrieval latency, latency impact score, priority score, combined 'heat' score, adjusts memory hierarchy level if necessary, and updates overall cache hit rate.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['user_auth_status'][key] = True
    metadata['security_protocol_adherence'][key] += 1
    metadata['data_breach_risk_score'][key] = max(0, metadata['data_breach_risk_score'][key] - 1)
    metadata['access_frequency'][key] += 1
    metadata['recency_of_access'][key] = cache_snapshot.access_count
    metadata['usage_frequency'][key] += 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['data_retrieval_latency'][key] = max(1, metadata['data_retrieval_latency'][key] - 1)
    metadata['latency_impact_score'][key] = max(1, metadata['latency_impact_score'][key] - 1)
    metadata['priority_score'][key] += 1
    metadata['combined_heat_score'][key] += 1
    metadata['overall_cache_hit_rate'] = cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy sets initial values for user authentication status, security protocol adherence, password encryption level, assigns a preliminary data breach risk score, initializes access frequency, recency of access, usage frequency to 1, sets last access timestamp to current time, assigns initial data retrieval latency, latency impact score, priority score, combined 'heat' score, records memory hierarchy level and block size, updates memory allocation efficiency, and sets write-back status based on data nature.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['user_auth_status'][key] = True
    metadata['security_protocol_adherence'][key] = 1
    metadata['password_encryption_level'][key] = 1
    metadata['data_breach_risk_score'][key] = 1
    metadata['access_frequency'][key] = 1
    metadata['recency_of_access'][key] = cache_snapshot.access_count
    metadata['usage_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['data_retrieval_latency'][key] = 1
    metadata['latency_impact_score'][key] = 1
    metadata['priority_score'][key] = 1
    metadata['combined_heat_score'][key] = 1
    metadata['memory_hierarchy_level'][key] = 1
    metadata['block_size'][key] = obj.size
    metadata['write_back_status'][key] = False
    metadata['memory_allocation_efficiency'] = cache_snapshot.size / cache_snapshot.capacity

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes all metadata associated with the evicted block, recalculates memory allocation efficiency, adjusts overall cache hit rate, recalculates combined 'heat' scores, priority scores, and data breach risk scores for remaining blocks, updates security protocol adherence metrics, and ensures accurate prioritization for future evictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    del metadata['user_auth_status'][key]
    del metadata['security_protocol_adherence'][key]
    del metadata['password_encryption_level'][key]
    del metadata['data_breach_risk_score'][key]
    del metadata['access_frequency'][key]
    del metadata['recency_of_access'][key]
    del metadata['data_retrieval_latency'][key]
    del metadata['write_back_status'][key]
    del metadata['latency_impact_score'][key]
    del metadata['memory_hierarchy_level'][key]
    del metadata['block_size'][key]
    del metadata['combined_heat_score'][key]
    del metadata['usage_frequency'][key]
    del metadata['last_access_timestamp'][key]
    del metadata['priority_score'][key]
    
    metadata['memory_allocation_efficiency'] = cache_snapshot.size / cache_snapshot.capacity
    metadata['overall_cache_hit_rate'] = cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)
    
    for key in cache_snapshot.cache:
        metadata['combined_heat_score'][key] = metadata['access_frequency'][key] + metadata['recency_of_access'][key]
        metadata['priority_score'][key] = metadata['access_frequency'][key] + metadata['data_breach_risk_score'][key]
        metadata['data_breach_risk_score'][key] = max(0, metadata['data_breach_risk_score'][key] - 1)
        metadata['security_protocol_adherence'][key] += 1