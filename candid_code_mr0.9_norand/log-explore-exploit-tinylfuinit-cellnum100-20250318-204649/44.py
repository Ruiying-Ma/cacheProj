# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
INITIAL_LATENCY_IMPACT_SCORE = 1
INITIAL_MEMORY_HIERARCHY_LEVEL = 1
INITIAL_BLOCK_SIZE = 64
WRITE_BACK_STATUS = False

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, write-back status, latency impact score, memory hierarchy level, block size, combined 'heat' score, and LRU queue position.
metadata = {
    'access_frequency': collections.defaultdict(int),
    'recency_timestamp': {},
    'write_back_status': {},
    'latency_impact_score': {},
    'memory_hierarchy_level': {},
    'block_size': {},
    'heat_score': {},
    'lru_queue': collections.deque()
}

def calculate_heat_score(obj):
    # Example heat score calculation based on access frequency and recency
    return metadata['access_frequency'][obj.key] + metadata['latency_impact_score'][obj.key]

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on the lowest combined 'heat' score within the least-recently-used end of the non-empty LRU queue with the smallest subscript, ensuring data integrity by considering write-back status.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_heat_score = float('inf')
    
    for key in reversed(metadata['lru_queue']):
        if metadata['heat_score'][key] < min_heat_score:
            min_heat_score = metadata['heat_score'][key]
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the recency timestamp, recalculates the latency impact score, adjusts the memory hierarchy level if necessary, recalculates the 'heat' score, and moves the object to the most-recently-used end of the next LRU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata['access_frequency'][obj.key] += 1
    metadata['recency_timestamp'][obj.key] = cache_snapshot.access_count
    metadata['latency_impact_score'][obj.key] = INITIAL_LATENCY_IMPACT_SCORE  # Example update
    metadata['heat_score'][obj.key] = calculate_heat_score(obj)
    
    # Move to the most-recently-used end of the LRU queue
    metadata['lru_queue'].remove(obj.key)
    metadata['lru_queue'].appendleft(obj.key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the recency timestamp to the current time, assigns an initial latency impact score, records the memory hierarchy level and block size, calculates the initial 'heat' score, sets write-back status, and places the object at the most-recently-used end of the L1 queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata['access_frequency'][obj.key] = 1
    metadata['recency_timestamp'][obj.key] = cache_snapshot.access_count
    metadata['latency_impact_score'][obj.key] = INITIAL_LATENCY_IMPACT_SCORE
    metadata['memory_hierarchy_level'][obj.key] = INITIAL_MEMORY_HIERARCHY_LEVEL
    metadata['block_size'][obj.key] = INITIAL_BLOCK_SIZE
    metadata['heat_score'][obj.key] = calculate_heat_score(obj)
    metadata['write_back_status'][obj.key] = WRITE_BACK_STATUS
    
    # Place at the most-recently-used end of the L1 queue
    metadata['lru_queue'].appendleft(obj.key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes all metadata associated with the evicted block, recalculates the 'heat' scores for remaining blocks, and adjusts the positions within the LRU queues to ensure accurate prioritization for future evictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Remove all metadata associated with the evicted block
    del metadata['access_frequency'][evicted_obj.key]
    del metadata['recency_timestamp'][evicted_obj.key]
    del metadata['write_back_status'][evicted_obj.key]
    del metadata['latency_impact_score'][evicted_obj.key]
    del metadata['memory_hierarchy_level'][evicted_obj.key]
    del metadata['block_size'][evicted_obj.key]
    del metadata['heat_score'][evicted_obj.key]
    metadata['lru_queue'].remove(evicted_obj.key)
    
    # Recalculate the 'heat' scores for remaining blocks
    for key in metadata['lru_queue']:
        metadata['heat_score'][key] = calculate_heat_score(cache_snapshot.cache[key])
    
    # Adjust positions within the LRU queues
    metadata['lru_queue'] = collections.deque(sorted(metadata['lru_queue'], key=lambda k: metadata['recency_timestamp'][k]))