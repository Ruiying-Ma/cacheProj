# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import deque, defaultdict

# Put tunable constant parameters below
K = 100  # Decay interval for CBF
k = 3  # Number of LRU queues
L1_capacity = 100  # Capacity of L1
L2_capacity = 200  # Capacity of L2
L3_capacity = 300  # Capacity of L3
W_capacity = 50  # Capacity of window cache

# Put the metadata specifically maintained by the policy below. The policy maintains k LRU queues (L1, L2,..., Lk) with predetermined capacities, a Count Bloom Filter (CBF) to estimate access frequencies, and a small window cache (W) using LRU. The sum of the capacities of the LRU queues and W equals the cache capacity.
LRU_queues = [deque() for _ in range(k)]
LRU_capacities = [L1_capacity, L2_capacity, L3_capacity]
window_cache = deque()
CBF = defaultdict(int)
eviction_count = 0

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    During eviction, select the least-recently-used object from W. If W is empty, evict the least-recently-used object from the non-empty LRU queue with the smallest subscript. If W is not empty, compare the frequency of the least-recently-used object in W with the least-recently-used object in the non-empty LRU queue with the smallest subscript using CBF. Evict the object with the lower frequency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    if window_cache:
        window_lru_obj = window_cache[0]
        for i in range(k):
            if LRU_queues[i]:
                lru_obj = LRU_queues[i][0]
                if CBF[window_lru_obj.key] < CBF[lru_obj.key]:
                    candid_obj_key = window_lru_obj.key
                else:
                    candid_obj_key = lru_obj.key
                break
        if candid_obj_key is None:
            candid_obj_key = window_lru_obj.key
    else:
        for i in range(k):
            if LRU_queues[i]:
                candid_obj_key = LRU_queues[i][0].key
                break
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Increase the hit object's frequency in CBF. If the object is in Li, move it to the most-recently-used end of the queue with subscript j = min(i+1, k). If Lj is consequently full, flush the least-recently-used object in Lj to the most-recently-used end of Li.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    CBF[obj.key] += 1
    for i in range(k):
        if obj in LRU_queues[i]:
            LRU_queues[i].remove(obj)
            j = min(i + 1, k - 1)
            LRU_queues[j].append(obj)
            if len(LRU_queues[j]) > LRU_capacities[j]:
                flushed_obj = LRU_queues[j].popleft()
                LRU_queues[i].append(flushed_obj)
            break

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    Increase the inserted object's frequency in CBF. Add the inserted object to the most-recently-used end of L1. If L1 is full, move the least-recently-used object from L1 to W.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    CBF[obj.key] += 1
    LRU_queues[0].append(obj)
    if len(LRU_queues[0]) > LRU_capacities[0]:
        lru_obj = LRU_queues[0].popleft()
        window_cache.append(lru_obj)
        if len(window_cache) > W_capacity:
            window_cache.popleft()

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Remove the evicted object from the queue it resides in and from CBF. Decay CBF every K evictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    for i in range(k):
        if evicted_obj in LRU_queues[i]:
            LRU_queues[i].remove(evicted_obj)
            break
    if evicted_obj in window_cache:
        window_cache.remove(evicted_obj)
    del CBF[evicted_obj.key]
    global eviction_count
    eviction_count += 1
    if eviction_count % K == 0:
        for key in CBF:
            CBF[key] = max(0, CBF[key] - 1)