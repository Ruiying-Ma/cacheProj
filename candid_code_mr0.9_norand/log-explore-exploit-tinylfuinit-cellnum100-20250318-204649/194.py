# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
DEFAULT_SESSION_ACTIVITY = 1
BASELINE_FAULT_TOLERANCE_SCORE = 1
INITIAL_LOAD_BALANCING_WEIGHT = 1
ENCRYPTION_STATUS = False

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including encryption status, session activity, fault tolerance score, and load balancing weight for each cached object.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score derived from the object's encryption status, session activity, fault tolerance score, and load balancing weight, prioritizing objects with lower scores.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        score = (meta['encryption_status'] * 1 + 
                 meta['session_activity'] * 1 + 
                 meta['fault_tolerance_score'] * 1 + 
                 meta['load_balancing_weight'] * 1)
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the session activity to reflect recent access, increases the fault tolerance score, and adjusts the load balancing weight to distribute future requests more evenly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta['session_activity'] += 1
    meta['fault_tolerance_score'] += 1
    meta['load_balancing_weight'] = (meta['load_balancing_weight'] + 1) % len(cache_snapshot.cache)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the encryption status, sets the session activity to a default value, assigns a baseline fault tolerance score, and calculates an initial load balancing weight.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'encryption_status': ENCRYPTION_STATUS,
        'session_activity': DEFAULT_SESSION_ACTIVITY,
        'fault_tolerance_score': BASELINE_FAULT_TOLERANCE_SCORE,
        'load_balancing_weight': INITIAL_LOAD_BALANCING_WEIGHT
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy recalculates the load balancing weights for remaining objects to ensure optimal distribution and adjusts fault tolerance scores to maintain system reliability.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata[evicted_obj.key]
    
    for key in cache_snapshot.cache:
        meta = metadata[key]
        meta['load_balancing_weight'] = (meta['load_balancing_weight'] + 1) % len(cache_snapshot.cache)
        meta['fault_tolerance_score'] = max(meta['fault_tolerance_score'] - 1, 0)