# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import hashlib
import time

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 0.2
WEIGHT_LAST_ACCESS_TIMESTAMP = 0.2
WEIGHT_DATA_INTEGRITY = 0.2
WEIGHT_ENCRYPTION_STATUS = 0.2
WEIGHT_NETWORK_LATENCY = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, data integrity hash, encryption status, and network latency for each cached object.
metadata = {
    # Example structure:
    # 'obj_key': {
    #     'access_frequency': int,
    #     'last_access_timestamp': int,
    #     'data_integrity_hash': str,
    #     'encryption_status': bool,
    #     'network_latency': float
    # }
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, old access timestamp, compromised data integrity, lack of encryption, and high network latency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        obj_metadata = metadata[key]
        score = (
            WEIGHT_ACCESS_FREQUENCY * (1 / obj_metadata['access_frequency']) +
            WEIGHT_LAST_ACCESS_TIMESTAMP * (cache_snapshot.access_count - obj_metadata['last_access_timestamp']) +
            WEIGHT_DATA_INTEGRITY * (1 if obj_metadata['data_integrity_hash'] != hashlib.sha256(cached_obj.key.encode()).hexdigest() else 0) +
            WEIGHT_ENCRYPTION_STATUS * (0 if obj_metadata['encryption_status'] else 1) +
            WEIGHT_NETWORK_LATENCY * obj_metadata['network_latency']
        )
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access timestamp, verifies and updates the data integrity hash, checks and updates encryption status, and recalculates network latency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    obj_metadata = metadata[obj.key]
    obj_metadata['access_frequency'] += 1
    obj_metadata['last_access_timestamp'] = cache_snapshot.access_count
    obj_metadata['data_integrity_hash'] = hashlib.sha256(obj.key.encode()).hexdigest()
    obj_metadata['encryption_status'] = True  # Assuming encryption status is always true after hit
    obj_metadata['network_latency'] = 0.1  # Assuming a constant network latency for simplicity

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, computes and stores the data integrity hash, sets the encryption status, and measures and records the network latency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'access_frequency': 1,
        'last_access_timestamp': cache_snapshot.access_count,
        'data_integrity_hash': hashlib.sha256(obj.key.encode()).hexdigest(),
        'encryption_status': True,  # Assuming encryption status is true upon insertion
        'network_latency': 0.1  # Assuming a constant network latency for simplicity
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy removes all associated metadata including access frequency, last access timestamp, data integrity hash, encryption status, and network latency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in metadata:
        del metadata[evicted_obj.key]