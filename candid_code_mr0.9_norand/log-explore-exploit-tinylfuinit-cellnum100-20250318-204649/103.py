# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 0.25
WEIGHT_RECENCY = 0.25
WEIGHT_MEMORY_POOL_USAGE = 0.25
WEIGHT_BANDWIDTH_CONSUMPTION = 0.25

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, memory pool allocation, and bandwidth usage patterns for each cached object.
access_frequency = collections.defaultdict(int)
recency_of_access = collections.defaultdict(int)
memory_pool_usage = collections.defaultdict(int)
bandwidth_consumption = collections.defaultdict(int)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, long time since last access, high memory pool usage, and high bandwidth consumption.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (WEIGHT_ACCESS_FREQUENCY * access_frequency[key] +
                 WEIGHT_RECENCY * (cache_snapshot.access_count - recency_of_access[key]) +
                 WEIGHT_MEMORY_POOL_USAGE * memory_pool_usage[key] +
                 WEIGHT_BANDWIDTH_CONSUMPTION * bandwidth_consumption[key])
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the recency of access timestamp, and adjusts the bandwidth usage pattern based on the current access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    access_frequency[obj.key] += 1
    recency_of_access[obj.key] = cache_snapshot.access_count
    bandwidth_consumption[obj.key] += obj.size  # Example adjustment, can be more complex

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the recency of access to the current time, allocates memory pool resources, and starts tracking bandwidth usage patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    access_frequency[obj.key] = 1
    recency_of_access[obj.key] = cache_snapshot.access_count
    memory_pool_usage[obj.key] = obj.size  # Example allocation, can be more complex
    bandwidth_consumption[obj.key] = obj.size  # Example tracking, can be more complex

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy reclaims memory pool resources, removes the object's metadata, and recalibrates bandwidth management parameters to optimize for remaining objects.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del access_frequency[evicted_obj.key]
    del recency_of_access[evicted_obj.key]
    del memory_pool_usage[evicted_obj.key]
    del bandwidth_consumption[evicted_obj.key]
    # Example recalibration, can be more complex