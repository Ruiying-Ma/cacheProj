# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
LATENCY_IMPACT_BASE = 1.0
DATA_RETRIEVAL_LATENCY_BASE = 1.0
MEMORY_HIERARCHY_LEVEL_BASE = 1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, latency impact score, memory hierarchy level, block size, data retrieval latency, memory allocation efficiency, overall cache hit rate, and a circular pointer for traversal.
metadata = {
    'access_frequency': {},
    'recency_timestamp': {},
    'latency_impact_score': {},
    'memory_hierarchy_level': {},
    'block_size': {},
    'data_retrieval_latency': {},
    'memory_allocation_efficiency': 0,
    'overall_cache_hit_rate': 0,
    'circular_pointer': 0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy uses the circular pointer to traverse the cache and sets the frequency of each object it encounters to 0 until it finds an object with zero frequency. It then uses a combined score derived from access frequency, recency, latency impact, memory hierarchy level, and data retrieval latency to choose the eviction victim, ensuring optimal memory allocation efficiency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    cache_keys = list(cache_snapshot.cache.keys())
    pointer = metadata['circular_pointer']
    
    while True:
        current_key = cache_keys[pointer]
        metadata['access_frequency'][current_key] = 0
        pointer = (pointer + 1) % len(cache_keys)
        if metadata['access_frequency'][current_key] == 0:
            break
    
    # Calculate combined score for eviction
    min_score = float('inf')
    for key in cache_keys:
        score = (metadata['access_frequency'][key] +
                 (cache_snapshot.access_count - metadata['recency_timestamp'][key]) +
                 metadata['latency_impact_score'][key] +
                 metadata['memory_hierarchy_level'][key] +
                 metadata['data_retrieval_latency'][key])
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the recency timestamp, recalculates the latency impact score and data retrieval latency for the accessed block, adjusts the memory hierarchy level if necessary, and updates the overall cache hit rate. The pointer remains unchanged.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency_timestamp'][key] = cache_snapshot.access_count
    metadata['latency_impact_score'][key] = LATENCY_IMPACT_BASE / metadata['access_frequency'][key]
    metadata['data_retrieval_latency'][key] = DATA_RETRIEVAL_LATENCY_BASE / metadata['access_frequency'][key]
    metadata['overall_cache_hit_rate'] = cache_snapshot.hit_count / cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy sets its frequency to 1, initializes its recency timestamp, assigns an initial latency impact score and data retrieval latency, records the memory hierarchy level and block size, and updates memory allocation efficiency. The object is placed at the current pointer location, and the pointer remains unchanged.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency_timestamp'][key] = cache_snapshot.access_count
    metadata['latency_impact_score'][key] = LATENCY_IMPACT_BASE
    metadata['data_retrieval_latency'][key] = DATA_RETRIEVAL_LATENCY_BASE
    metadata['memory_hierarchy_level'][key] = MEMORY_HIERARCHY_LEVEL_BASE
    metadata['block_size'][key] = obj.size
    metadata['memory_allocation_efficiency'] = sum(metadata['block_size'].values()) / cache_snapshot.capacity

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata associated with the evicted block, recalculates the latency impact scores and memory allocation efficiency for remaining blocks, and adjusts the overall cache hit rate to reflect the change. The pointer remains unchanged.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['recency_timestamp'][evicted_key]
    del metadata['latency_impact_score'][evicted_key]
    del metadata['memory_hierarchy_level'][evicted_key]
    del metadata['block_size'][evicted_key]
    del metadata['data_retrieval_latency'][evicted_key]
    
    metadata['memory_allocation_efficiency'] = sum(metadata['block_size'].values()) / cache_snapshot.capacity
    metadata['overall_cache_hit_rate'] = cache_snapshot.hit_count / cache_snapshot.access_count