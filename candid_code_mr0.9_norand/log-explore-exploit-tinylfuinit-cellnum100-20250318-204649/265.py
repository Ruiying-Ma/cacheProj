# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections
import math

# Put tunable constant parameters below
DEFAULT_PRIORITY_SCORE = 1
INITIAL_TEMPORAL_DECAY_FACTOR = 1.0
INITIAL_SPATIAL_LOCALITY_SCORE = 1.0
INITIAL_PREDICTIVE_MODEL_SCORE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access timestamp, priority score, temporal decay factor, spatial locality score, predictive model score, and queue position for each cache entry.
metadata = collections.defaultdict(lambda: {
    'access_frequency': 0,
    'last_access_timestamp': 0,
    'priority_score': DEFAULT_PRIORITY_SCORE,
    'temporal_decay_factor': INITIAL_TEMPORAL_DECAY_FACTOR,
    'spatial_locality_score': INITIAL_SPATIAL_LOCALITY_SCORE,
    'predictive_model_score': INITIAL_PREDICTIVE_MODEL_SCORE,
    'queue_position': 0
})

queues = collections.defaultdict(collections.deque)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combined weighted score of low access frequency, old access timestamp, low priority score, high temporal decay factor, low spatial locality score, and low predictive model score, with a preference for entries in the least-recently-used end of the lowest numbered non-empty queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for queue_num in sorted(queues.keys()):
        for key in queues[queue_num]:
            entry = metadata[key]
            score = (
                entry['access_frequency'] * -1 +
                entry['last_access_timestamp'] * -1 +
                entry['priority_score'] * -1 +
                entry['temporal_decay_factor'] +
                entry['spatial_locality_score'] * -1 +
                entry['predictive_model_score'] * -1
            )
            if score < min_score:
                min_score = score
                candid_obj_key = key
        if candid_obj_key:
            break
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    The policy increments the access frequency, refreshes the last access timestamp, recalculates the priority score, updates the temporal decay factor, recalculates the spatial locality score, updates the predictive model score, and moves the entry to the most-recently-used end of the next higher numbered queue if applicable.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    entry = metadata[key]
    
    entry['access_frequency'] += 1
    entry['last_access_timestamp'] = cache_snapshot.access_count
    entry['priority_score'] = DEFAULT_PRIORITY_SCORE + entry['access_frequency']
    entry['temporal_decay_factor'] = math.exp(-entry['access_frequency'] / cache_snapshot.access_count)
    entry['spatial_locality_score'] = INITIAL_SPATIAL_LOCALITY_SCORE + entry['access_frequency']
    entry['predictive_model_score'] = INITIAL_PREDICTIVE_MODEL_SCORE + entry['access_frequency']
    
    current_queue = entry['queue_position']
    queues[current_queue].remove(key)
    next_queue = current_queue + 1
    entry['queue_position'] = next_queue
    queues[next_queue].append(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    The policy initializes the access frequency to 1, sets the last access timestamp to the current time, assigns a default priority score, sets the temporal decay factor to its initial value, calculates the initial spatial locality score, assigns an initial predictive model score, and places the entry at the most-recently-used end of the first queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    entry = metadata[key]
    
    entry['access_frequency'] = 1
    entry['last_access_timestamp'] = cache_snapshot.access_count
    entry['priority_score'] = DEFAULT_PRIORITY_SCORE
    entry['temporal_decay_factor'] = INITIAL_TEMPORAL_DECAY_FACTOR
    entry['spatial_locality_score'] = INITIAL_SPATIAL_LOCALITY_SCORE
    entry['predictive_model_score'] = INITIAL_PREDICTIVE_MODEL_SCORE
    entry['queue_position'] = 0
    
    queues[0].append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    The policy removes all metadata associated with the evicted entry and adjusts the temporal decay factors and spatial locality scores of remaining entries to ensure adaptive replacement dynamics and reflect the change in the cache's spatial configuration.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata[evicted_key]
    
    for queue_num in queues.keys():
        if evicted_key in queues[queue_num]:
            queues[queue_num].remove(evicted_key)
            break
    
    for key in cache_snapshot.cache.keys():
        entry = metadata[key]
        entry['temporal_decay_factor'] = math.exp(-entry['access_frequency'] / cache_snapshot.access_count)
        entry['spatial_locality_score'] = INITIAL_SPATIAL_LOCALITY_SCORE + entry['access_frequency']