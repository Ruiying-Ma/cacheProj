# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
DEFAULT_PRIORITY_SCORE = 1.0
INITIAL_TEMPORAL_DECAY_FACTOR = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry including access frequency, last access timestamp, priority score, temporal decay factor, cache hit rate, and storage capacity utilization. Global metrics track overall hit rate and capacity usage.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'priority_score': {},
    'temporal_decay_factor': {},
    'cache_hit_rate': 0.0,
    'storage_capacity_utilization': 0.0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combination of the lowest priority score, highest temporal decay factor, lowest access frequency, and oldest last access timestamp, ensuring that less frequently accessed, older entries with lower priority are evicted first.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_priority_score = float('inf')
    max_temporal_decay_factor = float('-inf')
    min_access_frequency = float('inf')
    oldest_timestamp = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        priority_score = metadata['priority_score'][key]
        temporal_decay_factor = metadata['temporal_decay_factor'][key]
        access_frequency = metadata['access_frequency'][key]
        last_access_timestamp = metadata['last_access_timestamp'][key]

        if (priority_score < min_priority_score or
            (priority_score == min_priority_score and temporal_decay_factor > max_temporal_decay_factor) or
            (priority_score == min_priority_score and temporal_decay_factor == max_temporal_decay_factor and access_frequency < min_access_frequency) or
            (priority_score == min_priority_score and temporal_decay_factor == max_temporal_decay_factor and access_frequency == min_access_frequency and last_access_timestamp < oldest_timestamp)):
            min_priority_score = priority_score
            max_temporal_decay_factor = temporal_decay_factor
            min_access_frequency = access_frequency
            oldest_timestamp = last_access_timestamp
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, refreshes the last access timestamp, recalculates the priority score based on the updated frequency and timestamp, and updates the cache hit rate to reflect the successful access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['priority_score'][key] = metadata['access_frequency'][key] / (cache_snapshot.access_count - metadata['last_access_timestamp'][key] + 1)
    metadata['cache_hit_rate'] = cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, assigns a default priority score, sets the temporal decay factor to its initial value, updates the storage capacity utilization, and recalculates the cache hit rate based on the current state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['priority_score'][key] = DEFAULT_PRIORITY_SCORE
    metadata['temporal_decay_factor'][key] = INITIAL_TEMPORAL_DECAY_FACTOR
    metadata['storage_capacity_utilization'] = cache_snapshot.size / cache_snapshot.capacity
    metadata['cache_hit_rate'] = cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes all metadata associated with the evicted entry, adjusts the storage capacity utilization, recalculates the cache hit rate to reflect the removal, and may adjust the temporal decay factors of remaining entries to ensure adaptive replacement dynamics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_timestamp'][evicted_key]
    del metadata['priority_score'][evicted_key]
    del metadata['temporal_decay_factor'][evicted_key]
    metadata['storage_capacity_utilization'] = cache_snapshot.size / cache_snapshot.capacity
    metadata['cache_hit_rate'] = cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)
    
    # Adjust temporal decay factors of remaining entries
    for key in cache_snapshot.cache.keys():
        metadata['temporal_decay_factor'][key] *= 0.99  # Example adjustment factor