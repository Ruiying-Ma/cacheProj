# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
LFU_WEIGHT = 0.5
LRU_WEIGHT = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, and write-through status for each cache entry. It also tracks memory access patterns to predict future accesses.
access_frequency = {}
recency_of_access = {}
write_through_status = {}
memory_access_patterns = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combination of least frequently used (LFU) and least recently used (LRU) metrics, with a bias towards evicting entries that are less likely to be accessed soon according to the memory access pattern predictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        lfu_score = access_frequency.get(key, 0)
        lru_score = cache_snapshot.access_count - recency_of_access.get(key, 0)
        future_access_prediction = memory_access_patterns.get(key, 0)
        
        combined_score = LFU_WEIGHT * lfu_score + LRU_WEIGHT * lru_score - future_access_prediction
        
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and recency of the accessed entry. It also refines the memory access pattern predictions based on the current access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = access_frequency.get(key, 0) + 1
    recency_of_access[key] = cache_snapshot.access_count
    memory_access_patterns[key] = memory_access_patterns.get(key, 0) + 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object into the cache, the policy initializes the access frequency and recency metadata for the new entry. It also updates the memory access pattern predictions to account for the new entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 1
    recency_of_access[key] = cache_snapshot.access_count
    memory_access_patterns[key] = 1
    write_through_status[key] = True

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the metadata associated with the evicted entry and adjusts the memory access pattern predictions to reflect the removal.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in access_frequency:
        del access_frequency[key]
    if key in recency_of_access:
        del recency_of_access[key]
    if key in memory_access_patterns:
        del memory_access_patterns[key]
    if key in write_through_status:
        del write_through_status[key]