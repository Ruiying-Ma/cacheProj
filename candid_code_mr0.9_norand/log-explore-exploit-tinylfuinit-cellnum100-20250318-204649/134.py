# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 0.4
WEIGHT_LAST_ACCESS_TIMESTAMP = 0.3
WEIGHT_SPATIAL_LOCALITY_SCORE = 0.2
WEIGHT_PREDICTIVE_MODEL_SCORE = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, spatial locality score, and predictive model scores for future access likelihood.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'spatial_locality_score': {},
    'predictive_model_score': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, old access timestamp, low spatial locality score, and low predictive model score for future access likelihood.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'].get(key, 0)
        last_access_timestamp = metadata['last_access_timestamp'].get(key, 0)
        spatial_locality_score = metadata['spatial_locality_score'].get(key, 0)
        predictive_model_score = metadata['predictive_model_score'].get(key, 0)
        
        score = (WEIGHT_ACCESS_FREQUENCY * access_frequency +
                 WEIGHT_LAST_ACCESS_TIMESTAMP * (cache_snapshot.access_count - last_access_timestamp) +
                 WEIGHT_SPATIAL_LOCALITY_SCORE * spatial_locality_score +
                 WEIGHT_PREDICTIVE_MODEL_SCORE * predictive_model_score)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access timestamp to the current time, recalculates the spatial locality score based on the accessed object's proximity to other objects, and updates the predictive model score based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    # Recalculate spatial locality score and predictive model score based on your specific logic
    # For simplicity, we assume they are recalculated as follows:
    metadata['spatial_locality_score'][key] = calculate_spatial_locality_score(cache_snapshot, obj)
    metadata['predictive_model_score'][key] = calculate_predictive_model_score(cache_snapshot, obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, calculates the initial spatial locality score based on the object's location, and assigns an initial predictive model score based on historical data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['spatial_locality_score'][key] = calculate_spatial_locality_score(cache_snapshot, obj)
    metadata['predictive_model_score'][key] = calculate_predictive_model_score(cache_snapshot, obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata for the evicted object and may adjust the spatial locality scores of remaining objects to reflect the change in the cache's spatial configuration.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    metadata['access_frequency'].pop(evicted_key, None)
    metadata['last_access_timestamp'].pop(evicted_key, None)
    metadata['spatial_locality_score'].pop(evicted_key, None)
    metadata['predictive_model_score'].pop(evicted_key, None)
    # Adjust spatial locality scores of remaining objects if necessary
    for key in cache_snapshot.cache:
        metadata['spatial_locality_score'][key] = calculate_spatial_locality_score(cache_snapshot, cache_snapshot.cache[key])

def calculate_spatial_locality_score(cache_snapshot, obj):
    # Placeholder function for calculating spatial locality score
    return 0

def calculate_predictive_model_score(cache_snapshot, obj):
    # Placeholder function for calculating predictive model score
    return 0