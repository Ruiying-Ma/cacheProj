# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_FREQUENCY = 0.4
WEIGHT_RECENCY = 0.4
WEIGHT_LATENCY = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, data retrieval latency, memory allocation efficiency, overall cache hit rate, and a circular pointer for traversal.
metadata = {
    'frequency': {},  # {obj.key: frequency}
    'recency': {},    # {obj.key: last_access_time}
    'latency': {},    # {obj.key: data_retrieval_latency}
    'pointer': 0,     # Circular pointer for traversal
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy uses the circular pointer to traverse the cache and sets the frequency of each object it encounters to 0 until it finds an object with zero frequency. It then uses a weighted combination of access frequency, recency of access, and data retrieval latency to choose the eviction victim, ensuring optimal memory allocation efficiency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    cache_keys = list(cache_snapshot.cache.keys())
    num_objects = len(cache_keys)
    
    while True:
        current_key = cache_keys[metadata['pointer']]
        metadata['frequency'][current_key] = 0
        metadata['pointer'] = (metadata['pointer'] + 1) % num_objects
        
        if metadata['frequency'][current_key] == 0:
            break
    
    # Calculate weighted score for eviction
    min_score = float('inf')
    for key in cache_keys:
        frequency = metadata['frequency'].get(key, 0)
        recency = metadata['recency'].get(key, 0)
        latency = metadata['latency'].get(key, 0)
        
        score = (WEIGHT_FREQUENCY * frequency +
                 WEIGHT_RECENCY * (cache_snapshot.access_count - recency) +
                 WEIGHT_LATENCY * latency)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy sets the hit object's frequency to 1, updates its recency of access, recalculates its data retrieval latency, and adjusts the overall cache hit rate. The pointer remains unchanged.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata['frequency'][obj.key] = 1
    metadata['recency'][obj.key] = cache_snapshot.access_count
    metadata['latency'][obj.key] = 0  # Assuming latency is recalculated to 0 after hit

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy sets its frequency to 1, initializes its recency of access, assesses its initial data retrieval latency, and updates memory allocation efficiency. The object is placed at the current pointer location, and the pointer remains unchanged.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata['frequency'][obj.key] = 1
    metadata['recency'][obj.key] = cache_snapshot.access_count
    metadata['latency'][obj.key] = 0  # Assuming initial latency is 0

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the metadata associated with the evicted object, recalculates memory allocation efficiency, and adjusts the overall cache hit rate to reflect the change. The pointer remains unchanged.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata['frequency'][evicted_obj.key]
    del metadata['recency'][evicted_obj.key]
    del metadata['latency'][evicted_obj.key]