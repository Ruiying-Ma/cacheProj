# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
FREQUENCY_WEIGHT = 0.7
RECENCY_WEIGHT = 0.3

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry including usage frequency, last access timestamp, and a calculated priority score based on a combination of frequency and recency.
metadata = {}

def calculate_priority(frequency, last_access, current_time):
    return FREQUENCY_WEIGHT * frequency + RECENCY_WEIGHT * (current_time - last_access)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the entry with the lowest priority score, which is calculated using a weighted formula that balances usage frequency and recency of access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_priority = float('inf')
    current_time = cache_snapshot.access_count
    
    for key, cached_obj in cache_snapshot.cache.items():
        freq = metadata[key]['frequency']
        last_access = metadata[key]['last_access']
        priority = calculate_priority(freq, last_access, current_time)
        
        if priority < lowest_priority:
            lowest_priority = priority
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the usage frequency by incrementing it, updates the last access timestamp to the current time, and recalculates the priority score based on the new frequency and timestamp.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key
    
    metadata[key]['frequency'] += 1
    metadata[key]['last_access'] = current_time
    metadata[key]['priority'] = calculate_priority(metadata[key]['frequency'], metadata[key]['last_access'], current_time)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object into the cache, the policy initializes the usage frequency to 1, sets the last access timestamp to the current time, and calculates the initial priority score using the default weights for frequency and recency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key
    
    metadata[key] = {
        'frequency': 1,
        'last_access': current_time,
        'priority': calculate_priority(1, current_time, current_time)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy removes all metadata associated with the evicted entry and recalculates the priority scores for the remaining entries to ensure optimal storage utilization and accurate hit ratio calculation.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    current_time = cache_snapshot.access_count
    
    # Remove metadata of evicted object
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    # Recalculate priority scores for remaining entries
    for key, cached_obj in cache_snapshot.cache.items():
        freq = metadata[key]['frequency']
        last_access = metadata[key]['last_access']
        metadata[key]['priority'] = calculate_priority(freq, last_access, current_time)