# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
LATENCY_WEIGHT = 0.5
ACCESS_FREQUENCY_WEIGHT = 0.3
PREDICTED_FUTURE_ACCESS_TIME_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, predicted future access time using a predictive model, and latency metrics for each cache entry.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, high latency, and the predicted future access time being farthest in the future.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata[key]['access_frequency']
        last_access_time = metadata[key]['last_access_time']
        predicted_future_access_time = metadata[key]['predicted_future_access_time']
        latency = metadata[key]['latency']
        
        score = (ACCESS_FREQUENCY_WEIGHT / access_frequency) + \
                (LATENCY_WEIGHT * latency) + \
                (PREDICTED_FUTURE_ACCESS_TIME_WEIGHT * predicted_future_access_time)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, records the current time as the last access time, updates the predicted future access time using the predictive model, and updates the latency metrics based on the current access latency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata[key]['access_frequency'] += 1
    metadata[key]['last_access_time'] = current_time
    metadata[key]['predicted_future_access_time'] = predict_future_access_time(metadata[key])
    metadata[key]['latency'] = calculate_latency(metadata[key])

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, predicts the future access time using the predictive model, and initializes the latency metrics based on the insertion latency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata[key] = {
        'access_frequency': 1,
        'last_access_time': current_time,
        'predicted_future_access_time': predict_future_access_time({'access_frequency': 1, 'last_access_time': current_time}),
        'latency': calculate_latency({'access_frequency': 1, 'last_access_time': current_time})
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy removes all metadata associated with the evicted entry and adjusts the predictive model parameters if necessary to improve future predictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    del metadata[key]
    adjust_predictive_model()

def predict_future_access_time(entry_metadata):
    # Dummy predictive model for future access time
    return entry_metadata['last_access_time'] + 100

def calculate_latency(entry_metadata):
    # Dummy latency calculation
    return time.time() - entry_metadata['last_access_time']

def adjust_predictive_model():
    # Dummy function to adjust predictive model parameters
    pass