# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ACCESS_FREQUENCY_WEIGHT = 0.4
LAST_ACCESS_TIMESTAMP_WEIGHT = 0.3
DISK_IO_RATE_WEIGHT = 0.2
NETWORK_LATENCY_WEIGHT = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, disk I/O rate, network latency, and user request pattern statistics for each cached object.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'disk_io_rate': {},
    'network_latency': {},
    'user_request_pattern': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score derived from access frequency, recency of access, disk I/O rate, network latency, and user request patterns. Objects with lower scores are evicted first.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'].get(key, 0)
        last_access_timestamp = metadata['last_access_timestamp'].get(key, 0)
        disk_io_rate = metadata['disk_io_rate'].get(key, 0)
        network_latency = metadata['network_latency'].get(key, 0)
        
        score = (ACCESS_FREQUENCY_WEIGHT * access_frequency +
                 LAST_ACCESS_TIMESTAMP_WEIGHT * (cache_snapshot.access_count - last_access_timestamp) +
                 DISK_IO_RATE_WEIGHT * disk_io_rate +
                 NETWORK_LATENCY_WEIGHT * network_latency)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and last access timestamp for the object. It also adjusts the user request pattern statistics to reflect the latest access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    # Update user request pattern statistics if needed

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency and last access timestamp. It also updates the disk I/O rate and network latency metadata based on the source of the object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['disk_io_rate'][key] = 0  # Initialize based on the source of the object
    metadata['network_latency'][key] = 0  # Initialize based on the source of the object
    # Update user request pattern statistics if needed

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata and recalculates the overall disk I/O rate and network latency statistics to ensure they reflect the current cache contents.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in metadata['access_frequency']:
        del metadata['access_frequency'][key]
    if key in metadata['last_access_timestamp']:
        del metadata['last_access_timestamp'][key]
    if key in metadata['disk_io_rate']:
        del metadata['disk_io_rate'][key]
    if key in metadata['network_latency']:
        del metadata['network_latency'][key]
    # Recalculate overall disk I/O rate and network latency statistics if needed