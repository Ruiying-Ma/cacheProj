# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import heapq
from collections import defaultdict

# Put tunable constant parameters below
DEFAULT_ACCESS_FREQUENCY = 1
DEFAULT_RECENCY = 1
DEFAULT_PATTERN_RECOGNITION_SCORE = 0
DEFAULT_PRIORITY_SCORE = 1
DEFAULT_TEMPORAL_DECAY_FACTOR = 1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, pattern recognition score, last access timestamp, priority score, and temporal decay factor for each cached object.
metadata = defaultdict(lambda: {
    'access_frequency': DEFAULT_ACCESS_FREQUENCY,
    'recency': DEFAULT_RECENCY,
    'pattern_recognition_score': DEFAULT_PATTERN_RECOGNITION_SCORE,
    'last_access_timestamp': 0,
    'priority_score': DEFAULT_PRIORITY_SCORE,
    'temporal_decay_factor': DEFAULT_TEMPORAL_DECAY_FACTOR
})

priority_queue = []

def calculate_composite_score(obj_key):
    data = metadata[obj_key]
    composite_score = (data['access_frequency'] * data['recency'] * data['pattern_recognition_score'] * data['priority_score']) / data['temporal_decay_factor']
    return composite_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by evaluating a composite score derived from access frequency, recency, pattern recognition, priority score, and temporal decay factor. Objects with the lowest composite scores and highest temporal decay factors are prioritized for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    max_decay_factor = -float('inf')
    
    for key in cache_snapshot.cache:
        composite_score = calculate_composite_score(key)
        decay_factor = metadata[key]['temporal_decay_factor']
        
        if composite_score < min_score or (composite_score == min_score and decay_factor > max_decay_factor):
            min_score = composite_score
            max_decay_factor = decay_factor
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the accessed object are incremented, the last access timestamp is refreshed, the pattern recognition score is updated based on the detected access pattern, the priority score is recalculated, and the temporal decay factor is adjusted. The priority queue is then rebalanced accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['access_frequency'] += 1
    metadata[key]['recency'] += 1
    metadata[key]['last_access_timestamp'] = cache_snapshot.access_count
    metadata[key]['pattern_recognition_score'] += 1  # Simplified pattern recognition
    metadata[key]['priority_score'] = metadata[key]['access_frequency'] * metadata[key]['recency']
    metadata[key]['temporal_decay_factor'] *= 0.9  # Simplified temporal decay adjustment
    
    heapq.heapify(priority_queue)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its initial access frequency and recency are set to default values, the last access timestamp is set to the current time, the pattern recognition score is initialized, the priority score is assigned a default value, and the temporal decay factor is set to its initial value. The object is added to the priority queue based on its initial composite score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'access_frequency': DEFAULT_ACCESS_FREQUENCY,
        'recency': DEFAULT_RECENCY,
        'pattern_recognition_score': DEFAULT_PATTERN_RECOGNITION_SCORE,
        'last_access_timestamp': cache_snapshot.access_count,
        'priority_score': DEFAULT_PRIORITY_SCORE,
        'temporal_decay_factor': DEFAULT_TEMPORAL_DECAY_FACTOR
    }
    
    composite_score = calculate_composite_score(key)
    heapq.heappush(priority_queue, (composite_score, key))

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the metadata of the evicted object is removed. The priority queue is rebalanced to reflect the removal, and the temporal decay factors of remaining entries may be adjusted to ensure adaptive replacement dynamics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata[evicted_key]
    
    priority_queue[:] = [(score, key) for score, key in priority_queue if key != evicted_key]
    heapq.heapify(priority_queue)
    
    for key in metadata:
        metadata[key]['temporal_decay_factor'] *= 0.95  # Simplified temporal decay adjustment