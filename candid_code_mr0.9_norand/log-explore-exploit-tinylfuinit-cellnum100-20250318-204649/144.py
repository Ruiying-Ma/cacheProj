# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
ENTRY_LIFETIME = 1000
INITIAL_DATA_MIGRATION_COST = 10
INITIAL_CACHE_COHERENCY_STATUS = 1
INITIAL_SESSION_TRACKING_METRICS = 1
INITIAL_RESOURCE_CONTENTION_LEVELS = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry including hit count, write count, entry lifetime, last update timestamp, data migration cost, cache coherency status, session tracking metrics, and resource contention levels.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low hit count, high write count, long entry lifetime, outdated last update timestamp, high data migration cost, low cache coherency, low session tracking metrics, and high resource contention.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        score = (meta['hit_count'] * -1 + 
                 meta['write_count'] * 1 + 
                 meta['entry_lifetime'] * 1 + 
                 (cache_snapshot.access_count - meta['last_update_timestamp']) * 1 + 
                 meta['data_migration_cost'] * 1 + 
                 meta['cache_coherency_status'] * -1 + 
                 meta['session_tracking_metrics'] * -1 + 
                 meta['resource_contention_levels'] * 1)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the hit count, updates the last update timestamp, adjusts cache coherency status, updates session tracking metrics to reflect increased access frequency, and recalculates resource contention levels.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta['hit_count'] += 1
    meta['last_update_timestamp'] = cache_snapshot.access_count
    meta['cache_coherency_status'] += 1
    meta['session_tracking_metrics'] += 1
    meta['resource_contention_levels'] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the hit count and write count to zero, sets the entry lifetime to a predefined value, records the current timestamp as the last update time, initializes the data migration cost, sets initial cache coherency status, starts session tracking metrics, and assesses initial resource contention levels.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'hit_count': 0,
        'write_count': 0,
        'entry_lifetime': ENTRY_LIFETIME,
        'last_update_timestamp': cache_snapshot.access_count,
        'data_migration_cost': INITIAL_DATA_MIGRATION_COST,
        'cache_coherency_status': INITIAL_CACHE_COHERENCY_STATUS,
        'session_tracking_metrics': INITIAL_SESSION_TRACKING_METRICS,
        'resource_contention_levels': INITIAL_RESOURCE_CONTENTION_LEVELS
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy resets the metadata for the evicted entry, may adjust the entry lifetime parameter based on overall cache performance metrics, recalculates overall resource contention levels, updates session tracking metrics to remove the evicted object, and adjusts cache coherency status for remaining objects.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata[evicted_obj.key]
    # Adjust entry lifetime parameter based on overall cache performance metrics
    # This is a placeholder for more complex logic that could be implemented
    for key in metadata:
        metadata[key]['resource_contention_levels'] -= 1
        metadata[key]['session_tracking_metrics'] -= 1
        metadata[key]['cache_coherency_status'] -= 1