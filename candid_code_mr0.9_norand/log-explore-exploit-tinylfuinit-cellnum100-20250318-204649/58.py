# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
LATENCY_WEIGHT = 0.3
FREQUENCY_WEIGHT = 0.2
RECENCY_WEIGHT = 0.2
PRIORITY_WEIGHT = 0.3

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, data retrieval latency, memory allocation efficiency, overall cache hit rate, usage frequency, last access timestamp, and a calculated priority score.
metadata = {
    'access_frequency': {},
    'recency_of_access': {},
    'data_retrieval_latency': {},
    'memory_allocation_efficiency': 0,
    'usage_frequency': {},
    'last_access_timestamp': {},
    'priority_score': {}
}

def calculate_priority_score(key):
    frequency = metadata['access_frequency'].get(key, 0)
    recency = metadata['recency_of_access'].get(key, 0)
    latency = metadata['data_retrieval_latency'].get(key, 0)
    priority = metadata['priority_score'].get(key, 0)
    
    score = (LATENCY_WEIGHT * latency) + (FREQUENCY_WEIGHT * frequency) + (RECENCY_WEIGHT * recency) + (PRIORITY_WEIGHT * priority)
    return score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combined weighted formula that considers the least frequently accessed, least recently accessed, highest latency, and lowest priority score objects, ensuring optimal memory allocation efficiency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key in cache_snapshot.cache.keys():
        score = calculate_priority_score(key)
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates access frequency, recency of access, usage frequency, last access timestamp, recalculates data retrieval latency, priority score, and adjusts the overall cache hit rate.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['recency_of_access'][key] = current_time
    metadata['usage_frequency'][key] = metadata['usage_frequency'].get(key, 0) + 1
    metadata['last_access_timestamp'][key] = current_time
    metadata['data_retrieval_latency'][key] = 0  # Assuming latency is recalculated elsewhere
    metadata['priority_score'][key] = calculate_priority_score(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes access frequency, recency of access, usage frequency to 1, sets last access timestamp to current time, assesses initial data retrieval latency, calculates initial priority score, and updates memory allocation efficiency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata['access_frequency'][key] = 1
    metadata['recency_of_access'][key] = current_time
    metadata['usage_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = current_time
    metadata['data_retrieval_latency'][key] = 0  # Assuming initial latency is 0
    metadata['priority_score'][key] = calculate_priority_score(key)
    metadata['memory_allocation_efficiency'] = cache_snapshot.size / cache_snapshot.capacity

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy removes all metadata associated with the evicted object, recalculates memory allocation efficiency, priority scores for remaining entries, and adjusts the overall cache hit rate.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['recency_of_access']:
        del metadata['recency_of_access'][evicted_key]
    if evicted_key in metadata['usage_frequency']:
        del metadata['usage_frequency'][evicted_key]
    if evicted_key in metadata['last_access_timestamp']:
        del metadata['last_access_timestamp'][evicted_key]
    if evicted_key in metadata['data_retrieval_latency']:
        del metadata['data_retrieval_latency'][evicted_key]
    if evicted_key in metadata['priority_score']:
        del metadata['priority_score'][evicted_key]
    
    metadata['memory_allocation_efficiency'] = cache_snapshot.size / cache_snapshot.capacity
    
    for key in cache_snapshot.cache.keys():
        metadata['priority_score'][key] = calculate_priority_score(key)