# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
SQ_CAPACITY = 10  # Example capacity for SQ
MQ_CAPACITY = 20  # Example capacity for MQ
GQ_CAPACITY = 30  # Example capacity for GQ

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, latency impact score, memory hierarchy level, block size, and queue position (SQ, MQ, or GQ) for each cache block.
metadata = {
    'access_frequency': {},
    'recency_timestamp': {},
    'latency_impact_score': {},
    'memory_hierarchy_level': {},
    'block_size': {},
    'queue_position': {}
}

SQ = []
MQ = []
GQ = []

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first checks if SQ is full; if so, it moves objects from SQ to MQ based on access frequency. If MQ is full, it evicts the object with the lowest combined score of access frequency, recency, latency impact, and memory hierarchy level. If SQ is not full, it evicts the object from SQ with frequency less than 2.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    if len(SQ) >= SQ_CAPACITY:
        # Move objects from SQ to MQ based on access frequency
        for key in SQ:
            if metadata['access_frequency'][key] >= 2:
                SQ.remove(key)
                MQ.append(key)
                metadata['queue_position'][key] = 'MQ'
                if len(MQ) >= MQ_CAPACITY:
                    break

    if len(MQ) >= MQ_CAPACITY:
        # Evict the object with the lowest combined score from MQ
        lowest_score = float('inf')
        for key in MQ:
            score = (metadata['access_frequency'][key] +
                     cache_snapshot.access_count - metadata['recency_timestamp'][key] +
                     metadata['latency_impact_score'][key] +
                     metadata['memory_hierarchy_level'][key])
            if score < lowest_score:
                lowest_score = score
                candid_obj_key = key
    else:
        # Evict the object from SQ with frequency less than 2
        for key in SQ:
            if metadata['access_frequency'][key] < 2:
                candid_obj_key = key
                break

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the recency timestamp, recalculates the latency impact score, adjusts the memory hierarchy level if necessary, and moves the object to the rear of its respective queue (SQ or MQ).
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency_timestamp'][key] = cache_snapshot.access_count
    # Recalculate latency impact score and adjust memory hierarchy level if necessary
    # (Assuming some function or logic to recalculate these values)
    # Move the object to the rear of its respective queue
    if metadata['queue_position'][key] == 'SQ':
        SQ.remove(key)
        SQ.append(key)
    elif metadata['queue_position'][key] == 'MQ':
        MQ.remove(key)
        MQ.append(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the recency timestamp to the current time, assigns an initial latency impact score, records the memory hierarchy level and block size, and places the object in SQ or MQ based on its presence in GQ.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency_timestamp'][key] = cache_snapshot.access_count
    metadata['latency_impact_score'][key] = 1  # Initial latency impact score
    metadata['memory_hierarchy_level'][key] = 1  # Initial memory hierarchy level
    metadata['block_size'][key] = obj.size
    if key in GQ:
        GQ.remove(key)
        MQ.append(key)
        metadata['queue_position'][key] = 'MQ'
    else:
        SQ.append(key)
        metadata['queue_position'][key] = 'SQ'

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata associated with the evicted block, recalculates the latency impact scores for remaining blocks, and places the evicted object in GQ, removing the front of GQ if it is full.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    # Remove metadata associated with the evicted block
    del metadata['access_frequency'][evicted_key]
    del metadata['recency_timestamp'][evicted_key]
    del metadata['latency_impact_score'][evicted_key]
    del metadata['memory_hierarchy_level'][evicted_key]
    del metadata['block_size'][evicted_key]
    del metadata['queue_position'][evicted_key]
    if evicted_key in SQ:
        SQ.remove(evicted_key)
    if evicted_key in MQ:
        MQ.remove(evicted_key)
    # Place the evicted object in GQ
    GQ.append(evicted_key)
    metadata['queue_position'][evicted_key] = 'GQ'
    if len(GQ) > GQ_CAPACITY:
        GQ.pop(0)