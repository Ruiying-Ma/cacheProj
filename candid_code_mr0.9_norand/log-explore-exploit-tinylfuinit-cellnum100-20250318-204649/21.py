# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
INITIAL_LATENCY_IMPACT_SCORE = 1
INITIAL_MEMORY_HIERARCHY_LEVEL = 1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, latency impact score, memory hierarchy level, block size, and a LRU queue position for each cache block.
access_frequency = collections.defaultdict(int)
recency_timestamp = {}
latency_impact_score = collections.defaultdict(lambda: INITIAL_LATENCY_IMPACT_SCORE)
memory_hierarchy_level = collections.defaultdict(lambda: INITIAL_MEMORY_HIERARCHY_LEVEL)
block_size = {}
lru_queue = collections.deque()

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combined score derived from access frequency, recency, latency impact, memory hierarchy level, and LRU queue position. Blocks with lower scores are evicted first, prioritizing those with higher latency impact and lower access frequency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (access_frequency[key] * 0.1 + 
                 (cache_snapshot.access_count - recency_timestamp[key]) * 0.2 + 
                 latency_impact_score[key] * 0.3 + 
                 memory_hierarchy_level[key] * 0.2 + 
                 lru_queue.index(key) * 0.2)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the recency timestamp, recalculates the latency impact score, adjusts the memory hierarchy level if necessary, and moves the block to the most-recently-used end of the LRU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] += 1
    recency_timestamp[key] = cache_snapshot.access_count
    latency_impact_score[key] = max(1, latency_impact_score[key] - 1)  # Example recalculation
    memory_hierarchy_level[key] = min(memory_hierarchy_level[key] + 1, 3)  # Example adjustment
    if key in lru_queue:
        lru_queue.remove(key)
    lru_queue.append(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency, sets the recency timestamp to the current time, assigns an initial latency impact score, records the memory hierarchy level and block size, and puts the block at the most-recently-used end of the LRU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 1
    recency_timestamp[key] = cache_snapshot.access_count
    latency_impact_score[key] = INITIAL_LATENCY_IMPACT_SCORE
    memory_hierarchy_level[key] = INITIAL_MEMORY_HIERARCHY_LEVEL
    block_size[key] = obj.size
    lru_queue.append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata associated with the evicted block, recalculates the latency impact scores for remaining blocks, and removes the block from the LRU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del access_frequency[evicted_key]
    del recency_timestamp[evicted_key]
    del latency_impact_score[evicted_key]
    del memory_hierarchy_level[evicted_key]
    del block_size[evicted_key]
    lru_queue.remove(evicted_key)
    
    # Example recalculation of latency impact scores for remaining blocks
    for key in cache_snapshot.cache.keys():
        latency_impact_score[key] = max(1, latency_impact_score[key] - 1)