# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
LATENCY_IMPACT_INITIAL = 1
MEMORY_HIERARCHY_LEVEL_INITIAL = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, and latency impact score for each cache block. Additionally, it tracks the memory hierarchy level of each block and its size.
metadata = {
    'access_frequency': {},
    'recency_timestamp': {},
    'latency_impact_score': {},
    'memory_hierarchy_level': {},
    'block_size': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combined score derived from access frequency, recency, latency impact, and memory hierarchy level. Blocks with lower scores are evicted first, prioritizing those with higher latency impact and lower access frequency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_freq = metadata['access_frequency'].get(key, 0)
        recency = metadata['recency_timestamp'].get(key, 0)
        latency_impact = metadata['latency_impact_score'].get(key, LATENCY_IMPACT_INITIAL)
        memory_level = metadata['memory_hierarchy_level'].get(key, MEMORY_HIERARCHY_LEVEL_INITIAL)
        
        score = (latency_impact / (access_freq + 1)) + (time.time() - recency) + memory_level
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the recency timestamp, and recalculates the latency impact score for the accessed block. It also adjusts the memory hierarchy level if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['recency_timestamp'][key] = cache_snapshot.access_count
    metadata['latency_impact_score'][key] = metadata['latency_impact_score'].get(key, LATENCY_IMPACT_INITIAL) + 1
    metadata['memory_hierarchy_level'][key] = metadata['memory_hierarchy_level'].get(key, MEMORY_HIERARCHY_LEVEL_INITIAL)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency, sets the recency timestamp to the current time, assigns an initial latency impact score, and records the memory hierarchy level and block size.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency_timestamp'][key] = cache_snapshot.access_count
    metadata['latency_impact_score'][key] = LATENCY_IMPACT_INITIAL
    metadata['memory_hierarchy_level'][key] = MEMORY_HIERARCHY_LEVEL_INITIAL
    metadata['block_size'][key] = obj.size

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata associated with the evicted block and recalculates the latency impact scores for remaining blocks to ensure optimal cache performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['recency_timestamp']:
        del metadata['recency_timestamp'][evicted_key]
    if evicted_key in metadata['latency_impact_score']:
        del metadata['latency_impact_score'][evicted_key]
    if evicted_key in metadata['memory_hierarchy_level']:
        del metadata['memory_hierarchy_level'][evicted_key]
    if evicted_key in metadata['block_size']:
        del metadata['block_size'][evicted_key]
    
    # Recalculate latency impact scores for remaining blocks
    for key in cache_snapshot.cache.keys():
        metadata['latency_impact_score'][key] = metadata['latency_impact_score'].get(key, LATENCY_IMPACT_INITIAL) + 1