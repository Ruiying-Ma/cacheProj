# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for LRU in eviction decision
BETA = 0.5   # Weight for LFU in eviction decision

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry including last access time, frequency of access, predicted next access time, and a coherence state indicator. Additionally, it keeps track of overall cache resource usage and allocation priorities.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combination of the least recently used (LRU) and least frequently used (LFU) metrics, adjusted by the predicted next access time. Entries with the lowest priority in terms of resource allocation and coherence state are more likely to be evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_priority = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        lru_score = cache_snapshot.access_count - meta['last_access_time']
        lfu_score = meta['access_frequency']
        predicted_next_access = meta['predicted_next_access_time']
        coherence_state = meta['coherence_state']
        
        priority = ALPHA * lru_score + BETA * lfu_score - predicted_next_access + coherence_state
        
        if priority < min_priority:
            min_priority = priority
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the last access time to the current time, increments the access frequency, and recalculates the predicted next access time based on recent access patterns. The coherence state is checked and updated if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta['last_access_time'] = cache_snapshot.access_count
    meta['access_frequency'] += 1
    meta['predicted_next_access_time'] = cache_snapshot.access_count + (cache_snapshot.access_count - meta['last_access_time']) / meta['access_frequency']
    meta['coherence_state'] = 1  # Assuming coherence state is updated to 1 on hit

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the last access time to the current time, sets the access frequency to one, and estimates the predicted next access time. It also sets the initial coherence state and adjusts resource allocation priorities to accommodate the new entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'last_access_time': cache_snapshot.access_count,
        'access_frequency': 1,
        'predicted_next_access_time': cache_snapshot.access_count + 1,
        'coherence_state': 1  # Assuming initial coherence state is 1
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata of the evicted entry and recalculates resource allocation priorities for the remaining entries. It also updates the overall cache resource usage statistics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata[evicted_obj.key]
    # Recalculate resource allocation priorities if needed (not explicitly defined in the task)
    # Update overall cache resource usage statistics if needed (not explicitly defined in the task)