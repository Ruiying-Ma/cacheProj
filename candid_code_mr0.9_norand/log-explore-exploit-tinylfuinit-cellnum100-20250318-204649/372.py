# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
INITIAL_PREDICTIVE_SCORE = 1.0
INITIAL_DATA_LEAKAGE_RISK_SCORE = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains a predictive score for each cache entry, a timestamp of the last access, a transaction validation status, and a data leakage risk score.
metadata = {
    'predictive_score': {},
    'last_access_timestamp': {},
    'transaction_validated': {},
    'data_leakage_risk_score': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score derived from the predictive score, data leakage risk score, and the time since the last access. Entries with lower predictive scores, higher data leakage risk, and older access times are prioritized for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_composite_score = float('inf')
    current_time = cache_snapshot.access_count

    for key, cached_obj in cache_snapshot.cache.items():
        predictive_score = metadata['predictive_score'][key]
        last_access_time = metadata['last_access_timestamp'][key]
        data_leakage_risk_score = metadata['data_leakage_risk_score'][key]
        
        time_since_last_access = current_time - last_access_time
        composite_score = predictive_score - data_leakage_risk_score + time_since_last_access
        
        if composite_score < min_composite_score:
            min_composite_score = composite_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the last access timestamp to the current time, recalculates the predictive score based on recent access patterns, and re-evaluates the data leakage risk score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key
    
    # Update last access timestamp
    metadata['last_access_timestamp'][key] = current_time
    
    # Recalculate predictive score (example: increment by 1)
    metadata['predictive_score'][key] += 1
    
    # Re-evaluate data leakage risk score (example: decrement by 0.1)
    metadata['data_leakage_risk_score'][key] = max(0, metadata['data_leakage_risk_score'][key] - 0.1)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the predictive score based on initial access patterns, sets the last access timestamp to the current time, validates the transaction, and assigns an initial data leakage risk score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key
    
    # Initialize predictive score
    metadata['predictive_score'][key] = INITIAL_PREDICTIVE_SCORE
    
    # Set last access timestamp
    metadata['last_access_timestamp'][key] = current_time
    
    # Validate the transaction
    metadata['transaction_validated'][key] = True
    
    # Assign initial data leakage risk score
    metadata['data_leakage_risk_score'][key] = INITIAL_DATA_LEAKAGE_RISK_SCORE

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an entry, the policy recalculates the predictive scores and data leakage risk scores for the remaining entries to ensure they reflect the current cache state and access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    # Remove metadata for the evicted object
    del metadata['predictive_score'][evicted_key]
    del metadata['last_access_timestamp'][evicted_key]
    del metadata['transaction_validated'][evicted_key]
    del metadata['data_leakage_risk_score'][evicted_key]
    
    # Recalculate predictive scores and data leakage risk scores for remaining entries
    for key in cache_snapshot.cache.keys():
        # Example recalculation: decrement predictive score by 0.1
        metadata['predictive_score'][key] = max(0, metadata['predictive_score'][key] - 0.1)
        
        # Example recalculation: increment data leakage risk score by 0.05
        metadata['data_leakage_risk_score'][key] = min(1, metadata['data_leakage_risk_score'][key] + 0.05)