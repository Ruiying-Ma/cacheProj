# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
DEFAULT_RESOURCE_PRIORITY = 1
INITIAL_COMPUTATIONAL_COST = 1
THROUGHPUT_IMPACT_FACTOR = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, computational cost of accessing the data, resource allocation priority, and system throughput impact.
access_frequency = {}
computational_cost = {}
resource_priority = {}
throughput_impact = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score derived from access frequency, computational cost, resource allocation priority, and system throughput impact, favoring items with lower scores.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = math.inf
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (access_frequency[key] * computational_cost[key] * resource_priority[key] * throughput_impact[key])
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, adjusts the computational cost based on recent access patterns, updates the resource allocation priority, and recalculates the system throughput impact for the accessed item.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] += 1
    computational_cost[key] = INITIAL_COMPUTATIONAL_COST / access_frequency[key]
    resource_priority[key] = DEFAULT_RESOURCE_PRIORITY + access_frequency[key]
    throughput_impact[key] = THROUGHPUT_IMPACT_FACTOR * access_frequency[key]

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the computational cost based on initial access, assigns a default resource allocation priority, and estimates the system throughput impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 1
    computational_cost[key] = INITIAL_COMPUTATIONAL_COST
    resource_priority[key] = DEFAULT_RESOURCE_PRIORITY
    throughput_impact[key] = THROUGHPUT_IMPACT_FACTOR

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting the victim, the policy redistributes resource allocation priorities among remaining items, recalculates system throughput impact, and adjusts computational cost metrics to reflect the new cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del access_frequency[evicted_key]
    del computational_cost[evicted_key]
    del resource_priority[evicted_key]
    del throughput_impact[evicted_key]
    
    for key in cache_snapshot.cache.keys():
        resource_priority[key] = DEFAULT_RESOURCE_PRIORITY + access_frequency[key]
        throughput_impact[key] = THROUGHPUT_IMPACT_FACTOR * access_frequency[key]
        computational_cost[key] = INITIAL_COMPUTATIONAL_COST / access_frequency[key]