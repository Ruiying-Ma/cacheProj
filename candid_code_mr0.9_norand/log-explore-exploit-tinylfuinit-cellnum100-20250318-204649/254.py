# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 0.25
WEIGHT_LAST_ACCESS_TIME = 0.25
WEIGHT_SYSTEM_LATENCY = 0.25
WEIGHT_USER_ACTIVITY = 0.25

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, system latency at the time of access, and user activity patterns.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'system_latency': {},
    'user_activity': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score that considers low access frequency, older last access time, higher system latency during last access, and lower user activity relevance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'].get(key, 0)
        last_access_time = metadata['last_access_time'].get(key, 0)
        system_latency = metadata['system_latency'].get(key, 0)
        user_activity = metadata['user_activity'].get(key, 0)
        
        score = (WEIGHT_ACCESS_FREQUENCY * (1 / (access_frequency + 1)) +
                 WEIGHT_LAST_ACCESS_TIME * (cache_snapshot.access_count - last_access_time) +
                 WEIGHT_SYSTEM_LATENCY * system_latency +
                 WEIGHT_USER_ACTIVITY * (1 / (user_activity + 1)))
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access time to the current time, records the current system latency, and updates the user activity pattern to reflect the recent access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['system_latency'][key] = get_current_system_latency()
    metadata['user_activity'][key] = get_current_user_activity()

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, records the current system latency, and initializes the user activity pattern based on the current user context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['system_latency'][key] = get_current_system_latency()
    metadata['user_activity'][key] = get_current_user_activity()

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all metadata associated with the evicted object and recalculates the weighted scores for the remaining objects to ensure accurate future eviction decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_time']:
        del metadata['last_access_time'][evicted_key]
    if evicted_key in metadata['system_latency']:
        del metadata['system_latency'][evicted_key]
    if evicted_key in metadata['user_activity']:
        del metadata['user_activity'][evicted_key]

def get_current_system_latency():
    # Placeholder function to get current system latency
    return 1

def get_current_user_activity():
    # Placeholder function to get current user activity
    return 1