# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
DEFAULT_PRIORITY_SCORE = 1
INITIAL_TEMPORAL_DECAY = 1.0
WRITE_BACK_PRIORITY = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, write-back status, priority score, temporal decay factor, cache hit rate, storage capacity utilization, and a combined 'heat' score for each cache entry.
metadata = {
    'access_frequency': {},
    'recency_timestamp': {},
    'write_back_status': {},
    'priority_score': {},
    'temporal_decay_factor': {},
    'heat_score': {}
}

def calculate_heat_score(key):
    freq = metadata['access_frequency'][key]
    recency = metadata['recency_timestamp'][key]
    priority = metadata['priority_score'][key]
    decay = metadata['temporal_decay_factor'][key]
    write_back = metadata['write_back_status'][key]
    heat_score = (freq * priority / decay) + (time.time() - recency) + (write_back * WRITE_BACK_PRIORITY)
    return heat_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on the lowest combined 'heat' score, which incorporates access frequency, recency, priority score, and temporal decay factor. Write-back entries are given slight priority to ensure data integrity.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_heat_score = float('inf')
    
    for key in cache_snapshot.cache:
        heat_score = calculate_heat_score(key)
        if heat_score < lowest_heat_score:
            lowest_heat_score = heat_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the recency timestamp, recalculates the priority score, adjusts the temporal decay factor, updates the cache hit rate, and recalculates the 'heat' score to reflect the updated metadata.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency_timestamp'][key] = cache_snapshot.access_count
    metadata['priority_score'][key] = DEFAULT_PRIORITY_SCORE
    metadata['temporal_decay_factor'][key] *= 0.9  # Example decay adjustment
    metadata['heat_score'][key] = calculate_heat_score(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the recency timestamp to the current time, assigns a default priority score, sets the temporal decay factor to its initial value, updates the storage capacity utilization, recalculates the cache hit rate, and calculates the initial 'heat' score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency_timestamp'][key] = cache_snapshot.access_count
    metadata['priority_score'][key] = DEFAULT_PRIORITY_SCORE
    metadata['temporal_decay_factor'][key] = INITIAL_TEMPORAL_DECAY
    metadata['write_back_status'][key] = 0  # Assuming write-back status is initially 0
    metadata['heat_score'][key] = calculate_heat_score(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes all metadata associated with the evicted entry, adjusts the storage capacity utilization, recalculates the cache hit rate, and recalculates the 'heat' scores for remaining entries to ensure accurate prioritization for future evictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['recency_timestamp'][evicted_key]
    del metadata['priority_score'][evicted_key]
    del metadata['temporal_decay_factor'][evicted_key]
    del metadata['write_back_status'][evicted_key]
    del metadata['heat_score'][evicted_key]
    
    # Recalculate heat scores for remaining entries
    for key in cache_snapshot.cache:
        metadata['heat_score'][key] = calculate_heat_score(key)