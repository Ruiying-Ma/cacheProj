# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
DEFAULT_MEMORY_PAGING_STATUS = 1
DEFAULT_DATA_LOCALITY_SCORE = 1
WEIGHT_ACCESS_FREQUENCY = 1
WEIGHT_LAST_ACCESS_TIMESTAMP = 1
WEIGHT_MEMORY_PAGING_STATUS = 1
WEIGHT_DATA_LOCALITY_SCORE = 1
WEIGHT_RECENCY = 1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access timestamp, memory paging status, data locality score, and recency for each cached object.
metadata = collections.defaultdict(lambda: {
    'access_frequency': 0,
    'last_access_timestamp': 0,
    'memory_paging_status': DEFAULT_MEMORY_PAGING_STATUS,
    'data_locality_score': DEFAULT_DATA_LOCALITY_SCORE,
    'recency': 0
})

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, old last access timestamp, high memory paging status, low data locality score, and low recency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        score = (WEIGHT_ACCESS_FREQUENCY * meta['access_frequency'] +
                 WEIGHT_LAST_ACCESS_TIMESTAMP * (cache_snapshot.access_count - meta['last_access_timestamp']) +
                 WEIGHT_MEMORY_PAGING_STATUS * meta['memory_paging_status'] +
                 WEIGHT_DATA_LOCALITY_SCORE * meta['data_locality_score'] +
                 WEIGHT_RECENCY * (cache_snapshot.access_count - meta['recency']))
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Immediately after a hit, increment the access frequency by 1, refresh the last access timestamp to the current time, recalculate the data locality score based on recent access patterns, and update the recency to the current timestamp.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta['access_frequency'] += 1
    meta['last_access_timestamp'] = cache_snapshot.access_count
    meta['data_locality_score'] = calculate_data_locality_score(obj)
    meta['recency'] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    Immediately after insertion, initialize the access frequency to 1, set the last access timestamp to the current time, assign a default memory paging status, calculate an initial data locality score based on the object's memory location, and set the recency to the current timestamp.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta['access_frequency'] = 1
    meta['last_access_timestamp'] = cache_snapshot.access_count
    meta['memory_paging_status'] = DEFAULT_MEMORY_PAGING_STATUS
    meta['data_locality_score'] = calculate_data_locality_score(obj)
    meta['recency'] = cache_snapshot.access_count

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Immediately after eviction, remove all associated metadata for the evicted object and adjust the memory paging status, data locality scores, and recency of remaining objects to reflect the change in cache composition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata[evicted_obj.key]
    for key in cache_snapshot.cache:
        meta = metadata[key]
        meta['memory_paging_status'] = adjust_memory_paging_status(key)
        meta['data_locality_score'] = calculate_data_locality_score(cache_snapshot.cache[key])
        meta['recency'] = cache_snapshot.access_count

def calculate_data_locality_score(obj):
    # Placeholder function to calculate data locality score based on object's memory location
    return DEFAULT_DATA_LOCALITY_SCORE

def adjust_memory_paging_status(key):
    # Placeholder function to adjust memory paging status
    return DEFAULT_MEMORY_PAGING_STATUS