# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
LATENCY_IMPACT_INITIAL = 10
MEMORY_HIERARCHY_LEVEL_INITIAL = 1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, latency impact score, memory hierarchy level, block size, LRU queue position, and a circular pointer.
metadata = {
    'access_frequency': collections.defaultdict(int),
    'recency_timestamp': collections.defaultdict(int),
    'latency_impact_score': collections.defaultdict(int),
    'memory_hierarchy_level': collections.defaultdict(int),
    'block_size': collections.defaultdict(int),
    'lru_queue': collections.deque(),
    'circular_pointer': 0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy uses the circular pointer to traverse the cache and sets the frequency of each encountered object to 0 until it finds an object with zero frequency. It then calculates a combined score based on access frequency, recency, latency impact, memory hierarchy level, and LRU queue position for the zero-frequency objects and evicts the one with the lowest score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    zero_freq_objects = []

    # Traverse the cache using the circular pointer
    keys = list(cache_snapshot.cache.keys())
    for i in range(len(keys)):
        pointer = (metadata['circular_pointer'] + i) % len(keys)
        key = keys[pointer]
        metadata['access_frequency'][key] = 0
        if metadata['access_frequency'][key] == 0:
            zero_freq_objects.append(key)

    # Calculate combined score for zero-frequency objects
    for key in zero_freq_objects:
        score = (metadata['access_frequency'][key] +
                 cache_snapshot.access_count - metadata['recency_timestamp'][key] +
                 metadata['latency_impact_score'][key] +
                 metadata['memory_hierarchy_level'][key] +
                 metadata['lru_queue'].index(key))
        if score < min_score:
            min_score = score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the recency timestamp, recalculates the latency impact score, adjusts the memory hierarchy level if necessary, moves the block to the most-recently-used end of the LRU queue, and sets the frequency to 1.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency_timestamp'][key] = cache_snapshot.access_count
    metadata['latency_impact_score'][key] = LATENCY_IMPACT_INITIAL  # Recalculate if necessary
    metadata['memory_hierarchy_level'][key] = MEMORY_HIERARCHY_LEVEL_INITIAL  # Adjust if necessary
    if key in metadata['lru_queue']:
        metadata['lru_queue'].remove(key)
    metadata['lru_queue'].append(key)
    metadata['access_frequency'][key] = 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the recency timestamp to the current time, assigns an initial latency impact score, records the memory hierarchy level and block size, puts the block at the most-recently-used end of the LRU queue, and places it at the current pointer location.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency_timestamp'][key] = cache_snapshot.access_count
    metadata['latency_impact_score'][key] = LATENCY_IMPACT_INITIAL
    metadata['memory_hierarchy_level'][key] = MEMORY_HIERARCHY_LEVEL_INITIAL
    metadata['block_size'][key] = obj.size
    metadata['lru_queue'].append(key)
    metadata['circular_pointer'] = metadata['lru_queue'].index(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata associated with the evicted block, recalculates the latency impact scores for remaining blocks, removes the block from the LRU queue, and keeps the pointer at its current position.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    del metadata['access_frequency'][key]
    del metadata['recency_timestamp'][key]
    del metadata['latency_impact_score'][key]
    del metadata['memory_hierarchy_level'][key]
    del metadata['block_size'][key]
    metadata['lru_queue'].remove(key)
    # Recalculate latency impact scores for remaining blocks if necessary