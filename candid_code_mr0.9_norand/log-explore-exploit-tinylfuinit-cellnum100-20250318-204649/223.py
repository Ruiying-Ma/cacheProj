# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
RESOURCE_ALLOCATION_WEIGHT = 0.5
DATA_FRAGMENTATION_WEIGHT = 0.3
MEMORY_BANDWIDTH_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for cache hit rate, memory bandwidth usage, data fragmentation levels, and a resource allocation score for each cache line.
resource_allocation_scores = {}
data_fragmentation_levels = {}
memory_bandwidth_usage = {}
cache_hit_rate = 0

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score that considers low resource allocation score, high data fragmentation, and low memory bandwidth usage. The cache line with the lowest combined score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (RESOURCE_ALLOCATION_WEIGHT * resource_allocation_scores.get(key, 0) +
                 DATA_FRAGMENTATION_WEIGHT * data_fragmentation_levels.get(key, 0) +
                 MEMORY_BANDWIDTH_WEIGHT * memory_bandwidth_usage.get(key, 0))
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increases the resource allocation score for the accessed cache line, updates the cache hit rate, and recalculates the memory bandwidth usage and data fragmentation levels.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Increase resource allocation score
    resource_allocation_scores[obj.key] = resource_allocation_scores.get(obj.key, 0) + 1
    
    # Update cache hit rate
    cache_hit_rate = cache_snapshot.hit_count / cache_snapshot.access_count
    
    # Recalculate memory bandwidth usage
    memory_bandwidth_usage[obj.key] = obj.size / cache_snapshot.size
    
    # Recalculate data fragmentation levels
    data_fragmentation_levels[obj.key] = 1 - (obj.size / cache_snapshot.capacity)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the resource allocation score, updates the cache hit rate, recalculates memory bandwidth usage, and assesses the data fragmentation level.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Initialize resource allocation score
    resource_allocation_scores[obj.key] = 1
    
    # Update cache hit rate
    cache_hit_rate = cache_snapshot.hit_count / cache_snapshot.access_count
    
    # Recalculate memory bandwidth usage
    memory_bandwidth_usage[obj.key] = obj.size / cache_snapshot.size
    
    # Assess data fragmentation level
    data_fragmentation_levels[obj.key] = 1 - (obj.size / cache_snapshot.capacity)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy adjusts the overall cache hit rate, recalculates memory bandwidth usage, and updates data fragmentation levels to reflect the removal of the cache line.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Adjust cache hit rate
    cache_hit_rate = cache_snapshot.hit_count / cache_snapshot.access_count
    
    # Recalculate memory bandwidth usage
    if evicted_obj.key in memory_bandwidth_usage:
        del memory_bandwidth_usage[evicted_obj.key]
    
    # Update data fragmentation levels
    if evicted_obj.key in data_fragmentation_levels:
        del data_fragmentation_levels[evicted_obj.key]
    
    # Remove resource allocation score
    if evicted_obj.key in resource_allocation_scores:
        del resource_allocation_scores[evicted_obj.key]