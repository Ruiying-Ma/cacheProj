# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
LFU_WEIGHT = 0.5
LRU_WEIGHT = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, and a concurrency control flag for each cache entry. Additionally, it tracks the memory hierarchy level of each entry to optimize data structure placement.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted combination of least frequently used (LFU) and least recently used (LRU) metrics, while ensuring cache coherency and considering the memory hierarchy level to minimize performance impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_freq = metadata[key]['access_frequency']
        recency = metadata[key]['recency']
        score = LFU_WEIGHT * access_freq + LRU_WEIGHT * (cache_snapshot.access_count - recency)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency counter, updates the recency timestamp, and sets the concurrency control flag to indicate active usage. It also re-evaluates the memory hierarchy level to ensure optimal placement.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['access_frequency'] += 1
    metadata[key]['recency'] = cache_snapshot.access_count
    metadata[key]['concurrency_control'] = True
    # Re-evaluate memory hierarchy level if needed (not specified how, so we assume it's a placeholder)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency counter, sets the recency timestamp to the current time, and sets the concurrency control flag to indicate readiness for access. It assigns an initial memory hierarchy level based on the object's characteristics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'access_frequency': 1,
        'recency': cache_snapshot.access_count,
        'concurrency_control': False,
        'memory_hierarchy_level': 1  # Initial level, can be adjusted based on obj characteristics
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following eviction, the policy resets the metadata for the evicted entry, including clearing the access frequency counter, recency timestamp, and concurrency control flag. It also updates the memory hierarchy level to reflect the removal and rebalances the remaining entries.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    # Rebalance remaining entries if needed (not specified how, so we assume it's a placeholder)