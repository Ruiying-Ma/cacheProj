# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections
import time

# Put tunable constant parameters below
L1_CAPACITY = 100
L2_CAPACITY = 200
SQ_CAPACITY = 50
MQ_CAPACITY = 100
GQ_CAPACITY = 50

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency timestamp, memory paging status, data locality score, and a set of LRU queues (L1, L2,..., Lk) with predetermined capacities, along with FIFO queues SQ, MQ, and GQ.
access_frequency = collections.defaultdict(int)
recency_timestamp = collections.defaultdict(int)
memory_paging_status = collections.defaultdict(int)
data_locality_score = collections.defaultdict(int)
LRU_queues = [collections.deque(maxlen=L1_CAPACITY), collections.deque(maxlen=L2_CAPACITY)]
SQ = collections.deque(maxlen=SQ_CAPACITY)
MQ = collections.deque(maxlen=MQ_CAPACITY)
GQ = collections.deque(maxlen=GQ_CAPACITY)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, old recency timestamp, high memory paging status, low data locality score, and low recency. If SQ is full, move objects from SQ to MQ until an object with frequency < 2 is found or MQ is full. If MQ is full, cyclicly reduce frequencies in MQ until an object with frequency 0 is found and evict it.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    if len(SQ) >= SQ_CAPACITY:
        while len(SQ) > 0:
            sq_obj = SQ.popleft()
            if access_frequency[sq_obj.key] < 2 or len(MQ) >= MQ_CAPACITY:
                MQ.append(sq_obj)
                break
            MQ.append(sq_obj)
    
    if len(MQ) >= MQ_CAPACITY:
        while len(MQ) > 0:
            mq_obj = MQ.popleft()
            access_frequency[mq_obj.key] -= 1
            if access_frequency[mq_obj.key] == 0:
                candid_obj_key = mq_obj.key
                break
    
    if candid_obj_key is None:
        # Calculate weighted score for eviction
        min_score = float('inf')
        for key, cached_obj in cache_snapshot.cache.items():
            score = (access_frequency[key] * 0.2 +
                     (cache_snapshot.access_count - recency_timestamp[key]) * 0.3 +
                     memory_paging_status[key] * 0.2 +
                     data_locality_score[key] * 0.2 +
                     (cache_snapshot.access_count - recency_timestamp[key]) * 0.1)
            if score < min_score:
                min_score = score
                candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Increment the access frequency by 1 if it is less than 3, refresh the recency timestamp to the current time, recalculate the data locality score based on recent access patterns, update the recency to the current timestamp, and move the object to the most-recently-used end of the next higher LRU queue if it is in an LRU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    if access_frequency[obj.key] < 3:
        access_frequency[obj.key] += 1
    recency_timestamp[obj.key] = cache_snapshot.access_count
    data_locality_score[obj.key] = calculate_data_locality_score(obj)
    
    for i in range(len(LRU_queues) - 1):
        if obj in LRU_queues[i]:
            LRU_queues[i].remove(obj)
            LRU_queues[i + 1].append(obj)
            break

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    Initialize the access frequency to 1, set the recency timestamp to the current time, assign a default memory paging status, calculate an initial data locality score based on the object's memory location, set the recency to the current timestamp, and place the object at the rear of SQ and the most-recently-used end of L1.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    access_frequency[obj.key] = 1
    recency_timestamp[obj.key] = cache_snapshot.access_count
    memory_paging_status[obj.key] = 0  # Default memory paging status
    data_locality_score[obj.key] = calculate_data_locality_score(obj)
    SQ.append(obj)
    LRU_queues[0].append(obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Remove all associated metadata for the evicted object, adjust the memory paging status, data locality scores, and recency of remaining objects to reflect the change in cache composition, and place the evicted object at the rear of GQ. Remove the front of GQ if GQ is full.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    del access_frequency[evicted_obj.key]
    del recency_timestamp[evicted_obj.key]
    del memory_paging_status[evicted_obj.key]
    del data_locality_score[evicted_obj.key]
    
    GQ.append(evicted_obj)
    if len(GQ) > GQ_CAPACITY:
        GQ.popleft()

def calculate_data_locality_score(obj):
    '''
    This function calculates the data locality score based on the object's memory location.
    - Args:
        - `obj`: The object for which the data locality score is calculated.
    - Return:
        - `score`: The calculated data locality score.
    '''
    # Placeholder function for calculating data locality score
    return 0