# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
ACCESS_FREQ_WEIGHT = 0.3
RECENCY_WEIGHT = 0.2
TRANSACTION_LATENCY_WEIGHT = 0.2
USER_ACTIVITY_HEATMAP_WEIGHT = 0.2
PREDICTIVE_ANALYTICS_WEIGHT = 0.1
WRITE_BACK_PRIORITY = 0.05

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, write-back status, transaction latency, user activity heatmap, and predictive analytics scores for each cache entry. It also calculates a combined 'heat' score that integrates these factors.
metadata = {}

def calculate_heat_score(obj_key):
    data = metadata[obj_key]
    heat_score = (
        ACCESS_FREQ_WEIGHT * data['access_frequency'] +
        RECENCY_WEIGHT * (time.time() - data['recency_timestamp']) +
        TRANSACTION_LATENCY_WEIGHT * data['transaction_latency'] +
        USER_ACTIVITY_HEATMAP_WEIGHT * data['user_activity_heatmap'] +
        PREDICTIVE_ANALYTICS_WEIGHT * data['predictive_analytics_score'] -
        WRITE_BACK_PRIORITY * data['write_back_status']
    )
    return heat_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on the lowest combined 'heat' score, which is a weighted combination of access frequency, recency, transaction latency, user activity heatmap, and predictive analytics scores. Write-back status is given slight priority to ensure data integrity.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_heat_score = float('inf')
    
    for key in cache_snapshot.cache:
        heat_score = calculate_heat_score(key)
        if heat_score < lowest_heat_score:
            lowest_heat_score = heat_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the recency timestamp, updates the transaction latency, increases the user activity heatmap score, and recalculates the predictive analytics score. The combined 'heat' score is then recalculated to reflect these updates.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    data = metadata[key]
    data['access_frequency'] += 1
    data['recency_timestamp'] = time.time()
    data['transaction_latency'] = 0  # Update based on actual transaction latency
    data['user_activity_heatmap'] += 1  # Update based on actual user activity
    data['predictive_analytics_score'] = 0  # Update based on actual predictive analytics
    data['heat_score'] = calculate_heat_score(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the recency timestamp to the current time, initializes the transaction latency, sets the user activity heatmap score to a baseline value, and generates an initial predictive analytics score. The combined 'heat' score is calculated based on these initial values. Write-back status is set based on the nature of the data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'access_frequency': 1,
        'recency_timestamp': time.time(),
        'transaction_latency': 0,  # Initialize based on actual transaction latency
        'user_activity_heatmap': 1,  # Initialize based on actual user activity
        'predictive_analytics_score': 0,  # Initialize based on actual predictive analytics
        'write_back_status': 0,  # Set based on the nature of the data
        'heat_score': 0  # Initialize heat score
    }
    metadata[key]['heat_score'] = calculate_heat_score(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata for the evicted entry and recalibrates the predictive analytics model to account for the change in cache composition. It then recalculates the combined 'heat' scores for the remaining entries to ensure accurate prioritization for future evictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    for key in cache_snapshot.cache:
        metadata[key]['heat_score'] = calculate_heat_score(key)