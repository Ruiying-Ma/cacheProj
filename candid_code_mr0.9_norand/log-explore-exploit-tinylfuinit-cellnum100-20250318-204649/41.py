# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
DEFAULT_MEMORY_PAGING_STATUS = 1
INITIAL_DATA_LOCALITY_SCORE = 0.5
WEIGHT_ACCESS_FREQUENCY = 0.25
WEIGHT_LAST_ACCESS_TIMESTAMP = 0.25
WEIGHT_MEMORY_PAGING_STATUS = 0.25
WEIGHT_DATA_LOCALITY_SCORE = 0.25

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, memory paging status, and data locality score for each cached object.
metadata = collections.defaultdict(lambda: {
    'access_frequency': 0,
    'last_access_timestamp': 0,
    'memory_paging_status': DEFAULT_MEMORY_PAGING_STATUS,
    'data_locality_score': INITIAL_DATA_LOCALITY_SCORE
})

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, old last access timestamp, high memory paging status, and low data locality score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        score = (WEIGHT_ACCESS_FREQUENCY * meta['access_frequency'] +
                 WEIGHT_LAST_ACCESS_TIMESTAMP * (cache_snapshot.access_count - meta['last_access_timestamp']) +
                 WEIGHT_MEMORY_PAGING_STATUS * meta['memory_paging_status'] +
                 WEIGHT_DATA_LOCALITY_SCORE * meta['data_locality_score'])
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access timestamp to the current time, and recalculates the data locality score based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta['access_frequency'] += 1
    meta['last_access_timestamp'] = cache_snapshot.access_count
    # Recalculate data locality score based on recent access patterns (simplified here)
    meta['data_locality_score'] = 1 / (meta['access_frequency'] + 1)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, assigns a default memory paging status, and calculates an initial data locality score based on the object's memory location.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'access_frequency': 1,
        'last_access_timestamp': cache_snapshot.access_count,
        'memory_paging_status': DEFAULT_MEMORY_PAGING_STATUS,
        'data_locality_score': INITIAL_DATA_LOCALITY_SCORE
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata for the evicted object and adjusts the memory paging status and data locality scores of remaining objects to reflect the change in cache composition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata[evicted_obj.key]
    # Adjust memory paging status and data locality scores of remaining objects (simplified here)
    for key in cache_snapshot.cache:
        meta = metadata[key]
        meta['memory_paging_status'] = max(DEFAULT_MEMORY_PAGING_STATUS, meta['memory_paging_status'] - 1)
        meta['data_locality_score'] = 1 / (meta['access_frequency'] + 1)