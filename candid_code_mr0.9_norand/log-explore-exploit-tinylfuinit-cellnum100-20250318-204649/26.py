# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
SQ_CAPACITY = 100  # Example capacity for SQ
MQ_CAPACITY = 100  # Example capacity for MQ

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, stack allocation size, bytecode execution time, and queue position (SQ or MQ) for each cached object. It also tracks a ghost queue (GQ) for recently evicted objects.
metadata = {
    'access_frequency': {},
    'recency_timestamp': {},
    'stack_allocation_size': {},
    'bytecode_execution_time': {},
    'queue_position': {},
    'ghost_queue': set()
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    During eviction, if SQ exceeds its capacity, objects are moved to MQ until an object with frequency less than 2 is found or MQ is full. If MQ is full, objects in MQ have their frequency reduced cyclically until an object with zero frequency is found and evicted. If SQ is not full, the policy uses a weighted score based on access frequency, recency, stack allocation size, and bytecode execution time to choose the eviction victim.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    sq_keys = [key for key in metadata['queue_position'] if metadata['queue_position'][key] == 'SQ']
    mq_keys = [key for key in metadata['queue_position'] if metadata['queue_position'][key] == 'MQ']
    
    if len(sq_keys) > SQ_CAPACITY:
        for key in sq_keys:
            if metadata['access_frequency'][key] < 2:
                candid_obj_key = key
                break
            else:
                metadata['queue_position'][key] = 'MQ'
                mq_keys.append(key)
                sq_keys.remove(key)
                if len(mq_keys) >= MQ_CAPACITY:
                    break
    
    if len(mq_keys) >= MQ_CAPACITY:
        while True:
            for key in mq_keys:
                metadata['access_frequency'][key] -= 1
                if metadata['access_frequency'][key] == 0:
                    candid_obj_key = key
                    break
            if candid_obj_key:
                break
    
    if not candid_obj_key:
        weighted_scores = {}
        for key in cache_snapshot.cache:
            weighted_scores[key] = (
                metadata['access_frequency'][key] * 0.4 +
                (cache_snapshot.access_count - metadata['recency_timestamp'][key]) * 0.3 +
                metadata['stack_allocation_size'][key] * 0.2 +
                metadata['bytecode_execution_time'][key] * 0.1
            )
        candid_obj_key = min(weighted_scores, key=weighted_scores.get)
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Immediately after a hit, the policy increments the access frequency, updates the recency timestamp, adjusts the stack allocation size and bytecode execution time based on the latest execution metrics, and moves the object to the rear of MQ if its frequency is less than 3.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    metadata['access_frequency'][obj.key] += 1
    metadata['recency_timestamp'][obj.key] = cache_snapshot.access_count
    # Assuming stack allocation size and bytecode execution time are updated externally
    if metadata['access_frequency'][obj.key] < 3:
        metadata['queue_position'][obj.key] = 'MQ'

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    Immediately after inserting a new object, the policy initializes the access frequency to 1, sets the recency timestamp to the current time, records the initial stack allocation size and bytecode execution time, and places the object in SQ or MQ based on its presence in GQ.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    metadata['access_frequency'][obj.key] = 1
    metadata['recency_timestamp'][obj.key] = cache_snapshot.access_count
    metadata['stack_allocation_size'][obj.key] = obj.size  # Assuming initial stack allocation size is the object size
    metadata['bytecode_execution_time'][obj.key] = 0  # Assuming initial bytecode execution time is 0
    if obj.key in metadata['ghost_queue']:
        metadata['queue_position'][obj.key] = 'MQ'
        metadata['ghost_queue'].remove(obj.key)
    else:
        metadata['queue_position'][obj.key] = 'SQ'

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Immediately after eviction, the policy removes all associated metadata for the evicted object, places the evicted object in GQ, and recalculates the weighted scores for the remaining objects to ensure accurate future evictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    del metadata['access_frequency'][evicted_obj.key]
    del metadata['recency_timestamp'][evicted_obj.key]
    del metadata['stack_allocation_size'][evicted_obj.key]
    del metadata['bytecode_execution_time'][evicted_obj.key]
    del metadata['queue_position'][evicted_obj.key]
    metadata['ghost_queue'].add(evicted_obj.key)
    
    # Recalculate weighted scores for remaining objects
    for key in cache_snapshot.cache:
        weighted_scores[key] = (
            metadata['access_frequency'][key] * 0.4 +
            (cache_snapshot.access_count - metadata['recency_timestamp'][key]) * 0.3 +
            metadata['stack_allocation_size'][key] * 0.2 +
            metadata['bytecode_execution_time'][key] * 0.1
        )