# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
INITIAL_CONFIDENCE = 0.5
INITIAL_PREDICTIVE_SCORE = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, and a predictive score generated by a probabilistic forecasting model. It also tracks the confidence level of the predictions and adapts based on real-time data streams.
metadata = {
    'access_frequency': {},  # key -> frequency
    'recency': {},           # key -> last access time
    'predictive_score': {},  # key -> predictive score
    'confidence_level': {}   # key -> confidence level
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by combining the predictive score with the access frequency and recency. Items with lower predictive scores and lower access frequencies are prioritized for eviction. The confidence level of the predictions is also considered to ensure reliability.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = math.inf

    for key, cached_obj in cache_snapshot.cache.items():
        score = (metadata['predictive_score'][key] * metadata['confidence_level'][key] +
                 metadata['access_frequency'][key] +
                 (cache_snapshot.access_count - metadata['recency'][key]))

        if score < min_score:
            min_score = score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the accessed item are updated. The predictive score is recalibrated using the adaptive learning algorithm, which adjusts based on the real-time data stream to improve future predictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count

    # Recalibrate predictive score (simple example, can be more complex)
    metadata['predictive_score'][key] = min(1.0, metadata['predictive_score'][key] + 0.1)
    metadata['confidence_level'][key] = min(1.0, metadata['confidence_level'][key] + 0.1)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and recency. The predictive score is generated using the probabilistic forecasting model, and the confidence level is set based on initial data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['predictive_score'][key] = INITIAL_PREDICTIVE_SCORE
    metadata['confidence_level'][key] = INITIAL_CONFIDENCE

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy updates the overall cache metadata to reflect the removal. The adaptive learning algorithm uses this event to refine its predictive model, improving the accuracy of future eviction decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['recency']:
        del metadata['recency'][evicted_key]
    if evicted_key in metadata['predictive_score']:
        del metadata['predictive_score'][evicted_key]
    if evicted_key in metadata['confidence_level']:
        del metadata['confidence_level'][evicted_key]

    # Update predictive model (simple example, can be more complex)
    for key in metadata['predictive_score']:
        metadata['predictive_score'][key] = max(0.0, metadata['predictive_score'][key] - 0.1)
        metadata['confidence_level'][key] = max(0.0, metadata['confidence_level'][key] - 0.1)