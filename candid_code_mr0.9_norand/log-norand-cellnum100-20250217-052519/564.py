# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
PREDICTIVE_SCORE_WEIGHT = 0.5
LAST_ACCESS_WEIGHT = 0.3
SPATIAL_LOCALITY_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, spatial locality information, and a predictive score generated by a machine learning model.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'spatial_locality': {},
    'predictive_score': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combination of the lowest predictive score, least recent access, and spatial locality to ensure that frequently accessed and spatially related data are retained.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (PREDICTIVE_SCORE_WEIGHT * metadata['predictive_score'][key] +
                 LAST_ACCESS_WEIGHT * (cache_snapshot.access_count - metadata['last_access_timestamp'][key]) +
                 SPATIAL_LOCALITY_WEIGHT * metadata['spatial_locality'][key])
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, refreshes the last access timestamp, and recalculates the predictive score using the machine learning model based on the new access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['predictive_score'][key] = calculate_predictive_score(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency, sets the current timestamp as the last access time, updates spatial locality information, and generates an initial predictive score using the machine learning model.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['spatial_locality'][key] = calculate_spatial_locality(key, cache_snapshot)
    metadata['predictive_score'][key] = calculate_predictive_score(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata associated with the evicted object and recalibrates the predictive scores of remaining objects to reflect the updated cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_timestamp'][evicted_key]
    del metadata['spatial_locality'][evicted_key]
    del metadata['predictive_score'][evicted_key]
    
    for key in cache_snapshot.cache:
        metadata['predictive_score'][key] = calculate_predictive_score(key)

def calculate_predictive_score(key):
    '''
    Placeholder function for calculating predictive score using a machine learning model.
    '''
    # This is a placeholder. In a real implementation, this would use a machine learning model.
    return metadata['access_frequency'][key] / (time.time() - metadata['last_access_timestamp'][key])

def calculate_spatial_locality(key, cache_snapshot):
    '''
    Placeholder function for calculating spatial locality.
    '''
    # This is a placeholder. In a real implementation, this would calculate spatial locality based on the cache state.
    return 1