# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
SQ_CAPACITY = 0.5  # Fraction of the cache capacity allocated to SQ
MQ_CAPACITY = 0.3  # Fraction of the cache capacity allocated to MQ
GQ_CAPACITY = 0.2  # Fraction of the cache capacity allocated to GQ

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access timestamp, coherency score, and queue position (SQ, MQ, or GQ).
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'coherency_score': {},
    'queue_position': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    During eviction, if SQ exceeds its capacity, objects are moved to MQ until an object with frequency less than 2 is found or MQ is full. If MQ is full, the object with the lowest combined score of access frequency, last access timestamp, and coherency score is evicted. If SQ is not full, the object with the lowest combined score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    sq_size = int(SQ_CAPACITY * cache_snapshot.capacity)
    mq_size = int(MQ_CAPACITY * cache_snapshot.capacity)
    gq_size = int(GQ_CAPACITY * cache_snapshot.capacity)
    
    sq_objects = [k for k, v in metadata['queue_position'].items() if v == 'SQ']
    mq_objects = [k for k, v in metadata['queue_position'].items() if v == 'MQ']
    gq_objects = [k for k, v in metadata['queue_position'].items() if v == 'GQ']
    
    if len(sq_objects) > sq_size:
        for key in sq_objects:
            if metadata['access_frequency'][key] < 2:
                metadata['queue_position'][key] = 'MQ'
                if len(mq_objects) >= mq_size:
                    break
        mq_objects = [k for k, v in metadata['queue_position'].items() if v == 'MQ']
    
    if len(mq_objects) >= mq_size:
        candid_obj_key = min(mq_objects, key=lambda k: (metadata['access_frequency'][k], metadata['last_access_timestamp'][k], metadata['coherency_score'][k]))
    else:
        candid_obj_key = min(sq_objects, key=lambda k: (metadata['access_frequency'][k], metadata['last_access_timestamp'][k], metadata['coherency_score'][k]))
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a hit, increment the access frequency, update the last access timestamp to the current time, and adjust the coherency score based on recent bus snooping and memory barrier events. If the object is in SQ and its frequency is less than 3, increase its frequency by 1.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['coherency_score'][key] = calculate_coherency_score(obj)
    
    if metadata['queue_position'][key] == 'SQ' and metadata['access_frequency'][key] < 3:
        metadata['access_frequency'][key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, initialize the access frequency to 1, set the last access timestamp to the current time, and assign an initial coherency score. If the object was in GQ, place it in MQ; otherwise, place it in SQ.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['coherency_score'][key] = calculate_coherency_score(obj)
    
    if key in metadata['queue_position'] and metadata['queue_position'][key] == 'GQ':
        metadata['queue_position'][key] = 'MQ'
    else:
        metadata['queue_position'][key] = 'SQ'

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After eviction, recalculate the coherency scores of remaining objects based on the latest bus snooping and memory barrier events, and adjust the access frequency and last access timestamp metadata to reflect the current cache state. Place the evicted object in GQ and remove the front of GQ if it is full.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    metadata['queue_position'][evicted_key] = 'GQ'
    
    gq_objects = [k for k, v in metadata['queue_position'].items() if v == 'GQ']
    gq_size = int(GQ_CAPACITY * cache_snapshot.capacity)
    
    if len(gq_objects) > gq_size:
        oldest_gq_key = min(gq_objects, key=lambda k: metadata['last_access_timestamp'][k])
        del metadata['access_frequency'][oldest_gq_key]
        del metadata['last_access_timestamp'][oldest_gq_key]
        del metadata['coherency_score'][oldest_gq_key]
        del metadata['queue_position'][oldest_gq_key]
    
    for key in cache_snapshot.cache.keys():
        metadata['coherency_score'][key] = calculate_coherency_score(cache_snapshot.cache[key])
        metadata['last_access_timestamp'][key] = cache_snapshot.access_count

def calculate_coherency_score(obj):
    '''
    This function calculates the coherency score based on recent bus snooping and memory barrier events.
    - Args:
        - `obj`: The object for which the coherency score is being calculated.
    - Return:
        - `coherency_score`: The calculated coherency score.
    '''
    # Placeholder for actual coherency score calculation logic
    return 1