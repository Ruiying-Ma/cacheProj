# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_DYNAMIC_PRIORITY_SCORE = 1
INITIAL_COHERENCY_SCORE = 1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access timestamp, dynamic priority score, coherency score, and load distribution across cache segments. It also tracks bus snooping and memory barrier events.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'dynamic_priority_score': {},
    'coherency_score': {},
    'load_distribution': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combined score of the lowest dynamic priority score, oldest last access timestamp, and lowest coherency score, ensuring eviction of less frequently accessed, older, and less coherent data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        combined_score = (
            metadata['dynamic_priority_score'][key] +
            cache_snapshot.access_count - metadata['last_access_timestamp'][key] +
            metadata['coherency_score'][key]
        )
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency, last access timestamp, and recalculates the dynamic priority score based on the new access frequency and temporal coherence. It also adjusts the coherency score based on recent bus snooping and memory barrier events.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['dynamic_priority_score'][key] = metadata['access_frequency'][key] / (cache_snapshot.access_count - metadata['last_access_timestamp'][key] + 1)
    metadata['coherency_score'][key] = 1  # Adjust based on bus snooping and memory barrier events

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency, sets the last access timestamp, assigns an initial dynamic priority score based on temporal coherence, and sets an initial coherency score based on bus snooping and memory barrier events. It updates the load distribution metadata to reflect the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['dynamic_priority_score'][key] = INITIAL_DYNAMIC_PRIORITY_SCORE
    metadata['coherency_score'][key] = INITIAL_COHERENCY_SCORE
    metadata['load_distribution'][key] = obj.size

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy updates the load distribution metadata, recalibrates the dynamic priority scores of remaining objects if necessary, and recalculates the coherency scores based on the latest bus snooping and memory barrier events.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_timestamp'][evicted_key]
    del metadata['dynamic_priority_score'][evicted_key]
    del metadata['coherency_score'][evicted_key]
    del metadata['load_distribution'][evicted_key]
    
    # Recalibrate dynamic priority scores and coherency scores if necessary
    for key in cache_snapshot.cache:
        metadata['dynamic_priority_score'][key] = metadata['access_frequency'][key] / (cache_snapshot.access_count - metadata['last_access_timestamp'][key] + 1)
        metadata['coherency_score'][key] = 1  # Adjust based on bus snooping and memory barrier events