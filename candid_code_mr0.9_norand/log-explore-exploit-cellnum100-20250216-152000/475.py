# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_PREDICTIVE_SCORE = 0.5
INITIAL_CONTEXTUAL_TAGS = "default"

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, data pipeline stage, predictive heuristics score, and contextual tags for each cache entry.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score derived from the least frequently accessed, oldest timestamp, lowest predictive heuristics score, and least relevant contextual tags, prioritizing entries that are not in critical stages of the data pipeline.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        composite_score = (meta['access_frequency'] * 0.25 +
                           (cache_snapshot.access_count - meta['last_access_timestamp']) * 0.25 +
                           meta['predictive_heuristics_score'] * 0.25 +
                           (1 if meta['contextual_tags'] == "default" else 0) * 0.25)
        
        if composite_score < min_score:
            min_score = composite_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access timestamp to the current time, recalculates the predictive heuristics score based on recent access patterns, and adjusts contextual tags if the context has changed.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    meta = metadata[key]
    meta['access_frequency'] += 1
    meta['last_access_timestamp'] = cache_snapshot.access_count
    meta['predictive_heuristics_score'] = min(1.0, meta['predictive_heuristics_score'] + 0.1)
    meta['contextual_tags'] = "updated_context"

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, assigns an initial predictive heuristics score based on the insertion context, and tags the entry with relevant contextual information.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'access_frequency': 1,
        'last_access_timestamp': cache_snapshot.access_count,
        'predictive_heuristics_score': INITIAL_PREDICTIVE_SCORE,
        'contextual_tags': INITIAL_CONTEXTUAL_TAGS
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata for the evicted entry and recalibrates the predictive heuristics model to account for the change in the cache's state, ensuring future predictions remain accurate.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    # Recalibrate predictive heuristics model if needed
    # (This is a placeholder, as the recalibration logic is not specified in detail)