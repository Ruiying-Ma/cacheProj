# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
DEFAULT_PREDICTED_NEXT_ACCESS_TIME = 1000
DEFAULT_PREFETCHING_SCORE = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, predicted next access time, and prefetching score for each cached object.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combined score derived from low access frequency, longest time since last access, and lowest predicted next access time, prioritizing objects with the lowest prefetching score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        score = (meta['access_frequency'] * 0.1 + 
                 (cache_snapshot.access_count - meta['last_access_time']) * 0.5 + 
                 meta['predicted_next_access_time'] * 0.3 + 
                 meta['prefetching_score'] * 0.1)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency by incrementing it, records the current time as the last access time, recalculates the predicted next access time using a predictive model, and adjusts the prefetching score based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    meta = metadata[key]
    meta['access_frequency'] += 1
    meta['last_access_time'] = cache_snapshot.access_count
    meta['predicted_next_access_time'] = meta['last_access_time'] + DEFAULT_PREDICTED_NEXT_ACCESS_TIME
    meta['prefetching_score'] = max(1, meta['prefetching_score'] - 1)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the current time as the last access time, predicts the next access time using historical data or a default value, and assigns an initial prefetching score based on the object's type and usage context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'access_frequency': 1,
        'last_access_time': cache_snapshot.access_count,
        'predicted_next_access_time': cache_snapshot.access_count + DEFAULT_PREDICTED_NEXT_ACCESS_TIME,
        'prefetching_score': DEFAULT_PREFETCHING_SCORE
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata associated with the evicted object, recalculates the prefetching scores for remaining objects to ensure optimal prefetching, and adjusts the predictive model parameters to improve future predictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    for key, meta in metadata.items():
        meta['prefetching_score'] = max(1, meta['prefetching_score'] - 1)