# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
INITIAL_ENTROPY = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency, normalized access patterns, and entropy scores for each cache entry. It also keeps a predictive model to forecast future access patterns.
metadata = {
    'access_frequency': {},  # key -> frequency
    'recency': {},           # key -> last access time
    'entropy': {},           # key -> entropy score
    'predictive_model': {}   # key -> predicted access pattern
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by identifying the cache entry with the highest entropy score, indicating the least predictable access pattern. If multiple entries have similar entropy, the one with the lowest normalized access frequency is chosen.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    max_entropy = -1
    min_normalized_freq = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        entropy = metadata['entropy'].get(key, INITIAL_ENTROPY)
        normalized_freq = metadata['access_frequency'].get(key, 0) / cache_snapshot.access_count

        if entropy > max_entropy or (entropy == max_entropy and normalized_freq < min_normalized_freq):
            max_entropy = entropy
            min_normalized_freq = normalized_freq
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the access frequency and recency of the accessed entry are updated. The predictive model is also adjusted based on the new access pattern, and the entropy score is recalculated to reflect the updated predictability.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['recency'][key] = cache_snapshot.access_count

    # Update predictive model and entropy score
    # For simplicity, we assume the predictive model is a simple count of accesses
    metadata['predictive_model'][key] = metadata['access_frequency'][key]
    metadata['entropy'][key] = calculate_entropy(metadata['predictive_model'][key])

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and recency. The predictive model is updated to include the new entry, and an initial entropy score is assigned based on the normalized access patterns of similar entries.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count

    # Initialize predictive model and entropy score
    metadata['predictive_model'][key] = 1
    metadata['entropy'][key] = INITIAL_ENTROPY

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes its metadata, updates the predictive model to exclude the evicted entry, and recalculates the entropy scores for the remaining entries to ensure accurate future predictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['recency']:
        del metadata['recency'][evicted_key]
    if evicted_key in metadata['entropy']:
        del metadata['entropy'][evicted_key]
    if evicted_key in metadata['predictive_model']:
        del metadata['predictive_model'][evicted_key]

    # Recalculate entropy scores for remaining entries
    for key in cache_snapshot.cache.keys():
        metadata['entropy'][key] = calculate_entropy(metadata['predictive_model'][key])

def calculate_entropy(access_pattern):
    '''
    Helper function to calculate entropy based on access pattern.
    - Args:
        - `access_pattern`: The access pattern of the object.
    - Return:
        - `entropy`: The calculated entropy score.
    '''
    if access_pattern == 0:
        return INITIAL_ENTROPY
    return -access_pattern * math.log(access_pattern)