# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 0.4
WEIGHT_RECENCY = 0.4
WEIGHT_PREDICTIVE_SCORE = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, and a predictive score based on historical access patterns. It also keeps a mapping of data cache locations to optimize retrieval times.
metadata = {
    'access_frequency': {},  # key -> access frequency
    'last_access_time': {},  # key -> last access time
    'predictive_score': {},  # key -> predictive score
    'data_cache_mapping': {}  # key -> cache location
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score for each cache entry, which is a weighted sum of its access frequency, recency, and predictive score. The entry with the lowest composite score is selected for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_composite_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'].get(key, 0)
        last_access_time = metadata['last_access_time'].get(key, 0)
        predictive_score = metadata['predictive_score'].get(key, 0)
        
        composite_score = (WEIGHT_ACCESS_FREQUENCY * access_frequency +
                           WEIGHT_RECENCY * (cache_snapshot.access_count - last_access_time) +
                           WEIGHT_PREDICTIVE_SCORE * predictive_score)
        
        if composite_score < min_composite_score:
            min_composite_score = composite_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the last access time to the current time, and adjusts the predictive score based on the latest access pattern. The data cache mapping is also updated to reflect any changes in data location.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Adjust predictive score based on latest access pattern (simplified as incrementing by 1)
    metadata['predictive_score'][key] = metadata['predictive_score'].get(key, 0) + 1
    metadata['data_cache_mapping'][key] = obj

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency to 1, sets the last access time to the current time, and assigns an initial predictive score based on similar objects' historical patterns. The data cache mapping is updated to include the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Initial predictive score based on similar objects' historical patterns (simplified as 1)
    metadata['predictive_score'][key] = 1
    metadata['data_cache_mapping'][key] = obj

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata associated with the evicted object, recalculates the predictive scores for remaining objects if necessary, and updates the data cache mapping to reflect the removal.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_time']:
        del metadata['last_access_time'][evicted_key]
    if evicted_key in metadata['predictive_score']:
        del metadata['predictive_score'][evicted_key]
    if evicted_key in metadata['data_cache_mapping']:
        del metadata['data_cache_mapping'][evicted_key]
    
    # Recalculate predictive scores for remaining objects if necessary (simplified as no recalculation)
    # Update data cache mapping to reflect the removal
    metadata['data_cache_mapping'].pop(evicted_key, None)