# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 1.0
WEIGHT_LAST_ACCESS_TIMESTAMP = 1.0
WEIGHT_PRIORITY_SCORE = 1.0
WEIGHT_COMPUTATIONAL_OVERHEAD = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, priority score derived from predictive analytics, and a computational overhead score for each cache entry.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'priority_score': {},
    'computational_overhead': {}
}

def calculate_composite_score(key):
    access_frequency = metadata['access_frequency'].get(key, 0)
    last_access_timestamp = metadata['last_access_timestamp'].get(key, 0)
    priority_score = metadata['priority_score'].get(key, 0)
    computational_overhead = metadata['computational_overhead'].get(key, 0)
    
    composite_score = (
        WEIGHT_ACCESS_FREQUENCY * (1 / (access_frequency + 1)) +
        WEIGHT_LAST_ACCESS_TIMESTAMP * last_access_timestamp +
        WEIGHT_PRIORITY_SCORE * (1 / (priority_score + 1)) +
        WEIGHT_COMPUTATIONAL_OVERHEAD * computational_overhead
    )
    return composite_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score for each entry, which is a weighted sum of low access frequency, old last access timestamp, low priority score, and high computational overhead. The entry with the highest composite score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    highest_composite_score = -1
    
    for key in cache_snapshot.cache:
        composite_score = calculate_composite_score(key)
        if composite_score > highest_composite_score:
            highest_composite_score = composite_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access timestamp to the current time, and recalculates the priority score using predictive analytics based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    # Recalculate priority score using predictive analytics (stubbed as a constant for now)
    metadata['priority_score'][key] = 1  # This should be replaced with actual predictive analytics logic

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, assigns an initial priority score based on predictive analytics, and calculates the initial computational overhead score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    # Assign initial priority score using predictive analytics (stubbed as a constant for now)
    metadata['priority_score'][key] = 1  # This should be replaced with actual predictive analytics logic
    # Calculate initial computational overhead score (stubbed as a constant for now)
    metadata['computational_overhead'][key] = 1  # This should be replaced with actual computational overhead logic

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalculates the priority scores and computational overhead scores for the remaining entries to ensure they reflect the current cache state and access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    # Remove metadata for the evicted object
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_timestamp']:
        del metadata['last_access_timestamp'][evicted_key]
    if evicted_key in metadata['priority_score']:
        del metadata['priority_score'][evicted_key]
    if evicted_key in metadata['computational_overhead']:
        del metadata['computational_overhead'][evicted_key]
    
    # Recalculate priority scores and computational overhead scores for remaining entries
    for key in cache_snapshot.cache:
        # Recalculate priority score using predictive analytics (stubbed as a constant for now)
        metadata['priority_score'][key] = 1  # This should be replaced with actual predictive analytics logic
        # Recalculate computational overhead score (stubbed as a constant for now)
        metadata['computational_overhead'][key] = 1  # This should be replaced with actual computational overhead logic