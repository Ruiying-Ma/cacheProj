# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for access frequency in predictive score
BETA = 0.3   # Weight for recency in predictive score
GAMMA = 0.2  # Weight for predicted future access likelihood in predictive score

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, and a predictive score based on historical access patterns and machine learning models.
metadata = {
    'access_frequency': {},  # Dictionary to store access frequency of objects
    'last_access_time': {},  # Dictionary to store last access time of objects
    'predictive_score': {}   # Dictionary to store predictive score of objects
}

def calculate_predictive_score(key, current_time):
    '''
    Helper function to calculate the predictive score for a given object key.
    '''
    freq = metadata['access_frequency'].get(key, 0)
    last_time = metadata['last_access_time'].get(key, 0)
    recency = current_time - last_time
    # For simplicity, we assume predicted future access likelihood is inversely proportional to recency
    future_access_likelihood = 1 / (1 + recency)
    score = ALPHA * freq + BETA * recency + GAMMA * future_access_likelihood
    return score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the item with the lowest predictive score, which is calculated using a combination of access frequency, recency, and predicted future access likelihood.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = math.inf
    current_time = cache_snapshot.access_count

    for key in cache_snapshot.cache:
        score = calculate_predictive_score(key, current_time)
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, updates the last access time to the current time, and recalculates the predictive score using the updated access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count

    # Update access frequency
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1

    # Update last access time
    metadata['last_access_time'][key] = current_time

    # Recalculate predictive score
    metadata['predictive_score'][key] = calculate_predictive_score(key, current_time)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, and calculates an initial predictive score based on the insertion context and historical data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count

    # Initialize access frequency
    metadata['access_frequency'][key] = 1

    # Set last access time
    metadata['last_access_time'][key] = current_time

    # Calculate initial predictive score
    metadata['predictive_score'][key] = calculate_predictive_score(key, current_time)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata for the evicted item and recalibrates the predictive scores of remaining items to ensure optimal future eviction decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key

    # Remove metadata for evicted item
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_time']:
        del metadata['last_access_time'][evicted_key]
    if evicted_key in metadata['predictive_score']:
        del metadata['predictive_score'][evicted_key]

    # Recalibrate predictive scores of remaining items
    current_time = cache_snapshot.access_count
    for key in cache_snapshot.cache:
        metadata['predictive_score'][key] = calculate_predictive_score(key, current_time)