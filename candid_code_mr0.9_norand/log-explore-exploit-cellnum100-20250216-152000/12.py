# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
PRIORITY_WEIGHT = 0.7
TIME_WEIGHT = 0.3

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, and a dynamic priority score for each cached object. It also tracks the overall load distribution across different cache segments.
metadata = {
    'access_frequency': {},  # key -> frequency
    'last_access_timestamp': {},  # key -> timestamp
    'dynamic_priority_score': {},  # key -> score
    'load_distribution': {}  # key -> segment
}

def calculate_priority_score(frequency, last_access, current_time):
    return PRIORITY_WEIGHT * frequency + TIME_WEIGHT * (current_time - last_access)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combination of the lowest dynamic priority score and the longest time since last access, ensuring that less frequently accessed and older data are evicted first.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_priority_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        priority_score = metadata['dynamic_priority_score'][key]
        if priority_score < min_priority_score:
            min_priority_score = priority_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and last access timestamp of the object are updated. The dynamic priority score is recalculated based on the new access frequency and temporal coherence, giving higher priority to frequently accessed and recently used data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata['access_frequency'][key] += 1
    metadata['last_access_timestamp'][key] = current_time
    metadata['dynamic_priority_score'][key] = calculate_priority_score(
        metadata['access_frequency'][key],
        metadata['last_access_timestamp'][key],
        current_time
    )

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and last access timestamp. The dynamic priority score is set based on initial estimates of temporal coherence. The load distribution metadata is updated to reflect the new object in the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = current_time
    metadata['dynamic_priority_score'][key] = calculate_priority_score(
        metadata['access_frequency'][key],
        metadata['last_access_timestamp'][key],
        current_time
    )
    # Update load distribution if necessary
    # For simplicity, we assume a single segment
    metadata['load_distribution'][key] = 'default_segment'

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy updates the load distribution metadata to reflect the removal. It also recalibrates the dynamic priority scores of remaining objects if necessary to maintain balanced load distribution and optimal caching performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    # Remove metadata for the evicted object
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_timestamp'][evicted_key]
    del metadata['dynamic_priority_score'][evicted_key]
    del metadata['load_distribution'][evicted_key]
    
    # Recalibrate dynamic priority scores if necessary
    current_time = cache_snapshot.access_count
    for key in cache_snapshot.cache:
        metadata['dynamic_priority_score'][key] = calculate_priority_score(
            metadata['access_frequency'][key],
            metadata['last_access_timestamp'][key],
            current_time
        )