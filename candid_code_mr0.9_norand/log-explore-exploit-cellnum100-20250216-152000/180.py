# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import deque, defaultdict

# Put tunable constant parameters below
SQ_CAPACITY = 100  # Example capacity for SQ
MQ_CAPACITY = 100  # Example capacity for MQ
GQ_CAPACITY = 100  # Example capacity for GQ

# Put the metadata specifically maintained by the policy below. The policy maintains two FIFO queues (SQ and MQ), a ghost FIFO queue (GQ), and an LRU queue. It tracks access frequency, last access time, disk I/O rate, cache miss ratio, memory bandwidth usage, and data swapping frequency for each cached object.
SQ = deque()
MQ = deque()
GQ = deque()
LRU = deque()
access_frequency = defaultdict(int)
last_access_time = defaultdict(int)
disk_io_rate = defaultdict(float)
cache_miss_ratio = defaultdict(float)
memory_bandwidth_usage = defaultdict(float)
data_swapping_frequency = defaultdict(float)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    During eviction, if SQ exceeds its capacity, objects are moved to MQ until an object with frequency less than 2 is found or MQ is full. If MQ is full, the object with the lowest weighted score (considering access frequency, last access time, disk I/O rate, cache miss ratio, memory bandwidth usage, and data swapping frequency) is evicted. If scores are tied, the least-recently-used object is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    while len(SQ) > SQ_CAPACITY:
        item = SQ.popleft()
        if access_frequency[item.key] < 2:
            break
        MQ.append(item)
    
    if len(MQ) > MQ_CAPACITY:
        min_score = float('inf')
        for item in MQ:
            score = (access_frequency[item.key] + last_access_time[item.key] + 
                     disk_io_rate[item.key] + cache_miss_ratio[item.key] + 
                     memory_bandwidth_usage[item.key] + data_swapping_frequency[item.key])
            if score < min_score:
                min_score = score
                candid_obj_key = item.key
            elif score == min_score:
                if last_access_time[item.key] < last_access_time[candid_obj_key]:
                    candid_obj_key = item.key
        MQ.remove(candid_obj_key)
    else:
        candid_obj_key = SQ.popleft().key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Immediately after a hit, the policy increments the access frequency, updates the last access time to the current time, recalculates memory bandwidth usage and data swapping frequency, and moves the hit object to the most-recently-used end of the LRU queue. If the frequency is less than 3, it is increased by 1.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    access_frequency[obj.key] += 1
    if access_frequency[obj.key] < 3:
        access_frequency[obj.key] += 1
    last_access_time[obj.key] = cache_snapshot.access_count
    # Recalculate memory bandwidth usage and data swapping frequency
    memory_bandwidth_usage[obj.key] = calculate_memory_bandwidth_usage(obj)
    data_swapping_frequency[obj.key] = calculate_data_swapping_frequency(obj)
    # Move the hit object to the most-recently-used end of the LRU queue
    if obj in LRU:
        LRU.remove(obj)
    LRU.append(obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    Immediately after insertion, the policy initializes the access frequency to 1, sets the last access time to the current time, updates the disk I/O rate, cache miss ratio, memory bandwidth usage, and data swapping frequency, and places the new object at the most-recently-used end of the LRU queue. If the object was in GQ, it is placed at the rear of MQ; otherwise, it is placed at the rear of SQ.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    access_frequency[obj.key] = 1
    last_access_time[obj.key] = cache_snapshot.access_count
    disk_io_rate[obj.key] = calculate_disk_io_rate(obj)
    cache_miss_ratio[obj.key] = calculate_cache_miss_ratio(obj)
    memory_bandwidth_usage[obj.key] = calculate_memory_bandwidth_usage(obj)
    data_swapping_frequency[obj.key] = calculate_data_swapping_frequency(obj)
    if obj in GQ:
        GQ.remove(obj)
        MQ.append(obj)
    else:
        SQ.append(obj)
    LRU.append(obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Immediately after eviction, the policy recalculates the disk I/O rate, cache miss ratio, memory bandwidth usage, and data swapping frequency, adjusts the remaining metadata accordingly, removes the evicted object from the LRU queue, and places the evicted object at the rear of GQ.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    disk_io_rate[evicted_obj.key] = calculate_disk_io_rate(evicted_obj)
    cache_miss_ratio[evicted_obj.key] = calculate_cache_miss_ratio(evicted_obj)
    memory_bandwidth_usage[evicted_obj.key] = calculate_memory_bandwidth_usage(evicted_obj)
    data_swapping_frequency[evicted_obj.key] = calculate_data_swapping_frequency(evicted_obj)
    if evicted_obj in LRU:
        LRU.remove(evicted_obj)
    GQ.append(evicted_obj)

def calculate_disk_io_rate(obj):
    # Placeholder function to calculate disk I/O rate
    return 0.0

def calculate_cache_miss_ratio(obj):
    # Placeholder function to calculate cache miss ratio
    return 0.0

def calculate_memory_bandwidth_usage(obj):
    # Placeholder function to calculate memory bandwidth usage
    return 0.0

def calculate_data_swapping_frequency(obj):
    # Placeholder function to calculate data swapping frequency
    return 0.0