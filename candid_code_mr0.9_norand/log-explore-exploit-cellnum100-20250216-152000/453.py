# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
LATENCY_WEIGHT = 0.5  # Weight for latency reduction impact in eviction decision

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency, and a Bayesian probability score for each cache entry. It also clusters data based on access patterns and latency requirements.
metadata = {
    'access_frequency': {},  # Dictionary to store access frequency of each object
    'recency': {},  # Dictionary to store recency of each object
    'bayesian_score': {},  # Dictionary to store Bayesian probability score of each object
    'clusters': {}  # Dictionary to store cluster assignment of each object
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the cache entry with the lowest Bayesian probability score within the least frequently accessed cluster, while also considering the latency reduction impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    least_freq_cluster = None

    # Find the least frequently accessed cluster
    cluster_access_freq = {}
    for key in cache_snapshot.cache:
        cluster = metadata['clusters'][key]
        if cluster not in cluster_access_freq:
            cluster_access_freq[cluster] = 0
        cluster_access_freq[cluster] += metadata['access_frequency'][key]

    least_freq_cluster = min(cluster_access_freq, key=cluster_access_freq.get)

    # Find the object with the lowest Bayesian score in the least frequently accessed cluster
    for key in cache_snapshot.cache:
        if metadata['clusters'][key] == least_freq_cluster:
            score = metadata['bayesian_score'][key] - LATENCY_WEIGHT * metadata['recency'][key]
            if score < min_score:
                min_score = score
                candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and recency of the accessed entry, and refines the Bayesian probability score based on the latest access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    # Update Bayesian score based on access pattern (simplified for this example)
    metadata['bayesian_score'][key] = metadata['access_frequency'][key] / (cache_snapshot.access_count - metadata['recency'][key] + 1)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency, and Bayesian probability score, and assigns it to a cluster based on its predicted access pattern and latency requirement.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['bayesian_score'][key] = 1.0  # Initial Bayesian score
    # Assign to a cluster (simplified for this example)
    metadata['clusters'][key] = 'default_cluster'

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy re-evaluates the clustering of remaining entries and updates the Bayesian probability scores of the affected cluster to reflect the change in cache composition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['recency'][evicted_key]
    del metadata['bayesian_score'][evicted_key]
    del metadata['clusters'][evicted_key]

    # Re-evaluate clustering and update Bayesian scores (simplified for this example)
    for key in cache_snapshot.cache:
        cluster = metadata['clusters'][key]
        # Update Bayesian score based on new cluster composition
        metadata['bayesian_score'][key] = metadata['access_frequency'][key] / (cache_snapshot.access_count - metadata['recency'][key] + 1)