# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
LFU_WEIGHT = 0.4
LRU_WEIGHT = 0.4
WRITE_BUFFER_WEIGHT = 0.1
MEMORY_ALIGNMENT_WEIGHT = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache line including access frequency, last access timestamp, write buffer status, and memory alignment status. It also tracks a priority inversion counter to handle cases where low-priority tasks block high-priority ones.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'write_buffer_status': {},
    'memory_alignment_status': {},
    'priority_inversion_counter': 0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining least frequently used (LFU), least recently used (LRU), and write buffer status. Cache lines with misaligned memory addresses are given higher eviction priority. If priority inversion is detected, the policy prioritizes evicting lines associated with low-priority tasks.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        lfu_score = metadata['access_frequency'].get(key, 0)
        lru_score = cache_snapshot.access_count - metadata['last_access_timestamp'].get(key, 0)
        write_buffer_score = metadata['write_buffer_status'].get(key, 0)
        memory_alignment_score = metadata['memory_alignment_status'].get(key, 0)
        
        score = (LFU_WEIGHT * lfu_score +
                 LRU_WEIGHT * lru_score +
                 WRITE_BUFFER_WEIGHT * write_buffer_score +
                 MEMORY_ALIGNMENT_WEIGHT * memory_alignment_score)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the access frequency and last access timestamp of the cache line are updated. The write buffer status is checked and updated if necessary. The priority inversion counter is adjusted if the hit involves a high-priority task.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    # Assuming write buffer status and priority inversion are updated based on some conditions
    # These conditions are not specified in the prompt, so we leave them as placeholders
    # metadata['write_buffer_status'][key] = update_write_buffer_status(obj)
    # if is_high_priority_task(obj):
    #     metadata['priority_inversion_counter'] -= 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency and last access timestamp. It checks and updates the write buffer status and sets the memory alignment status. The priority inversion counter is updated based on the task priority of the insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['write_buffer_status'][key] = 0  # Assuming initial write buffer status is 0
    metadata['memory_alignment_status'][key] = obj.size % 8 != 0  # Assuming misaligned if size is not multiple of 8
    # if is_high_priority_task(obj):
    #     metadata['priority_inversion_counter'] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy resets the metadata for the evicted cache line. It updates the priority inversion counter to reflect the removal of a potentially blocking low-priority task. The write buffer status and memory alignment status are also reset.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in metadata['access_frequency']:
        del metadata['access_frequency'][key]
    if key in metadata['last_access_timestamp']:
        del metadata['last_access_timestamp'][key]
    if key in metadata['write_buffer_status']:
        del metadata['write_buffer_status'][key]
    if key in metadata['memory_alignment_status']:
        del metadata['memory_alignment_status'][key]
    # if is_low_priority_task(evicted_obj):
    #     metadata['priority_inversion_counter'] -= 1