# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
PREDICTION_WEIGHT = 0.5
SIZE_WEIGHT = 0.3
RECENCY_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, and a machine learning model's prediction score for future access likelihood. It also tracks the time of last access and the size of each cached object.
metadata = {
    'access_frequency': {},  # key -> frequency
    'recency_of_access': {},  # key -> last access time
    'prediction_score': {},  # key -> prediction score
    'size': {}  # key -> size
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by combining real-time analytics and predictive model optimization. It selects the object with the lowest predicted future access likelihood, adjusted by its size and recency of access, to balance between freeing space and retaining useful data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        prediction_score = metadata['prediction_score'][key]
        size = metadata['size'][key]
        recency = cache_snapshot.access_count - metadata['recency_of_access'][key]
        
        combined_score = (PREDICTION_WEIGHT * prediction_score +
                          SIZE_WEIGHT * size +
                          RECENCY_WEIGHT * recency)
        
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and recency of access for the object. It also recalculates the prediction score using the machine learning model, incorporating the latest access pattern data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency_of_access'][key] = cache_snapshot.access_count
    metadata['prediction_score'][key] = calculate_prediction_score(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and recency of access. It also generates an initial prediction score using the machine learning model based on the object's characteristics and current access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency_of_access'][key] = cache_snapshot.access_count
    metadata['size'][key] = obj.size
    metadata['prediction_score'][key] = calculate_prediction_score(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy updates the overall cache statistics, such as total access frequency and recency distribution. It also retrains the machine learning model periodically to improve future prediction accuracy based on the latest cache dynamics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['recency_of_access'][evicted_key]
    del metadata['size'][evicted_key]
    del metadata['prediction_score'][evicted_key]
    # Optionally retrain the model here if needed

def calculate_prediction_score(key):
    '''
    This function calculates the prediction score for a given object key.
    - Args:
        - `key`: The key of the object.
    - Return:
        - `score`: The prediction score for the object.
    '''
    # Placeholder for actual machine learning model prediction
    # For simplicity, we use a dummy function here
    frequency = metadata['access_frequency'][key]
    recency = metadata['recency_of_access'][key]
    size = metadata['size'][key]
    score = 1 / (frequency + 1) + recency + size
    return score