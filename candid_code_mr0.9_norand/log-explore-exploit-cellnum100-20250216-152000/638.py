# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
INITIAL_PREDICTIVE_SCORE = 1.0
PREDICTIVE_SCORE_INCREMENT = 0.1
NEURAL_ENTANGLEMENT_INCREMENT = 0.05

# Put the metadata specifically maintained by the policy below. The policy maintains a cognitive map of access patterns, predictive scores for future accesses, contextual tags for each cache entry, and a neural entanglement score representing the interconnectedness of cache entries.
cognitive_map = collections.defaultdict(lambda: {'predictive_score': INITIAL_PREDICTIVE_SCORE, 'contextual_tag': None, 'neural_entanglement': 0.0})

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the entry with the lowest combined score of predictive access likelihood and neural entanglement, while also considering the contextual relevance of the entry to current workload dynamics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        combined_score = (cognitive_map[key]['predictive_score'] + cognitive_map[key]['neural_entanglement'])
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the cognitive map is updated to reinforce the access pattern, the predictive score is increased, the contextual tag is adjusted based on recent access context, and the neural entanglement score is recalculated to reflect the strengthened connection.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    cognitive_map[key]['predictive_score'] += PREDICTIVE_SCORE_INCREMENT
    cognitive_map[key]['contextual_tag'] = cache_snapshot.access_count
    for other_key in cache_snapshot.cache:
        if other_key != key:
            cognitive_map[other_key]['neural_entanglement'] += NEURAL_ENTANGLEMENT_INCREMENT

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the cognitive map is expanded to include the new access pattern, an initial predictive score is assigned based on recent trends, a contextual tag is generated from the current workload, and the neural entanglement score is initialized to establish initial connections with existing entries.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    cognitive_map[key] = {
        'predictive_score': INITIAL_PREDICTIVE_SCORE,
        'contextual_tag': cache_snapshot.access_count,
        'neural_entanglement': 0.0
    }
    for other_key in cache_snapshot.cache:
        if other_key != key:
            cognitive_map[other_key]['neural_entanglement'] += NEURAL_ENTANGLEMENT_INCREMENT

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the cognitive map is pruned to remove the outdated pattern, the predictive scores of remaining entries are adjusted to reflect the change, contextual tags are re-evaluated to maintain relevance, and the neural entanglement scores are recalculated to account for the removed entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in cognitive_map:
        del cognitive_map[evicted_key]
    
    for key in cache_snapshot.cache:
        cognitive_map[key]['neural_entanglement'] = max(0.0, cognitive_map[key]['neural_entanglement'] - NEURAL_ENTANGLEMENT_INCREMENT)