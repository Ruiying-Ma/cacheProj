# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
WEIGHT_FREQUENCY = 0.4
WEIGHT_AGE = 0.3
WEIGHT_PREDICTIVE_SCORE = 0.2
WEIGHT_SEMANTIC_RELEVANCE = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, write-through flag, temporal access patterns, semantic tags, predictive scores for future access, and a global access counter.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'write_through_flag': {},
    'temporal_access_patterns': {},
    'semantic_tags': {},
    'predictive_scores': {},
    'global_access_counter': 0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted combination of least frequently used, oldest access time, lowest predictive score, and semantic relevance to ongoing tasks. Write-through entries are deprioritized for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        if metadata['write_through_flag'][key]:
            continue
        
        frequency_score = metadata['access_frequency'][key]
        age_score = cache_snapshot.access_count - metadata['last_access_time'][key]
        predictive_score = metadata['predictive_scores'][key]
        semantic_relevance = metadata['semantic_tags'][key]  # Assuming semantic tags are numeric for simplicity
        
        combined_score = (WEIGHT_FREQUENCY * frequency_score +
                          WEIGHT_AGE * age_score +
                          WEIGHT_PREDICTIVE_SCORE * predictive_score +
                          WEIGHT_SEMANTIC_RELEVANCE * semantic_relevance)
        
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the last access time to the current time, refines the temporal access pattern, recalculates the predictive score, and updates the global access counter.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['temporal_access_patterns'][key] = time.time()  # Example of refining temporal access pattern
    metadata['predictive_scores'][key] = 1 / (1 + metadata['access_frequency'][key])  # Example of recalculating predictive score
    metadata['global_access_counter'] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency to 1, sets the last access time to the current time, assigns semantic tags, computes an initial predictive score, sets the write-through flag, and increments the global access counter.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['temporal_access_patterns'][key] = time.time()  # Example of setting temporal access pattern
    metadata['semantic_tags'][key] = 0  # Example of assigning semantic tags
    metadata['predictive_scores'][key] = 1  # Example of computing initial predictive score
    metadata['write_through_flag'][key] = False  # Example of setting write-through flag
    metadata['global_access_counter'] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy clears all associated metadata, adjusts the predictive models, updates the semantic context, and increments the global access counter.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    del metadata['access_frequency'][key]
    del metadata['last_access_time'][key]
    del metadata['temporal_access_patterns'][key]
    del metadata['semantic_tags'][key]
    del metadata['predictive_scores'][key]
    del metadata['write_through_flag'][key]
    metadata['global_access_counter'] += 1