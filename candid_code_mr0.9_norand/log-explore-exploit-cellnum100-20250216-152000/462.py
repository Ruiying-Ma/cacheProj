# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
WEIGHT_INVERSE_FREQUENCY = 0.25
WEIGHT_RECENCY = 0.25
WEIGHT_SEMANTIC_IMPORTANCE = 0.25
WEIGHT_PREDICTIVE_SCORE = 0.25

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, semantic tags of the data, and a predictive score based on historical access patterns.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'semantic_tags': {},
    'predictive_score': {}
}

def calculate_composite_score(key):
    access_frequency = metadata['access_frequency'].get(key, 1)
    last_access_timestamp = metadata['last_access_timestamp'].get(key, 0)
    semantic_importance = metadata['semantic_tags'].get(key, 1)
    predictive_score = metadata['predictive_score'].get(key, 1)
    
    inverse_frequency = 1 / access_frequency
    recency = time.time() - last_access_timestamp
    
    composite_score = (
        WEIGHT_INVERSE_FREQUENCY * inverse_frequency +
        WEIGHT_RECENCY * recency +
        WEIGHT_SEMANTIC_IMPORTANCE * semantic_importance +
        WEIGHT_PREDICTIVE_SCORE * predictive_score
    )
    
    return composite_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score for each cache entry, which is a weighted sum of inverse access frequency, recency of access, semantic importance, and predictive score. The entry with the lowest composite score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_score = float('inf')
    
    for key in cache_snapshot.cache:
        score = calculate_composite_score(key)
        if score < lowest_score:
            lowest_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency is incremented, the last access timestamp is updated to the current time, and the predictive score is adjusted based on the new access pattern. Semantic tags are re-evaluated if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    # Adjust predictive score based on new access pattern (simplified here)
    metadata['predictive_score'][key] = metadata['access_frequency'][key] / (cache_snapshot.access_count + 1)
    # Re-evaluate semantic tags if necessary (simplified here)
    metadata['semantic_tags'][key] = 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the access frequency is initialized to 1, the last access timestamp is set to the current time, semantic tags are assigned based on the object's content, and an initial predictive score is calculated using historical data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    # Assign semantic tags based on object's content (simplified here)
    metadata['semantic_tags'][key] = 1
    # Calculate initial predictive score using historical data (simplified here)
    metadata['predictive_score'][key] = 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy rebalances the cognitive load by adjusting the weights used in the composite score calculation, ensuring that the cache adapts to changing access patterns and maintains optimal performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    # Remove metadata for the evicted object
    if key in metadata['access_frequency']:
        del metadata['access_frequency'][key]
    if key in metadata['last_access_timestamp']:
        del metadata['last_access_timestamp'][key]
    if key in metadata['semantic_tags']:
        del metadata['semantic_tags'][key]
    if key in metadata['predictive_score']:
        del metadata['predictive_score'][key]
    
    # Adjust weights (simplified here, could be more complex based on actual access patterns)
    global WEIGHT_INVERSE_FREQUENCY, WEIGHT_RECENCY, WEIGHT_SEMANTIC_IMPORTANCE, WEIGHT_PREDICTIVE_SCORE
    total_accesses = cache_snapshot.access_count
    if total_accesses > 0:
        WEIGHT_INVERSE_FREQUENCY = 0.25
        WEIGHT_RECENCY = 0.25
        WEIGHT_SEMANTIC_IMPORTANCE = 0.25
        WEIGHT_PREDICTIVE_SCORE = 0.25