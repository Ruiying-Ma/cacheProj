# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
INITIAL_STOCHASTIC_PROBABILITY = 0.5
LATENT_FEATURE_IMPORTANCE_WEIGHT = 0.3
TEMPORAL_ACCESS_RECENCY_WEIGHT = 0.4
STOCHASTIC_ACCESS_PROBABILITY_WEIGHT = 0.3

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including latent features of cached objects, temporal access patterns, stochastic access probabilities, and partitioned data stream segments.
metadata = {
    'temporal_access_pattern': {},  # {obj.key: last_access_time}
    'stochastic_access_probability': {},  # {obj.key: probability}
    'latent_feature_importance': {},  # {obj.key: importance}
    'data_stream_partition': {}  # {obj.key: partition_id}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by identifying the object with the lowest combined score of latent feature importance, temporal access recency, and stochastic access probability within its data stream partition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = math.inf

    for key, cached_obj in cache_snapshot.cache.items():
        latent_feature_importance = metadata['latent_feature_importance'].get(key, 0)
        temporal_access_recency = cache_snapshot.access_count - metadata['temporal_access_pattern'].get(key, 0)
        stochastic_access_probability = metadata['stochastic_access_probability'].get(key, INITIAL_STOCHASTIC_PROBABILITY)

        score = (LATENT_FEATURE_IMPORTANCE_WEIGHT * latent_feature_importance +
                 TEMPORAL_ACCESS_RECENCY_WEIGHT * temporal_access_recency +
                 STOCHASTIC_ACCESS_PROBABILITY_WEIGHT * stochastic_access_probability)

        if score < min_score:
            min_score = score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the temporal access pattern to reflect the recent access, recalculates the stochastic access probability, and adjusts the latent feature importance based on the new access data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['temporal_access_pattern'][key] = cache_snapshot.access_count
    metadata['stochastic_access_probability'][key] = min(1.0, metadata['stochastic_access_probability'].get(key, INITIAL_STOCHASTIC_PROBABILITY) + 0.1)
    metadata['latent_feature_importance'][key] = metadata['latent_feature_importance'].get(key, 0) + 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its latent features, sets its temporal access pattern to the current time, and assigns an initial stochastic access probability based on the data stream partition it belongs to.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['temporal_access_pattern'][key] = cache_snapshot.access_count
    metadata['stochastic_access_probability'][key] = INITIAL_STOCHASTIC_PROBABILITY
    metadata['latent_feature_importance'][key] = 0
    metadata['data_stream_partition'][key] = 0  # Assuming a single partition for simplicity

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes its metadata, rebalances the data stream partitions if necessary, and updates the stochastic models to reflect the change in the cache composition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in metadata['temporal_access_pattern']:
        del metadata['temporal_access_pattern'][key]
    if key in metadata['stochastic_access_probability']:
        del metadata['stochastic_access_probability'][key]
    if key in metadata['latent_feature_importance']:
        del metadata['latent_feature_importance'][key]
    if key in metadata['data_stream_partition']:
        del metadata['data_stream_partition'][key]