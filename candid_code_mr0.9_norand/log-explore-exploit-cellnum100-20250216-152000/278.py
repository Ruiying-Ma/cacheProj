# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 1.0
WEIGHT_LAST_ACCESS_TIMESTAMP = 1.0
WEIGHT_LOCALITY_SCORE = 1.0
WEIGHT_WRITE_BACK_STATUS = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry including access frequency, last access timestamp, write-back status, and a locality score based on recent access patterns of neighboring data.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score for each entry, which is a weighted sum of low access frequency, old last access timestamp, low locality score, and write-back status. The entry with the lowest composite score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        score = (WEIGHT_ACCESS_FREQUENCY / meta['access_frequency'] +
                 WEIGHT_LAST_ACCESS_TIMESTAMP * (cache_snapshot.access_count - meta['last_access_timestamp']) +
                 WEIGHT_LOCALITY_SCORE * meta['locality_score'] +
                 WEIGHT_WRITE_BACK_STATUS * meta['write_back_status'])
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the last access timestamp to the current time, recalculates the locality score based on recent access patterns, and checks the write-back status to ensure data consistency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta['access_frequency'] += 1
    meta['last_access_timestamp'] = cache_snapshot.access_count
    meta['locality_score'] = calculate_locality_score(cache_snapshot, obj)
    # Write-back status is assumed to be checked and updated elsewhere if necessary

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, calculates an initial locality score based on neighboring data access patterns, and sets the write-back status to indicate if the data needs to be written back to the main memory.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'access_frequency': 1,
        'last_access_timestamp': cache_snapshot.access_count,
        'locality_score': calculate_locality_score(cache_snapshot, obj),
        'write_back_status': 0  # Assuming 0 means no write-back needed initially
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an entry, the policy updates the metadata by removing the evicted entry's data, recalculating locality scores for remaining entries if necessary, and ensuring that any write-back operations are completed to maintain data integrity.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata[evicted_obj.key]
    for key in cache_snapshot.cache:
        metadata[key]['locality_score'] = calculate_locality_score(cache_snapshot, cache_snapshot.cache[key])
    # Write-back operations are assumed to be handled elsewhere if necessary

def calculate_locality_score(cache_snapshot, obj):
    '''
    This function calculates the locality score based on recent access patterns of neighboring data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object for which the locality score is being calculated.
    - Return:
        - `locality_score`: The calculated locality score.
    '''
    # Placeholder for locality score calculation logic
    # This can be based on the access patterns of neighboring data
    return 0  # Simplified for this example