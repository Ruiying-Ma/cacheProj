# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 0.4
WEIGHT_LAST_ACCESS_TIME = 0.3
WEIGHT_HIERARCHICAL_LEVEL = 0.2
WEIGHT_PREDICTIVE_SCORE = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, hierarchical access level, and a predictive score based on historical access patterns.
metadata = {
    'access_frequency': {},  # key -> access frequency
    'last_access_time': {},  # key -> last access time
    'hierarchical_level': {},  # key -> hierarchical access level
    'predictive_score': {}  # key -> predictive score
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score for each cache entry, which is a weighted sum of infrequent access, older last access time, lower hierarchical access level, and lower predictive score. The entry with the lowest composite score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_composite_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'].get(key, 0)
        last_access_time = metadata['last_access_time'].get(key, 0)
        hierarchical_level = metadata['hierarchical_level'].get(key, 0)
        predictive_score = metadata['predictive_score'].get(key, 0)
        
        composite_score = (
            WEIGHT_ACCESS_FREQUENCY * (1 / (access_frequency + 1)) +
            WEIGHT_LAST_ACCESS_TIME * (cache_snapshot.access_count - last_access_time) +
            WEIGHT_HIERARCHICAL_LEVEL * hierarchical_level +
            WEIGHT_PREDICTIVE_SCORE * predictive_score
        )
        
        if composite_score < min_composite_score:
            min_composite_score = composite_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, sets the last access time to the current time, adjusts the hierarchical access level based on the access pattern, and recalculates the predictive score using recent access trends.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['hierarchical_level'][key] = adjust_hierarchical_level(key)
    metadata['predictive_score'][key] = calculate_predictive_score(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, assigns a hierarchical access level based on the insertion context, and computes an initial predictive score using available historical data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['hierarchical_level'][key] = assign_initial_hierarchical_level(key)
    metadata['predictive_score'][key] = calculate_initial_predictive_score(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalculates the predictive scores for remaining entries to reflect the changed cache state, adjusts hierarchical access levels if necessary, and logs the eviction event to refine future predictive models.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_time']:
        del metadata['last_access_time'][evicted_key]
    if evicted_key in metadata['hierarchical_level']:
        del metadata['hierarchical_level'][evicted_key]
    if evicted_key in metadata['predictive_score']:
        del metadata['predictive_score'][evicted_key]
    
    for key in cache_snapshot.cache:
        metadata['predictive_score'][key] = calculate_predictive_score(key)
        metadata['hierarchical_level'][key] = adjust_hierarchical_level(key)

def adjust_hierarchical_level(key):
    # Placeholder function to adjust hierarchical level based on access pattern
    return metadata['hierarchical_level'].get(key, 0) + 1

def calculate_predictive_score(key):
    # Placeholder function to calculate predictive score using recent access trends
    return metadata['access_frequency'].get(key, 0) * 0.5

def assign_initial_hierarchical_level(key):
    # Placeholder function to assign initial hierarchical level based on insertion context
    return 1

def calculate_initial_predictive_score(key):
    # Placeholder function to calculate initial predictive score using available historical data
    return 0.5