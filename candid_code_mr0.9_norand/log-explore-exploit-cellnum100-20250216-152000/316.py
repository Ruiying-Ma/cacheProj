# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 0.4
WEIGHT_RECENCY = 0.3
WEIGHT_SIZE = 0.2
WEIGHT_LATENCY = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry including access frequency, last access time, data size, and a latency score derived from data flux analysis and latency profiling.
metadata = {}

def calculate_latency_score(obj):
    # Placeholder for actual latency score calculation based on data flux analysis and latency profiling
    return obj.size * 0.1

def calculate_composite_score(key):
    entry = metadata[key]
    return (WEIGHT_ACCESS_FREQUENCY * entry['access_frequency'] +
            WEIGHT_RECENCY * (time.time() - entry['last_access_time']) +
            WEIGHT_SIZE * entry['size'] +
            WEIGHT_LATENCY * entry['latency_score'])

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score for each entry, which is a weighted sum of its access frequency, recency, data size, and latency score. The entry with the lowest composite score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_score = float('inf')
    
    for key in cache_snapshot.cache:
        score = calculate_composite_score(key)
        if score < lowest_score:
            lowest_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, updates the last access time to the current time, and recalculates the latency score based on the latest data flux analysis.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    if key in metadata:
        metadata[key]['access_frequency'] += 1
        metadata[key]['last_access_time'] = time.time()
        metadata[key]['latency_score'] = calculate_latency_score(obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, assigns the data size, and calculates an initial latency score based on the data flux analysis and latency profiling.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'access_frequency': 1,
        'last_access_time': time.time(),
        'size': obj.size,
        'latency_score': calculate_latency_score(obj)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an entry, the policy recalculates the composite scores for the remaining entries to ensure the next eviction decision is based on the most current metadata.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    for key in cache_snapshot.cache:
        calculate_composite_score(key)