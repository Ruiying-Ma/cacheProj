# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
BASELINE_FITNESS = 1
DEFAULT_SWARM_POSITION = 0
INITIAL_FUZZY_MEMBERSHIP = 0.5
SWARM_INTELLIGENCE_FACTOR = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains a fitness score for each cache entry, a swarm position vector, and a fuzzy logic membership value indicating the likelihood of future access.
fitness_scores = {}
swarm_positions = {}
fuzzy_memberships = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the cache entry with the lowest combined fitness score and fuzzy membership value, adjusted by the swarm intelligence factor to avoid local optima.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_combined_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        combined_score = (fitness_scores[key] + fuzzy_memberships[key]) * (1 + SWARM_INTELLIGENCE_FACTOR * swarm_positions[key])
        if combined_score < min_combined_score:
            min_combined_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the fitness score of the accessed entry is increased, its swarm position is updated to reflect recent access, and its fuzzy membership value is recalculated to reflect higher likelihood of future access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    fitness_scores[key] += 1
    swarm_positions[key] = cache_snapshot.access_count
    fuzzy_memberships[key] = min(1.0, fuzzy_memberships[key] + 0.1)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its fitness score to a baseline value, sets its swarm position to a default starting point, and assigns a fuzzy membership value based on initial access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    fitness_scores[key] = BASELINE_FITNESS
    swarm_positions[key] = DEFAULT_SWARM_POSITION
    fuzzy_memberships[key] = INITIAL_FUZZY_MEMBERSHIP

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy rebalances the swarm positions of remaining entries to optimize for future access patterns and recalculates their fitness scores and fuzzy membership values to reflect the new cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in fitness_scores:
        del fitness_scores[evicted_key]
    if evicted_key in swarm_positions:
        del swarm_positions[evicted_key]
    if evicted_key in fuzzy_memberships:
        del fuzzy_memberships[evicted_key]
    
    for key in cache_snapshot.cache:
        swarm_positions[key] = cache_snapshot.access_count
        fitness_scores[key] = max(BASELINE_FITNESS, fitness_scores[key] - 1)
        fuzzy_memberships[key] = max(0.0, fuzzy_memberships[key] - 0.1)