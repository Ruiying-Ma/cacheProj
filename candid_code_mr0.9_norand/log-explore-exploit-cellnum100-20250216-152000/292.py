# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for inverse of access frequency
BETA = 0.3   # Weight for time since last access
GAMMA = 0.2  # Weight for predicted future access time

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, predicted future access time, and a synaptic weight representing the importance of the data based on historical access patterns.
metadata = {
    'access_frequency': {},  # key -> access frequency
    'last_access_time': {},  # key -> last access time
    'predicted_future_access_time': {},  # key -> predicted future access time
    'synaptic_weight': {}  # key -> synaptic weight
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score for each cache entry, which is a weighted sum of the inverse of access frequency, the time since last access, and the predicted future access time. The entry with the highest composite score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    max_score = -math.inf
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_freq = metadata['access_frequency'].get(key, 1)
        last_access = metadata['last_access_time'].get(key, cache_snapshot.access_count)
        predicted_future = metadata['predicted_future_access_time'].get(key, cache_snapshot.access_count + 1)
        
        score = (ALPHA / access_freq) + (BETA * (cache_snapshot.access_count - last_access)) + (GAMMA * predicted_future)
        
        if score > max_score:
            max_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency is incremented, the last access time is updated to the current time, the predicted future access time is adjusted based on the heuristic access path, and the synaptic weight is recalculated to reflect the increased importance of the data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['predicted_future_access_time'][key] = cache_snapshot.access_count + 1  # Simplified heuristic
    metadata['synaptic_weight'][key] = metadata['access_frequency'][key]  # Simplified weight calculation

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the access frequency is initialized to 1, the last access time is set to the current time, the predicted future access time is estimated using the data retrieval algorithm, and the synaptic weight is initialized based on initial access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['predicted_future_access_time'][key] = cache_snapshot.access_count + 1  # Simplified heuristic
    metadata['synaptic_weight'][key] = 1  # Initial weight

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalculates the synaptic weights of the remaining entries to ensure the overall importance distribution is balanced, and adjusts the predicted future access times based on the new cache composition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_time']:
        del metadata['last_access_time'][evicted_key]
    if evicted_key in metadata['predicted_future_access_time']:
        del metadata['predicted_future_access_time'][evicted_key]
    if evicted_key in metadata['synaptic_weight']:
        del metadata['synaptic_weight'][evicted_key]
    
    # Recalculate synaptic weights for remaining entries
    for key in cache_snapshot.cache:
        metadata['synaptic_weight'][key] = metadata['access_frequency'][key]  # Simplified recalculation