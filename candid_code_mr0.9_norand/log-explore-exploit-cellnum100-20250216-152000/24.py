# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import numpy as np

# Put tunable constant parameters below
PREDICTIVE_SCORE_SCALE = 1000

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, and a predictive score for each cache entry. The predictive score is derived from a machine learning model that uses historical access patterns to forecast future accesses.
metadata = {
    'access_frequency': {},  # key -> frequency
    'recency': {},           # key -> last access time
    'predictive_score': {}   # key -> predictive score
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combination of the lowest predictive score and the least recently used (LRU) entry. If multiple entries have similar scores, the one with the lowest access frequency is chosen.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    min_recency = float('inf')
    min_frequency = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        score = metadata['predictive_score'][key]
        recency = metadata['recency'][key]
        frequency = metadata['access_frequency'][key]

        if score < min_score or (score == min_score and recency < min_recency) or (score == min_score and recency == min_recency and frequency < min_frequency):
            min_score = score
            min_recency = recency
            min_frequency = frequency
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the accessed entry are updated. The predictive score is recalculated using the latest access data, normalized and scaled to maintain consistency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['predictive_score'][key] = calculate_predictive_score(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and recency metadata. The predictive score is computed using initial access patterns and normalized to fit within the existing score range.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['predictive_score'][key] = calculate_predictive_score(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata of the evicted entry and adjusts the predictive model to account for the change in the cache state, ensuring future predictions remain accurate.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['recency'][evicted_key]
    del metadata['predictive_score'][evicted_key]

def calculate_predictive_score(key):
    '''
    This function calculates the predictive score for a given key.
    - Args:
        - `key`: The key of the object for which the predictive score is to be calculated.
    - Return:
        - `score`: The calculated predictive score.
    '''
    frequency = metadata['access_frequency'][key]
    recency = metadata['recency'][key]
    score = (frequency / (recency + 1)) * PREDICTIVE_SCORE_SCALE
    return score