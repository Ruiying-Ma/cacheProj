# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for exponential moving average for future access time prediction

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, predicted future access time, and data throughput for each cached object.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by identifying the object with the lowest predicted future access time, adjusted by its temporal variance and data throughput, to ensure minimal impact on performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        score = meta['predicted_future_access_time'] - meta['temporal_variance'] / meta['data_throughput']
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the last access time to the current time, increments the access frequency, and refines the predicted future access time based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    meta = metadata[key]
    
    # Update last access time and access frequency
    last_access_time = meta['last_access_time']
    meta['last_access_time'] = current_time
    meta['access_frequency'] += 1
    
    # Update predicted future access time
    inter_access_time = current_time - last_access_time
    meta['predicted_future_access_time'] = ALPHA * inter_access_time + (1 - ALPHA) * meta['predicted_future_access_time']
    
    # Update temporal variance
    meta['temporal_variance'] = ALPHA * (inter_access_time - meta['predicted_future_access_time']) ** 2 + (1 - ALPHA) * meta['temporal_variance']

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata with the current time as the last access time, sets the access frequency to one, estimates the initial predicted future access time, and records its data throughput.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata[key] = {
        'last_access_time': current_time,
        'access_frequency': 1,
        'predicted_future_access_time': current_time + 1,  # Initial guess
        'temporal_variance': 0,
        'data_throughput': obj.size
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy recalculates the predicted future access times for the remaining objects, considering the change in cache composition and updates the temporal variance and data throughput metrics accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    # Recalculate predicted future access times for remaining objects
    for key, meta in metadata.items():
        current_time = cache_snapshot.access_count
        last_access_time = meta['last_access_time']
        inter_access_time = current_time - last_access_time
        meta['predicted_future_access_time'] = ALPHA * inter_access_time + (1 - ALPHA) * meta['predicted_future_access_time']
        meta['temporal_variance'] = ALPHA * (inter_access_time - meta['predicted_future_access_time']) ** 2 + (1 - ALPHA) * meta['temporal_variance']