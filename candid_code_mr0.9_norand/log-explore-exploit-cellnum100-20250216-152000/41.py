# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import deque, defaultdict

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 1.0
WEIGHT_LAST_ACCESS_TIME = 1.0
WEIGHT_DISK_IO_RATE = 1.0
WEIGHT_CACHE_MISS_RATIO = 1.0
WEIGHT_MEMORY_BANDWIDTH_USAGE = 1.0
WEIGHT_DATA_SWAPPING_FREQUENCY = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains a LRU queue and metadata including access frequency, last access time, disk I/O rate, cache miss ratio, memory bandwidth usage, and data swapping frequency for each cached object.
lru_queue = deque()
access_frequency = defaultdict(int)
last_access_time = {}
disk_io_rate = defaultdict(float)
cache_miss_ratio = defaultdict(float)
memory_bandwidth_usage = defaultdict(float)
data_swapping_frequency = defaultdict(float)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score that considers low access frequency, old last access time, high disk I/O rate, high cache miss ratio, high memory bandwidth usage, and high data swapping frequency. If scores are tied, the least-recently-used object is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (WEIGHT_ACCESS_FREQUENCY * access_frequency[key] +
                 WEIGHT_LAST_ACCESS_TIME * (cache_snapshot.access_count - last_access_time[key]) +
                 WEIGHT_DISK_IO_RATE * disk_io_rate[key] +
                 WEIGHT_CACHE_MISS_RATIO * cache_miss_ratio[key] +
                 WEIGHT_MEMORY_BANDWIDTH_USAGE * memory_bandwidth_usage[key] +
                 WEIGHT_DATA_SWAPPING_FREQUENCY * data_swapping_frequency[key])
        
        if score < min_score or (score == min_score and lru_queue.index(key) < lru_queue.index(candid_obj_key)):
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a hit, the policy updates the access frequency by incrementing it, updates the last access time to the current time, recalculates the memory bandwidth usage and data swapping frequency based on recent activity, and moves the hit object to the most-recently-used end of the LRU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] += 1
    last_access_time[key] = cache_snapshot.access_count
    # Recalculate memory bandwidth usage and data swapping frequency based on recent activity
    memory_bandwidth_usage[key] = calculate_memory_bandwidth_usage(cache_snapshot, obj)
    data_swapping_frequency[key] = calculate_data_swapping_frequency(cache_snapshot, obj)
    # Move the hit object to the most-recently-used end of the LRU queue
    lru_queue.remove(key)
    lru_queue.append(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, updates the disk I/O rate, cache miss ratio, memory bandwidth usage, and data swapping frequency to reflect the new state of the cache, and places the new object at the most-recently-used end of the LRU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 1
    last_access_time[key] = cache_snapshot.access_count
    disk_io_rate[key] = calculate_disk_io_rate(cache_snapshot, obj)
    cache_miss_ratio[key] = calculate_cache_miss_ratio(cache_snapshot, obj)
    memory_bandwidth_usage[key] = calculate_memory_bandwidth_usage(cache_snapshot, obj)
    data_swapping_frequency[key] = calculate_data_swapping_frequency(cache_snapshot, obj)
    lru_queue.append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalculates the disk I/O rate, cache miss ratio, memory bandwidth usage, and data swapping frequency to account for the removal of the evicted object, adjusts the remaining metadata accordingly, and removes the evicted object from the LRU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    del access_frequency[key]
    del last_access_time[key]
    del disk_io_rate[key]
    del cache_miss_ratio[key]
    del memory_bandwidth_usage[key]
    del data_swapping_frequency[key]
    lru_queue.remove(key)
    # Recalculate the disk I/O rate, cache miss ratio, memory bandwidth usage, and data swapping frequency for the remaining objects
    for key in cache_snapshot.cache:
        disk_io_rate[key] = calculate_disk_io_rate(cache_snapshot, cache_snapshot.cache[key])
        cache_miss_ratio[key] = calculate_cache_miss_ratio(cache_snapshot, cache_snapshot.cache[key])
        memory_bandwidth_usage[key] = calculate_memory_bandwidth_usage(cache_snapshot, cache_snapshot.cache[key])
        data_swapping_frequency[key] = calculate_data_swapping_frequency(cache_snapshot, cache_snapshot.cache[key])

def calculate_disk_io_rate(cache_snapshot, obj):
    # Placeholder function to calculate disk I/O rate
    return 0.0

def calculate_cache_miss_ratio(cache_snapshot, obj):
    # Placeholder function to calculate cache miss ratio
    return 0.0

def calculate_memory_bandwidth_usage(cache_snapshot, obj):
    # Placeholder function to calculate memory bandwidth usage
    return 0.0

def calculate_data_swapping_frequency(cache_snapshot, obj):
    # Placeholder function to calculate data swapping frequency
    return 0.0