# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
INITIAL_ENTROPY_SCORE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, contextual tags (e.g., user activity, time of day), and an entropy score representing the randomness of access patterns.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'contextual_tags': {},
    'entropy_score': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by identifying the object with the highest entropy score, lowest access frequency, and least recent access time, while also considering contextual tags to avoid evicting objects likely to be needed soon.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    highest_entropy = -1
    lowest_frequency = float('inf')
    oldest_time = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        entropy = metadata['entropy_score'][key]
        frequency = metadata['access_frequency'][key]
        last_time = metadata['last_access_time'][key]

        if (entropy > highest_entropy or
            (entropy == highest_entropy and frequency < lowest_frequency) or
            (entropy == highest_entropy and frequency == lowest_frequency and last_time < oldest_time)):
            highest_entropy = entropy
            lowest_frequency = frequency
            oldest_time = last_time
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access time to the current time, and recalculates the entropy score based on recent access patterns. Contextual tags are also updated based on the current context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Recalculate entropy score (simplified for this example)
    metadata['entropy_score'][key] = 1.0 / metadata['access_frequency'][key]
    # Update contextual tags (simplified for this example)
    metadata['contextual_tags'][key] = 'updated_context'

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, assigns initial contextual tags based on the current context, and calculates an initial entropy score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['entropy_score'][key] = INITIAL_ENTROPY_SCORE
    metadata['contextual_tags'][key] = 'initial_context'

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all metadata associated with the evicted object and recalculates the entropy scores of remaining objects to reflect the updated cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_time'][evicted_key]
    del metadata['entropy_score'][evicted_key]
    del metadata['contextual_tags'][evicted_key]

    # Recalculate entropy scores for remaining objects (simplified for this example)
    for key in cache_snapshot.cache:
        metadata['entropy_score'][key] = 1.0 / metadata['access_frequency'][key]