# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_QNS = 1.0
INITIAL_PEM = 100.0
INITIAL_CLI = 10.0
INITIAL_DCF = 1.0
QNS_INCREMENT = 0.1
PEM_DECREMENT = 5.0
CLI_DECREMENT = 1.0
DCF_ADJUSTMENT = 0.05

# Put the metadata specifically maintained by the policy below. The policy maintains a Quantum Neural Synchronization (QNS) score, a Predictive Entropy Map (PEM), a Cognitive Latency Index (CLI), and a Dynamic Coherence Feedback (DCF) value for each cache entry.
metadata = {
    'QNS': {},
    'PEM': {},
    'CLI': {},
    'DCF': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the entry with the lowest combined score derived from the QNS, PEM, CLI, and DCF values, prioritizing entries with low neural synchronization and high predictive entropy.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (metadata['QNS'][key] - metadata['PEM'][key] + 
                 metadata['CLI'][key] + metadata['DCF'][key])
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the QNS score is increased to reflect improved synchronization, the PEM is updated to lower entropy based on recent access patterns, the CLI is adjusted to reflect reduced latency, and the DCF value is recalibrated to maintain coherence with the updated state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['QNS'][key] += QNS_INCREMENT
    metadata['PEM'][key] = max(0, metadata['PEM'][key] - PEM_DECREMENT)
    metadata['CLI'][key] = max(0, metadata['CLI'][key] - CLI_DECREMENT)
    metadata['DCF'][key] += DCF_ADJUSTMENT

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the QNS score is initialized based on initial synchronization metrics, the PEM is set to a high entropy value, the CLI is set to a default latency index, and the DCF value is initialized to ensure initial coherence.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['QNS'][key] = INITIAL_QNS
    metadata['PEM'][key] = INITIAL_PEM
    metadata['CLI'][key] = INITIAL_CLI
    metadata['DCF'][key] = INITIAL_DCF

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the QNS scores of remaining entries are slightly adjusted to reflect the change in synchronization, the PEM is updated to account for the removal of the evicted entry, the CLI is recalculated to reflect the new latency landscape, and the DCF values are updated to maintain overall coherence.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['QNS'][evicted_key]
    del metadata['PEM'][evicted_key]
    del metadata['CLI'][evicted_key]
    del metadata['DCF'][evicted_key]
    
    for key in cache_snapshot.cache:
        metadata['QNS'][key] *= (1 - DCF_ADJUSTMENT)
        metadata['PEM'][key] = max(0, metadata['PEM'][key] - DCF_ADJUSTMENT)
        metadata['CLI'][key] = max(0, metadata['CLI'][key] - DCF_ADJUSTMENT)
        metadata['DCF'][key] *= (1 + DCF_ADJUSTMENT)