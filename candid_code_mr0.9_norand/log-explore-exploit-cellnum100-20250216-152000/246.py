# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
LATENCY_WEIGHT = 0.2
ACCESS_FREQ_WEIGHT = 0.2
LAST_ACCESS_TIME_WEIGHT = 0.2
PREFETCH_SCORE_WEIGHT = 0.2
PRIORITY_SCORE_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, data retrieval speed, predictive prefetching score, context tags, and a dynamically adjusted priority score derived from an adaptive learning model.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'data_retrieval_speed': {},
    'predictive_prefetching_score': {},
    'context_tags': {},
    'priority_score': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score that combines low access frequency, high latency, old last access time, low predictive prefetching score, and low priority score, with context tags used to predict future access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_freq = metadata['access_frequency'].get(key, 0)
        last_access = metadata['last_access_time'].get(key, 0)
        latency = metadata['data_retrieval_speed'].get(key, 0)
        prefetch_score = metadata['predictive_prefetching_score'].get(key, 0)
        priority_score = metadata['priority_score'].get(key, 0)
        
        composite_score = (
            LATENCY_WEIGHT * latency +
            ACCESS_FREQ_WEIGHT * (1 / (access_freq + 1)) +
            LAST_ACCESS_TIME_WEIGHT * (cache_snapshot.access_count - last_access) +
            PREFETCH_SCORE_WEIGHT * (1 / (prefetch_score + 1)) +
            PRIORITY_SCORE_WEIGHT * (1 / (priority_score + 1))
        )
        
        if composite_score < min_score:
            min_score = composite_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, refreshes the last access time to the current time, adjusts the predictive prefetching score based on recent access patterns, updates the priority score based on the adaptive learning model's feedback, and updates the context tags to reflect the current access context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Adjust predictive prefetching score and priority score based on some model
    metadata['predictive_prefetching_score'][key] = adjust_prefetching_score(key)
    metadata['priority_score'][key] = adjust_priority_score(key)
    # Update context tags
    metadata['context_tags'][key] = update_context_tags(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, calculates an initial predictive prefetching score based on the object's retrieval speed and expected future access patterns, assigns an initial priority score based on the adaptive learning model's prediction, and tags the object with the relevant context information.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['data_retrieval_speed'][key] = calculate_retrieval_speed(obj)
    metadata['predictive_prefetching_score'][key] = initial_prefetching_score(obj)
    metadata['priority_score'][key] = initial_priority_score(obj)
    metadata['context_tags'][key] = initial_context_tags(obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy recalculates the predictive prefetching scores for remaining objects, re-evaluates the adaptive learning model to refine its predictions, adjusts the priority scores of remaining objects if necessary, and updates the context tags to reflect the new cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    # Remove metadata of evicted object
    for key in metadata:
        if evicted_key in metadata[key]:
            del metadata[key][evicted_key]
    
    # Recalculate scores for remaining objects
    for key in cache_snapshot.cache:
        metadata['predictive_prefetching_score'][key] = adjust_prefetching_score(key)
        metadata['priority_score'][key] = adjust_priority_score(key)
        metadata['context_tags'][key] = update_context_tags(key)

# Helper functions
def adjust_prefetching_score(key):
    # Placeholder for actual implementation
    return metadata['predictive_prefetching_score'].get(key, 0) + 1

def adjust_priority_score(key):
    # Placeholder for actual implementation
    return metadata['priority_score'].get(key, 0) + 1

def update_context_tags(key):
    # Placeholder for actual implementation
    return metadata['context_tags'].get(key, {})

def calculate_retrieval_speed(obj):
    # Placeholder for actual implementation
    return obj.size / 100  # Example calculation

def initial_prefetching_score(obj):
    # Placeholder for actual implementation
    return 1

def initial_priority_score(obj):
    # Placeholder for actual implementation
    return 1

def initial_context_tags(obj):
    # Placeholder for actual implementation
    return {}