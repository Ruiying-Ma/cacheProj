# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
FREQUENCY_WEIGHT = 0.4
LAST_ACCESS_WEIGHT = 0.3
PREDICTED_ACCESS_WEIGHT = 0.3

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, predicted future access time, and load distribution across cache nodes.
metadata = {
    'access_frequency': {},  # key -> frequency
    'last_access_time': {},  # key -> last access time
    'predicted_future_access_time': {},  # key -> predicted future access time
    'load_distribution': {}  # key -> load distribution (for simplicity, assume single node)
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combination of the least frequently accessed, the longest time since last access, and the least likely to be accessed in the near future, while also considering the load balance across cache nodes.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        frequency = metadata['access_frequency'].get(key, 0)
        last_access = metadata['last_access_time'].get(key, 0)
        predicted_access = metadata['predicted_future_access_time'].get(key, float('inf'))
        
        score = (FREQUENCY_WEIGHT * frequency +
                 LAST_ACCESS_WEIGHT * (cache_snapshot.access_count - last_access) +
                 PREDICTED_ACCESS_WEIGHT * predicted_access)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, records the current time as the last access time, and adjusts the predicted future access time based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # For simplicity, assume predicted future access time is incremented by a fixed value
    metadata['predicted_future_access_time'][key] = cache_snapshot.access_count + 10

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to one, sets the current time as the last access time, predicts the next access time based on historical data, and updates the load distribution to reflect the new insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # For simplicity, assume predicted future access time is set to a fixed value
    metadata['predicted_future_access_time'][key] = cache_snapshot.access_count + 10
    # Update load distribution (for simplicity, assume single node)
    metadata['load_distribution'][key] = obj.size

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata for the evicted object and recalculates the load distribution to ensure balanced load across cache nodes.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in metadata['access_frequency']:
        del metadata['access_frequency'][key]
    if key in metadata['last_access_time']:
        del metadata['last_access_time'][key]
    if key in metadata['predicted_future_access_time']:
        del metadata['predicted_future_access_time'][key]
    if key in metadata['load_distribution']:
        del metadata['load_distribution'][key]
    # Recalculate load distribution (for simplicity, assume single node)
    total_size = sum(obj.size for obj in cache_snapshot.cache.values())
    for k in metadata['load_distribution']:
        metadata['load_distribution'][k] = cache_snapshot.cache[k].size / total_size