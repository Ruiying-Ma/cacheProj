# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 1.0
WEIGHT_LAST_ACCESS_TIME = 1.0
WEIGHT_DISK_IO_RATE = 1.0
WEIGHT_CACHE_MISS_RATIO = 1.0
WEIGHT_MEMORY_BANDWIDTH_USAGE = 1.0
WEIGHT_DATA_SWAPPING_FREQUENCY = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, disk I/O rate, cache miss ratio, memory bandwidth usage, and data swapping frequency for each cached object.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'disk_io_rate': {},
    'cache_miss_ratio': {},
    'memory_bandwidth_usage': {},
    'data_swapping_frequency': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score that considers low access frequency, old last access time, high disk I/O rate, high cache miss ratio, high memory bandwidth usage, and high data swapping frequency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (
            WEIGHT_ACCESS_FREQUENCY * metadata['access_frequency'].get(key, 0) +
            WEIGHT_LAST_ACCESS_TIME * (cache_snapshot.access_count - metadata['last_access_time'].get(key, 0)) +
            WEIGHT_DISK_IO_RATE * metadata['disk_io_rate'].get(key, 0) +
            WEIGHT_CACHE_MISS_RATIO * metadata['cache_miss_ratio'].get(key, 0) +
            WEIGHT_MEMORY_BANDWIDTH_USAGE * metadata['memory_bandwidth_usage'].get(key, 0) +
            WEIGHT_DATA_SWAPPING_FREQUENCY * metadata['data_swapping_frequency'].get(key, 0)
        )
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, updates the last access time to the current time, and recalculates the memory bandwidth usage and data swapping frequency based on recent activity.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Recalculate memory bandwidth usage and data swapping frequency based on recent activity
    # For simplicity, we assume these values are incremented by 1 for each hit
    metadata['memory_bandwidth_usage'][key] = metadata['memory_bandwidth_usage'].get(key, 0) + 1
    metadata['data_swapping_frequency'][key] = metadata['data_swapping_frequency'].get(key, 0) + 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, and updates the disk I/O rate, cache miss ratio, memory bandwidth usage, and data swapping frequency to reflect the new state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Initialize disk I/O rate, cache miss ratio, memory bandwidth usage, and data swapping frequency
    metadata['disk_io_rate'][key] = 1
    metadata['cache_miss_ratio'][key] = cache_snapshot.miss_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)
    metadata['memory_bandwidth_usage'][key] = 1
    metadata['data_swapping_frequency'][key] = 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalculates the disk I/O rate, cache miss ratio, memory bandwidth usage, and data swapping frequency to account for the removal of the evicted object and adjusts the remaining metadata accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    # Remove metadata for the evicted object
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_time']:
        del metadata['last_access_time'][evicted_key]
    if evicted_key in metadata['disk_io_rate']:
        del metadata['disk_io_rate'][evicted_key]
    if evicted_key in metadata['cache_miss_ratio']:
        del metadata['cache_miss_ratio'][evicted_key]
    if evicted_key in metadata['memory_bandwidth_usage']:
        del metadata['memory_bandwidth_usage'][evicted_key]
    if evicted_key in metadata['data_swapping_frequency']:
        del metadata['data_swapping_frequency'][evicted_key]
    
    # Recalculate disk I/O rate, cache miss ratio, memory bandwidth usage, and data swapping frequency for the remaining objects
    for key in cache_snapshot.cache:
        metadata['disk_io_rate'][key] = metadata['disk_io_rate'].get(key, 0) + 1
        metadata['cache_miss_ratio'][key] = cache_snapshot.miss_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)
        metadata['memory_bandwidth_usage'][key] = metadata['memory_bandwidth_usage'].get(key, 0) + 1
        metadata['data_swapping_frequency'][key] = metadata['data_swapping_frequency'].get(key, 0) + 1