# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
NUM_CANDIDATES = 5  # Number of candidate solutions

# Put the metadata specifically maintained by the policy below. The policy maintains a population of candidate solutions, each representing a potential cache state. Each candidate solution includes metadata such as access frequency, recency, and a fitness score based on a fitness landscape that evaluates the efficiency of the cache state.
candidates = [
    {
        'cache': {},
        'access_frequency': collections.defaultdict(int),
        'recency': collections.defaultdict(int),
        'fitness_score': 0
    }
    for _ in range(NUM_CANDIDATES)
]

def calculate_fitness(candidate):
    # Fitness function can be tuned. Here, we use a simple combination of access frequency and recency.
    fitness = 0
    for key in candidate['cache']:
        fitness += candidate['access_frequency'][key] / (1 + candidate['recency'][key])
    return fitness

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the eviction victim by applying selection pressure to the population of candidate solutions, favoring those with higher fitness scores. The least fit candidate solution is chosen for eviction, ensuring that the cache evolves towards more efficient states.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    least_fit_candidate = min(candidates, key=lambda c: c['fitness_score'])
    min_fitness = float('inf')
    
    for key in least_fit_candidate['cache']:
        fitness = least_fit_candidate['access_frequency'][key] / (1 + least_fit_candidate['recency'][key])
        if fitness < min_fitness:
            min_fitness = fitness
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and recency metadata for the accessed object in all candidate solutions. The fitness scores of the candidate solutions are recalculated based on the updated metadata to reflect the new cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    for candidate in candidates:
        candidate['access_frequency'][obj.key] += 1
        candidate['recency'][obj.key] = cache_snapshot.access_count
        candidate['fitness_score'] = calculate_fitness(candidate)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object into the cache, the policy updates the population of candidate solutions to include the new object. The access frequency and recency metadata for the new object are initialized, and the fitness scores of the candidate solutions are recalculated to account for the new cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    for candidate in candidates:
        candidate['cache'][obj.key] = obj
        candidate['access_frequency'][obj.key] = 1
        candidate['recency'][obj.key] = cache_snapshot.access_count
        candidate['fitness_score'] = calculate_fitness(candidate)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the evicted object from all candidate solutions. The access frequency and recency metadata are updated accordingly, and the fitness scores of the candidate solutions are recalculated to reflect the new cache state without the evicted object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    for candidate in candidates:
        if evicted_obj.key in candidate['cache']:
            del candidate['cache'][evicted_obj.key]
            del candidate['access_frequency'][evicted_obj.key]
            del candidate['recency'][evicted_obj.key]
        candidate['fitness_score'] = calculate_fitness(candidate)