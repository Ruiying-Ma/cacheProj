# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for access frequency
BETA = 0.2   # Weight for last access time
GAMMA = 0.2  # Weight for predicted future access time
DELTA = 0.1  # Weight for contextual integrity score

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, predicted future access time, and contextual integrity score for each cache entry.
metadata = {}

def calculate_composite_score(key, current_time):
    entry = metadata[key]
    access_frequency = entry['access_frequency']
    last_access_time = entry['last_access_time']
    predicted_future_access_time = entry['predicted_future_access_time']
    contextual_integrity_score = entry['contextual_integrity_score']
    
    composite_score = (ALPHA * access_frequency +
                       BETA * (current_time - last_access_time) +
                       GAMMA * predicted_future_access_time +
                       DELTA * contextual_integrity_score)
    return composite_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score for each entry based on its access frequency, last access time, predicted future access time, and contextual integrity score. The entry with the lowest composite score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_score = float('inf')
    current_time = cache_snapshot.access_count
    
    for key in cache_snapshot.cache:
        score = calculate_composite_score(key, current_time)
        if score < lowest_score:
            lowest_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, updates the last access time to the current time, recalculates the predicted future access time using predictive heuristics, and adjusts the contextual integrity score based on the current context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key
    
    metadata[key]['access_frequency'] += 1
    metadata[key]['last_access_time'] = current_time
    metadata[key]['predicted_future_access_time'] = current_time + 10  # Example heuristic
    metadata[key]['contextual_integrity_score'] = 1  # Example adjustment

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, predicts the future access time using predictive heuristics, and assigns an initial contextual integrity score based on the insertion context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key
    
    metadata[key] = {
        'access_frequency': 1,
        'last_access_time': current_time,
        'predicted_future_access_time': current_time + 10,  # Example heuristic
        'contextual_integrity_score': 1  # Example initial score
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an entry, the policy recalculates the composite scores for the remaining entries to ensure they reflect the current cache state and context, and adjusts the cognitive load balancing parameters to optimize future eviction decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    current_time = cache_snapshot.access_count
    for key in cache_snapshot.cache:
        calculate_composite_score(key, current_time)