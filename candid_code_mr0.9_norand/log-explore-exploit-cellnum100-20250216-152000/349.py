# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
SAMPLE_SIZE = 5  # Number of items to consider for eviction

# Put the metadata specifically maintained by the policy below. The policy maintains a probability distribution for future access, access count, timestamps, access frequency, last access time, contextual tags, and an entropy score for each cached item.
metadata = {}

def calculate_entropy(access_count, access_frequency):
    if access_count == 0:
        return 0
    p = access_frequency / access_count
    return -p * math.log2(p) if p > 0 else 0

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy uses random sampling to select a subset of cached items and then evicts the item with the highest combined score of entropy, lowest probability of future access, lowest access frequency, and least recent access time, while considering contextual tags to avoid evicting items likely to be needed soon.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    candidates = list(cache_snapshot.cache.keys())[:SAMPLE_SIZE]
    best_score = float('inf')
    
    for key in candidates:
        item_metadata = metadata[key]
        score = (item_metadata['entropy'] - item_metadata['probability'] + 
                 item_metadata['access_frequency'] + 
                 (cache_snapshot.access_count - item_metadata['last_access_time']))
        
        if score < best_score:
            best_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    The policy increments the access count and access frequency, updates the last access time to the current time, recalculates the entropy score, updates the probability distribution using Bayesian inference, and refreshes contextual tags based on the current context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    item_metadata = metadata[key]
    item_metadata['access_count'] += 1
    item_metadata['access_frequency'] += 1
    item_metadata['last_access_time'] = cache_snapshot.access_count
    item_metadata['entropy'] = calculate_entropy(item_metadata['access_count'], item_metadata['access_frequency'])
    # Update probability distribution and contextual tags as needed

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    The policy initializes the probability distribution based on prior knowledge, sets the access count and access frequency to 1, sets the timestamp and last access time to the current time, assigns initial contextual tags based on the current context, and calculates an initial entropy score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata[key] = {
        'access_count': 1,
        'access_frequency': 1,
        'last_access_time': cache_snapshot.access_count,
        'entropy': calculate_entropy(1, 1),
        'probability': 0.5,  # Initial probability, can be adjusted based on prior knowledge
        'contextual_tags': set()  # Initial contextual tags, can be adjusted based on current context
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    The policy removes all metadata associated with the evicted item, adjusts the probability distributions of remaining items if necessary, and recalculates the entropy scores of remaining items to reflect the updated cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    # Adjust probability distributions and recalculate entropy scores for remaining items if necessary
    for key in cache_snapshot.cache:
        item_metadata = metadata[key]
        item_metadata['entropy'] = calculate_entropy(item_metadata['access_count'], item_metadata['access_frequency'])