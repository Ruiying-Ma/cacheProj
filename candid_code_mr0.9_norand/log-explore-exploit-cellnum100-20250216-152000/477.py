# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_ENTROPY_LEVEL = 1.0
BASELINE_SYNAPTIC_WEIGHT = 1.0
HEURISTIC_DIAGNOSTIC_SCORE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including quantum encryption keys, entropy levels of data blocks, synaptic weights representing access patterns, and heuristic diagnostic scores for each cache entry.
metadata = {
    'entropy_levels': {},
    'synaptic_weights': {},
    'heuristic_scores': {},
    'quantum_keys': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the cache entry with the lowest combined score of entropy level and synaptic weight, adjusted by a heuristic diagnostic scan that predicts future access likelihood.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        entropy = metadata['entropy_levels'].get(key, INITIAL_ENTROPY_LEVEL)
        synaptic_weight = metadata['synaptic_weights'].get(key, BASELINE_SYNAPTIC_WEIGHT)
        heuristic_score = metadata['heuristic_scores'].get(key, HEURISTIC_DIAGNOSTIC_SCORE)
        
        combined_score = entropy + synaptic_weight - heuristic_score
        
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the entropy level to reflect the increased predictability, adjusts the synaptic weight to strengthen the access pattern, and recalculates the heuristic diagnostic score to account for the recent access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['entropy_levels'][key] = metadata['entropy_levels'].get(key, INITIAL_ENTROPY_LEVEL) * 0.9
    metadata['synaptic_weights'][key] = metadata['synaptic_weights'].get(key, BASELINE_SYNAPTIC_WEIGHT) + 1
    metadata['heuristic_scores'][key] = metadata['heuristic_scores'].get(key, HEURISTIC_DIAGNOSTIC_SCORE) + 0.5

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the quantum encryption key, sets the initial entropy level, assigns a baseline synaptic weight, and performs a heuristic diagnostic scan to establish an initial score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['entropy_levels'][key] = INITIAL_ENTROPY_LEVEL
    metadata['synaptic_weights'][key] = BASELINE_SYNAPTIC_WEIGHT
    metadata['heuristic_scores'][key] = HEURISTIC_DIAGNOSTIC_SCORE
    metadata['quantum_keys'][key] = f"QK_{key}"

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy rebalances the remaining entries by recalculating their entropy levels, adjusting synaptic weights to reflect the new cache state, and updating heuristic diagnostic scores to ensure accurate future predictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['entropy_levels']:
        del metadata['entropy_levels'][evicted_key]
    if evicted_key in metadata['synaptic_weights']:
        del metadata['synaptic_weights'][evicted_key]
    if evicted_key in metadata['heuristic_scores']:
        del metadata['heuristic_scores'][evicted_key]
    if evicted_key in metadata['quantum_keys']:
        del metadata['quantum_keys'][evicted_key]
    
    for key in cache_snapshot.cache:
        metadata['entropy_levels'][key] = metadata['entropy_levels'].get(key, INITIAL_ENTROPY_LEVEL) * 1.1
        metadata['synaptic_weights'][key] = max(metadata['synaptic_weights'].get(key, BASELINE_SYNAPTIC_WEIGHT) - 0.5, 0)
        metadata['heuristic_scores'][key] = max(metadata['heuristic_scores'].get(key, HEURISTIC_DIAGNOSTIC_SCORE) - 0.2, 0)