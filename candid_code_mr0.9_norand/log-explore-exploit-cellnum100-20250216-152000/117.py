# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
DEFAULT_DATA_CONSISTENCY_FLAG = 1
INITIAL_PARALLEL_PROCESSING_PRIORITY = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, data consistency flags, and parallel processing priority levels for each cache entry.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'data_consistency_flag': {},
    'parallel_processing_priority': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, oldest last access timestamp, low data consistency importance, and low parallel processing priority.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_freq = metadata['access_frequency'][key]
        last_access = metadata['last_access_timestamp'][key]
        data_consistency = metadata['data_consistency_flag'][key]
        parallel_priority = metadata['parallel_processing_priority'][key]
        
        score = (access_freq * 0.25) + (last_access * 0.25) + (data_consistency * 0.25) + (parallel_priority * 0.25)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the last access timestamp to the current time, and adjusts the parallel processing priority based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['parallel_processing_priority'][key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, assigns a default data consistency flag, and sets an initial parallel processing priority level.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['data_consistency_flag'][key] = DEFAULT_DATA_CONSISTENCY_FLAG
    metadata['parallel_processing_priority'][key] = INITIAL_PARALLEL_PROCESSING_PRIORITY

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalculates the average access frequency and timestamp for the remaining entries, and rebalances the parallel processing priority levels to ensure optimal performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_timestamp'][evicted_key]
    del metadata['data_consistency_flag'][evicted_key]
    del metadata['parallel_processing_priority'][evicted_key]
    
    total_access_freq = sum(metadata['access_frequency'].values())
    total_last_access = sum(metadata['last_access_timestamp'].values())
    num_entries = len(cache_snapshot.cache)
    
    if num_entries > 0:
        avg_access_freq = total_access_freq / num_entries
        avg_last_access = total_last_access / num_entries
        
        for key in metadata['parallel_processing_priority']:
            metadata['parallel_processing_priority'][key] = int(avg_access_freq + avg_last_access)