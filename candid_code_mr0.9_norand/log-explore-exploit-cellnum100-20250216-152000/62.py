# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
PREDICTIVE_SCORE_DECAY = 0.9

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, temporal access patterns, semantic tags of data, and predictive scores for future access likelihood.
access_frequency = {}
temporal_access_pattern = {}
predictive_scores = {}
semantic_tags = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by combining the least frequently accessed data, the least recently used data, and the lowest predictive score for future access, while also considering semantic relevance to ongoing tasks.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (access_frequency[key] + 
                 (cache_snapshot.access_count - temporal_access_pattern[key]) + 
                 predictive_scores[key])
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, refines the temporal access pattern, and recalculates the predictive score for future access based on the latest access time and semantic context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] += 1
    temporal_access_pattern[key] = cache_snapshot.access_count
    predictive_scores[key] = PREDICTIVE_SCORE_DECAY * predictive_scores[key] + 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, records the current time for temporal pattern analysis, assigns semantic tags, and computes an initial predictive score for future access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 1
    temporal_access_pattern[key] = cache_snapshot.access_count
    predictive_scores[key] = 1
    semantic_tags[key] = "default_tag"  # Placeholder for actual semantic tagging logic

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata, adjusts the predictive models to account for the change, and updates the semantic context to reflect the current cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    del access_frequency[key]
    del temporal_access_pattern[key]
    del predictive_scores[key]
    del semantic_tags[key]