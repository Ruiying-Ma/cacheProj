# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
INITIAL_PREDICTIVE_SCORE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, and a predictive score based on usage pattern analysis. It also tracks the cache miss rate and resource utilization metrics.
metadata = {
    'access_frequency': {},  # key -> frequency
    'last_access_time': {},  # key -> last access time
    'predictive_score': {},  # key -> predictive score
    'miss_rate': 0.0,        # cache miss rate
    'resource_utilization': 0.0  # resource utilization metric
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by combining the least frequently used (LFU) and least recently used (LRU) strategies, adjusted by a predictive score that forecasts future access patterns. The item with the lowest combined score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = math.inf

    for key, cached_obj in cache_snapshot.cache.items():
        frequency = metadata['access_frequency'].get(key, 0)
        last_access = metadata['last_access_time'].get(key, 0)
        predictive_score = metadata['predictive_score'].get(key, INITIAL_PREDICTIVE_SCORE)
        
        combined_score = frequency + (cache_snapshot.access_count - last_access) + predictive_score
        
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the access frequency is incremented, the last access time is updated to the current time, and the predictive score is recalculated based on recent usage patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['predictive_score'][key] = calculate_predictive_score(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the access frequency is initialized, the last access time is set to the current time, and an initial predictive score is assigned based on the object's usage pattern analysis.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['predictive_score'][key] = INITIAL_PREDICTIVE_SCORE

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalculates the cache miss rate and adjusts resource optimization parameters to ensure efficient cache utilization. The metadata of the remaining objects is also updated to reflect the change in the cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_time']:
        del metadata['last_access_time'][evicted_key]
    if evicted_key in metadata['predictive_score']:
        del metadata['predictive_score'][evicted_key]

    # Recalculate miss rate
    metadata['miss_rate'] = cache_snapshot.miss_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)
    
    # Adjust resource utilization
    metadata['resource_utilization'] = cache_snapshot.size / cache_snapshot.capacity

def calculate_predictive_score(key):
    '''
    This function calculates the predictive score based on recent usage patterns.
    - Args:
        - `key`: The key of the object.
    - Return:
        - `predictive_score`: The calculated predictive score.
    '''
    # For simplicity, we use a basic heuristic for predictive score calculation.
    frequency = metadata['access_frequency'].get(key, 0)
    last_access = metadata['last_access_time'].get(key, 0)
    predictive_score = 1 / (1 + frequency) + (1 / (1 + last_access))
    return predictive_score