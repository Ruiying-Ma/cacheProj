# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 0.4
WEIGHT_LAST_ACCESS_TIME = 0.2
WEIGHT_PREDICTED_FUTURE_ACCESS = 0.3
WEIGHT_COGNITIVE_LOAD = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, predicted future access time, and cognitive load score for each cached object.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'predicted_future_access_time': {},
    'cognitive_load_score': {}
}

def calculate_composite_score(key, current_time):
    access_frequency = metadata['access_frequency'].get(key, 0)
    last_access_time = metadata['last_access_timestamp'].get(key, 0)
    predicted_future_access = metadata['predicted_future_access_time'].get(key, float('inf'))
    cognitive_load = metadata['cognitive_load_score'].get(key, 0)
    
    time_since_last_access = current_time - last_access_time
    
    composite_score = (
        WEIGHT_ACCESS_FREQUENCY * access_frequency +
        WEIGHT_LAST_ACCESS_TIME * time_since_last_access +
        WEIGHT_PREDICTED_FUTURE_ACCESS * predicted_future_access +
        WEIGHT_COGNITIVE_LOAD * cognitive_load
    )
    
    return composite_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score for each object, which is a weighted sum of its access frequency, time since last access, predicted future access time, and cognitive load score. The object with the lowest composite score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_score = float('inf')
    current_time = cache_snapshot.access_count
    
    for key in cache_snapshot.cache:
        score = calculate_composite_score(key, current_time)
        if score < lowest_score:
            lowest_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency is incremented, the last access timestamp is updated to the current time, the predicted future access time is adjusted based on recent access patterns, and the cognitive load score is recalculated.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_timestamp'][key] = current_time
    metadata['predicted_future_access_time'][key] = current_time + 1 / (metadata['access_frequency'][key] + 1)
    metadata['cognitive_load_score'][key] = math.log(1 + obj.size)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its access frequency is initialized, the last access timestamp is set to the current time, the predicted future access time is estimated based on initial access patterns, and the cognitive load score is computed based on the object's characteristics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = current_time
    metadata['predicted_future_access_time'][key] = current_time + 1
    metadata['cognitive_load_score'][key] = math.log(1 + obj.size)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy recalculates the cognitive load scores for the remaining objects to ensure they reflect the current cache state, and adjusts the predicted future access times based on the new cache composition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_timestamp']:
        del metadata['last_access_timestamp'][evicted_key]
    if evicted_key in metadata['predicted_future_access_time']:
        del metadata['predicted_future_access_time'][evicted_key]
    if evicted_key in metadata['cognitive_load_score']:
        del metadata['cognitive_load_score'][evicted_key]
    
    current_time = cache_snapshot.access_count
    for key in cache_snapshot.cache:
        metadata['cognitive_load_score'][key] = math.log(1 + cache_snapshot.cache[key].size)
        metadata['predicted_future_access_time'][key] = current_time + 1 / (metadata['access_frequency'][key] + 1)