# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict, deque

# Put tunable constant parameters below
ADAPTIVE_THRESHOLD = 0.5  # This can be tuned based on the desired behavior

# Put the metadata specifically maintained by the policy below. The policy maintains a dynamic frequency counter for each object, a queue for balancing based on access frequency, an adaptive insertion threshold, and a temporal locality score for each object.
frequency_counter = defaultdict(int)
temporal_locality_score = {}
access_queue = deque()
adaptive_threshold = ADAPTIVE_THRESHOLD

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the object with the lowest combined score of frequency and temporal locality, ensuring queue balance by considering the adaptive insertion threshold.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        freq = frequency_counter[key]
        locality = temporal_locality_score[key]
        score = freq + locality
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the frequency counter of the accessed object, updates its position in the queue to reflect its new frequency, and recalculates its temporal locality score based on the current time.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    frequency_counter[key] += 1
    temporal_locality_score[key] = cache_snapshot.access_count
    
    # Update the position in the queue
    if key in access_queue:
        access_queue.remove(key)
    access_queue.append(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its frequency counter, places it in the appropriate position in the queue based on the adaptive insertion threshold, and sets its initial temporal locality score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    frequency_counter[key] = 1
    temporal_locality_score[key] = cache_snapshot.access_count
    
    # Place in the queue based on the adaptive insertion threshold
    if len(access_queue) < adaptive_threshold * cache_snapshot.capacity:
        access_queue.appendleft(key)
    else:
        access_queue.append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy rebalances the queue if necessary, adjusts the adaptive insertion threshold based on the current cache state, and updates the temporal locality scores of remaining objects to reflect the new cache composition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    # Remove evicted object from metadata
    if evicted_key in frequency_counter:
        del frequency_counter[evicted_key]
    if evicted_key in temporal_locality_score:
        del temporal_locality_score[evicted_key]
    if evicted_key in access_queue:
        access_queue.remove(evicted_key)
    
    # Adjust the adaptive insertion threshold
    adaptive_threshold = len(cache_snapshot.cache) / cache_snapshot.capacity
    
    # Update temporal locality scores of remaining objects
    for key in cache_snapshot.cache:
        temporal_locality_score[key] = cache_snapshot.access_count - temporal_locality_score[key]