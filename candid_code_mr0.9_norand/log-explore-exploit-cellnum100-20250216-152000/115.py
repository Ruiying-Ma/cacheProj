# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
LATENCY_WEIGHT = 0.5
FREQUENCY_WEIGHT = 0.3
PREFETCH_SCORE_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, data retrieval speed, and a predictive prefetching score for each cached object.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'data_retrieval_speed': {},
    'predictive_prefetching_score': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combined score derived from low access frequency, high latency, and low predictive prefetching score, prioritizing objects that are least likely to be accessed soon.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'].get(key, 0)
        last_access_time = metadata['last_access_time'].get(key, 0)
        data_retrieval_speed = metadata['data_retrieval_speed'].get(key, 0)
        predictive_prefetching_score = metadata['predictive_prefetching_score'].get(key, 0)
        
        # Calculate the combined score
        score = (LATENCY_WEIGHT * data_retrieval_speed) - (FREQUENCY_WEIGHT * access_frequency) - (PREFETCH_SCORE_WEIGHT * predictive_prefetching_score)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access time to the current time, and adjusts the predictive prefetching score based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    # Update access frequency
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    
    # Update last access time
    metadata['last_access_time'][key] = current_time
    
    # Adjust predictive prefetching score (this is a placeholder, actual calculation may vary)
    metadata['predictive_prefetching_score'][key] = metadata['access_frequency'][key] / (current_time - metadata['last_access_time'].get(key, current_time) + 1)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, and calculates an initial predictive prefetching score based on the object's retrieval speed and expected future access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    # Initialize access frequency
    metadata['access_frequency'][key] = 1
    
    # Set last access time
    metadata['last_access_time'][key] = current_time
    
    # Calculate initial predictive prefetching score (this is a placeholder, actual calculation may vary)
    metadata['predictive_prefetching_score'][key] = 1 / (obj.size + 1)
    
    # Assume data retrieval speed is inversely proportional to size (this is a placeholder, actual calculation may vary)
    metadata['data_retrieval_speed'][key] = 1 / obj.size

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy recalculates the predictive prefetching scores for remaining objects to account for the change in cache composition and updates any global statistics related to access frequency and latency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    # Remove metadata for evicted object
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_time']:
        del metadata['last_access_time'][evicted_key]
    if evicted_key in metadata['data_retrieval_speed']:
        del metadata['data_retrieval_speed'][evicted_key]
    if evicted_key in metadata['predictive_prefetching_score']:
        del metadata['predictive_prefetching_score'][evicted_key]
    
    # Recalculate predictive prefetching scores for remaining objects
    for key in cache_snapshot.cache:
        if key in metadata['access_frequency']:
            metadata['predictive_prefetching_score'][key] = metadata['access_frequency'][key] / (cache_snapshot.access_count - metadata['last_access_time'][key] + 1)