# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
INITIAL_PREDICTED_FUTURE_ACCESS_TIME = 1000

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, predicted future access time, and data flow patterns. It also maps neural pathways to identify related data blocks and synchronizes temporal access patterns.
access_frequency = collections.defaultdict(int)
last_access_time = collections.defaultdict(int)
predicted_future_access_time = collections.defaultdict(lambda: INITIAL_PREDICTED_FUTURE_ACCESS_TIME)
neural_pathways = collections.defaultdict(set)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by evaluating a combination of the least frequently accessed data, the longest time since last access, and the least predicted future access. It also considers data flow patterns to avoid evicting blocks that are likely to be accessed together soon.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (access_frequency[key] * 0.4 + 
                 (cache_snapshot.access_count - last_access_time[key]) * 0.3 + 
                 predicted_future_access_time[key] * 0.3)
        
        if score < min_score and not neural_pathways[obj.key].intersection(neural_pathways[key]):
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and last access time of the accessed block. It also refines the predicted future access time based on the current access pattern and updates the neural pathway mapping to strengthen the connection between related data blocks.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    access_frequency[obj.key] += 1
    last_access_time[obj.key] = cache_snapshot.access_count
    predicted_future_access_time[obj.key] = max(1, predicted_future_access_time[obj.key] - 1)
    
    for key in cache_snapshot.cache:
        if key != obj.key:
            neural_pathways[obj.key].add(key)
            neural_pathways[key].add(obj.key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, sets the current time as the last access time, and predicts its future access time based on initial data flow patterns. It also updates the neural pathway mapping to include the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    access_frequency[obj.key] = 1
    last_access_time[obj.key] = cache_snapshot.access_count
    predicted_future_access_time[obj.key] = INITIAL_PREDICTED_FUTURE_ACCESS_TIME
    
    for key in cache_snapshot.cache:
        if key != obj.key:
            neural_pathways[obj.key].add(key)
            neural_pathways[key].add(obj.key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes its metadata, adjusts the neural pathway mapping to weaken or remove connections related to the evicted block, and recalibrates the temporal synchronization to account for the change in data flow patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del access_frequency[evicted_obj.key]
    del last_access_time[evicted_obj.key]
    del predicted_future_access_time[evicted_obj.key]
    
    for key in neural_pathways[evicted_obj.key]:
        neural_pathways[key].discard(evicted_obj.key)
    
    del neural_pathways[evicted_obj.key]