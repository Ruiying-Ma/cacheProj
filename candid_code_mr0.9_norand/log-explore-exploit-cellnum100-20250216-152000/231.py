# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
SCALE_FACTOR = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains a probability distribution for each cached item, access counts, timestamps, a hash table for data blocks, load balancing scores for cache nodes, a scalability factor, and a parallel processing index.
metadata = {
    'access_count': {},
    'timestamps': {},
    'probability_distribution': {},
    'hash_table': {},
    'load_balancing_scores': {},
    'scalability_factor': SCALE_FACTOR,
    'parallel_processing_index': 0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy uses random sampling to select a subset of cached items and then evicts the item with the lowest combined score of probability of future access, access frequency, and load balancing score, while considering the scalability factor to ensure efficient future load handling.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        prob_future_access = metadata['probability_distribution'].get(key, 0)
        access_freq = metadata['access_count'].get(key, 0)
        load_balancing_score = metadata['load_balancing_scores'].get(key, 0)
        
        combined_score = (prob_future_access + access_freq + load_balancing_score) * metadata['scalability_factor']
        
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access count, updates the probability distribution using Bayesian inference, updates the hash table, increments the load balancing score for the corresponding cache node, adjusts the scalability factor, and updates the parallel processing index.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_count'][key] = metadata['access_count'].get(key, 0) + 1
    metadata['timestamps'][key] = cache_snapshot.access_count
    
    # Update probability distribution using Bayesian inference (simplified)
    metadata['probability_distribution'][key] = metadata['access_count'][key] / (cache_snapshot.access_count + 1)
    
    # Update hash table
    metadata['hash_table'][key] = obj
    
    # Increment load balancing score
    metadata['load_balancing_scores'][key] = metadata['load_balancing_scores'].get(key, 0) + 1
    
    # Adjust scalability factor
    metadata['scalability_factor'] = SCALE_FACTOR * (1 + math.log(1 + cache_snapshot.access_count))
    
    # Update parallel processing index
    metadata['parallel_processing_index'] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its probability distribution, sets its access count and timestamp, updates the hash table, recalculates the load balancing score for the affected cache node, adjusts the scalability factor, and updates the parallel processing index.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_count'][key] = 1
    metadata['timestamps'][key] = cache_snapshot.access_count
    metadata['probability_distribution'][key] = 1 / (cache_snapshot.access_count + 1)
    metadata['hash_table'][key] = obj
    metadata['load_balancing_scores'][key] = 1
    metadata['scalability_factor'] = SCALE_FACTOR * (1 + math.log(1 + cache_snapshot.access_count))
    metadata['parallel_processing_index'] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the item's metadata, adjusts the probability distributions of remaining items, removes the data block from the hash table, recalculates the load balancing score for the affected cache node, adjusts the scalability factor, and updates the parallel processing index.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_count']:
        del metadata['access_count'][evicted_key]
    if evicted_key in metadata['timestamps']:
        del metadata['timestamps'][evicted_key]
    if evicted_key in metadata['probability_distribution']:
        del metadata['probability_distribution'][evicted_key]
    if evicted_key in metadata['hash_table']:
        del metadata['hash_table'][evicted_key]
    if evicted_key in metadata['load_balancing_scores']:
        del metadata['load_balancing_scores'][evicted_key]
    
    # Adjust probability distributions of remaining items
    total_accesses = sum(metadata['access_count'].values())
    for key in metadata['probability_distribution']:
        metadata['probability_distribution'][key] = metadata['access_count'][key] / (total_accesses + 1)
    
    # Recalculate load balancing score
    for key in metadata['load_balancing_scores']:
        metadata['load_balancing_scores'][key] = metadata['access_count'][key]
    
    # Adjust scalability factor
    metadata['scalability_factor'] = SCALE_FACTOR * (1 + math.log(1 + cache_snapshot.access_count))
    
    # Update parallel processing index
    metadata['parallel_processing_index'] += 1