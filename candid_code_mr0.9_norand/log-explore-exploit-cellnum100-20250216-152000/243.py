# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
BAYESIAN_SCORE_WEIGHT = 0.5
TEMPORAL_COHERENCE_WEIGHT = 0.3
CONTEXTUAL_RELEVANCE_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, contextual tags (e.g., user behavior patterns), and a Bayesian score representing the likelihood of future access.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'contextual_tags': {},
    'bayesian_score': {}
}

def calculate_composite_score(key, current_time):
    access_frequency = metadata['access_frequency'].get(key, 0)
    last_access_time = metadata['last_access_time'].get(key, 0)
    bayesian_score = metadata['bayesian_score'].get(key, 0)
    contextual_relevance = metadata['contextual_tags'].get(key, 1)  # Default to 1 if no tags

    temporal_coherence = current_time - last_access_time
    composite_score = (BAYESIAN_SCORE_WEIGHT * bayesian_score +
                       TEMPORAL_COHERENCE_WEIGHT * temporal_coherence +
                       CONTEXTUAL_RELEVANCE_WEIGHT * contextual_relevance)
    return composite_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score for each cache entry, which combines the Bayesian score, temporal coherence (recency of access), and contextual relevance. The entry with the lowest composite score is selected for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_score = math.inf
    current_time = cache_snapshot.access_count

    for key in cache_snapshot.cache:
        score = calculate_composite_score(key, current_time)
        if score < lowest_score:
            lowest_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the last access time, increments the access frequency, and recalculates the Bayesian score based on the updated access pattern and contextual tags.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count

    metadata['last_access_time'][key] = current_time
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['bayesian_score'][key] = calculate_bayesian_score(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the last access time to the current time, sets the access frequency to one, assigns contextual tags based on the insertion context, and computes an initial Bayesian score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count

    metadata['last_access_time'][key] = current_time
    metadata['access_frequency'][key] = 1
    metadata['contextual_tags'][key] = 1  # Assign default contextual tag
    metadata['bayesian_score'][key] = calculate_bayesian_score(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy re-evaluates the contextual tags and Bayesian scores of the remaining entries to ensure they reflect the current access patterns and context, potentially adjusting scores to maintain optimal cache performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    for key in cache_snapshot.cache:
        metadata['bayesian_score'][key] = calculate_bayesian_score(key)

def calculate_bayesian_score(key):
    # Placeholder for Bayesian score calculation logic
    # This should be based on access patterns and contextual tags
    access_frequency = metadata['access_frequency'].get(key, 0)
    contextual_relevance = metadata['contextual_tags'].get(key, 1)
    return access_frequency * contextual_relevance