# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for access frequency
BETA = 0.3   # Weight for recency of access
GAMMA = 0.1  # Weight for deviation from typical access patterns
DELTA = 0.1  # Weight for predictive maintenance score

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, access pattern index, and a predictive score based on historical data and resource usage statistics.
metadata = {
    'access_frequency': {},  # key -> frequency
    'last_access_time': {},  # key -> last access time
    'access_pattern_index': {},  # key -> access pattern index
    'predictive_score': {}  # key -> predictive score
}

def calculate_composite_score(key, current_time):
    freq = metadata['access_frequency'].get(key, 1)
    last_access = metadata['last_access_time'].get(key, current_time)
    pattern_index = metadata['access_pattern_index'].get(key, 0)
    predictive_score = metadata['predictive_score'].get(key, 0)
    
    freq_score = 1 / freq
    recency_score = current_time - last_access
    pattern_score = abs(pattern_index - current_time)
    
    composite_score = (ALPHA * freq_score) + (BETA * recency_score) + (GAMMA * pattern_score) + (DELTA * predictive_score)
    return composite_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score for each cache entry, which combines the inverse of access frequency, recency of access, deviation from typical access patterns, and predictive maintenance score. The entry with the lowest composite score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = math.inf
    current_time = cache_snapshot.access_count
    
    for key in cache_snapshot.cache:
        score = calculate_composite_score(key, current_time)
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency by incrementing it, records the current time as the last access time, updates the access pattern index based on recent access behavior, and recalculates the predictive score using updated historical data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = current_time
    metadata['access_pattern_index'][key] = current_time  # Simplified for this example
    metadata['predictive_score'][key] = 0  # Simplified for this example

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the current time as the last access time, initializes the access pattern index based on initial access behavior, and calculates an initial predictive score using available historical data and resource usage statistics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = current_time
    metadata['access_pattern_index'][key] = current_time  # Simplified for this example
    metadata['predictive_score'][key] = 0  # Simplified for this example

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata for the evicted entry, recalibrates the predictive scores for remaining entries based on the updated cache state, and adjusts resource usage statistics to reflect the new cache composition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    # Remove metadata for evicted entry
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_time']:
        del metadata['last_access_time'][evicted_key]
    if evicted_key in metadata['access_pattern_index']:
        del metadata['access_pattern_index'][evicted_key]
    if evicted_key in metadata['predictive_score']:
        del metadata['predictive_score'][evicted_key]
    
    # Recalibrate predictive scores for remaining entries
    current_time = cache_snapshot.access_count
    for key in cache_snapshot.cache:
        metadata['predictive_score'][key] = 0  # Simplified for this example