# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for time since last access
BETA = 0.3   # Weight for access frequency
GAMMA = 0.1  # Weight for predicted next access time
DELTA = 0.1  # Weight for access latency

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry including last access time, access frequency, predicted next access time using a heuristic model, and access latency. Additionally, it tracks the computational load of the system to adjust its behavior dynamically.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score that combines the temporal dynamics (time since last access), access frequency, predicted next access time, and access latency. Entries with the lowest scores are evicted first, with adjustments made based on current computational load to balance performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        time_since_last_access = cache_snapshot.access_count - meta['last_access_time']
        access_frequency = meta['access_frequency']
        predicted_next_access_time = meta['predicted_next_access_time']
        access_latency = meta['access_latency']
        
        score = (ALPHA * time_since_last_access) - (BETA * access_frequency) + (GAMMA * predicted_next_access_time) + (DELTA * access_latency)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the last access time to the current time, increments the access frequency, recalculates the predicted next access time using the heuristic model, and adjusts the access latency based on recent access patterns. It also considers the current computational load to fine-tune these updates.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    meta = metadata[key]
    meta['last_access_time'] = cache_snapshot.access_count
    meta['access_frequency'] += 1
    meta['predicted_next_access_time'] = cache_snapshot.access_count + 1 / meta['access_frequency']
    meta['access_latency'] = (meta['access_latency'] + (cache_snapshot.access_count - meta['last_access_time'])) / 2

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the last access time to the current time, sets the access frequency to one, predicts the next access time using the heuristic model, and records the initial access latency. It also takes into account the current computational load to set initial values appropriately.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'last_access_time': cache_snapshot.access_count,
        'access_frequency': 1,
        'predicted_next_access_time': cache_snapshot.access_count + 1,
        'access_latency': 0
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy recalculates the weighted scores for remaining entries, adjusts the predicted next access times, and updates the access latency metrics to reflect the reduced cache size. It also re-evaluates the computational load to ensure optimal performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    for key, meta in metadata.items():
        meta['predicted_next_access_time'] = cache_snapshot.access_count + 1 / meta['access_frequency']
        meta['access_latency'] = (meta['access_latency'] + (cache_snapshot.access_count - meta['last_access_time'])) / 2