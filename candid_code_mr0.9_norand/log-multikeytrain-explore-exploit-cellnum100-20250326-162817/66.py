# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for contextual relevance score
BETA = 0.3   # Weight for pattern detection score
GAMMA = 0.2  # Weight for reward score

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, contextual relevance score, pattern detection score, and a reward score for each cached object. Additionally, it keeps a history of recent access patterns to dynamically adjust priorities.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'contextual_relevance': {},  # {obj.key: relevance_score}
    'pattern_detection': {},  # {obj.key: pattern_score}
    'reward_score': {},  # {obj.key: reward_score}
    'access_history': []  # List of recently accessed keys
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by evaluating a composite score derived from the access frequency, contextual relevance, pattern detection, and reward score. The object with the lowest composite score is selected for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_composite_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_freq = metadata['access_frequency'].get(key, 0)
        contextual_relevance = metadata['contextual_relevance'].get(key, 0)
        pattern_detection = metadata['pattern_detection'].get(key, 0)
        reward_score = metadata['reward_score'].get(key, 0)
        
        composite_score = (access_freq + 
                           ALPHA * contextual_relevance + 
                           BETA * pattern_detection + 
                           GAMMA * reward_score)
        
        if composite_score < min_composite_score:
            min_composite_score = composite_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency is incremented, the contextual relevance score is updated based on recent access patterns, the pattern detection score is adjusted, and the reward score is increased to reflect the object's continued importance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['contextual_relevance'][key] = calculate_contextual_relevance(key)
    metadata['pattern_detection'][key] = calculate_pattern_detection(key)
    metadata['reward_score'][key] = metadata['reward_score'].get(key, 0) + 1
    metadata['access_history'].append(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata with default values, updates the contextual relevance score based on the current access context, and adjusts the pattern detection score to integrate the new object into the existing access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['contextual_relevance'][key] = calculate_contextual_relevance(key)
    metadata['pattern_detection'][key] = calculate_pattern_detection(key)
    metadata['reward_score'][key] = 1
    metadata['access_history'].append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy recalculates the composite scores for the remaining objects, updates the contextual relevance and pattern detection scores to reflect the removal, and adjusts the reward scores to optimize future eviction decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['contextual_relevance']:
        del metadata['contextual_relevance'][evicted_key]
    if evicted_key in metadata['pattern_detection']:
        del metadata['pattern_detection'][evicted_key]
    if evicted_key in metadata['reward_score']:
        del metadata['reward_score'][evicted_key]
    
    for key in cache_snapshot.cache:
        metadata['contextual_relevance'][key] = calculate_contextual_relevance(key)
        metadata['pattern_detection'][key] = calculate_pattern_detection(key)
        metadata['reward_score'][key] = metadata['reward_score'].get(key, 0) + 1

def calculate_contextual_relevance(key):
    '''
    Calculate the contextual relevance score for a given key based on recent access patterns.
    - Args:
        - `key`: The key of the object.
    - Return: `contextual_relevance_score`: The calculated contextual relevance score.
    '''
    # Example implementation: relevance based on recent access history
    recent_accesses = metadata['access_history'][-10:]  # Last 10 accesses
    return recent_accesses.count(key)

def calculate_pattern_detection(key):
    '''
    Calculate the pattern detection score for a given key based on access patterns.
    - Args:
        - `key`: The key of the object.
    - Return: `pattern_detection_score`: The calculated pattern detection score.
    '''
    # Example implementation: pattern score based on frequency in recent history
    recent_accesses = metadata['access_history'][-50:]  # Last 50 accesses
    return recent_accesses.count(key)