# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import heapq
from collections import defaultdict, deque

# Put tunable constant parameters below
T1_CAPACITY_RATIO = 0.5  # Ratio of T1 capacity to total cache capacity

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency timestamp, size, access pattern score, and queue membership (T1, T2, B1, B2) for each cached object. It also keeps a global priority queue for ranking objects based on a composite priority score derived from these factors.
metadata = {
    'access_frequency': defaultdict(int),
    'recency_timestamp': {},
    'size': {},
    'access_pattern_score': {},
    'composite_priority_score': {},
    'queue_membership': {},  # 'T1', 'T2', 'B1', 'B2'
    'priority_queue': [],
    'T1': deque(),
    'T2': deque(),
    'B1': deque(),
    'B2': deque()
}

def calculate_composite_priority_score(obj_key):
    freq = metadata['access_frequency'][obj_key]
    recency = metadata['recency_timestamp'][obj_key]
    size = metadata['size'][obj_key]
    pattern_score = metadata['access_pattern_score'][obj_key]
    return freq + recency - size + pattern_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first checking T1 and evicting the least-recently-used object if T1 is not empty. If T1 is empty, it evicts the object with the lowest composite priority score from the global priority queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    if metadata['T1']:
        candid_obj_key = metadata['T1'].popleft()
    else:
        while metadata['priority_queue']:
            _, candid_obj_key = heapq.heappop(metadata['priority_queue'])
            if candid_obj_key in cache_snapshot.cache:
                break
        else:
            candid_obj_key = None
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the recency timestamp, recalculates the access pattern score, updates the composite priority score, and moves the object to the most-recently-used end of T2.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    obj_key = obj.key
    metadata['access_frequency'][obj_key] += 1
    metadata['recency_timestamp'][obj_key] = cache_snapshot.access_count
    metadata['access_pattern_score'][obj_key] = metadata['access_frequency'][obj_key] / (cache_snapshot.access_count - metadata['recency_timestamp'][obj_key] + 1)
    metadata['composite_priority_score'][obj_key] = calculate_composite_priority_score(obj_key)
    
    if obj_key in metadata['T1']:
        metadata['T1'].remove(obj_key)
    if obj_key in metadata['T2']:
        metadata['T2'].remove(obj_key)
    
    metadata['T2'].append(obj_key)
    metadata['queue_membership'][obj_key] = 'T2'
    heapq.heappush(metadata['priority_queue'], (metadata['composite_priority_score'][obj_key], obj_key))

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency timestamp, size, access pattern score, calculates its initial composite priority score, and inserts it into the global priority queue. If the object was in B1 or B2, it is moved to T2; otherwise, it is placed in T1.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    obj_key = obj.key
    metadata['access_frequency'][obj_key] = 1
    metadata['recency_timestamp'][obj_key] = cache_snapshot.access_count
    metadata['size'][obj_key] = obj.size
    metadata['access_pattern_score'][obj_key] = 1
    metadata['composite_priority_score'][obj_key] = calculate_composite_priority_score(obj_key)
    
    if obj_key in metadata['B1']:
        metadata['B1'].remove(obj_key)
        metadata['T2'].append(obj_key)
        metadata['queue_membership'][obj_key] = 'T2'
    elif obj_key in metadata['B2']:
        metadata['B2'].remove(obj_key)
        metadata['T2'].append(obj_key)
        metadata['queue_membership'][obj_key] = 'T2'
    else:
        metadata['T1'].append(obj_key)
        metadata['queue_membership'][obj_key] = 'T1'
    
    heapq.heappush(metadata['priority_queue'], (metadata['composite_priority_score'][obj_key], obj_key))

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata from the global priority queue. If the object was from T1, it is moved to the rear of B1; if from T2, it is moved to the rear of B2. The policy also adjusts the capacities of T1 and T2 if necessary and removes redundant objects from B1 or B2.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_obj_key = evicted_obj.key
    if evicted_obj_key in metadata['priority_queue']:
        metadata['priority_queue'] = [(score, key) for score, key in metadata['priority_queue'] if key != evicted_obj_key]
        heapq.heapify(metadata['priority_queue'])
    
    if metadata['queue_membership'][evicted_obj_key] == 'T1':
        metadata['B1'].append(evicted_obj_key)
    elif metadata['queue_membership'][evicted_obj_key] == 'T2':
        metadata['B2'].append(evicted_obj_key)
    
    del metadata['access_frequency'][evicted_obj_key]
    del metadata['recency_timestamp'][evicted_obj_key]
    del metadata['size'][evicted_obj_key]
    del metadata['access_pattern_score'][evicted_obj_key]
    del metadata['composite_priority_score'][evicted_obj_key]
    del metadata['queue_membership'][evicted_obj_key]
    
    # Adjust capacities of T1 and T2 if necessary
    T1_capacity = int(T1_CAPACITY_RATIO * cache_snapshot.capacity)
    T2_capacity = cache_snapshot.capacity - T1_capacity
    
    while len(metadata['T1']) > T1_capacity:
        obj_key = metadata['T1'].popleft()
        metadata['B1'].append(obj_key)
        metadata['queue_membership'][obj_key] = 'B1'
    
    while len(metadata['T2']) > T2_capacity:
        obj_key = metadata['T2'].popleft()
        metadata['B2'].append(obj_key)
        metadata['queue_membership'][obj_key] = 'B2'
    
    # Remove redundant objects from B1 or B2
    while len(metadata['B1']) > T1_capacity:
        metadata['B1'].popleft()
    
    while len(metadata['B2']) > T2_capacity:
        metadata['B2'].popleft()