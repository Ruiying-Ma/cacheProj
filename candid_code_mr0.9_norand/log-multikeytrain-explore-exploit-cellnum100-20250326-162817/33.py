# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict, deque

# Put tunable constant parameters below
K = 3  # Number of LRU queues

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, region classification, and recency timestamp for each object. It also keeps k LRU queues, a global time window, and a prediction model for access patterns.
metadata = {
    'access_frequency': defaultdict(int),
    'last_access_time': {},
    'region_classification': {},
    'recency_timestamp': {},
    'lru_queues': [deque() for _ in range(K)],
    'global_time_window': 0,
    'prediction_model': defaultdict(float)  # Simplified prediction model
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first identifies the region with the least recent access. Within that region, it selects the object with the lowest predicted access probability based on the prediction model. If multiple objects have the same predicted access probability, it evicts the least-recently-used object from the LRU queue with the smallest subscript.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    least_recent_region = None
    least_recent_time = float('inf')

    # Identify the region with the least recent access
    for key, last_access in metadata['last_access_time'].items():
        if last_access < least_recent_time:
            least_recent_time = last_access
            least_recent_region = metadata['region_classification'][key]

    # Within that region, find the object with the lowest predicted access probability
    lowest_pred_prob = float('inf')
    for key, region in metadata['region_classification'].items():
        if region == least_recent_region:
            pred_prob = metadata['prediction_model'][key]
            if pred_prob < lowest_pred_prob:
                lowest_pred_prob = pred_prob
                candid_obj_key = key

    # If multiple objects have the same predicted access probability, evict the LRU object from the smallest LRU queue
    if candid_obj_key is None:
        for queue in metadata['lru_queues']:
            if queue:
                candid_obj_key = queue.popleft()
                break

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the last access time, increments the access frequency, and updates the prediction model with the new access pattern. It also updates the recency timestamp and moves the object to the most-recently-used end of the next higher LRU queue, flushing objects as necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['access_frequency'][key] += 1
    metadata['recency_timestamp'][key] = cache_snapshot.access_count
    metadata['prediction_model'][key] = metadata['access_frequency'][key] / (cache_snapshot.access_count + 1)

    # Move the object to the most-recently-used end of the next higher LRU queue
    for i in range(K):
        if key in metadata['lru_queues'][i]:
            metadata['lru_queues'][i].remove(key)
            if i < K - 1:
                metadata['lru_queues'][i + 1].append(key)
            else:
                metadata['lru_queues'][i].append(key)
            break

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy assigns it to a region based on initial access patterns, sets its access frequency to 1, records the current time as the last access time, and updates the prediction model. It sets the recency timestamp and places the object at the most-recently-used end of the L1 queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['recency_timestamp'][key] = cache_snapshot.access_count
    metadata['region_classification'][key] = 0  # Initial region classification
    metadata['prediction_model'][key] = 1 / (cache_snapshot.access_count + 1)
    metadata['lru_queues'][0].append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata, updates the region's statistics, and adjusts the prediction model. It also removes the object from its LRU queue and updates the recency tracking.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    del metadata['access_frequency'][key]
    del metadata['last_access_time'][key]
    del metadata['region_classification'][key]
    del metadata['recency_timestamp'][key]
    del metadata['prediction_model'][key]

    for queue in metadata['lru_queues']:
        if key in queue:
            queue.remove(key)
            break