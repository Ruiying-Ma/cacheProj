# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_VISIBILITY_SCORE = 1.0
INITIAL_STABILITY_SCORE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache item, including access frequency, last access time, visibility score (a measure of how often an item is accessed relative to others), and stability score (a measure of how consistent the access pattern is over time).
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the item with the lowest combined score of access frequency, visibility, and stability. If there is a tie, the least recently accessed item among them is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    min_last_access_time = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        combined_score = meta['access_frequency'] + meta['visibility_score'] + meta['stability_score']
        
        if (combined_score < min_score) or (combined_score == min_score and meta['last_access_time'] < min_last_access_time):
            min_score = combined_score
            min_last_access_time = meta['last_access_time']
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, updates the last access time to the current time, recalculates the visibility score based on recent access patterns, and adjusts the stability score to reflect the consistency of access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    meta = metadata[key]
    
    # Update access frequency
    meta['access_frequency'] += 1
    
    # Update last access time
    meta['last_access_time'] = cache_snapshot.access_count
    
    # Recalculate visibility score
    meta['visibility_score'] = meta['access_frequency'] / (cache_snapshot.access_count + 1)
    
    # Adjust stability score
    meta['stability_score'] = 1.0 / (1 + abs(meta['access_frequency'] - meta['last_access_time']))

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, assigns an initial visibility score based on the current cache state, and sets an initial stability score reflecting the expected access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'access_frequency': 1,
        'last_access_time': cache_snapshot.access_count,
        'visibility_score': INITIAL_VISIBILITY_SCORE,
        'stability_score': INITIAL_STABILITY_SCORE
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy recalculates the visibility and stability scores for the remaining items to ensure they reflect the current state of the cache, and adjusts the access frequencies if necessary to maintain accurate tracking.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        
        # Recalculate visibility score
        meta['visibility_score'] = meta['access_frequency'] / (cache_snapshot.access_count + 1)
        
        # Adjust stability score
        meta['stability_score'] = 1.0 / (1 + abs(meta['access_frequency'] - meta['last_access_time']))