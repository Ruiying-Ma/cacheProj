# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_PRIORITY_LEVEL = 1
INITIAL_ENERGY_LEVEL = 100

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, dynamic priority score, region classification, priority level, prediction model for access patterns, FIFO queue, priority queue, circular pointer for traversal, recency, exchange count, and energy level. It also tracks multiple copies of frequently accessed data and overall access patterns and usage statistics.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'priority_score': {},
    'region_classification': {},
    'priority_level': {},
    'prediction_model': {},
    'fifo_queue': [],
    'priority_queue': [],
    'circular_pointer': 0,
    'recency': {},
    'exchange_count': {},
    'energy_level': {},
    'multiple_copies': {},
    'overall_access_patterns': {},
    'usage_statistics': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy starts from the current pointer position and moves cyclically, resetting frequencies to 0 until it finds an object with zero frequency. It then checks the region with the least recent access, and within that region, selects the object with the lowest priority level. If multiple objects have the same priority, it evicts the one with the lowest predicted access probability. If there is still a tie, it evicts the least recently accessed object. The energy level is considered to ensure that low-energy objects are prioritized for eviction. If the object has multiple copies, the least recently used copy is evicted first.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    cache_keys = list(cache_snapshot.cache.keys())
    n = len(cache_keys)
    
    # Start from the current pointer position
    for i in range(n):
        index = (metadata['circular_pointer'] + i) % n
        key = cache_keys[index]
        
        # Reset frequency to 0
        metadata['access_frequency'][key] = 0
        
        # Check if the object has zero frequency
        if metadata['access_frequency'][key] == 0:
            candid_obj_key = key
            break
    
    if candid_obj_key is None:
        # If no object with zero frequency is found, use the least recent access region
        least_recent_region = min(metadata['region_classification'], key=metadata['last_access_time'].get)
        candidates = [k for k, v in metadata['region_classification'].items() if v == least_recent_region]
        
        # Select the object with the lowest priority level
        min_priority_level = min(metadata['priority_level'][k] for k in candidates)
        candidates = [k for k in candidates if metadata['priority_level'][k] == min_priority_level]
        
        # If multiple objects have the same priority, evict the one with the lowest predicted access probability
        if len(candidates) > 1:
            min_predicted_access = min(metadata['prediction_model'][k] for k in candidates)
            candidates = [k for k in candidates if metadata['prediction_model'][k] == min_predicted_access]
        
        # If there is still a tie, evict the least recently accessed object
        if len(candidates) > 1:
            least_recent_access = min(metadata['last_access_time'][k] for k in candidates)
            candidates = [k for k in candidates if metadata['last_access_time'][k] == least_recent_access]
        
        # Consider energy level
        if len(candidates) > 1:
            min_energy_level = min(metadata['energy_level'][k] for k in candidates)
            candidates = [k for k in candidates if metadata['energy_level'][k] == min_energy_level]
        
        # If the object has multiple copies, evict the least recently used copy first
        if len(candidates) > 1:
            for k in candidates:
                if metadata['multiple_copies'].get(k, 0) > 1:
                    candid_obj_key = k
                    break
        else:
            candid_obj_key = candidates[0]
    
    # Update the circular pointer
    metadata['circular_pointer'] = (metadata['circular_pointer'] + 1) % n
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency and frequency count, updates the last access time, recalculates the priority score, adjusts the priority level based on the new frequency count and overall access patterns, updates the prediction model with the new access pattern, adjusts the object's position in both the FIFO and priority queues, updates the recency and exchange count, and recalculates the energy level based on the new access frequency and recency. The overall access patterns and usage statistics are updated to reflect the hit.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    # Increment access frequency and frequency count
    metadata['access_frequency'][key] += 1
    
    # Update last access time
    metadata['last_access_time'][key] = current_time
    
    # Recalculate priority score
    metadata['priority_score'][key] = metadata['access_frequency'][key] / (current_time - metadata['last_access_time'][key] + 1)
    
    # Adjust priority level
    metadata['priority_level'][key] = INITIAL_PRIORITY_LEVEL + metadata['access_frequency'][key]
    
    # Update prediction model
    metadata['prediction_model'][key] = metadata['access_frequency'][key] / current_time
    
    # Adjust object's position in FIFO and priority queues
    if key in metadata['fifo_queue']:
        metadata['fifo_queue'].remove(key)
    metadata['fifo_queue'].append(key)
    
    if key in metadata['priority_queue']:
        metadata['priority_queue'].remove(key)
    metadata['priority_queue'].append(key)
    
    # Update recency and exchange count
    metadata['recency'][key] = current_time
    metadata['exchange_count'][key] += 1
    
    # Recalculate energy level
    metadata['energy_level'][key] = INITIAL_ENERGY_LEVEL - metadata['access_frequency'][key]
    
    # Update overall access patterns and usage statistics
    metadata['overall_access_patterns'][key] = metadata['access_frequency'][key]
    metadata['usage_statistics'][key] = metadata['access_frequency'][key]

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy assigns it to a region based on initial access patterns, sets its access frequency and frequency count to 1, records the current time as the last access time, assigns an initial priority level and score based on its importance and expected access frequency, places it at the rear of the FIFO queue, updates the priority queue, updates the prediction model to include the new object, initializes its recency and exchange count, and sets the energy level based on these initial values. If the object is expected to be frequently accessed, multiple copies may be created. The overall access patterns and usage statistics are updated to reflect the new entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    # Assign to a region based on initial access patterns
    metadata['region_classification'][key] = 'default_region'
    
    # Set access frequency and frequency count to 1
    metadata['access_frequency'][key] = 1
    
    # Record the current time as the last access time
    metadata['last_access_time'][key] = current_time
    
    # Assign an initial priority level and score
    metadata['priority_level'][key] = INITIAL_PRIORITY_LEVEL
    metadata['priority_score'][key] = 1
    
    # Place at the rear of the FIFO queue
    metadata['fifo_queue'].append(key)
    
    # Update the priority queue
    metadata['priority_queue'].append(key)
    
    # Update the prediction model
    metadata['prediction_model'][key] = 1
    
    # Initialize recency and exchange count
    metadata['recency'][key] = current_time
    metadata['exchange_count'][key] = 0
    
    # Set the energy level
    metadata['energy_level'][key] = INITIAL_ENERGY_LEVEL
    
    # If the object is expected to be frequently accessed, create multiple copies
    metadata['multiple_copies'][key] = 1
    
    # Update overall access patterns and usage statistics
    metadata['overall_access_patterns'][key] = 1
    metadata['usage_statistics'][key] = 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata, updates the region's statistics to reflect the eviction, adjusts the prediction model to account for the removal, updates overall access patterns, recalculates priority scores if necessary, updates the partition and cache level metadata, adjusts the priority levels of remaining objects, and removes the object from the front of the FIFO queue. If the evicted object had multiple copies, only the metadata for the least recently used copy is removed, and the remaining copies are updated to reflect the eviction. The overall access patterns and usage statistics are updated to account for the removal.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    
    # Remove metadata
    del metadata['access_frequency'][key]
    del metadata['last_access_time'][key]
    del metadata['priority_score'][key]
    del metadata['region_classification'][key]
    del metadata['priority_level'][key]
    del metadata['prediction_model'][key]
    del metadata['recency'][key]
    del metadata['exchange_count'][key]
    del metadata['energy_level'][key]
    del metadata['overall_access_patterns'][key]
    del metadata['usage_statistics'][key]
    
    # Update the region's statistics
    # (Assuming region statistics are maintained separately)
    
    # Adjust the prediction model
    # (Assuming prediction model is maintained separately)
    
    # Update overall access patterns
    # (Assuming overall access patterns are maintained separately)
    
    # Recalculate priority scores if necessary
    # (Assuming priority scores are recalculated separately)
    
    # Update the partition and cache level metadata
    # (Assuming partition and cache level metadata are maintained separately)
    
    # Adjust the priority levels of remaining objects
    # (Assuming priority levels are adjusted separately)
    
    # Remove the object from the front of the FIFO queue
    if key in metadata['fifo_queue']:
        metadata['fifo_queue'].remove(key)
    
    # If the evicted object had multiple copies, update the remaining copies
    if metadata['multiple_copies'].get(key, 0) > 1:
        metadata['multiple_copies'][key] -= 1
    else:
        del metadata['multiple_copies'][key]
    
    # Update overall access patterns and usage statistics
    # (Assuming overall access patterns and usage statistics are updated separately)