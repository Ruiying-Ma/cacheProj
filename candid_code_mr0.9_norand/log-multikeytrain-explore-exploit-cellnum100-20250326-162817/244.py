# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
PERCEIVED_AGE_DECAY = 0.9

# Put the metadata specifically maintained by the policy below. The policy maintains a dependency graph, access frequency counters, and a perceived age for each cached item. The dependency graph tracks relationships between items, access frequency counters track how often each item is accessed, and perceived age adjusts based on access patterns.
dependency_graph = {}
access_frequency = {}
perceived_age = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by identifying items with the least dependencies, lowest access frequency, and highest perceived age. Items that are least critical to the overall cache performance and have minimal impact on other items are prioritized for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_dependencies = float('inf')
    min_frequency = float('inf')
    max_age = float('-inf')

    for key, cached_obj in cache_snapshot.cache.items():
        dependencies = len(dependency_graph.get(key, []))
        frequency = access_frequency.get(key, 0)
        age = perceived_age.get(key, 0)

        if (dependencies < min_dependencies or
            (dependencies == min_dependencies and frequency < min_frequency) or
            (dependencies == min_dependencies and frequency == min_frequency and age > max_age)):
            candid_obj_key = key
            min_dependencies = dependencies
            min_frequency = frequency
            max_age = age
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency counter for the item is incremented, and its perceived age is adjusted to reflect slower aging. The dependency graph is updated if the access reveals new dependencies.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = access_frequency.get(key, 0) + 1
    perceived_age[key] = perceived_age.get(key, 0) * PERCEIVED_AGE_DECAY

    # Update dependency graph if necessary
    # This is a placeholder for dependency graph update logic
    # dependency_graph[key] = ...

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency counter and perceived age. The dependency graph is updated to include any new dependencies introduced by the insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 1
    perceived_age[key] = cache_snapshot.access_count

    # Initialize dependency graph for the new object
    dependency_graph[key] = []

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy removes it from the dependency graph, adjusts the perceived ages of remaining items if necessary, and recalibrates access frequency counters to ensure accurate tracking of remaining items.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key

    # Remove from dependency graph
    if evicted_key in dependency_graph:
        del dependency_graph[evicted_key]

    # Remove from access frequency and perceived age
    if evicted_key in access_frequency:
        del access_frequency[evicted_key]
    if evicted_key in perceived_age:
        del perceived_age[evicted_key]

    # Adjust perceived ages of remaining items if necessary
    for key in perceived_age:
        perceived_age[key] *= PERCEIVED_AGE_DECAY

    # Recalibrate access frequency counters if necessary
    # This is a placeholder for recalibration logic
    # access_frequency[key] = ...