# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
INITIAL_REWARD_SCORE = 1.0
REWARD_DECAY_FACTOR = 0.9

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, reward score, and a collaborative eviction log shared among multiple caches.
access_frequency = collections.defaultdict(int)
last_access_time = collections.defaultdict(int)
reward_score = collections.defaultdict(lambda: INITIAL_REWARD_SCORE)
collaborative_eviction_log = []

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by evaluating the reward score, access frequency, and last access time, while also considering collaborative eviction suggestions from other caches.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = reward_score[key] / (access_frequency[key] + 1) * (cache_snapshot.access_count - last_access_time[key])
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency, last access time, and recalculates the reward score for the accessed item.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] += 1
    last_access_time[key] = cache_snapshot.access_count
    reward_score[key] = reward_score[key] * REWARD_DECAY_FACTOR + 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency, sets the last access time to the current time, and assigns an initial reward score. It also logs the insertion in the collaborative eviction log.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 1
    last_access_time[key] = cache_snapshot.access_count
    reward_score[key] = INITIAL_REWARD_SCORE
    collaborative_eviction_log.append(('insert', key, cache_snapshot.access_count))

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy updates the collaborative eviction log with the eviction details and adjusts the reward scores of remaining items based on the new cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    collaborative_eviction_log.append(('evict', evicted_key, cache_snapshot.access_count))
    
    # Adjust reward scores of remaining items
    for key in cache_snapshot.cache:
        reward_score[key] *= REWARD_DECAY_FACTOR