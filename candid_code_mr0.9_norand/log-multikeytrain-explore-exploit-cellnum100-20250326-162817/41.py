# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
SEASON_DURATION = 1000  # Number of accesses representing a season

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each item including access frequency, last access time, and a 'season' identifier. It also tracks layers for multi-layered caching and groups for similar items.
metadata = {
    'access_frequency': {},  # key -> access frequency
    'last_access_time': {},  # key -> last access time
    'season': {},            # key -> season identifier
    'group': {},             # key -> group identifier
    'layer': {},             # key -> layer identifier
    'groups': {},            # group_id -> set of keys
    'layers': {},            # layer_id -> set of keys
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first identifying the least recently used group. Within that group, it selects items based on their 'season' and access frequency, prioritizing eviction of items outside the current high-access season.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    current_season = cache_snapshot.access_count // SEASON_DURATION

    # Find the least recently used group
    least_recent_group = None
    least_recent_time = float('inf')
    for group_id, keys in metadata['groups'].items():
        if keys:
            min_time = min(metadata['last_access_time'][key] for key in keys)
            if min_time < least_recent_time:
                least_recent_time = min_time
                least_recent_group = group_id

    # Within the least recently used group, find the eviction candidate
    if least_recent_group is not None:
        candidates = metadata['groups'][least_recent_group]
        for key in candidates:
            if candid_obj_key is None or (
                metadata['season'][key] != current_season and metadata['season'][candid_obj_key] == current_season
            ) or (
                metadata['season'][key] == current_season and metadata['access_frequency'][key] < metadata['access_frequency'][candid_obj_key]
            ):
                candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the last access time and increments the access frequency of the item. It also adjusts the item's position within its group and layer based on the updated metadata.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['access_frequency'][key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy assigns it to a group based on similarity, sets its initial access frequency and last access time, and places it in the appropriate layer. The 'season' identifier is set based on the current time frame.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_season = cache_snapshot.access_count // SEASON_DURATION

    # Assign to a group (for simplicity, using size as a proxy for similarity)
    group_id = obj.size // 100  # Example grouping by size
    if group_id not in metadata['groups']:
        metadata['groups'][group_id] = set()
    metadata['groups'][group_id].add(key)

    # Set initial metadata
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['season'][key] = current_season
    metadata['group'][key] = group_id

    # Assign to a layer (for simplicity, using a single layer)
    layer_id = 0
    if layer_id not in metadata['layers']:
        metadata['layers'][layer_id] = set()
    metadata['layers'][layer_id].add(key)
    metadata['layer'][key] = layer_id

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy updates the metadata by removing the item from its group and layer. It may also adjust the group's metadata to reflect the eviction and potentially rebalance the layers if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key

    # Remove from group
    group_id = metadata['group'][key]
    metadata['groups'][group_id].remove(key)
    if not metadata['groups'][group_id]:
        del metadata['groups'][group_id]

    # Remove from layer
    layer_id = metadata['layer'][key]
    metadata['layers'][layer_id].remove(key)
    if not metadata['layers'][layer_id]:
        del metadata['layers'][layer_id]

    # Remove metadata
    del metadata['access_frequency'][key]
    del metadata['last_access_time'][key]
    del metadata['season'][key]
    del metadata['group'][key]
    del metadata['layer'][key]