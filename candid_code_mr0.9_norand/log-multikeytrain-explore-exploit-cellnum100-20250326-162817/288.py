# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
WEIGHT_LRU = 0.5
WEIGHT_LFU = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, region classification, priority level, a prediction model for access patterns, a compression flag, and a distortion factor for each cached item. It also tracks overall access patterns and a global time window.
metadata = {
    'access_frequency': collections.defaultdict(int),
    'last_access_time': collections.defaultdict(int),
    'region_classification': collections.defaultdict(str),
    'priority_level': collections.defaultdict(int),
    'prediction_model': collections.defaultdict(float),
    'compression_flag': collections.defaultdict(bool),
    'distortion_factor': collections.defaultdict(float),
    'global_time_window': 0,
    'overall_access_patterns': collections.defaultdict(int)
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy identifies the region with the least recent access and probabilistically selects multiple eviction candidates within that region based on a weighted combination of LRU and LFU metrics. It prioritizes items with low access frequency, those marked as compressed, and those with the lowest priority level. If there is a tie, it evicts the one with the lowest predicted access probability and least recently accessed.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    least_recent_region = None
    least_recent_time = float('inf')
    
    # Identify the region with the least recent access
    for key in cache_snapshot.cache:
        region = metadata['region_classification'][key]
        last_access = metadata['last_access_time'][key]
        if last_access < least_recent_time:
            least_recent_time = last_access
            least_recent_region = region
    
    # Collect eviction candidates within the least recent region
    candidates = []
    for key in cache_snapshot.cache:
        if metadata['region_classification'][key] == least_recent_region:
            candidates.append(key)
    
    # Select the eviction candidate based on weighted LRU and LFU metrics
    min_score = float('inf')
    for key in candidates:
        lru_score = cache_snapshot.access_count - metadata['last_access_time'][key]
        lfu_score = metadata['access_frequency'][key]
        combined_score = WEIGHT_LRU * lru_score + WEIGHT_LFU * lfu_score
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key
    
    # Prioritize items with low access frequency, compressed, and lowest priority level
    for key in candidates:
        if metadata['access_frequency'][key] == metadata['access_frequency'][candid_obj_key]:
            if metadata['compression_flag'][key] and not metadata['compression_flag'][candid_obj_key]:
                candid_obj_key = key
            elif metadata['priority_level'][key] < metadata['priority_level'][candid_obj_key]:
                candid_obj_key = key
            elif metadata['priority_level'][key] == metadata['priority_level'][candid_obj_key]:
                if metadata['prediction_model'][key] < metadata['prediction_model'][candid_obj_key]:
                    candid_obj_key = key
                elif metadata['prediction_model'][key] == metadata['prediction_model'][candid_obj_key]:
                    if metadata['last_access_time'][key] < metadata['last_access_time'][candid_obj_key]:
                        candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency and frequency count, updates the last access time, recalculates the distortion factor, and may adjust the priority level based on the new frequency count and overall access patterns. The prediction model is updated with the new access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    metadata['access_frequency'][obj.key] += 1
    metadata['last_access_time'][obj.key] = cache_snapshot.access_count
    metadata['distortion_factor'][obj.key] = 1 / metadata['access_frequency'][obj.key]
    metadata['priority_level'][obj.key] = metadata['access_frequency'][obj.key] // 10
    metadata['prediction_model'][obj.key] = metadata['access_frequency'][obj.key] / cache_snapshot.access_count
    metadata['overall_access_patterns'][obj.key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy assigns it to a region based on initial access patterns, sets its access frequency and frequency count to 1, records the current time as the last access time, marks whether it is compressed, assigns an initial priority level and distortion factor based on its importance and expected access frequency. The prediction model is updated to include the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    metadata['access_frequency'][obj.key] = 1
    metadata['last_access_time'][obj.key] = cache_snapshot.access_count
    metadata['region_classification'][obj.key] = 'default'
    metadata['priority_level'][obj.key] = 1
    metadata['distortion_factor'][obj.key] = 1.0
    metadata['compression_flag'][obj.key] = False
    metadata['prediction_model'][obj.key] = 1 / cache_snapshot.access_count
    metadata['overall_access_patterns'][obj.key] = 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata, updates the region's statistics to reflect the eviction, adjusts the prediction model to account for the removal, recalculates the distortion factors for remaining items, and updates overall access patterns. It may also adjust the priority levels of remaining objects.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    del metadata['access_frequency'][evicted_obj.key]
    del metadata['last_access_time'][evicted_obj.key]
    del metadata['region_classification'][evicted_obj.key]
    del metadata['priority_level'][evicted_obj.key]
    del metadata['prediction_model'][evicted_obj.key]
    del metadata['compression_flag'][evicted_obj.key]
    del metadata['distortion_factor'][evicted_obj.key]
    del metadata['overall_access_patterns'][evicted_obj.key]
    
    # Recalculate distortion factors and update priority levels for remaining items
    for key in cache_snapshot.cache:
        metadata['distortion_factor'][key] = 1 / metadata['access_frequency'][key]
        metadata['priority_level'][key] = metadata['access_frequency'][key] // 10