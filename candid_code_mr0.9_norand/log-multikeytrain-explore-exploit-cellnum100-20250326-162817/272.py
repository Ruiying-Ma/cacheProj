# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
PRIORITY_LEVELS = 5
INITIAL_PRIORITY = 3
FITNESS_INCREMENT = 1
LOCAL_INTERACTION_INCREMENT = 1
EXCHANGE_FREQUENCY_INCREMENT = 1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency counters, timestamps of last access, promotion/demotion flags, object size, priority levels, cache level, fitness score, local interaction score, state indicating access pattern, exchange frequency, and a machine learning model prediction score for future access likelihood.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'promotion_flag': {},
    'object_size': {},
    'priority_level': {},
    'fitness_score': {},
    'local_interaction_score': {},
    'state': {},
    'exchange_frequency': {},
    'ml_prediction_score': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a combined score that includes priority level, access frequency, last access time, object size, fitness score, local interaction score, exchange frequency, and machine learning prediction score. The object with the lowest combined score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        combined_score = (
            metadata['priority_level'][key] +
            metadata['access_frequency'][key] +
            (cache_snapshot.access_count - metadata['last_access_time'][key]) +
            metadata['object_size'][key] +
            metadata['fitness_score'][key] +
            metadata['local_interaction_score'][key] +
            metadata['exchange_frequency'][key] +
            metadata['ml_prediction_score'][key]
        )
        
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency counter is incremented, the timestamp of last access is updated, the promotion/demotion flag is set, the priority level may be adjusted, the fitness score is increased, local interaction scores of neighboring lines are adjusted, the state is updated, and exchange frequency is incremented if necessary. The machine learning model is periodically retrained.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['promotion_flag'][key] = True
    metadata['priority_level'][key] = min(metadata['priority_level'][key] + 1, PRIORITY_LEVELS)
    metadata['fitness_score'][key] += FITNESS_INCREMENT
    metadata['local_interaction_score'][key] += LOCAL_INTERACTION_INCREMENT
    metadata['state'][key] = 'hit'
    metadata['exchange_frequency'][key] += EXCHANGE_FREQUENCY_INCREMENT

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the access frequency counter is initialized, the timestamp of insertion is recorded, the promotion/demotion flag is set, the object size is recorded, the initial priority level is assigned, the fitness score is initialized, local interaction scores of neighboring lines are updated, the state is set, exchange frequency is set to 0, and a prediction score is generated by the machine learning model.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['promotion_flag'][key] = True
    metadata['object_size'][key] = obj.size
    metadata['priority_level'][key] = INITIAL_PRIORITY
    metadata['fitness_score'][key] = 0
    metadata['local_interaction_score'][key] = 0
    metadata['state'][key] = 'inserted'
    metadata['exchange_frequency'][key] = 0
    metadata['ml_prediction_score'][key] = 0  # Placeholder for ML model prediction score

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the metadata for the evicted object is cleared. The promotion/demotion flags and priority levels of remaining objects are adjusted, fitness scores of neighboring lines are adjusted, local interaction scores are recalculated, states of neighboring lines are updated, and the machine learning model may be adjusted based on eviction patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_time'][evicted_key]
    del metadata['promotion_flag'][evicted_key]
    del metadata['object_size'][evicted_key]
    del metadata['priority_level'][evicted_key]
    del metadata['fitness_score'][evicted_key]
    del metadata['local_interaction_score'][evicted_key]
    del metadata['state'][evicted_key]
    del metadata['exchange_frequency'][evicted_key]
    del metadata['ml_prediction_score'][evicted_key]

    # Adjust metadata for remaining objects
    for key in cache_snapshot.cache:
        metadata['promotion_flag'][key] = False
        metadata['priority_level'][key] = max(metadata['priority_level'][key] - 1, 0)
        metadata['fitness_score'][key] = max(metadata['fitness_score'][key] - FITNESS_INCREMENT, 0)
        metadata['local_interaction_score'][key] = max(metadata['local_interaction_score'][key] - LOCAL_INTERACTION_INCREMENT, 0)
        metadata['state'][key] = 'adjusted'