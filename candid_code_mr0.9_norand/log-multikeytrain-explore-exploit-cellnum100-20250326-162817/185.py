# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
LRU_WEIGHT = 0.5
LFU_WEIGHT = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, a compression flag, and a distortion factor for each cached item.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy probabilistically selects multiple eviction candidates based on a weighted combination of LRU and LFU metrics, prioritizing items with low access frequency and those marked as compressed, while dynamically adjusting for items with irregular but critical access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_score = float('inf')
    for key, cached_obj in cache_snapshot.cache.items():
        freq = metadata[key]['access_frequency']
        last_access = metadata[key]['last_access_time']
        compressed = metadata[key]['compressed']
        distortion = metadata[key]['distortion_factor']
        
        score = (LRU_WEIGHT * (cache_snapshot.access_count - last_access) + 
                 LFU_WEIGHT * freq + 
                 (1 if compressed else 0) + 
                 distortion)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and last access time of the item are updated, and the distortion factor is recalculated to reflect the item's new access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata[key]['access_frequency'] += 1
    metadata[key]['last_access_time'] = cache_snapshot.access_count
    metadata[key]['distortion_factor'] = calculate_distortion_factor(metadata[key])

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, sets the last access time to the current time, marks whether it is compressed, and assigns an initial distortion factor.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata[key] = {
        'access_frequency': 1,
        'last_access_time': cache_snapshot.access_count,
        'compressed': False,  # Assuming no compression initially
        'distortion_factor': 0  # Initial distortion factor
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy recalculates the distortion factors for remaining items to ensure that the eviction strategy remains balanced and relevant.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    for key in cache_snapshot.cache:
        metadata[key]['distortion_factor'] = calculate_distortion_factor(metadata[key])

def calculate_distortion_factor(meta):
    '''
    Helper function to calculate the distortion factor based on the metadata.
    - Args:
        - `meta`: Metadata dictionary for a cached object.
    - Return:
        - `distortion_factor`: Calculated distortion factor.
    '''
    # Example calculation, can be adjusted based on specific needs
    return meta['access_frequency'] / (1 + meta['last_access_time'])