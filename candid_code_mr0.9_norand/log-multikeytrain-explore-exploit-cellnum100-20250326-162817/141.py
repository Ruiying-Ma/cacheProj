# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_PRIORITY = 1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency counters, recency timestamps, collaborative access statistics, region classification, priority levels, and a prediction model for access patterns. It also tracks overall access patterns and a global time window.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'recency_timestamp': {},  # {obj.key: last_access_time}
    'collaborative_access': {},  # {obj.key: collaborative_access_count}
    'region_classification': {},  # {obj.key: region}
    'priority_levels': {},  # {obj.key: priority_level}
    'prediction_model': {},  # {obj.key: predicted_access_probability}
    'global_time_window': 0,
    'overall_access_patterns': {},  # {obj.key: overall_access_pattern}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first identifies the region with the least recent access. Within that region, it selects the object with the lowest priority level. If multiple objects have the same priority, it evicts the one with the lowest predicted access probability. If there is still a tie, it evicts the least collaboratively accessed object. If there is still a tie, it evicts the least recently accessed object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    # Identify the region with the least recent access
    least_recent_region = None
    least_recent_time = float('inf')
    for key, region in metadata['region_classification'].items():
        if metadata['recency_timestamp'][key] < least_recent_time:
            least_recent_time = metadata['recency_timestamp'][key]
            least_recent_region = region

    # Select the object with the lowest priority level within that region
    lowest_priority = float('inf')
    candidates = []
    for key, region in metadata['region_classification'].items():
        if region == least_recent_region:
            if metadata['priority_levels'][key] < lowest_priority:
                lowest_priority = metadata['priority_levels'][key]
                candidates = [key]
            elif metadata['priority_levels'][key] == lowest_priority:
                candidates.append(key)

    # If multiple objects have the same priority, evict the one with the lowest predicted access probability
    if len(candidates) > 1:
        lowest_predicted_access = float('inf')
        new_candidates = []
        for key in candidates:
            if metadata['prediction_model'][key] < lowest_predicted_access:
                lowest_predicted_access = metadata['prediction_model'][key]
                new_candidates = [key]
            elif metadata['prediction_model'][key] == lowest_predicted_access:
                new_candidates.append(key)
        candidates = new_candidates

    # If there is still a tie, evict the least collaboratively accessed object
    if len(candidates) > 1:
        lowest_collaborative_access = float('inf')
        new_candidates = []
        for key in candidates:
            if metadata['collaborative_access'][key] < lowest_collaborative_access:
                lowest_collaborative_access = metadata['collaborative_access'][key]
                new_candidates = [key]
            elif metadata['collaborative_access'][key] == lowest_collaborative_access:
                new_candidates.append(key)
        candidates = new_candidates

    # If there is still a tie, evict the least recently accessed object
    if len(candidates) > 1:
        least_recent_access = float('inf')
        for key in candidates:
            if metadata['recency_timestamp'][key] < least_recent_access:
                least_recent_access = metadata['recency_timestamp'][key]
                candid_obj_key = key
    else:
        candid_obj_key = candidates[0]

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency counter, updates the recency timestamp, and adjusts the collaborative access statistics. It also updates the last access time, may adjust the priority level based on the new frequency count and overall access patterns, and updates the prediction model with the new access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency_timestamp'][key] = cache_snapshot.access_count
    metadata['collaborative_access'][key] += 1  # Simplified for example
    metadata['priority_levels'][key] = metadata['access_frequency'][key]  # Simplified for example
    metadata['prediction_model'][key] = metadata['access_frequency'][key] / cache_snapshot.access_count  # Simplified for example

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency counter, recency timestamp, and collaborative access statistics. It assigns the object to a region based on initial access patterns, sets its access frequency and frequency count to 1, records the current time as the last access time, and assigns an initial priority level based on its importance and expected access frequency. The prediction model is updated to include the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency_timestamp'][key] = cache_snapshot.access_count
    metadata['collaborative_access'][key] = 1  # Simplified for example
    metadata['region_classification'][key] = 'default_region'  # Simplified for example
    metadata['priority_levels'][key] = INITIAL_PRIORITY
    metadata['prediction_model'][key] = 1 / cache_snapshot.access_count  # Simplified for example

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy resets the metadata for the evicted cache line, updates the region's statistics to reflect the eviction, and adjusts the prediction model to account for the removal. It also updates overall access patterns, may adjust the priority levels of remaining objects, and re-evaluates the workload and access patterns to determine if a strategy adjustment is needed.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['recency_timestamp'][evicted_key]
    del metadata['collaborative_access'][evicted_key]
    del metadata['region_classification'][evicted_key]
    del metadata['priority_levels'][evicted_key]
    del metadata['prediction_model'][evicted_key]
    # Update overall access patterns and re-evaluate strategy if needed
    # Simplified for example