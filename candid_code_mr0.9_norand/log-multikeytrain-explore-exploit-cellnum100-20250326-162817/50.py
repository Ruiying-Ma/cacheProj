# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict, deque

# Put tunable constant parameters below
WINDOW_CACHE_SIZE = 10  # Size of the window cache (W)
DECAY_INTERVAL = 100  # Number of evictions after which the CBF decays

# Put the metadata specifically maintained by the policy below. The policy maintains a Count Bloom Filter (CBF) for frequency estimation, access recency, group identifiers, historical access patterns, and layer-specific statistics. The cache is divided into a small window cache (W) using LRU and a larger main cache (M) with an arbitrary eviction policy.
window_cache = deque()  # LRU cache for the window cache (W)
main_cache = {}  # Main cache (M)
cbf = defaultdict(int)  # Count Bloom Filter for frequency estimation
recency = {}  # Dictionary to track recency of access
group_metadata = defaultdict(set)  # Group identifiers
historical_access_patterns = defaultdict(list)  # Historical access patterns
layer_statistics = defaultdict(int)  # Layer-specific statistics
eviction_count = 0  # Counter for the number of evictions

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    During eviction, the policy first attempts to evict from W using LRU. If W is empty, it evicts from M using M's policy. If W is not empty, it compares the least recently used object from W with an object from M based on CBF frequency. The object with the lower frequency is evicted. If M is full, the policy evicts the least frequently used item within the least recently used group.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    global eviction_count
    eviction_count += 1

    if window_cache:
        lru_window_key = window_cache[0]
        lru_window_obj = cache_snapshot.cache[lru_window_key]
    else:
        lru_window_key = None
        lru_window_obj = None

    if main_cache:
        lru_main_key = min(main_cache, key=lambda k: (cbf[k], recency[k]))
        lru_main_obj = cache_snapshot.cache[lru_main_key]
    else:
        lru_main_key = None
        lru_main_obj = None

    if lru_window_obj and (not lru_main_obj or cbf[lru_window_key] < cbf[lru_main_key]):
        candid_obj_key = lru_window_key
    else:
        candid_obj_key = lru_main_key

    if eviction_count % DECAY_INTERVAL == 0:
        for key in cbf:
            cbf[key] = max(0, cbf[key] - 1)

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency in CBF, recency, and group metadata for the hit item. It also adjusts the historical access patterns and layer-specific statistics to reflect the current access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    cbf[obj.key] += 1
    recency[obj.key] = cache_snapshot.access_count
    group_metadata[obj.key].add(obj.key)
    historical_access_patterns[obj.key].append(cache_snapshot.access_count)
    layer_statistics['hits'] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy adds it to W, initializes its access frequency in CBF, recency, and assigns it to a group based on similarity. It updates the historical access patterns and layer-specific statistics to include the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    if len(window_cache) >= WINDOW_CACHE_SIZE:
        window_cache.popleft()
    window_cache.append(obj.key)
    cbf[obj.key] = 1
    recency[obj.key] = cache_snapshot.access_count
    group_metadata[obj.key].add(obj.key)
    historical_access_patterns[obj.key].append(cache_snapshot.access_count)
    layer_statistics['inserts'] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After eviction, the policy updates the CBF by decaying every K evictions, adjusts the group metadata to reflect the removal, and recalibrates the historical access patterns and layer-specific statistics to account for the eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in cbf:
        del cbf[evicted_obj.key]
    if evicted_obj.key in recency:
        del recency[evicted_obj.key]
    if evicted_obj.key in group_metadata:
        del group_metadata[evicted_obj.key]
    if evicted_obj.key in historical_access_patterns:
        del historical_access_patterns[evicted_obj.key]
    layer_statistics['evictions'] += 1