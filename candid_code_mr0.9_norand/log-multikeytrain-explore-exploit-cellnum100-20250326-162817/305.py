# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
BASE_RELIABILITY_SCORE = 1
INITIAL_COMMUNICATION_SCORE = 0
INITIAL_LATENCY = 0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached item, including access latency, communication score with other cached items, reliability score, and longevity score.
metadata = {
    'latency': {},
    'communication': {},
    'reliability': {},
    'longevity': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score for each item based on its latency, communication, reliability, and longevity scores. The item with the lowest composite score is chosen for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_composite_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        latency = metadata['latency'][key]
        communication = metadata['communication'][key]
        reliability = metadata['reliability'][key]
        longevity = cache_snapshot.access_count - metadata['longevity'][key]
        
        composite_score = latency + communication - reliability + longevity
        
        if composite_score < min_composite_score:
            min_composite_score = composite_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access latency, increments the communication score with other accessed items, increases the reliability score, and updates the longevity score based on the current time.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['latency'][key] = cache_snapshot.access_count - metadata['longevity'][key]
    metadata['communication'][key] += 1
    metadata['reliability'][key] += 1
    metadata['longevity'][key] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access latency, sets an initial communication score, assigns a base reliability score, and records the insertion time for longevity calculation.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['latency'][key] = INITIAL_LATENCY
    metadata['communication'][key] = INITIAL_COMMUNICATION_SCORE
    metadata['reliability'][key] = BASE_RELIABILITY_SCORE
    metadata['longevity'][key] = cache_snapshot.access_count

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy recalculates the communication scores for the remaining items, adjusts the reliability scores if necessary, and updates any global metadata related to latency and longevity.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['latency'][evicted_key]
    del metadata['communication'][evicted_key]
    del metadata['reliability'][evicted_key]
    del metadata['longevity'][evicted_key]
    
    for key in cache_snapshot.cache:
        metadata['communication'][key] = max(0, metadata['communication'][key] - 1)
        metadata['reliability'][key] = max(BASE_RELIABILITY_SCORE, metadata['reliability'][key] - 1)