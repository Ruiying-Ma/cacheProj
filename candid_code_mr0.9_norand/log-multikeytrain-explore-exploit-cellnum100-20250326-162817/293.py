# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for access frequency in eviction score
BETA = 0.3   # Weight for recency in eviction score
GAMMA = 0.2  # Weight for layer identifier in eviction score

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency, probabilistic eviction score, layer identifier, and data size for each cached object. It also tracks metadata for each level in a multi-level hierarchy.
metadata = {
    'access_frequency': {},  # Dictionary to store access frequency of objects
    'recency': {},           # Dictionary to store recency of objects
    'eviction_score': {},    # Dictionary to store eviction score of objects
    'layer_identifier': {},  # Dictionary to store layer identifier of objects
    'data_size': {},         # Dictionary to store data size of objects
    'level_metadata': {}     # Dictionary to store metadata for each level
}

def calculate_eviction_score(key):
    '''
    Calculate the eviction score for a given object key.
    '''
    freq = metadata['access_frequency'][key]
    recency = metadata['recency'][key]
    layer = metadata['layer_identifier'][key]
    size = metadata['data_size'][key]
    return ALPHA * freq + BETA * recency + GAMMA * layer - size

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates an eviction probability for each object based on access frequency, recency, layer identifier, and data size. It chooses the eviction victim from the lowest level, prioritizing objects with the highest eviction probability and optimizing space utilization.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_level = min(metadata['layer_identifier'].values())
    max_eviction_score = -float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        if metadata['layer_identifier'][key] == lowest_level:
            eviction_score = calculate_eviction_score(key)
            if eviction_score > max_eviction_score:
                max_eviction_score = eviction_score
                candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and recency of the object. It recalculates the probabilistic eviction score and evaluates if the object meets the criteria for promotion to a higher level, adjusting its layer identifier accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['eviction_score'][key] = calculate_eviction_score(key)
    
    # Promotion logic (example: promote if access frequency exceeds a threshold)
    if metadata['access_frequency'][key] > 10:
        metadata['layer_identifier'][key] = max(0, metadata['layer_identifier'][key] - 1)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency, and data size. It calculates the probabilistic eviction score and places the object in the appropriate level and layer based on its initial metadata.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['data_size'][key] = obj.size
    metadata['layer_identifier'][key] = 0  # Start at the lowest level
    metadata['eviction_score'][key] = calculate_eviction_score(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy updates the metadata for the remaining objects in the lowest level, recalculating their eviction probabilities and adjusting their positions based on the updated criteria and available space.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['recency'][evicted_key]
    del metadata['eviction_score'][evicted_key]
    del metadata['layer_identifier'][evicted_key]
    del metadata['data_size'][evicted_key]
    
    lowest_level = min(metadata['layer_identifier'].values())
    for key in cache_snapshot.cache:
        if metadata['layer_identifier'][key] == lowest_level:
            metadata['eviction_score'][key] = calculate_eviction_score(key)