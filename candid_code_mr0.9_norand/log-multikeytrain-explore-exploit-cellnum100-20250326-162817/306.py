# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_PROBABILITY_SCORE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains a list of potential eviction candidates, each with a probability score based on access frequency and recency. It also keeps track of the access patterns to dynamically adjust the eviction strategy. Additionally, it records votes from multiple algorithms for each cache entry.
eviction_candidates = {}
access_frequency = {}
recency = {}
votes = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy probabilistically selects an eviction candidate from the list, with higher probability given to entries with lower access frequency and recency. It also considers the votes from multiple algorithms, evicting the entry with the most votes.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_score = float('inf')
    for key in eviction_candidates:
        score = eviction_candidates[key]
        if score < min_score:
            min_score = score
            candid_obj_key = key
        elif score == min_score:
            if votes[key] > votes[candid_obj_key]:
                candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency scores for the accessed entry are updated. The entry's probability score is recalculated, and the access pattern data is adjusted to reflect the hit.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    access_frequency[key] += 1
    recency[key] = cache_snapshot.access_count
    eviction_candidates[key] = 1 / (access_frequency[key] * recency[key])

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and recency scores. The entry is added to the list of potential eviction candidates with an initial probability score, and the access pattern data is updated to include the new entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    access_frequency[key] = 1
    recency[key] = cache_snapshot.access_count
    eviction_candidates[key] = INITIAL_PROBABILITY_SCORE
    votes[key] = 0

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the evicted entry from the list of potential candidates. The access pattern data is updated to reflect the eviction, and the probability scores for remaining entries are recalculated if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    del eviction_candidates[evicted_key]
    del access_frequency[evicted_key]
    del recency[evicted_key]
    del votes[evicted_key]
    
    for key in eviction_candidates:
        eviction_candidates[key] = 1 / (access_frequency[key] * recency[key])