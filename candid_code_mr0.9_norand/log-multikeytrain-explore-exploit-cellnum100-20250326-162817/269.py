# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
HEAT_THRESHOLD = 10

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, contextual relevance score, pattern detection score, reward score, reach score, hierarchy level, resilience score, and heat value for each cached object. It also keeps a history of recent access patterns.
metadata = {
    'access_frequency': {},
    'contextual_relevance': {},
    'pattern_detection': {},
    'reward_score': {},
    'reach_score': {},
    'hierarchy_level': {},
    'resilience_score': {},
    'heat_value': {},
    'access_patterns': []
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by evaluating a composite score derived from access frequency, contextual relevance, pattern detection, reward score, reach score, resilience score, and heat value. The object with the lowest composite score from the lowest hierarchy level is selected for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_composite_score = float('inf')
    min_hierarchy_level = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        composite_score = (
            metadata['access_frequency'][key] +
            metadata['contextual_relevance'][key] +
            metadata['pattern_detection'][key] +
            metadata['reward_score'][key] +
            metadata['reach_score'][key] +
            metadata['resilience_score'][key] +
            metadata['heat_value'][key]
        )
        hierarchy_level = metadata['hierarchy_level'][key]
        
        if hierarchy_level < min_hierarchy_level or (hierarchy_level == min_hierarchy_level and composite_score < min_composite_score):
            min_hierarchy_level = hierarchy_level
            min_composite_score = composite_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency, reach score, and heat value are incremented. The contextual relevance score is updated based on recent access patterns, the pattern detection score is adjusted, the reward score is increased, and the resilience score is recalculated. The object may be moved up the hierarchy level if its heat value surpasses a threshold.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['reach_score'][key] += 1
    metadata['heat_value'][key] += 1
    metadata['reward_score'][key] += 1
    metadata['resilience_score'][key] = calculate_resilience_score(key)
    metadata['contextual_relevance'][key] = update_contextual_relevance(key)
    metadata['pattern_detection'][key] = update_pattern_detection(key)
    
    if metadata['heat_value'][key] > HEAT_THRESHOLD:
        metadata['hierarchy_level'][key] -= 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, it is assigned initial values for access frequency, reach score, and resilience score, placed at the lowest hierarchy level, and given a base heat value. The contextual relevance score is updated based on the current access context, and the pattern detection score is adjusted to integrate the new object into existing access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['reach_score'][key] = 1
    metadata['resilience_score'][key] = 1
    metadata['hierarchy_level'][key] = 0
    metadata['heat_value'][key] = 1
    metadata['contextual_relevance'][key] = update_contextual_relevance(key)
    metadata['pattern_detection'][key] = update_pattern_detection(key)
    metadata['reward_score'][key] = 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy recalculates the composite scores for the remaining objects, updates the contextual relevance and pattern detection scores to reflect the removal, adjusts the reward scores, recalculates the average heat value for the remaining objects at the lowest hierarchy level, and adjusts the resilience scores of objects in the same level to maintain balance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['contextual_relevance'][evicted_key]
    del metadata['pattern_detection'][evicted_key]
    del metadata['reward_score'][evicted_key]
    del metadata['reach_score'][evicted_key]
    del metadata['hierarchy_level'][evicted_key]
    del metadata['resilience_score'][evicted_key]
    del metadata['heat_value'][evicted_key]
    
    for key in cache_snapshot.cache:
        metadata['resilience_score'][key] = calculate_resilience_score(key)
        metadata['contextual_relevance'][key] = update_contextual_relevance(key)
        metadata['pattern_detection'][key] = update_pattern_detection(key)
        metadata['reward_score'][key] += 1

def calculate_resilience_score(key):
    # Placeholder function to calculate resilience score
    return metadata['access_frequency'][key] + metadata['reach_score'][key]

def update_contextual_relevance(key):
    # Placeholder function to update contextual relevance score
    return metadata['access_frequency'][key] + len(metadata['access_patterns'])

def update_pattern_detection(key):
    # Placeholder function to update pattern detection score
    return metadata['access_frequency'][key] + len(metadata['access_patterns'])