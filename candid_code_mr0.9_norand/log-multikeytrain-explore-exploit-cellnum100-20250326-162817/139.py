# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_FITNESS_SCORE = 1
INITIAL_GRAVITY_WELL_SCORE = 1
INITIAL_PROB_EVICTION_SCORE = 1
INITIAL_LOCAL_INTERACTION_SCORE = 1

# Put the metadata specifically maintained by the policy below. The policy maintains a dependency graph with nodes representing cached items and edges representing dependencies. Each node tracks access frequency, recency, gravity well score, probabilistic eviction score, fitness score, local interaction score, and state indicating access pattern.
class CacheMetadata:
    def __init__(self):
        self.access_frequency = {}
        self.recency = {}
        self.gravity_well_score = {}
        self.prob_eviction_score = {}
        self.fitness_score = {}
        self.local_interaction_score = {}
        self.state = {}
        self.dependency_graph = {}

cache_metadata = CacheMetadata()

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy identifies items with the least dependencies and selects the item with the lowest combined fitness, local interaction, and probabilistic eviction score. If multiple items have the same score, the state transitions are used to break ties, prioritizing items in states indicating less recent access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        dependencies = len(cache_metadata.dependency_graph.get(key, []))
        combined_score = (cache_metadata.fitness_score[key] + 
                          cache_metadata.local_interaction_score[key] + 
                          cache_metadata.prob_eviction_score[key])
        
        if dependencies < min_score or (dependencies == min_score and combined_score < min_score):
            min_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, recency, and gravity well score of the item. It adjusts the probabilistic eviction score to decrease the likelihood of eviction, increases the fitness score, updates the local interaction scores of neighboring items, and changes the state to indicate recent access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    cache_metadata.access_frequency[key] += 1
    cache_metadata.recency[key] = cache_snapshot.access_count
    cache_metadata.gravity_well_score[key] += 1
    cache_metadata.prob_eviction_score[key] -= 1
    cache_metadata.fitness_score[key] += 1
    cache_metadata.state[key] = 'recent_access'
    
    for neighbor in cache_metadata.dependency_graph.get(key, []):
        cache_metadata.local_interaction_score[neighbor] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency, recency, gravity well score, and fitness score. It updates the dependency graph, calculates the initial probabilistic eviction score, adjusts the local interaction scores of neighboring items, and sets the state to indicate recent insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    cache_metadata.access_frequency[key] = 1
    cache_metadata.recency[key] = cache_snapshot.access_count
    cache_metadata.gravity_well_score[key] = INITIAL_GRAVITY_WELL_SCORE
    cache_metadata.prob_eviction_score[key] = INITIAL_PROB_EVICTION_SCORE
    cache_metadata.fitness_score[key] = INITIAL_FITNESS_SCORE
    cache_metadata.local_interaction_score[key] = INITIAL_LOCAL_INTERACTION_SCORE
    cache_metadata.state[key] = 'recent_insertion'
    cache_metadata.dependency_graph[key] = []

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy removes it from the dependency graph, recalculates the gravity well scores of remaining items, and updates the probabilistic eviction scores of affected items. It adjusts the fitness and local interaction scores of neighboring items and updates their states to reflect the new access dynamics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del cache_metadata.access_frequency[evicted_key]
    del cache_metadata.recency[evicted_key]
    del cache_metadata.gravity_well_score[evicted_key]
    del cache_metadata.prob_eviction_score[evicted_key]
    del cache_metadata.fitness_score[evicted_key]
    del cache_metadata.local_interaction_score[evicted_key]
    del cache_metadata.state[evicted_key]
    
    for key in cache_metadata.dependency_graph:
        if evicted_key in cache_metadata.dependency_graph[key]:
            cache_metadata.dependency_graph[key].remove(evicted_key)
            cache_metadata.local_interaction_score[key] -= 1
    
    del cache_metadata.dependency_graph[evicted_key]
    
    for key in cache_metadata.dependency_graph:
        cache_metadata.gravity_well_score[key] -= 1
        cache_metadata.prob_eviction_score[key] += 1
        cache_metadata.fitness_score[key] -= 1
        cache_metadata.state[key] = 'updated_after_eviction'