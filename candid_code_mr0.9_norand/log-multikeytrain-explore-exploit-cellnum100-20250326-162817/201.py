# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for frequency in combined score
BETA = 0.3   # Weight for recency in combined score
GAMMA = 0.2  # Weight for likelihood of future use in combined score

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, dynamic priority score, fitness score, local interaction score, state, recency, likelihood score for future access, and priority level for each cache entry. It also tracks overall access patterns and usage statistics.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'dynamic_priority_score': {},
    'fitness_score': {},
    'local_interaction_score': {},
    'state': {},
    'recency': {},
    'likelihood_score': {},
    'priority_level': {}
}

def calculate_combined_score(key, current_time):
    frequency = metadata['access_frequency'].get(key, 0)
    recency = current_time - metadata['last_access_time'].get(key, 0)
    likelihood = metadata['likelihood_score'].get(key, 0)
    combined_score = (ALPHA * frequency) + (BETA * recency) + (GAMMA * likelihood)
    return combined_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates a combined score for each object based on its frequency, recency, likelihood of future use, priority, dynamic priority score, fitness score, and local interaction score. It probabilistically chooses the candidate with the lowest combined score, using state transitions to break ties, prioritizing less recently accessed entries.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    current_time = cache_snapshot.access_count

    for key in cache_snapshot.cache:
        combined_score = calculate_combined_score(key, current_time)
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key
        elif combined_score == min_score:
            if metadata['last_access_time'][key] < metadata['last_access_time'][candid_obj_key]:
                candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, last access time, dynamic priority score, fitness score, local interaction score, state, recency, likelihood score, and priority level for the accessed object. It also updates the overall access patterns and usage statistics to reflect the latest access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count

    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = current_time
    # Update other metadata as needed
    # For simplicity, we assume other scores are updated similarly
    metadata['dynamic_priority_score'][key] = metadata['access_frequency'][key] * 0.1
    metadata['fitness_score'][key] = metadata['access_frequency'][key] * 0.1
    metadata['local_interaction_score'][key] = metadata['access_frequency'][key] * 0.1
    metadata['state'][key] = 'active'
    metadata['recency'][key] = current_time
    metadata['likelihood_score'][key] = metadata['access_frequency'][key] * 0.1
    metadata['priority_level'][key] = metadata['access_frequency'][key] * 0.1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, last access time, dynamic priority score, fitness score, local interaction score, state, recency, likelihood score, and priority level. It updates the overall access patterns and usage statistics to include the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count

    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = current_time
    metadata['dynamic_priority_score'][key] = 0.1
    metadata['fitness_score'][key] = 0.1
    metadata['local_interaction_score'][key] = 0.1
    metadata['state'][key] = 'new'
    metadata['recency'][key] = current_time
    metadata['likelihood_score'][key] = 0.1
    metadata['priority_level'][key] = 0.1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata and recalculates the overall access patterns and usage statistics to reflect the removal. It adjusts the priority scores, fitness scores, local interaction scores, and states of remaining entries to reflect the change in the cache's state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key

    if key in metadata['access_frequency']:
        del metadata['access_frequency'][key]
    if key in metadata['last_access_time']:
        del metadata['last_access_time'][key]
    if key in metadata['dynamic_priority_score']:
        del metadata['dynamic_priority_score'][key]
    if key in metadata['fitness_score']:
        del metadata['fitness_score'][key]
    if key in metadata['local_interaction_score']:
        del metadata['local_interaction_score'][key]
    if key in metadata['state']:
        del metadata['state'][key]
    if key in metadata['recency']:
        del metadata['recency'][key]
    if key in metadata['likelihood_score']:
        del metadata['likelihood_score'][key]
    if key in metadata['priority_level']:
        del metadata['priority_level'][key]

    # Adjust the priority scores, fitness scores, local interaction scores, and states of remaining entries
    for remaining_key in cache_snapshot.cache:
        metadata['dynamic_priority_score'][remaining_key] *= 0.9
        metadata['fitness_score'][remaining_key] *= 0.9
        metadata['local_interaction_score'][remaining_key] *= 0.9
        metadata['state'][remaining_key] = 'adjusted'