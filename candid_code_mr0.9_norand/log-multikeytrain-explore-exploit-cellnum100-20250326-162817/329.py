# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 0.25
WEIGHT_RECENCY = 0.25
WEIGHT_CONCURRENCY = 0.25
WEIGHT_DEPENDENCY = 0.25

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, concurrency score, dependency score, and a dynamic access pattern profile. It also keeps a list of potential eviction candidates with their respective scores.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'last_access_time': {},  # {obj.key: last_access_time}
    'concurrency_score': {},  # {obj.key: concurrency_score}
    'dependency_score': {},  # {obj.key: dependency_score}
    'eviction_candidates': [],  # [(obj.key, score)]
    'access_pattern_profile': {}  # {obj.key: profile}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates multiple eviction candidates in parallel, using a weighted combination of low access frequency, low recency of access, low concurrency score, and low dependency score. It probabilistically selects the candidate that minimizes impact on cache performance based on the current access pattern profile.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'].get(key, 0)
        last_access_time = metadata['last_access_time'].get(key, 0)
        concurrency_score = metadata['concurrency_score'].get(key, 0)
        dependency_score = metadata['dependency_score'].get(key, 0)
        
        score = (WEIGHT_ACCESS_FREQUENCY * access_frequency +
                 WEIGHT_RECENCY * (cache_snapshot.access_count - last_access_time) +
                 WEIGHT_CONCURRENCY * concurrency_score +
                 WEIGHT_DEPENDENCY * dependency_score)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, last access time, and increments the concurrency score for the accessed item. It also adjusts the dependency scores of related items and updates the dynamic access pattern profile.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['concurrency_score'][key] = metadata['concurrency_score'].get(key, 0) + 1
    # Adjust dependency scores and access pattern profile as needed

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, last access time, concurrency score, and dependency score. It updates the list of potential eviction candidates and recalculates the dynamic access pattern profile to integrate the new item.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['concurrency_score'][key] = 0
    metadata['dependency_score'][key] = 0
    # Update eviction candidates and access pattern profile

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata of the evicted item, updates the list of potential eviction candidates, and recalculates the access frequencies, recency, concurrency scores, and dependency scores for the remaining items. It also adjusts the dynamic access pattern profile to ensure optimal performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_time']:
        del metadata['last_access_time'][evicted_key]
    if evicted_key in metadata['concurrency_score']:
        del metadata['concurrency_score'][evicted_key]
    if evicted_key in metadata['dependency_score']:
        del metadata['dependency_score'][evicted_key]
    # Update eviction candidates and access pattern profile