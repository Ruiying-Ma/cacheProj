# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_PRIORITY_LEVEL = 1
INITIAL_CACHE_LEVEL = 1
READ_HEAVY_THRESHOLD = 0.7

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, size, priority level, cache level, circular pointer, dynamic weight, and workload characteristic indicator for each cached object.
metadata = {}
pointer = 0
workload_characteristic = 'read-heavy'  # or 'write-heavy'

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy starts from the current pointer position and moves cyclically, resetting frequencies to 0 until it finds an object with zero frequency. It then identifies the lowest priority level objects and selects the least recently accessed among them. If tied, the largest object is evicted. The policy considers workload characteristics, evicting the least frequently accessed item if read-heavy, or alternating between the least recently accessed and oldest item if write-heavy.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    global pointer
    cache_keys = list(cache_snapshot.cache.keys())
    n = len(cache_keys)
    
    # Reset frequencies to 0 until an object with zero frequency is found
    while metadata[cache_keys[pointer]]['frequency'] != 0:
        metadata[cache_keys[pointer]]['frequency'] = 0
        pointer = (pointer + 1) % n
    
    # Find the lowest priority level objects
    min_priority = min(metadata[key]['priority'] for key in cache_keys)
    candidates = [key for key in cache_keys if metadata[key]['priority'] == min_priority]
    
    # Select the least recently accessed among them
    least_recently_accessed = min(candidates, key=lambda k: metadata[k]['last_access'])
    
    # If tied, evict the largest object
    largest_object = max(candidates, key=lambda k: cache_snapshot.cache[k].size)
    
    if workload_characteristic == 'read-heavy':
        candid_obj_key = min(candidates, key=lambda k: metadata[k]['frequency'])
    else:
        candid_obj_key = least_recently_accessed if pointer % 2 == 0 else largest_object
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a hit, the policy updates the access frequency, recency of access, and last access timestamp. It recalculates the dynamic weight, adjusts the priority level, and may promote the object to a higher cache level. The pointer does not move.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['frequency'] += 1
    metadata[key]['last_access'] = cache_snapshot.access_count
    metadata[key]['dynamic_weight'] = calculate_dynamic_weight(metadata[key])
    metadata[key]['priority'] = adjust_priority_level(metadata[key])
    # Optionally promote to a higher cache level
    if should_promote(metadata[key]):
        metadata[key]['cache_level'] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency, sets the recency to the current time, records the size, assigns an initial priority level, and places the object in the appropriate cache level. It sets the frequency to 1, initializes the last access timestamp, calculates the initial dynamic weight, and updates the workload characteristic indicator. The object is placed at the current pointer location, and the pointer does not move.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'frequency': 1,
        'last_access': cache_snapshot.access_count,
        'size': obj.size,
        'priority': INITIAL_PRIORITY_LEVEL,
        'cache_level': INITIAL_CACHE_LEVEL,
        'dynamic_weight': calculate_dynamic_weight({
            'frequency': 1,
            'last_access': cache_snapshot.access_count,
            'size': obj.size,
            'priority': INITIAL_PRIORITY_LEVEL,
            'cache_level': INITIAL_CACHE_LEVEL
        })
    }
    update_workload_characteristic(cache_snapshot)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes the metadata of the evicted object, adjusts the priority levels of remaining objects, and potentially demotes objects to lower cache levels. It also adjusts the workload characteristic indicator based on the current cache state and access patterns. The pointer does not move.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata[evicted_key]
    adjust_priority_levels()
    update_workload_characteristic(cache_snapshot)

def calculate_dynamic_weight(meta):
    # Placeholder for dynamic weight calculation logic
    return meta['frequency'] * meta['last_access'] / meta['size']

def adjust_priority_level(meta):
    # Placeholder for priority level adjustment logic
    return meta['priority'] + 1

def should_promote(meta):
    # Placeholder for promotion logic
    return meta['frequency'] > 10

def adjust_priority_levels():
    # Placeholder for priority level adjustment logic for all objects
    for key in metadata:
        metadata[key]['priority'] = adjust_priority_level(metadata[key])

def update_workload_characteristic(cache_snapshot):
    global workload_characteristic
    read_ratio = cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)
    workload_characteristic = 'read-heavy' if read_ratio > READ_HEAVY_THRESHOLD else 'write-heavy'