# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
# For simplicity, we will use a basic machine learning model that predicts future access likelihood based on past access frequency.
# In a real-world scenario, this could be a more sophisticated model.

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access timestamps, access frequencies, a machine learning model for access prediction, and data access patterns (sequential or random).
access_timestamps = {}
access_frequencies = {}
access_patterns = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by considering the least recently used items, the predicted future access likelihood from the machine learning model, and the access frequency, with a preference for evicting items that are least likely to be accessed soon and have low access frequency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_score = float('inf')
    for key, cached_obj in cache_snapshot.cache.items():
        # Calculate the score for each cached object
        # Lower score means higher chance of eviction
        last_access_time = access_timestamps.get(key, 0)
        access_freq = access_frequencies.get(key, 0)
        future_access_likelihood = access_freq  # Simplified prediction model
        score = (cache_snapshot.access_count - last_access_time) / (future_access_likelihood + 1)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access timestamp and increments the access frequency for the accessed item. It also feeds the access pattern data to the machine learning model to improve future predictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    access_timestamps[key] = cache_snapshot.access_count
    access_frequencies[key] = access_frequencies.get(key, 0) + 1
    # Update access pattern (simplified as sequential or random)
    access_patterns[key] = 'sequential' if access_frequencies[key] > 1 else 'random'

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access timestamp and access frequency for the new item. It also updates the machine learning model with the new access pattern data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    access_timestamps[key] = cache_snapshot.access_count
    access_frequencies[key] = 1
    access_patterns[key] = 'random'

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy removes the metadata associated with the evicted item and updates the machine learning model to reflect the change in the cache's state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    if evicted_key in access_timestamps:
        del access_timestamps[evicted_key]
    if evicted_key in access_frequencies:
        del access_frequencies[evicted_key]
    if evicted_key in access_patterns:
        del access_patterns[evicted_key]