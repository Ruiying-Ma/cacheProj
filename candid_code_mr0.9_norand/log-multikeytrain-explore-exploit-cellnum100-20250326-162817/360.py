# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for access frequency
BETA = 0.3   # Weight for recency
GAMMA = 0.2  # Weight for parallel task count

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached object, including access frequency, recency, the number of parallel tasks accessing the object, and a machine learning model's prediction score for future access likelihood.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by considering objects with the lowest combination of access frequency, recency, and parallel task count, adjusted by the machine learning model's prediction score to prioritize objects with the least likelihood of future access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        score = (ALPHA * meta['access_frequency'] +
                 BETA * (cache_snapshot.access_count - meta['recency']) +
                 GAMMA * meta['parallel_task_count'] -
                 meta['ml_prediction_score'])
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the recency timestamp, and adjusts the parallel task count for the accessed object. The machine learning model is also updated with the new access data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    if key in metadata:
        metadata[key]['access_frequency'] += 1
        metadata[key]['recency'] = cache_snapshot.access_count
        metadata[key]['parallel_task_count'] += 1
        # Update the ML model with the new access data
        metadata[key]['ml_prediction_score'] = update_ml_model(obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency timestamp, and parallel task count. The machine learning model is updated with the insertion event to refine future predictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'access_frequency': 1,
        'recency': cache_snapshot.access_count,
        'parallel_task_count': 1,
        'ml_prediction_score': update_ml_model(obj)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata of the evicted object and updates the machine learning model with the eviction event to improve the accuracy of future eviction decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
        # Update the ML model with the eviction event
        update_ml_model(evicted_obj)

def update_ml_model(obj):
    '''
    Dummy function to represent the update of the machine learning model.
    In a real implementation, this function would update the model with the new data and return a new prediction score.
    - Args:
        - `obj`: The object for which the model is being updated.
    - Return:
        - `prediction_score`: A dummy prediction score.
    '''
    # For simplicity, we return a constant prediction score.
    return 0.1