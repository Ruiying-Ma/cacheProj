# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
SPATIAL_BOUNDARY_SIZE = 1024  # Size in bytes for each spatial locality boundary

# Put the metadata specifically maintained by the policy below. The policy maintains historical access patterns, spatial locality boundaries, and a dynamic strategy state. Historical access patterns track the frequency and recency of accesses. Spatial locality boundaries define regions within the cache. The dynamic strategy state indicates the current eviction strategy being used.
historical_access_patterns = {}
spatial_locality_boundaries = {}
dynamic_strategy_state = "LRU"  # Default strategy state

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy analyzes historical access patterns to predict future accesses and identifies objects that do not fit the current pattern. It also considers spatial locality, prioritizing eviction of objects least accessed within each boundary. The dynamic strategy state ensures seamless transitions between strategies based on real-time access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_access_count = float('inf')
    for boundary, objects in spatial_locality_boundaries.items():
        for key in objects:
            if historical_access_patterns[key]['access_count'] < min_access_count:
                min_access_count = historical_access_patterns[key]['access_count']
                candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the historical access patterns to reflect the increased frequency and recency of the accessed object. It also adjusts the spatial locality boundaries if necessary and may update the dynamic strategy state based on the new access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    historical_access_patterns[obj.key]['access_count'] += 1
    historical_access_patterns[obj.key]['last_access_time'] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy updates the historical access patterns to include the new object with an initial access count. It also places the object within the appropriate spatial locality boundary and may adjust the dynamic strategy state to accommodate the new access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    historical_access_patterns[obj.key] = {
        'access_count': 1,
        'last_access_time': cache_snapshot.access_count
    }
    boundary = (obj.size // SPATIAL_BOUNDARY_SIZE) * SPATIAL_BOUNDARY_SIZE
    if boundary not in spatial_locality_boundaries:
        spatial_locality_boundaries[boundary] = set()
    spatial_locality_boundaries[boundary].add(obj.key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the evicted object from the historical access patterns and its spatial locality boundary. It then reassesses the dynamic strategy state to ensure it remains optimal based on the current access patterns and cache contents.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    if evicted_obj.key in historical_access_patterns:
        del historical_access_patterns[evicted_obj.key]
    boundary = (evicted_obj.size // SPATIAL_BOUNDARY_SIZE) * SPATIAL_BOUNDARY_SIZE
    if boundary in spatial_locality_boundaries and evicted_obj.key in spatial_locality_boundaries[boundary]:
        spatial_locality_boundaries[boundary].remove(evicted_obj.key)
        if not spatial_locality_boundaries[boundary]:
            del spatial_locality_boundaries[boundary]