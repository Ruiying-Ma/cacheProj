# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import heapq

# Put tunable constant parameters below
INITIAL_ACCESS_FREQUENCY = 1
INITIAL_PREDICTIVE_SCORE = 0.5  # This is a placeholder. In practice, this would be calculated using a machine learning model.

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, object size, and a predictive score for each cached object. The predictive score is generated using a machine learning model trained on historical access patterns.
metadata = {
    'access_frequency': {},  # key -> access frequency
    'predictive_score': {},  # key -> predictive score
    'edges': {}  # key -> set of edges (other keys)
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first considering objects with the lowest predictive scores. Among these, it prioritizes evicting the largest objects to quickly free up space, followed by objects with the fewest access edges.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    # Create a list of tuples (predictive_score, -size, access_frequency, key) for all objects in the cache
    candidates = [
        (metadata['predictive_score'][key], -cache_snapshot.cache[key].size, metadata['access_frequency'][key], key)
        for key in cache_snapshot.cache
    ]
    # Use heapq to find the object with the lowest predictive score, largest size, and fewest access edges
    heapq.heapify(candidates)
    _, _, _, candid_obj_key = heapq.heappop(candidates)
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and recalculates the predictive score for the accessed object. It also updates the edges to reflect the increased access frequency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] += 1
    # Recalculate predictive score (placeholder logic)
    metadata['predictive_score'][key] = 1 / metadata['access_frequency'][key]
    # Update edges (placeholder logic)
    for other_key in cache_snapshot.cache:
        if other_key != key:
            metadata['edges'][key].add(other_key)
            metadata['edges'][other_key].add(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, calculates its initial predictive score using the machine learning model, and sets up its edges based on initial access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] = INITIAL_ACCESS_FREQUENCY
    metadata['predictive_score'][key] = INITIAL_PREDICTIVE_SCORE
    metadata['edges'][key] = set()
    # Initialize edges (placeholder logic)
    for other_key in cache_snapshot.cache:
        if other_key != key:
            metadata['edges'][key].add(other_key)
            metadata['edges'][other_key].add(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata, including access frequency, predictive score, and edges, and adjusts the edges of remaining objects to reflect the removal.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['predictive_score'][evicted_key]
    for other_key in metadata['edges'][evicted_key]:
        metadata['edges'][other_key].remove(evicted_key)
    del metadata['edges'][evicted_key]