# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_PROBABILITY_SCORE = 0.5
ADJUSTMENT_FACTOR = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains a probability score for each cached item, a frequency counter for access counts, and a recency timestamp for the last access time. Additionally, it tracks a dynamic adjustment factor based on overall access patterns.
frequency_counter = {}
recency_timestamp = {}
probability_score = {}
dynamic_adjustment_factor = ADJUSTMENT_FACTOR

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates an eviction probability for each item based on its frequency, recency, and the dynamic adjustment factor. Items with higher eviction probabilities are more likely to be evicted, with a bias towards those with lower access frequency and older recency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    max_eviction_probability = -1

    for key, cached_obj in cache_snapshot.cache.items():
        freq = frequency_counter[key]
        recency = recency_timestamp[key]
        prob_score = probability_score[key]
        
        eviction_probability = (1 / (freq + 1)) * (cache_snapshot.access_count - recency) * prob_score * dynamic_adjustment_factor
        
        if eviction_probability > max_eviction_probability:
            max_eviction_probability = eviction_probability
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the frequency counter, updates the recency timestamp to the current time, and adjusts the probability score to reflect the increased likelihood of future accesses.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    frequency_counter[key] += 1
    recency_timestamp[key] = cache_snapshot.access_count
    probability_score[key] = min(1.0, probability_score[key] + dynamic_adjustment_factor)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its frequency counter to 1, sets the recency timestamp to the current time, and assigns an initial probability score based on the dynamic adjustment factor.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    frequency_counter[key] = 1
    recency_timestamp[key] = cache_snapshot.access_count
    probability_score[key] = INITIAL_PROBABILITY_SCORE

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy recalculates the dynamic adjustment factor to reflect the current workload characteristics and access patterns, ensuring that the probability scores for remaining items are updated accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    global dynamic_adjustment_factor
    total_frequency = sum(frequency_counter.values())
    total_recency = sum(cache_snapshot.access_count - recency for recency in recency_timestamp.values())
    
    if total_frequency > 0 and total_recency > 0:
        dynamic_adjustment_factor = (total_frequency / len(frequency_counter)) / (total_recency / len(recency_timestamp))
    
    for key in cache_snapshot.cache:
        probability_score[key] = min(1.0, probability_score[key] * dynamic_adjustment_factor)