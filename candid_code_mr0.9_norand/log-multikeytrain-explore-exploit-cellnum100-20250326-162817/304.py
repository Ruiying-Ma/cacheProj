# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for recency in priority score
BETA = 0.5   # Weight for frequency in priority score

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency, and a dynamic priority score for each cached object. It also keeps a list of potential eviction candidates and their respective scores.
metadata = {
    'access_frequency': {},  # Dictionary to store access frequency of objects
    'recency': {},           # Dictionary to store recency (last access time) of objects
    'priority_score': {},    # Dictionary to store dynamic priority score of objects
    'eviction_candidates': []  # List to store eviction candidates and their scores
}

def calculate_priority_score(frequency, recency, current_time):
    '''
    Calculate the dynamic priority score based on access frequency and recency.
    '''
    return ALPHA * (current_time - recency) + BETA * frequency

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy probabilistically selects an eviction candidate from the list based on their dynamic priority scores, with lower-scored items having a higher chance of being evicted. Multiple algorithms vote on the candidates, and the one with the most votes is chosen for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    if not metadata['eviction_candidates']:
        return None

    # Select the candidate with the lowest priority score
    candid_obj_key = min(metadata['eviction_candidates'], key=lambda x: x[1])[0]
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the object are updated. The dynamic priority score is recalculated based on the new access patterns, and the list of potential eviction candidates is adjusted accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    current_time = cache_snapshot.access_count

    # Update access frequency and recency
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = current_time

    # Recalculate priority score
    frequency = metadata['access_frequency'][key]
    recency = metadata['recency'][key]
    metadata['priority_score'][key] = calculate_priority_score(frequency, recency, current_time)

    # Update eviction candidates
    metadata['eviction_candidates'] = [
        (k, metadata['priority_score'][k]) for k in cache_snapshot.cache.keys()
    ]

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its access frequency and recency are initialized, and its dynamic priority score is set. The list of potential eviction candidates is updated to include the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    current_time = cache_snapshot.access_count

    # Initialize access frequency and recency
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = current_time

    # Set initial priority score
    metadata['priority_score'][key] = calculate_priority_score(1, current_time, current_time)

    # Update eviction candidates
    metadata['eviction_candidates'] = [
        (k, metadata['priority_score'][k]) for k in cache_snapshot.cache.keys()
    ]

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the metadata of the evicted object is removed. The dynamic priority scores of remaining objects are recalculated, and the list of potential eviction candidates is updated to reflect the current cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key

    # Remove metadata of the evicted object
    del metadata['access_frequency'][evicted_key]
    del metadata['recency'][evicted_key]
    del metadata['priority_score'][evicted_key]

    # Recalculate priority scores for remaining objects
    current_time = cache_snapshot.access_count
    for key in cache_snapshot.cache.keys():
        frequency = metadata['access_frequency'][key]
        recency = metadata['recency'][key]
        metadata['priority_score'][key] = calculate_priority_score(frequency, recency, current_time)

    # Update eviction candidates
    metadata['eviction_candidates'] = [
        (k, metadata['priority_score'][k]) for k in cache_snapshot.cache.keys()
    ]