# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
GROUP_COUNT = 4  # Number of groups
LAYER_COUNT = 3  # Number of layers

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency, last access time, group identifiers, 'season' identifier, historical access patterns, layer-specific statistics, FIFO queue, circular pointer, fitness score, local interaction score, state, exchange frequency, and machine learning prediction score for each cache entry.
metadata = {
    'access_frequency': {},
    'recency': {},
    'last_access_time': {},
    'group_id': {},
    'season_id': {},
    'historical_access_patterns': {},
    'layer_statistics': {i: {} for i in range(LAYER_COUNT)},
    'fifo_queue': [],
    'circular_pointer': 0,
    'fitness_score': {},
    'local_interaction_score': {},
    'state': {},
    'exchange_frequency': {},
    'ml_prediction_score': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first attempts to evict from the least recently used group. Within that group, it calculates a combined score using fitness score, local interaction score, access frequency, last access time, exchange frequency, and machine learning prediction score. The object with the lowest combined score is evicted. If no groups are eligible, it evicts based on the least frequently used item across all layers.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_score = float('inf')
    for key, cached_obj in cache_snapshot.cache.items():
        group_id = metadata['group_id'][key]
        if group_id == min(metadata['group_id'].values()):
            combined_score = (
                metadata['fitness_score'][key] +
                metadata['local_interaction_score'][key] +
                metadata['access_frequency'][key] +
                metadata['last_access_time'][key] +
                metadata['exchange_frequency'][key] +
                metadata['ml_prediction_score'][key]
            )
            if combined_score < min_score:
                min_score = combined_score
                candid_obj_key = key

    if candid_obj_key is None:
        min_freq = float('inf')
        for key, cached_obj in cache_snapshot.cache.items():
            if metadata['access_frequency'][key] < min_freq:
                min_freq = metadata['access_frequency'][key]
                candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates access frequency, recency, last access time, fitness score, local interaction score, state, and exchange frequency. It adjusts the item's position within its group and layer, updates historical access patterns, layer-specific statistics, and recalculates the machine learning prediction score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['fitness_score'][key] += 1
    metadata['local_interaction_score'][key] += 1
    metadata['state'][key] = 'hit'
    metadata['exchange_frequency'][key] += 1
    metadata['ml_prediction_score'][key] = predict_ml_score(obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy assigns it to a group, sets initial access frequency, recency, last access time, fitness score, local interaction score, state, and exchange frequency. It places the object in the appropriate layer and at the rear of the FIFO queue, sets the 'season' identifier, updates historical access patterns, layer-specific statistics, and generates a machine learning prediction score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['fitness_score'][key] = 1
    metadata['local_interaction_score'][key] = 1
    metadata['state'][key] = 'new'
    metadata['exchange_frequency'][key] = 1
    metadata['group_id'][key] = assign_group(obj)
    metadata['season_id'][key] = 'current'
    metadata['fifo_queue'].append(key)
    metadata['ml_prediction_score'][key] = predict_ml_score(obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After eviction, the policy updates group metadata, historical access patterns, layer-specific statistics, fitness scores, local interaction scores, states of neighboring lines, and may adjust the machine learning model. It removes the item from its group, layer, and FIFO queue, and rebalances layers if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    key = evicted_obj.key
    del metadata['access_frequency'][key]
    del metadata['recency'][key]
    del metadata['last_access_time'][key]
    del metadata['fitness_score'][key]
    del metadata['local_interaction_score'][key]
    del metadata['state'][key]
    del metadata['exchange_frequency'][key]
    del metadata['group_id'][key]
    del metadata['season_id'][key]
    del metadata['ml_prediction_score'][key]
    metadata['fifo_queue'].remove(key)

def assign_group(obj):
    '''
    Helper function to assign a group to a new object.
    '''
    # Simple round-robin assignment for demonstration
    group_id = metadata['circular_pointer'] % GROUP_COUNT
    metadata['circular_pointer'] += 1
    return group_id

def predict_ml_score(obj):
    '''
    Helper function to predict the machine learning score for an object.
    '''
    # Placeholder for ML prediction logic
    return 1  # Dummy value for demonstration