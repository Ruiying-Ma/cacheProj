# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_REWARD_SCORE = 1

# Put the metadata specifically maintained by the policy below. The policy maintains a reward score for each cache entry, a list of eviction candidates, and a history of access patterns. It also keeps track of votes from multiple algorithms for each entry.
reward_scores = {}
access_history = []
eviction_candidates = []
votes = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates multiple eviction candidates in parallel, considering their reward scores and access patterns. It then uses a voting system where multiple algorithms vote on which candidate to evict, and the entry with the most votes is chosen.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    if not eviction_candidates:
        eviction_candidates.extend(cache_snapshot.cache.keys())
    
    # Voting system
    vote_counts = {key: 0 for key in eviction_candidates}
    
    # Algorithm 1: Least Recently Used (LRU)
    for key in eviction_candidates:
        if key in access_history:
            vote_counts[key] += access_history.index(key)
    
    # Algorithm 2: Lowest Reward Score
    for key in eviction_candidates:
        if key in reward_scores:
            vote_counts[key] += reward_scores[key]
    
    # Find the candidate with the highest vote count
    candid_obj_key = max(vote_counts, key=vote_counts.get)
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    The reward score of the accessed entry is increased. The access pattern history is updated to reflect the recent access. Votes from algorithms are recalibrated based on the updated reward score and access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    if key in reward_scores:
        reward_scores[key] += 1
    else:
        reward_scores[key] = INITIAL_REWARD_SCORE + 1
    
    if key in access_history:
        access_history.remove(key)
    access_history.append(key)
    
    if key in eviction_candidates:
        eviction_candidates.remove(key)
    eviction_candidates.append(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    A new entry is assigned an initial reward score. The access pattern history is updated to include the new entry. Votes from algorithms are initialized for the new entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    reward_scores[key] = INITIAL_REWARD_SCORE
    access_history.append(key)
    eviction_candidates.append(key)
    votes[key] = 0

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    The reward score and access pattern history of the evicted entry are removed. The list of eviction candidates is updated to exclude the evicted entry. Votes from algorithms are recalibrated to reflect the current state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    key = evicted_obj.key
    if key in reward_scores:
        del reward_scores[key]
    if key in access_history:
        access_history.remove(key)
    if key in eviction_candidates:
        eviction_candidates.remove(key)
    if key in votes:
        del votes[key]