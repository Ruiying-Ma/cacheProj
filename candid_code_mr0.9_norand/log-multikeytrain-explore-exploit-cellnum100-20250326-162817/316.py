# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_FREQUENCY = 0.4
WEIGHT_RECENCY = 0.4
WEIGHT_LOCALITY = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for access frequency, access recency, node locality, and isolated cache space for each application or process.
access_frequency = {}
access_recency = {}
locality_score = {}
isolated_cache_space = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score that considers the least frequently accessed items, the least recently accessed items, and the locality of access, with adjustments based on the current load and specific needs of each isolated cache space.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        freq_score = access_frequency.get(key, 0)
        recency_score = cache_snapshot.access_count - access_recency.get(key, 0)
        locality = locality_score.get(key, 0)
        
        score = (WEIGHT_FREQUENCY * freq_score) + (WEIGHT_RECENCY * recency_score) + (WEIGHT_LOCALITY * locality)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and recency for the accessed item, and adjusts the locality score based on the accessing node.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = access_frequency.get(key, 0) + 1
    access_recency[key] = cache_snapshot.access_count
    # Assuming node locality is updated based on some external node information
    locality_score[key] = locality_score.get(key, 0) + 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency and recency, sets the locality score based on the inserting node, and updates the isolated cache space metadata for the relevant application or process.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 1
    access_recency[key] = cache_snapshot.access_count
    # Assuming node locality is initialized based on some external node information
    locality_score[key] = 1
    # Update isolated cache space metadata
    isolated_cache_space[key] = obj.size

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy updates the access frequency, recency, and locality metadata to reflect the removal, and adjusts the isolated cache space metadata for the relevant application or process.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in access_frequency:
        del access_frequency[evicted_key]
    if evicted_key in access_recency:
        del access_recency[evicted_key]
    if evicted_key in locality_score:
        del locality_score[evicted_key]
    if evicted_key in isolated_cache_space:
        del isolated_cache_space[evicted_key]