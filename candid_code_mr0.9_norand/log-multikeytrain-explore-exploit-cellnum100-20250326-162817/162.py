# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
HALF_LIFE = 1000
WEIGHT_ACCESS_FREQUENCY = 0.25
WEIGHT_RECENCY = 0.25
WEIGHT_COHESION = 0.25
WEIGHT_DECAY = 0.25

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached object, including access frequency, recency of access, a cohesion score indicating relatedness to other cached items, and a decay timer representing the object's half-life.
metadata = {
    'access_frequency': {},
    'recency': {},
    'cohesion': {},
    'decay_timer': {}
}

def calculate_priority_score(key, current_time):
    access_frequency = metadata['access_frequency'].get(key, 0)
    recency = metadata['recency'].get(key, 0)
    cohesion = metadata['cohesion'].get(key, 0)
    decay_timer = metadata['decay_timer'].get(key, 0)
    
    score = (WEIGHT_ACCESS_FREQUENCY * (1 / (access_frequency + 1)) +
             WEIGHT_RECENCY * (current_time - recency) +
             WEIGHT_COHESION * (1 / (cohesion + 1)) +
             WEIGHT_DECAY * (current_time - decay_timer))
    
    return score

def calculate_cohesion(cache_snapshot, obj):
    # Simple cohesion calculation based on the number of objects in the cache
    return len(cache_snapshot.cache)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a priority score for each object based on a weighted combination of low access frequency, low recency, low cohesion, and expired decay timer. The object with the lowest priority score is evicted first.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_score = float('inf')
    current_time = cache_snapshot.access_count
    
    for key in cache_snapshot.cache:
        score = calculate_priority_score(key, current_time)
        if score < lowest_score:
            lowest_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the recency timestamp, recalculates the cohesion score based on current cache contents, and resets the decay timer for the accessed object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['recency'][key] = current_time
    metadata['cohesion'][key] = calculate_cohesion(cache_snapshot, obj)
    metadata['decay_timer'][key] = current_time

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency to 1, sets the recency timestamp to the current time, calculates its initial cohesion score with existing cache items, and sets its decay timer to a predefined half-life value.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = current_time
    metadata['cohesion'][key] = calculate_cohesion(cache_snapshot, obj)
    metadata['decay_timer'][key] = current_time + HALF_LIFE

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy recalculates the cohesion scores for the remaining objects in the cache to reflect the removal, and no further updates are needed for the other metadata.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['recency']:
        del metadata['recency'][evicted_key]
    if evicted_key in metadata['cohesion']:
        del metadata['cohesion'][evicted_key]
    if evicted_key in metadata['decay_timer']:
        del metadata['decay_timer'][evicted_key]
    
    for key in cache_snapshot.cache:
        metadata['cohesion'][key] = calculate_cohesion(cache_snapshot, cache_snapshot.cache[key])