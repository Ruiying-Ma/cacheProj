# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WAVE_THRESHOLD = 5  # Threshold for transitioning from particle to wave state
EVICTION_PROBABILITY_THRESHOLD = 0.5  # Threshold for eviction probability

# Put the metadata specifically maintained by the policy below. The policy maintains a hierarchical structure of cache items based on access frequency, a timestamp for last access, a collaborative table for sharing cache contents and eviction decisions, access recency, and a dependency list of other cache entries. Each entry also has a state (wave or particle) indicating its access pattern.
cache_metadata = {
    'access_frequency': {},  # Dictionary to store access frequency of each object
    'last_access_timestamp': {},  # Dictionary to store last access timestamp of each object
    'state': {},  # Dictionary to store state (wave or particle) of each object
    'dependencies': {},  # Dictionary to store dependencies of each object
    'collaborative_table': {}  # Dictionary to store collaborative table for sharing cache contents and eviction decisions
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates an eviction probability for each entry based on its access frequency, recency, state, and dormancy period. Entries in the particle state with low access frequency, low recency, and long dormancy are more likely to be evicted. Dependencies are considered to minimize the impact on other entries. The collaborative table is updated to reflect the eviction decision.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_eviction_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = cache_metadata['access_frequency'].get(key, 0)
        last_access_timestamp = cache_metadata['last_access_timestamp'].get(key, 0)
        state = cache_metadata['state'].get(key, 'particle')
        dormancy_period = cache_snapshot.access_count - last_access_timestamp
        eviction_score = (1 / (access_frequency + 1)) * dormancy_period
        
        if state == 'particle':
            eviction_score *= 2
        
        if eviction_score < min_eviction_score:
            min_eviction_score = eviction_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, recency, and last access timestamp of the entry. If the entry is in the particle state and its access frequency crosses a threshold, it transitions to the wave state. The entry is moved higher in the hierarchy, and the collaborative table is updated with the new cache content.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    cache_metadata['access_frequency'][key] = cache_metadata['access_frequency'].get(key, 0) + 1
    cache_metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    
    if cache_metadata['state'].get(key, 'particle') == 'particle' and cache_metadata['access_frequency'][key] >= WAVE_THRESHOLD:
        cache_metadata['state'][key] = 'wave'
    
    cache_metadata['collaborative_table'][key] = obj

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and recency, sets the last access timestamp to the current time, and places the item in the appropriate hierarchy level. The state is set to particle, and dependencies are updated to reflect any new relationships with existing entries. The collaborative table is updated with the new cache content.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    cache_metadata['access_frequency'][key] = 1
    cache_metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    cache_metadata['state'][key] = 'particle'
    cache_metadata['dependencies'][key] = set()
    
    for cached_key in cache_snapshot.cache:
        cache_metadata['dependencies'][cached_key].add(key)
        cache_metadata['dependencies'][key].add(cached_key)
    
    cache_metadata['collaborative_table'][key] = obj

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an entry, the policy removes the item from the hierarchy, clears its last access timestamp, and updates the collaborative table to reflect the eviction decision. Dependencies of remaining entries are updated to remove references to the evicted entry, and the overall cache metadata is adjusted to reflect the change in cache composition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in cache_metadata['access_frequency']:
        del cache_metadata['access_frequency'][key]
    if key in cache_metadata['last_access_timestamp']:
        del cache_metadata['last_access_timestamp'][key]
    if key in cache_metadata['state']:
        del cache_metadata['state'][key]
    if key in cache_metadata['dependencies']:
        del cache_metadata['dependencies'][key]
    
    for cached_key in cache_metadata['dependencies']:
        if key in cache_metadata['dependencies'][cached_key]:
            cache_metadata['dependencies'][cached_key].remove(key)
    
    if key in cache_metadata['collaborative_table']:
        del cache_metadata['collaborative_table'][key]