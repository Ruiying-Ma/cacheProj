# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
FREQUENCY_WEIGHT = 0.5
RECENCY_WEIGHT = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached object, including access frequency, recency of access, and a dynamic priority score that combines both factors. Additionally, it tracks overall workload characteristics to adapt the eviction strategy.
metadata = {}

def calculate_priority(frequency, recency, current_time):
    return FREQUENCY_WEIGHT * frequency + RECENCY_WEIGHT * (current_time - recency)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the object with the lowest dynamic priority score, which is calculated based on a weighted combination of access frequency and recency. The weights are adjusted in real-time based on observed access patterns and workload characteristics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_priority = float('inf')
    current_time = cache_snapshot.access_count

    for key, cached_obj in cache_snapshot.cache.items():
        freq = metadata[key]['frequency']
        recency = metadata[key]['recency']
        priority = calculate_priority(freq, recency, current_time)
        if priority < min_priority:
            min_priority = priority
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency of the object, updates its recency timestamp, and recalculates its dynamic priority score. The weights for frequency and recency are also adjusted based on the current workload.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key
    metadata[key]['frequency'] += 1
    metadata[key]['recency'] = current_time
    metadata[key]['priority'] = calculate_priority(metadata[key]['frequency'], metadata[key]['recency'], current_time)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and recency timestamp, and calculates its initial dynamic priority score. The overall workload characteristics are updated to reflect the new insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key
    metadata[key] = {
        'frequency': 1,
        'recency': current_time,
        'priority': calculate_priority(1, current_time, current_time)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata and recalculates the weights for frequency and recency based on the remaining objects and current workload characteristics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    # Optionally, you can adjust FREQUENCY_WEIGHT and RECENCY_WEIGHT here based on workload characteristics
    # For simplicity, we keep them constant in this implementation