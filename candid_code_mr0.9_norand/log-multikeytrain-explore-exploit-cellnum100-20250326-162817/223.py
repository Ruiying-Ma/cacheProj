# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_TEMPERATURE = 1
INITIAL_FLOW_RATE = 1
TEMPERATURE_INCREMENT = 1
FLOW_RATE_INCREMENT = 1
CRITICAL_THRESHOLD_RATIO = 0.8  # Evict when cache size exceeds 80% of capacity

# Put the metadata specifically maintained by the policy below. The policy maintains a temperature value and a flow rate for each cached object, as well as a critical threshold for triggering burst evictions.
temperature = {}
flow_rate = {}
critical_threshold = None

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    When the cache reaches the critical threshold, a burst eviction is triggered, removing a significant portion of the cache. Objects with the lowest temperature and flow rate are evicted first.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    global critical_threshold
    if critical_threshold is None:
        critical_threshold = int(cache_snapshot.capacity * CRITICAL_THRESHOLD_RATIO)
    
    candid_obj_key = None
    if cache_snapshot.size + obj.size > critical_threshold:
        # Burst eviction: remove a significant portion of the cache
        sorted_objects = sorted(cache_snapshot.cache.values(), key=lambda o: (temperature[o.key], flow_rate[o.key]))
        total_size_to_free = cache_snapshot.size + obj.size - critical_threshold
        freed_size = 0
        for o in sorted_objects:
            freed_size += o.size
            if freed_size >= total_size_to_free:
                candid_obj_key = o.key
                break
    else:
        # Regular eviction: remove the object with the lowest temperature and flow rate
        sorted_objects = sorted(cache_snapshot.cache.values(), key=lambda o: (temperature[o.key], flow_rate[o.key]))
        candid_obj_key = sorted_objects[0].key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    The temperature and flow rate of the accessed object are increased to reflect its recent use, simulating a heating and increased flow process.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    temperature[obj.key] += TEMPERATURE_INCREMENT
    flow_rate[obj.key] += FLOW_RATE_INCREMENT

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    The new object is assigned an initial temperature and flow rate based on the current workload characteristics and access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    temperature[obj.key] = INITIAL_TEMPERATURE
    flow_rate[obj.key] = INITIAL_FLOW_RATE

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    The metadata for the evicted objects is cleared, and the critical threshold may be adjusted based on the current cache usage and workload trends.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    global critical_threshold
    # Clear metadata for the evicted object
    if evicted_obj.key in temperature:
        del temperature[evicted_obj.key]
    if evicted_obj.key in flow_rate:
        del flow_rate[evicted_obj.key]
    
    # Adjust the critical threshold based on current cache usage
    critical_threshold = int(cache_snapshot.capacity * CRITICAL_THRESHOLD_RATIO)