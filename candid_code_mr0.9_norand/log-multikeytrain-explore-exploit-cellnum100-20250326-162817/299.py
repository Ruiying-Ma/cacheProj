# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
FREQUENCY_WEIGHT = 0.7
RECENCY_WEIGHT = 0.3

# Put the metadata specifically maintained by the policy below. The policy maintains a linked list of cache items, a frequency counter for each item, and a probabilistic eviction score based on access patterns and usage frequency.
class CacheMetadata:
    def __init__(self):
        self.linked_list = []
        self.frequency_counter = {}
        self.eviction_score = {}

cache_metadata = CacheMetadata()

def calculate_eviction_score(frequency, recency):
    return FREQUENCY_WEIGHT * (1 / frequency) + RECENCY_WEIGHT * recency

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy probabilistically selects an eviction candidate from the head of the linked list, with higher probability assigned to items with lower frequency and recency scores.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    if cache_metadata.linked_list:
        candid_obj_key = cache_metadata.linked_list[0]
        for key in cache_metadata.linked_list:
            if cache_metadata.eviction_score[key] > cache_metadata.eviction_score[candid_obj_key]:
                candid_obj_key = key
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the item's frequency counter is incremented, and it is moved to the tail of the linked list. The probabilistic eviction score is recalculated based on the updated frequency and recency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    cache_metadata.frequency_counter[key] += 1
    cache_metadata.linked_list.remove(key)
    cache_metadata.linked_list.append(key)
    recency = cache_snapshot.access_count
    cache_metadata.eviction_score[key] = calculate_eviction_score(cache_metadata.frequency_counter[key], recency)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, it is added to the tail of the linked list with an initial frequency counter set to one. The probabilistic eviction score is initialized based on its initial state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    cache_metadata.linked_list.append(key)
    cache_metadata.frequency_counter[key] = 1
    recency = cache_snapshot.access_count
    cache_metadata.eviction_score[key] = calculate_eviction_score(1, recency)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the linked list is updated to remove the evicted item, and the frequency counters and probabilistic eviction scores of remaining items are adjusted to reflect the new state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    cache_metadata.linked_list.remove(evicted_key)
    del cache_metadata.frequency_counter[evicted_key]
    del cache_metadata.eviction_score[evicted_key]