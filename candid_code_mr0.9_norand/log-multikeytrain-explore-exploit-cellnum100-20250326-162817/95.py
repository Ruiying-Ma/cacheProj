# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict
import time

# Put tunable constant parameters below
LFU_WEIGHT = 1
LRU_WEIGHT = 1
LCA_WEIGHT = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, and a concurrency score indicating the number of concurrent processes accessing each item. It also tracks the current access pattern to dynamically choose between different eviction strategies.
access_frequency = defaultdict(int)
last_access_time = defaultdict(int)
concurrency_score = defaultdict(int)
current_access_pattern = defaultdict(int)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates multiple eviction candidates simultaneously using parallel processing. It interlaces different strategies, such as least frequently used (LFU), least recently used (LRU), and least concurrent access (LCA), dynamically selecting the best candidate based on current access patterns and concurrency scores.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        lfu_score = access_frequency[key] * LFU_WEIGHT
        lru_score = (cache_snapshot.access_count - last_access_time[key]) * LRU_WEIGHT
        lca_score = concurrency_score[key] * LCA_WEIGHT
        
        total_score = lfu_score + lru_score + lca_score
        
        if total_score < min_score:
            min_score = total_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, last access time, and increments the concurrency score for the accessed item. It also adjusts the current access pattern metadata to reflect the recent hit.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    access_frequency[obj.key] += 1
    last_access_time[obj.key] = cache_snapshot.access_count
    concurrency_score[obj.key] += 1
    current_access_pattern[obj.key] = 'hit'

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, last access time, and concurrency score. It also updates the current access pattern metadata to account for the new insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    access_frequency[obj.key] = 1
    last_access_time[obj.key] = cache_snapshot.access_count
    concurrency_score[obj.key] = 1
    current_access_pattern[obj.key] = 'insert'

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata of the evicted item and recalculates the current access pattern to ensure it remains optimized for the remaining items in the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del access_frequency[evicted_obj.key]
    del last_access_time[evicted_obj.key]
    del concurrency_score[evicted_obj.key]
    del current_access_pattern[evicted_obj.key]
    
    # Recalculate current access pattern
    for key in cache_snapshot.cache:
        if key not in current_access_pattern:
            current_access_pattern[key] = 'unknown'