# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
LRU_WEIGHT = 1
LFU_WEIGHT = 1
MRU_WEIGHT = 1

# Put the metadata specifically maintained by the policy below. The policy maintains a list of multiple eviction algorithms (e.g., LRU, LFU, MRU) and their respective votes, access frequency, recency, and data importance scores for each cached item.
access_frequency = {}
recency = {}
data_importance = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by having each algorithm cast a vote based on its criteria. The item with the most votes is selected for eviction, ensuring a consensus-based decision.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    votes = {key: 0 for key in cache_snapshot.cache.keys()}
    
    # LRU voting
    for key in recency:
        votes[key] += LRU_WEIGHT * recency[key]
    
    # LFU voting
    for key in access_frequency:
        votes[key] += LFU_WEIGHT * access_frequency[key]
    
    # MRU voting (negative weight to evict the most recently used)
    for key in recency:
        votes[key] -= MRU_WEIGHT * recency[key]
    
    # Find the key with the maximum votes
    candid_obj_key = max(votes, key=votes.get)
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency, recency, and data importance scores for the accessed item. Each algorithm's internal state is also updated to reflect the hit.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    access_frequency[key] += 1
    recency[key] = cache_snapshot.access_count
    data_importance[key] = obj.size

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency, recency, and data importance scores for the new item. Each algorithm's internal state is updated to include the new item.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    access_frequency[key] = 1
    recency[key] = cache_snapshot.access_count
    data_importance[key] = obj.size

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy removes the item's metadata from the access frequency, recency, and data importance records. Each algorithm's internal state is updated to exclude the evicted item.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    key = evicted_obj.key
    if key in access_frequency:
        del access_frequency[key]
    if key in recency:
        del recency[key]
    if key in data_importance:
        del data_importance[key]