# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import heapq
from collections import defaultdict

# Put tunable constant parameters below
INITIAL_PRIORITY_LEVEL = 1

# Put the metadata specifically maintained by the policy below. The policy maintains a priority queue for each partition, a priority level for each object, a frequency count of accesses, a timestamp of the last access, and tracks overall access patterns. It also keeps track of the partition and cache level each object resides in.
priority_queues = defaultdict(list)
priority_levels = {}
frequency_counts = {}
last_access_timestamps = {}
object_partitions = {}
object_cache_levels = {}

def calculate_priority_score(frequency, last_access_time):
    # Example priority score calculation
    return frequency / (1 + last_access_time)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the object with the lowest priority score from the partition with the least recent access. If multiple objects have the same priority, it evicts the one with the lowest frequency count. If there is still a tie, it evicts the least recently accessed object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_priority_score = float('inf')
    min_frequency = float('inf')
    min_last_access_time = float('inf')

    for partition, queue in priority_queues.items():
        if not queue:
            continue
        for priority_score, key in queue:
            if priority_score < min_priority_score:
                min_priority_score = priority_score
                candid_obj_key = key
                min_frequency = frequency_counts[key]
                min_last_access_time = last_access_timestamps[key]
            elif priority_score == min_priority_score:
                if frequency_counts[key] < min_frequency:
                    candid_obj_key = key
                    min_frequency = frequency_counts[key]
                    min_last_access_time = last_access_timestamps[key]
                elif frequency_counts[key] == min_frequency:
                    if last_access_timestamps[key] < min_last_access_time:
                        candid_obj_key = key
                        min_last_access_time = last_access_timestamps[key]

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the frequency count of the accessed object, updates its last access timestamp, recalculates its priority score, and adjusts its position in the priority queue. It may also adjust its priority level based on the new frequency count and overall access patterns, and promote the object to a higher partition or cache level if warranted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    frequency_counts[key] += 1
    last_access_timestamps[key] = cache_snapshot.access_count
    priority_score = calculate_priority_score(frequency_counts[key], last_access_timestamps[key])
    partition = object_partitions[key]

    # Remove old entry from priority queue
    priority_queues[partition] = [(score, k) for score, k in priority_queues[partition] if k != key]
    heapq.heapify(priority_queues[partition])

    # Insert updated entry into priority queue
    heapq.heappush(priority_queues[partition], (priority_score, key))

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its frequency count to 1, sets its last access timestamp to the current time, assigns an initial priority score and priority level based on its expected access frequency, places it in the appropriate partition and cache level, and updates the priority queue to reflect the new state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    frequency_counts[key] = 1
    last_access_timestamps[key] = cache_snapshot.access_count
    priority_score = calculate_priority_score(frequency_counts[key], last_access_timestamps[key])
    priority_levels[key] = INITIAL_PRIORITY_LEVEL
    object_partitions[key] = INITIAL_PRIORITY_LEVEL
    object_cache_levels[key] = 0  # Assuming single cache level for simplicity

    # Insert into priority queue
    heapq.heappush(priority_queues[INITIAL_PRIORITY_LEVEL], (priority_score, key))

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the object from the priority queue, updates the partition and cache level metadata to reflect the removal, recalculates the priority scores of remaining objects if necessary, and updates its overall access patterns to potentially adjust the priority levels of remaining objects.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    partition = object_partitions[key]

    # Remove from priority queue
    priority_queues[partition] = [(score, k) for score, k in priority_queues[partition] if k != key]
    heapq.heapify(priority_queues[partition])

    # Remove metadata
    del priority_levels[key]
    del frequency_counts[key]
    del last_access_timestamps[key]
    del object_partitions[key]
    del object_cache_levels[key]