# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_ACCESS_FREQUENCY = 1
INITIAL_PROBABILISTIC_EVICTION_SCORE = 0.5
REGION_IDENTIFIER = "default"
SEQUENCE_FLAG = False

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, probabilistic eviction score, region identifier, sequence flag, timestamp of last access, global access frequency counter, current cache size, and system load.
metadata = {
    'access_frequency': {},
    'probabilistic_eviction_score': {},
    'region_identifier': {},
    'sequence_flag': {},
    'timestamp': {},
    'global_access_frequency_counter': 0,
    'current_cache_size': 0,
    'system_load': 0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects an eviction candidate based on a combination of access frequency, probabilistic eviction score, region's state, sequence flag, and timestamp. It prioritizes evicting the least recently used items not part of the current instruction sequence, dynamically adjusting the cache size based on system load and usage patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (metadata['access_frequency'][key] * metadata['probabilistic_eviction_score'][key]) / (metadata['timestamp'][key] + 1)
        if metadata['sequence_flag'][key] == False and score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    The policy increments the access frequency, recalculates the probabilistic eviction score, updates the region's state, reinforces the sequence flag if part of an instruction sequence, updates the timestamp of last access, and increments the global access frequency counter.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['probabilistic_eviction_score'][key] = 1 / metadata['access_frequency'][key]
    metadata['timestamp'][key] = cache_snapshot.access_count
    metadata['global_access_frequency_counter'] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    The policy sets initial access frequency, calculates initial probabilistic eviction score, assigns a region based on expected access pattern, sets the sequence flag, records the current timestamp, initializes the global access frequency counter, and checks and adjusts the cache size if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = INITIAL_ACCESS_FREQUENCY
    metadata['probabilistic_eviction_score'][key] = INITIAL_PROBABILISTIC_EVICTION_SCORE
    metadata['region_identifier'][key] = REGION_IDENTIFIER
    metadata['sequence_flag'][key] = SEQUENCE_FLAG
    metadata['timestamp'][key] = cache_snapshot.access_count
    metadata['global_access_frequency_counter'] += 1
    metadata['current_cache_size'] += obj.size

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    The policy removes the evicted item's metadata, updates the region's state, recalculates probabilistic eviction scores for remaining candidates, updates the global access frequency counter, adjusts the cache size if dynamically changed, and ensures sequence flags and timestamps of remaining items are consistent with the current state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['probabilistic_eviction_score'][evicted_key]
    del metadata['region_identifier'][evicted_key]
    del metadata['sequence_flag'][evicted_key]
    del metadata['timestamp'][evicted_key]
    
    metadata['global_access_frequency_counter'] += 1
    metadata['current_cache_size'] -= evicted_obj.size
    
    for key in cache_snapshot.cache:
        metadata['probabilistic_eviction_score'][key] = 1 / metadata['access_frequency'][key]