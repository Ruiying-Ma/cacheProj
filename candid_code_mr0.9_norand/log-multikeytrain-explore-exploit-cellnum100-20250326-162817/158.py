# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
EXPANSION_THRESHOLD = 0.8
CONTRACTION_THRESHOLD = 0.5
EXPANSION_FACTOR = 1.2
CONTRACTION_FACTOR = 0.8

# Put the metadata specifically maintained by the policy below. The policy maintains an 'attraction score' for each item based on access frequency, a 'hidden counter' to track items not accessed for a long time, and a dynamic 'cache size' parameter that adjusts based on workload patterns.
attraction_scores = {}
hidden_counters = {}
dynamic_cache_size = None

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evicts the item with the lowest attraction score and highest hidden counter. If the cache needs to contract, it evicts the least recently used items until the desired size is reached.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    global dynamic_cache_size
    if dynamic_cache_size is None:
        dynamic_cache_size = cache_snapshot.capacity

    # Find the object with the lowest attraction score and highest hidden counter
    min_attraction_score = float('inf')
    max_hidden_counter = -1
    candid_obj_key = None

    for key, cached_obj in cache_snapshot.cache.items():
        if (attraction_scores[key] < min_attraction_score) or \
           (attraction_scores[key] == min_attraction_score and hidden_counters[key] > max_hidden_counter):
            min_attraction_score = attraction_scores[key]
            max_hidden_counter = hidden_counters[key]
            candid_obj_key = key

    # Check if contraction is needed
    if cache_snapshot.size > dynamic_cache_size * CONTRACTION_THRESHOLD:
        # Evict least recently used items until the desired size is reached
        while cache_snapshot.size > dynamic_cache_size * CONTRACTION_THRESHOLD:
            lru_key = min(hidden_counters, key=hidden_counters.get)
            if lru_key == candid_obj_key:
                break
            del cache_snapshot.cache[lru_key]
            del attraction_scores[lru_key]
            del hidden_counters[lru_key]

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the attraction score of the accessed item is incremented, and its hidden counter is reset to zero. The cache size is evaluated to determine if expansion is needed based on current demand.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    global dynamic_cache_size
    if dynamic_cache_size is None:
        dynamic_cache_size = cache_snapshot.capacity

    # Increment attraction score and reset hidden counter
    attraction_scores[obj.key] += 1
    hidden_counters[obj.key] = 0

    # Check if expansion is needed
    if cache_snapshot.size > dynamic_cache_size * EXPANSION_THRESHOLD:
        dynamic_cache_size = min(cache_snapshot.capacity, int(dynamic_cache_size * EXPANSION_FACTOR))

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its attraction score and hidden counter. The cache size is evaluated to determine if expansion is needed based on current demand.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    global dynamic_cache_size
    if dynamic_cache_size is None:
        dynamic_cache_size = cache_snapshot.capacity

    # Initialize attraction score and hidden counter
    attraction_scores[obj.key] = 1
    hidden_counters[obj.key] = 0

    # Check if expansion is needed
    if cache_snapshot.size > dynamic_cache_size * EXPANSION_THRESHOLD:
        dynamic_cache_size = min(cache_snapshot.capacity, int(dynamic_cache_size * EXPANSION_FACTOR))

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy recalculates the hidden counters for remaining items and adjusts the cache size if contraction is required. The attraction scores of remaining items are also re-evaluated to ensure optimal performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    global dynamic_cache_size
    if dynamic_cache_size is None:
        dynamic_cache_size = cache_snapshot.capacity

    # Remove evicted object's metadata
    del attraction_scores[evicted_obj.key]
    del hidden_counters[evicted_obj.key]

    # Recalculate hidden counters for remaining items
    for key in hidden_counters:
        hidden_counters[key] += 1

    # Check if contraction is needed
    if cache_snapshot.size < dynamic_cache_size * CONTRACTION_THRESHOLD:
        dynamic_cache_size = max(1, int(dynamic_cache_size * CONTRACTION_FACTOR))