# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
INITIAL_IMPORTANCE = 1
INITIAL_PREDICTIVE_SCORE = 1
THERMAL_ZONE_BOUNDARIES = [0, 10, 20, 30]  # Example boundaries for thermal zones

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency, importance scores, last access time, thermal zone classification, historical access pattern log, predictive score, and performance metrics for different eviction strategies.
metadata = {
    'access_frequency': collections.defaultdict(int),
    'recency': collections.defaultdict(int),
    'importance_scores': collections.defaultdict(lambda: INITIAL_IMPORTANCE),
    'last_access_time': collections.defaultdict(int),
    'thermal_zone': collections.defaultdict(int),
    'predictive_score': collections.defaultdict(lambda: INITIAL_PREDICTIVE_SCORE),
    'historical_access_pattern_log': collections.defaultdict(list),
    'performance_metrics': collections.defaultdict(int)
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates multiple eviction candidates in parallel, prioritizing items in the coolest thermal zone with the lowest predictive score and least consistent long-term usage patterns. It dynamically selects the best candidate based on access frequency, recency, importance, and current workload characteristics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (metadata['predictive_score'][key] + 
                 metadata['access_frequency'][key] + 
                 metadata['importance_scores'][key] + 
                 (cache_snapshot.access_count - metadata['last_access_time'][key]))
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    The policy updates the access frequency, recency, last access time, and recalculates the predictive score for the accessed item. It adjusts the importance score based on the current workload and re-evaluates the item's thermal zone classification. Performance metrics of the active eviction strategy are also updated.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['predictive_score'][key] = (metadata['access_frequency'][key] + 
                                         metadata['recency'][key] + 
                                         metadata['importance_scores'][key])
    # Adjust importance score and thermal zone classification
    metadata['importance_scores'][key] += 1
    metadata['thermal_zone'][key] = min(len(THERMAL_ZONE_BOUNDARIES) - 1, 
                                        metadata['importance_scores'][key] // 10)
    # Update performance metrics
    metadata['performance_metrics']['hits'] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    The policy initializes the access frequency, recency, importance scores, sets the current time as the last access time, assigns an initial predictive score, and classifies the item into an appropriate thermal zone. It updates the performance metrics of the active eviction strategy to reflect the insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['importance_scores'][key] = INITIAL_IMPORTANCE
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['predictive_score'][key] = INITIAL_PREDICTIVE_SCORE
    metadata['thermal_zone'][key] = 0
    # Update performance metrics
    metadata['performance_metrics']['inserts'] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    The policy removes all associated metadata of the evicted item, updates the historical access pattern log to reflect the eviction, and adjusts the thermal zone boundaries if necessary. It also updates the performance metrics of the active eviction strategy and may adjust the hierarchy levels of remaining objects based on their updated scores.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    # Remove all associated metadata of the evicted item
    del metadata['access_frequency'][key]
    del metadata['recency'][key]
    del metadata['importance_scores'][key]
    del metadata['last_access_time'][key]
    del metadata['predictive_score'][key]
    del metadata['thermal_zone'][key]
    # Update historical access pattern log
    metadata['historical_access_pattern_log'][key].append(cache_snapshot.access_count)
    # Adjust thermal zone boundaries if necessary
    # (This is a placeholder, actual adjustment logic can be more complex)
    if len(metadata['historical_access_pattern_log'][key]) > 10:
        THERMAL_ZONE_BOUNDARIES.append(THERMAL_ZONE_BOUNDARIES[-1] + 10)
    # Update performance metrics
    metadata['performance_metrics']['evictions'] += 1