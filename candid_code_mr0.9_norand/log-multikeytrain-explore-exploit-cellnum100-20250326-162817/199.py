# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for recency in priority score
BETA = 0.5   # Weight for frequency in priority score

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, node connectivity, priority score, and a voting score from multiple eviction algorithms. It also tracks the current workload pattern.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'recency_of_access': {},  # {obj.key: last_access_time}
    'node_connectivity': {},  # {obj.key: connectivity_score}
    'priority_score': {},  # {obj.key: priority_score}
    'voting_score': {},  # {obj.key: voting_score}
    'workload_pattern': {}  # {pattern_metric: value}
}

def calculate_priority_score(key):
    frequency = metadata['access_frequency'].get(key, 0)
    recency = metadata['recency_of_access'].get(key, 0)
    return ALPHA * recency + BETA * frequency

def calculate_voting_score(key):
    # Example voting score calculation using LRU, LFU, and node connectivity
    lru_score = metadata['recency_of_access'].get(key, 0)
    lfu_score = metadata['access_frequency'].get(key, 0)
    connectivity_score = metadata['node_connectivity'].get(key, 0)
    return lru_score + lfu_score + connectivity_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy uses a voting mechanism where multiple algorithms (e.g., LRU, LFU, node connectivity-based) vote on which item to evict. The item with the highest combined score from these votes is selected. If there is a tie, the item with the lowest priority score is chosen, followed by the least frequently accessed, and finally the least recently accessed.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    max_voting_score = -1
    min_priority_score = float('inf')
    min_frequency = float('inf')
    min_recency = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        voting_score = calculate_voting_score(key)
        priority_score = calculate_priority_score(key)
        frequency = metadata['access_frequency'].get(key, 0)
        recency = metadata['recency_of_access'].get(key, 0)

        if voting_score > max_voting_score:
            max_voting_score = voting_score
            candid_obj_key = key
            min_priority_score = priority_score
            min_frequency = frequency
            min_recency = recency
        elif voting_score == max_voting_score:
            if priority_score < min_priority_score:
                candid_obj_key = key
                min_priority_score = priority_score
                min_frequency = frequency
                min_recency = recency
            elif priority_score == min_priority_score:
                if frequency < min_frequency:
                    candid_obj_key = key
                    min_frequency = frequency
                    min_recency = recency
                elif frequency == min_frequency:
                    if recency < min_recency:
                        candid_obj_key = key
                        min_recency = recency

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the recency of access, recalculates the node connectivity score if necessary, and updates the priority score based on the new access frequency and recency. The voting scores are adjusted based on the updated metadata.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['recency_of_access'][key] = cache_snapshot.access_count
    metadata['priority_score'][key] = calculate_priority_score(key)
    metadata['voting_score'][key] = calculate_voting_score(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the recency of access to the current time, calculates the initial node connectivity score, and sets an initial priority score based on the insertion context and current workload pattern. The voting scores are initialized accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency_of_access'][key] = cache_snapshot.access_count
    metadata['node_connectivity'][key] = 0  # Initial node connectivity score
    metadata['priority_score'][key] = calculate_priority_score(key)
    metadata['voting_score'][key] = calculate_voting_score(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy updates the workload pattern metadata, recalculates the voting scores for the remaining items, and adjusts the priority scoring mechanism if necessary. The metadata for the evicted item is removed, and the cache state is adjusted to reflect the new state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['recency_of_access']:
        del metadata['recency_of_access'][evicted_key]
    if evicted_key in metadata['node_connectivity']:
        del metadata['node_connectivity'][evicted_key]
    if evicted_key in metadata['priority_score']:
        del metadata['priority_score'][evicted_key]
    if evicted_key in metadata['voting_score']:
        del metadata['voting_score'][evicted_key]

    # Update workload pattern and recalculate voting scores for remaining items
    for key in cache_snapshot.cache:
        metadata['voting_score'][key] = calculate_voting_score(key)