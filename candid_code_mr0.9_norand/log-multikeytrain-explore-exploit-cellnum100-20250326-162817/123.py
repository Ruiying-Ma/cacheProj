# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_FREQUENCY = 0.4
WEIGHT_RECENCY = 0.3
WEIGHT_SENSITIVITY = 0.2
WEIGHT_GLOBAL_SCORE = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache item including access frequency, access recency, sensitivity level, and a global eviction score shared among collaborative caches.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'recency_timestamp': {},  # {obj.key: timestamp}
    'sensitivity_level': {},  # {obj.key: sensitivity}
    'global_eviction_score': {}  # {obj.key: global_score}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted combination of access frequency, recency, sensitivity level, and global eviction score, with a randomized factor to anonymize access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        frequency = metadata['access_frequency'].get(key, 0)
        recency = metadata['recency_timestamp'].get(key, 0)
        sensitivity = metadata['sensitivity_level'].get(key, 0)
        global_score = metadata['global_eviction_score'].get(key, 0)
        
        score = (WEIGHT_FREQUENCY * frequency +
                 WEIGHT_RECENCY * recency +
                 WEIGHT_SENSITIVITY * sensitivity +
                 WEIGHT_GLOBAL_SCORE * global_score)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the recency timestamp, and adjusts the global eviction score based on collaborative feedback from other caches.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['recency_timestamp'][key] = cache_snapshot.access_count
    # Adjust global eviction score based on collaborative feedback (stubbed)
    metadata['global_eviction_score'][key] = metadata['global_eviction_score'].get(key, 0) + 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency, sets the recency timestamp, assigns a sensitivity level, and updates the global eviction score with collaborative input.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency_timestamp'][key] = cache_snapshot.access_count
    metadata['sensitivity_level'][key] = 1  # Initial sensitivity level (stubbed)
    metadata['global_eviction_score'][key] = 1  # Initial global score (stubbed)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy recalculates the global eviction scores for remaining items based on collaborative feedback and adjusts the sensitivity levels if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    # Remove metadata of evicted object
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['recency_timestamp']:
        del metadata['recency_timestamp'][evicted_key]
    if evicted_key in metadata['sensitivity_level']:
        del metadata['sensitivity_level'][evicted_key]
    if evicted_key in metadata['global_eviction_score']:
        del metadata['global_eviction_score'][evicted_key]
    
    # Recalculate global eviction scores for remaining items (stubbed)
    for key in cache_snapshot.cache:
        metadata['global_eviction_score'][key] = metadata['global_eviction_score'].get(key, 0) + 1
        # Adjust sensitivity levels if necessary (stubbed)
        metadata['sensitivity_level'][key] = metadata['sensitivity_level'].get(key, 1) + 1