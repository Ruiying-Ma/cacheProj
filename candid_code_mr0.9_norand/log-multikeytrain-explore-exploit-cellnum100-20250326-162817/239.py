# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
REGION_COUNT = 3  # Number of regions in the cache

# Put the metadata specifically maintained by the policy below. The policy maintains a dependency graph of cached items, access frequency counters, and timestamps of last access. It also divides the cache into regions, each with its own replacement policy.
access_frequency = {}
last_access_timestamp = {}
dependency_graph = {}
regions = [{} for _ in range(REGION_COUNT)]

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates dependencies to identify items with the least impact on other cached items, selects multiple eviction candidates based on access patterns and usage frequency, and probabilistically chooses one. At regular intervals, it also evicts the least recently used items.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    # Identify the region to evict from
    region_to_evict = min(regions, key=lambda r: sum(o.size for o in r.values()))
    
    # Select eviction candidates based on access patterns and usage frequency
    candidates = sorted(region_to_evict.values(), key=lambda o: (access_frequency[o.key], last_access_timestamp[o.key]))
    
    # Evaluate dependencies and select the least impactful item
    for candidate in candidates:
        if all(dep not in cache_snapshot.cache for dep in dependency_graph.get(candidate.key, [])):
            candid_obj_key = candidate.key
            break
    
    # If no candidate found, fallback to least recently used
    if candid_obj_key is None:
        candid_obj_key = candidates[0].key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency counter and the last access timestamp for the accessed item. It also updates the dependency graph to reflect the current state of dependencies.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    access_frequency[obj.key] += 1
    last_access_timestamp[obj.key] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency counter and last access timestamp. It updates the dependency graph to include the new item and adjusts the regions to maintain balance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    access_frequency[obj.key] = 1
    last_access_timestamp[obj.key] = cache_snapshot.access_count
    dependency_graph[obj.key] = []  # Initialize with no dependencies
    
    # Add the object to the least filled region
    least_filled_region = min(regions, key=lambda r: sum(o.size for o in r.values()))
    least_filled_region[obj.key] = obj

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy removes it from the dependency graph, updates the access frequency counters and timestamps of related items, and rebalances the regions if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    if evicted_obj.key in access_frequency:
        del access_frequency[evicted_obj.key]
    if evicted_obj.key in last_access_timestamp:
        del last_access_timestamp[evicted_obj.key]
    if evicted_obj.key in dependency_graph:
        del dependency_graph[evicted_obj.key]
    
    # Remove the evicted object from its region
    for region in regions:
        if evicted_obj.key in region:
            del region[evicted_obj.key]
            break