# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
DEFAULT_PROBABILITY_SCORE = 0.5
RECENT_PERCEIVED_AGE = 0
INITIAL_WEIGHT = 1
INITIAL_PRIORITY_SCORE = 1

# Put the metadata specifically maintained by the policy below. The policy maintains a probability score, perceived age, weight, hidden counter, access frequency, recency of access, node connectivity, priority score, voting score from multiple eviction algorithms, and current workload pattern.
metadata = {
    'probability_score': {},
    'perceived_age': {},
    'weight': {},
    'hidden_counter': {},
    'access_frequency': {},
    'recency_of_access': {},
    'node_connectivity': {},
    'priority_score': {},
    'voting_score': {},
    'workload_pattern': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy uses a voting mechanism where multiple algorithms vote on which item to evict. The item with the highest combined score from these votes is selected. If there is a tie, the item with the highest hidden counter is chosen, followed by the lowest weight, and then the probability score is used to probabilistically select the victim.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    max_voting_score = -1
    candidates = []

    for key, cached_obj in cache_snapshot.cache.items():
        voting_score = metadata['voting_score'][key]
        if voting_score > max_voting_score:
            max_voting_score = voting_score
            candidates = [key]
        elif voting_score == max_voting_score:
            candidates.append(key)

    if len(candidates) == 1:
        candid_obj_key = candidates[0]
    else:
        max_hidden_counter = -1
        hidden_counter_candidates = []
        for key in candidates:
            hidden_counter = metadata['hidden_counter'][key]
            if hidden_counter > max_hidden_counter:
                max_hidden_counter = hidden_counter
                hidden_counter_candidates = [key]
            elif hidden_counter == max_hidden_counter:
                hidden_counter_candidates.append(key)

        if len(hidden_counter_candidates) == 1:
            candid_obj_key = hidden_counter_candidates[0]
        else:
            min_weight = float('inf')
            weight_candidates = []
            for key in hidden_counter_candidates:
                weight = metadata['weight'][key]
                if weight < min_weight:
                    min_weight = weight
                    weight_candidates = [key]
                elif weight == min_weight:
                    weight_candidates.append(key)

            if len(weight_candidates) == 1:
                candid_obj_key = weight_candidates[0]
            else:
                candid_obj_key = weight_candidates[0]  # Deterministic choice

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increases the probability score, decreases the perceived age, recalculates the weight, resets the hidden counter to zero, increments the access frequency, updates the recency of access, recalculates the node connectivity score if necessary, updates the priority score, and adjusts the voting scores based on the updated metadata.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['probability_score'][key] += 0.1
    metadata['perceived_age'][key] -= 1
    metadata['weight'][key] = obj.size / (metadata['access_frequency'][key] + 1)
    metadata['hidden_counter'][key] = 0
    metadata['access_frequency'][key] += 1
    metadata['recency_of_access'][key] = cache_snapshot.access_count
    # Recalculate node connectivity score if necessary
    metadata['priority_score'][key] += 1
    # Adjust voting scores based on updated metadata
    metadata['voting_score'][key] = (
        metadata['probability_score'][key] +
        metadata['perceived_age'][key] +
        metadata['weight'][key] +
        metadata['hidden_counter'][key] +
        metadata['access_frequency'][key] +
        metadata['recency_of_access'][key] +
        metadata['node_connectivity'][key] +
        metadata['priority_score'][key]
    )

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the probability score to a default value, sets the perceived age to a recent value, calculates the initial weight, sets the hidden counter to zero, initializes the access frequency to 1, sets the recency of access to the current time, calculates the initial node connectivity score, sets an initial priority score based on the insertion context and current workload pattern, and initializes the voting scores accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['probability_score'][key] = DEFAULT_PROBABILITY_SCORE
    metadata['perceived_age'][key] = RECENT_PERCEIVED_AGE
    metadata['weight'][key] = INITIAL_WEIGHT
    metadata['hidden_counter'][key] = 0
    metadata['access_frequency'][key] = 1
    metadata['recency_of_access'][key] = cache_snapshot.access_count
    metadata['node_connectivity'][key] = 1  # Initial node connectivity score
    metadata['priority_score'][key] = INITIAL_PRIORITY_SCORE
    # Initialize voting scores based on the initial metadata
    metadata['voting_score'][key] = (
        metadata['probability_score'][key] +
        metadata['perceived_age'][key] +
        metadata['weight'][key] +
        metadata['hidden_counter'][key] +
        metadata['access_frequency'][key] +
        metadata['recency_of_access'][key] +
        metadata['node_connectivity'][key] +
        metadata['priority_score'][key]
    )

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy updates the workload pattern metadata, recalculates the voting scores for the remaining items, adjusts the priority scoring mechanism if necessary, increments the hidden counters of all items, and slightly adjusts the probability scores of remaining items to reflect the change in the cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    # Remove metadata of the evicted object
    for key in metadata:
        if evicted_key in metadata[key]:
            del metadata[key][evicted_key]

    # Update workload pattern metadata
    metadata['workload_pattern']['last_eviction'] = cache_snapshot.access_count

    # Recalculate voting scores for remaining items
    for key in cache_snapshot.cache:
        metadata['hidden_counter'][key] += 1
        metadata['probability_score'][key] *= 0.99  # Slightly adjust probability scores
        metadata['voting_score'][key] = (
            metadata['probability_score'][key] +
            metadata['perceived_age'][key] +
            metadata['weight'][key] +
            metadata['hidden_counter'][key] +
            metadata['access_frequency'][key] +
            metadata['recency_of_access'][key] +
            metadata['node_connectivity'][key] +
            metadata['priority_score'][key]
        )