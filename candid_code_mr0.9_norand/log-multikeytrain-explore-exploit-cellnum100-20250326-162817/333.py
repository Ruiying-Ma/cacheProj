# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
INITIAL_PRIORITY_LEVEL = 1
INITIAL_CACHE_LEVEL = 1
INITIAL_PROBABILISTIC_EVICTION_SCORE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency counters, timestamps of last access, promotion/demotion flags, object size, priority levels, cache levels, probabilistic eviction scores, and region identifiers for each cached object.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the eviction victim by first identifying objects with the lowest priority level and lowest access frequency. Among these, it calculates a combined score using the probabilistic eviction score and object size, and evicts the object with the highest combined score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_priority = float('inf')
    min_access_freq = float('inf')
    max_combined_score = -float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        obj_metadata = metadata[key]
        priority = obj_metadata['priority_level']
        access_freq = obj_metadata['access_frequency']
        combined_score = obj_metadata['probabilistic_eviction_score'] * cached_obj.size

        if (priority < min_priority) or (priority == min_priority and access_freq < min_access_freq) or (priority == min_priority and access_freq == min_access_freq and combined_score > max_combined_score):
            min_priority = priority
            min_access_freq = access_freq
            max_combined_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency counter is incremented, the timestamp of last access is updated, the promotion/demotion flag is set, the probabilistic eviction score is recalculated, and the region's state is updated. The priority level may be adjusted, and the object may be promoted to a higher cache level if criteria are met.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    obj_metadata = metadata[obj.key]
    obj_metadata['access_frequency'] += 1
    obj_metadata['last_access_time'] = cache_snapshot.access_count
    obj_metadata['promotion_flag'] = True
    obj_metadata['probabilistic_eviction_score'] = 1.0 / obj_metadata['access_frequency']
    # Adjust priority level and cache level if criteria are met
    if obj_metadata['access_frequency'] % 10 == 0:
        obj_metadata['priority_level'] += 1
        obj_metadata['cache_level'] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the access frequency counter is initialized, the timestamp of insertion is recorded, the promotion/demotion flag is set, the probabilistic eviction score is calculated, and the object is assigned to a region. The object is given an initial priority level and placed in the appropriate cache level.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'access_frequency': 1,
        'last_access_time': cache_snapshot.access_count,
        'promotion_flag': True,
        'size': obj.size,
        'priority_level': INITIAL_PRIORITY_LEVEL,
        'cache_level': INITIAL_CACHE_LEVEL,
        'probabilistic_eviction_score': INITIAL_PROBABILISTIC_EVICTION_SCORE,
        'region_id': 0  # Assuming a single region for simplicity
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the metadata for the evicted object is cleared. The promotion/demotion flags, priority levels, and probabilistic eviction scores of remaining objects are adjusted, and objects may be demoted to lower cache levels. The region's state is updated to reflect the eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Clear metadata for the evicted object
    if evicted_obj.key in metadata:
        del metadata[evicted_obj.key]

    # Adjust metadata for remaining objects
    for key, obj_metadata in metadata.items():
        obj_metadata['promotion_flag'] = False
        if obj_metadata['priority_level'] > INITIAL_PRIORITY_LEVEL:
            obj_metadata['priority_level'] -= 1
        if obj_metadata['cache_level'] > INITIAL_CACHE_LEVEL:
            obj_metadata['cache_level'] -= 1
        obj_metadata['probabilistic_eviction_score'] = 1.0 / obj_metadata['access_frequency']