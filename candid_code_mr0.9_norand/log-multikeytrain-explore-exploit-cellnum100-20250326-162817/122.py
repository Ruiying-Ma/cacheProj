# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_FITNESS_SCORE = 1
INITIAL_LOCAL_INTERACTION_SCORE = 0
RECENT_ACCESS_STATE = 'recent'
LESS_RECENT_ACCESS_STATE = 'less_recent'

# Put the metadata specifically maintained by the policy below. Each cache line maintains a fitness score, a local interaction score with neighboring lines, and a state indicating its access pattern. The fitness score is a combination of access frequency and recency, while the local interaction score reflects the access patterns of neighboring lines.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the cache line with the lowest combined fitness and local interaction score. If multiple lines have the same score, the state transitions are used to break ties, prioritizing lines in states indicating less recent access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        fitness_score = metadata[key]['fitness_score']
        local_interaction_score = metadata[key]['local_interaction_score']
        combined_score = fitness_score + local_interaction_score
        
        if combined_score < min_score or (combined_score == min_score and metadata[key]['state'] == LESS_RECENT_ACCESS_STATE):
            min_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the fitness score of the accessed line is increased based on its recency and frequency of access. The local interaction scores of neighboring lines are adjusted to reflect the access pattern. The state of the accessed line is updated to indicate a recent access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['fitness_score'] += 1
    metadata[key]['state'] = RECENT_ACCESS_STATE
    
    for neighbor_key in cache_snapshot.cache:
        if neighbor_key != key:
            metadata[neighbor_key]['local_interaction_score'] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the fitness score is initialized based on the initial access frequency and recency. The local interaction scores of neighboring lines are updated to reflect the new access pattern. The state of the new line is set to indicate a recent insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'fitness_score': INITIAL_FITNESS_SCORE,
        'local_interaction_score': INITIAL_LOCAL_INTERACTION_SCORE,
        'state': RECENT_ACCESS_STATE
    }
    
    for neighbor_key in cache_snapshot.cache:
        if neighbor_key != key:
            metadata[neighbor_key]['local_interaction_score'] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the fitness scores of neighboring lines are adjusted to reflect the removal. The local interaction scores are recalculated to account for the change in the cache landscape. The states of neighboring lines are updated to reflect the new access dynamics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata[evicted_key]
    
    for neighbor_key in cache_snapshot.cache:
        metadata[neighbor_key]['local_interaction_score'] -= 1
        metadata[neighbor_key]['state'] = LESS_RECENT_ACCESS_STATE