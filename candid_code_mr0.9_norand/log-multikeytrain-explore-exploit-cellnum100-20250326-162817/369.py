# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_HEIGHT = 1
INITIAL_PRIORITY = 1

# Put the metadata specifically maintained by the policy below. The policy maintains a 'height' value for each item, representing its position in a usage hierarchy, and a 'priority' score based on access frequency and recency.
metadata = {
    'height': {},  # Dictionary to store height values for each object
    'priority': {},  # Dictionary to store priority scores for each object
    'access_frequency': {},  # Dictionary to store access frequency for each object
    'last_access_time': {}  # Dictionary to store the last access time for each object
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the item with the lowest 'height' value. If multiple items have the same 'height', the item with the lowest 'priority' score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_height = float('inf')
    min_priority = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        height = metadata['height'][key]
        priority = metadata['priority'][key]
        
        if height < min_height or (height == min_height and priority < min_priority):
            min_height = height
            min_priority = priority
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the 'height' value of the accessed item is increased, and its 'priority' score is recalculated based on its new access frequency and recency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['height'][key] += 1
    metadata['access_frequency'][key] += 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['priority'][key] = calculate_priority(metadata['access_frequency'][key], metadata['last_access_time'][key])

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy assigns it an initial 'height' value and calculates its 'priority' score based on its insertion time.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['height'][key] = INITIAL_HEIGHT
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['priority'][key] = calculate_priority(metadata['access_frequency'][key], metadata['last_access_time'][key])

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy adjusts the 'height' values of the remaining items to maintain the usage hierarchy and recalculates their 'priority' scores if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    del metadata['height'][evicted_key]
    del metadata['priority'][evicted_key]
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_time'][evicted_key]
    
    # Adjust heights and priorities of remaining items if necessary
    for key in cache_snapshot.cache:
        metadata['priority'][key] = calculate_priority(metadata['access_frequency'][key], metadata['last_access_time'][key])

def calculate_priority(access_frequency, last_access_time):
    '''
    Helper function to calculate the priority score based on access frequency and recency.
    - Args:
        - `access_frequency`: The access frequency of the object.
        - `last_access_time`: The last access time of the object.
    - Return:
        - `priority`: The calculated priority score.
    '''
    # Example priority calculation: higher frequency and more recent access give higher priority
    return access_frequency / (1 + last_access_time)