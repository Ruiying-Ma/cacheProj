# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict, deque

# Put tunable constant parameters below
HISTORY_SIZE = 1000  # Maximum number of historical accesses to keep
FREQUENCY_DECAY = 0.9  # Decay factor for real-time access frequency

# Put the metadata specifically maintained by the policy below. The policy maintains a historical access log, a prediction model for future accesses, and real-time access frequency statistics for each cached item.
historical_access_log = deque(maxlen=HISTORY_SIZE)
real_time_access_frequency = defaultdict(int)
predicted_access_probability = defaultdict(float)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy uses the prediction model to forecast future accesses and evicts the item with the lowest predicted access probability, while also considering real-time access frequency to avoid evicting frequently accessed items.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = predicted_access_probability[key] * real_time_access_frequency[key]
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the real-time access frequency statistics and logs the access in the historical access log to refine the prediction model.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Update real-time access frequency
    real_time_access_frequency[obj.key] += 1
    
    # Log the access in the historical access log
    historical_access_log.append((cache_snapshot.access_count, obj.key))
    
    # Update the prediction model
    update_prediction_model()

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy updates the historical access log with the insertion event and initializes the real-time access frequency statistics for the new item.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Initialize real-time access frequency for the new item
    real_time_access_frequency[obj.key] = 1
    
    # Log the insertion in the historical access log
    historical_access_log.append((cache_snapshot.access_count, obj.key))
    
    # Update the prediction model
    update_prediction_model()

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy updates the historical access log to record the eviction and adjusts the prediction model to improve future eviction decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Log the eviction in the historical access log
    historical_access_log.append((cache_snapshot.access_count, evicted_obj.key))
    
    # Remove the evicted object from real-time access frequency statistics
    if evicted_obj.key in real_time_access_frequency:
        del real_time_access_frequency[evicted_obj.key]
    
    # Update the prediction model
    update_prediction_model()

def update_prediction_model():
    '''
    This function updates the prediction model based on the historical access log.
    - Return: `None`
    '''
    access_counts = defaultdict(int)
    total_accesses = len(historical_access_log)
    
    for _, key in historical_access_log:
        access_counts[key] += 1
    
    for key in access_counts:
        predicted_access_probability[key] = access_counts[key] / total_accesses