# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_FREQUENCY = 1
INITIAL_RECENCY = 0
PRIORITY_THRESHOLD = 10

# Put the metadata specifically maintained by the policy below. The policy maintains a list of cache objects with metadata including access frequency, recency, and a dynamic priority score. Each object is assigned a 'snake' level indicating its priority tier.
cache_metadata = {}

def calculate_priority(frequency, recency):
    return frequency + recency

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evicts the object with the lowest priority score, which is determined by a combination of its access frequency and recency. Objects in the lowest 'snake' level are considered first for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_priority = float('inf')
    lowest_snake_level = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        metadata = cache_metadata[key]
        priority = calculate_priority(metadata['frequency'], metadata['recency'])
        snake_level = metadata['snake_level']
        
        if snake_level < lowest_snake_level or (snake_level == lowest_snake_level and priority < lowest_priority):
            lowest_snake_level = snake_level
            lowest_priority = priority
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the object are updated. The object's priority score is recalculated, and it may be moved to a higher 'snake' level if its new priority score surpasses a threshold.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata = cache_metadata[obj.key]
    metadata['frequency'] += 1
    metadata['recency'] = cache_snapshot.access_count
    priority = calculate_priority(metadata['frequency'], metadata['recency'])
    
    if priority > PRIORITY_THRESHOLD:
        metadata['snake_level'] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, it is assigned an initial access frequency, recency, and priority score. The object is placed in the lowest 'snake' level initially.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    cache_metadata[obj.key] = {
        'frequency': INITIAL_FREQUENCY,
        'recency': cache_snapshot.access_count,
        'snake_level': 0
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the metadata is updated to remove the evicted object from the list. The priority scores of remaining objects are recalculated, and objects may be moved between 'snake' levels based on their new scores.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del cache_metadata[evicted_obj.key]
    
    for key, metadata in cache_metadata.items():
        priority = calculate_priority(metadata['frequency'], metadata['recency'])
        if priority > PRIORITY_THRESHOLD:
            metadata['snake_level'] += 1