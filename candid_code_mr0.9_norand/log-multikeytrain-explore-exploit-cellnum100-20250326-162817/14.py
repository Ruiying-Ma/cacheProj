# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
REGION_COUNT = 3  # Number of regions to classify objects into

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, and region classification for each object. It also keeps a global time window and a prediction model for access patterns.
metadata = {
    'access_frequency': {},  # Dictionary to store access frequency of objects
    'last_access_time': {},  # Dictionary to store last access time of objects
    'region_classification': {},  # Dictionary to store region classification of objects
    'prediction_model': {},  # Dictionary to store predicted access probability of objects
    'global_time_window': 0  # Global time window
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first identifying the region with the least recent access. Within that region, it selects the object with the lowest predicted access probability based on the prediction model.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    # Identify the region with the least recent access
    region_last_access = {region: float('inf') for region in range(REGION_COUNT)}
    for key, cached_obj in cache_snapshot.cache.items():
        region = metadata['region_classification'][key]
        last_access = metadata['last_access_time'][key]
        if last_access < region_last_access[region]:
            region_last_access[region] = last_access

    least_recent_region = min(region_last_access, key=region_last_access.get)

    # Within that region, select the object with the lowest predicted access probability
    lowest_predicted_prob = float('inf')
    for key, cached_obj in cache_snapshot.cache.items():
        if metadata['region_classification'][key] == least_recent_region:
            predicted_prob = metadata['prediction_model'][key]
            if predicted_prob < lowest_predicted_prob:
                lowest_predicted_prob = predicted_prob
                candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the last access time and increments the access frequency of the object. It also updates the prediction model with the new access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['access_frequency'][key] += 1
    # Update prediction model (simple example: frequency-based prediction)
    metadata['prediction_model'][key] = metadata['access_frequency'][key] / (cache_snapshot.access_count + 1)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy assigns it to a region based on initial access patterns, sets its access frequency to 1, and records the current time as the last access time. The prediction model is updated to include the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['access_frequency'][key] = 1
    # Assign to a region (simple example: round-robin assignment)
    metadata['region_classification'][key] = cache_snapshot.access_count % REGION_COUNT
    # Update prediction model (initial prediction)
    metadata['prediction_model'][key] = 1 / (cache_snapshot.access_count + 1)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata and updates the region's statistics to reflect the eviction. The prediction model is adjusted to account for the removal of the object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    del metadata['last_access_time'][evicted_key]
    del metadata['access_frequency'][evicted_key]
    del metadata['region_classification'][evicted_key]
    del metadata['prediction_model'][evicted_key]