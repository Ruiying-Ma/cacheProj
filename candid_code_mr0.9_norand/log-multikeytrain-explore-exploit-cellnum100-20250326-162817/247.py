# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for access frequency
BETA = 0.3   # Weight for recency
GAMMA = 0.2  # Weight for dependency score

# Put the metadata specifically maintained by the policy below. The policy maintains a list of potential eviction candidates, their access frequencies, recency of access, and dependency scores indicating the impact of their eviction on other cached items.
access_frequency = collections.defaultdict(int)
recency = collections.defaultdict(int)
dependency_score = collections.defaultdict(int)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy probabilistically selects an eviction candidate based on a weighted combination of low access frequency, low recency of access, and low dependency score, ensuring minimal impact on cache performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_score = float('inf')
    for key, cached_obj in cache_snapshot.cache.items():
        score = (ALPHA * access_frequency[key] +
                 BETA * recency[key] +
                 GAMMA * dependency_score[key])
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the accessed item are updated. The dependency scores of related items are also adjusted to reflect the current access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    access_frequency[obj.key] += 1
    recency[obj.key] = cache_snapshot.access_count
    # Update dependency scores (this is a placeholder, actual dependency logic may vary)
    for key in cache_snapshot.cache:
        if key != obj.key:
            dependency_score[key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy updates the list of potential eviction candidates, recalculates access frequencies, recency, and dependency scores for all items, and integrates the new item into these metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    access_frequency[obj.key] = 1
    recency[obj.key] = cache_snapshot.access_count
    dependency_score[obj.key] = 0
    # Update dependency scores for all items (this is a placeholder, actual dependency logic may vary)
    for key in cache_snapshot.cache:
        if key != obj.key:
            dependency_score[key] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the evicted item from the list of candidates, recalculates the access frequencies, recency, and dependency scores for the remaining items, and adjusts the probabilities for future evictions accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    del access_frequency[evicted_obj.key]
    del recency[evicted_obj.key]
    del dependency_score[evicted_obj.key]
    # Update dependency scores for all items (this is a placeholder, actual dependency logic may vary)
    for key in cache_snapshot.cache:
        dependency_score[key] = max(0, dependency_score[key] - 1)