# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
DEFAULT_ACCESS_FREQUENCY = 1
PRIORITY_SCORE_WEIGHT = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, and a dynamic priority score for each cache entry. It also keeps track of overall access patterns and usage statistics to adjust eviction strategies in real-time.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'last_access_time': {},  # {obj.key: last_access_time}
    'priority_score': {}     # {obj.key: priority_score}
}

def calculate_priority_score(frequency, last_access_time, current_time):
    return PRIORITY_SCORE_WEIGHT * frequency + (1 - PRIORITY_SCORE_WEIGHT) * (current_time - last_access_time)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy probabilistically selects an eviction candidate from multiple potential candidates based on their priority scores, which are dynamically adjusted according to access frequency and recency. Less frequently accessed and older entries are more likely to be evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_priority_score = float('inf')
    for key, cached_obj in cache_snapshot.cache.items():
        priority_score = metadata['priority_score'][key]
        if priority_score < min_priority_score:
            min_priority_score = priority_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and last access time of the entry are updated. The priority score is recalculated to reflect the increased frequency and recency, making the entry less likely to be evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['priority_score'][key] = calculate_priority_score(
        metadata['access_frequency'][key],
        metadata['last_access_time'][key],
        cache_snapshot.access_count
    )

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata with a default access frequency, the current time as the last access time, and a calculated priority score. The overall access patterns and usage statistics are updated to reflect the new entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] = DEFAULT_ACCESS_FREQUENCY
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['priority_score'][key] = calculate_priority_score(
        metadata['access_frequency'][key],
        metadata['last_access_time'][key],
        cache_snapshot.access_count
    )

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy updates the overall access patterns and usage statistics to account for the removal. The priority scores of remaining entries may be adjusted to reflect the change in the cache's state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
        del metadata['last_access_time'][evicted_key]
        del metadata['priority_score'][evicted_key]
    
    # Optionally adjust priority scores of remaining entries if needed
    for key in cache_snapshot.cache:
        metadata['priority_score'][key] = calculate_priority_score(
            metadata['access_frequency'][key],
            metadata['last_access_time'][key],
            cache_snapshot.access_count
        )