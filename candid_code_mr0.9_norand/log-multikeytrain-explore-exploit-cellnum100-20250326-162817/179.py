# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for recency in the eviction score
BETA = 0.5   # Weight for frequency in the eviction score

# Put the metadata specifically maintained by the policy below. The policy maintains multiple parallel lists of cached objects, each with different criteria for eviction (e.g., least recently used, least frequently used, random). Additionally, each cached item has a probabilistic eviction score based on its access frequency and recency.
lru_list = []
lfu_dict = {}
eviction_scores = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates the eviction candidates from each parallel list and uses a probabilistic algorithm to select the final eviction victim, considering both the lists' criteria and the probabilistic eviction scores.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_score = float('inf')
    for key in cache_snapshot.cache:
        if eviction_scores[key] < min_score:
            min_score = eviction_scores[key]
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and recency metadata for the hit item across all parallel lists. The probabilistic eviction score for the item is recalculated based on the updated access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    # Update LRU list
    if obj.key in lru_list:
        lru_list.remove(obj.key)
    lru_list.append(obj.key)
    
    # Update LFU dictionary
    if obj.key in lfu_dict:
        lfu_dict[obj.key] += 1
    else:
        lfu_dict[obj.key] = 1
    
    # Recalculate eviction score
    recency = cache_snapshot.access_count - lru_list.index(obj.key)
    frequency = lfu_dict[obj.key]
    eviction_scores[obj.key] = ALPHA * recency + BETA * frequency

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy adds the object to all parallel lists with initial metadata values. The probabilistic eviction score is initialized based on default access frequency and recency assumptions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    # Add to LRU list
    lru_list.append(obj.key)
    
    # Initialize LFU dictionary
    lfu_dict[obj.key] = 1
    
    # Initialize eviction score
    recency = cache_snapshot.access_count - lru_list.index(obj.key)
    frequency = lfu_dict[obj.key]
    eviction_scores[obj.key] = ALPHA * recency + BETA * frequency

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the evicted item from all parallel lists and recalculates the probabilistic eviction scores for the remaining items, adjusting for the change in the cache's state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    # Remove from LRU list
    if evicted_obj.key in lru_list:
        lru_list.remove(evicted_obj.key)
    
    # Remove from LFU dictionary
    if evicted_obj.key in lfu_dict:
        del lfu_dict[evicted_obj.key]
    
    # Remove from eviction scores
    if evicted_obj.key in eviction_scores:
        del eviction_scores[evicted_obj.key]
    
    # Recalculate eviction scores for remaining items
    for key in cache_snapshot.cache:
        recency = cache_snapshot.access_count - lru_list.index(key)
        frequency = lfu_dict[key]
        eviction_scores[key] = ALPHA * recency + BETA * frequency