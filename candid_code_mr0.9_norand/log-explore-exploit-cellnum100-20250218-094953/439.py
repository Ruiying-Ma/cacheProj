# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
PREDICTIVE_BANDWIDTH = 0.5  # Example constant for predictive bandwidth

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, predicted future access patterns using predictive bandwidth, contextual information about the workload, and subspace clusters of similar data access patterns.
access_frequency = collections.defaultdict(int)
last_access_time = collections.defaultdict(int)
predicted_future_access = collections.defaultdict(float)
contextual_workload = collections.defaultdict(int)
subspace_clusters = collections.defaultdict(set)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by identifying the cache entry with the lowest predicted future access probability, considering both the contextual workload and the subspace cluster it belongs to, while also factoring in the access frequency and recency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (access_frequency[key] * 0.5 + 
                 (cache_snapshot.access_count - last_access_time[key]) * 0.3 + 
                 predicted_future_access[key] * 0.2)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency, last access time, and refines the predictive model for future access patterns based on the current context and subspace cluster characteristics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] += 1
    last_access_time[key] = cache_snapshot.access_count
    predicted_future_access[key] = PREDICTIVE_BANDWIDTH * access_frequency[key] / (cache_snapshot.access_count - last_access_time[key] + 1)
    contextual_workload[key] += 1
    subspace_clusters[key].add(obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy updates the contextual information, integrates the new object into the appropriate subspace cluster, and adjusts the predictive model to account for the new data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 1
    last_access_time[key] = cache_snapshot.access_count
    predicted_future_access[key] = PREDICTIVE_BANDWIDTH
    contextual_workload[key] = 1
    subspace_clusters[key].add(obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy updates the contextual workload metadata, removes the evicted object from its subspace cluster, and recalibrates the predictive model to improve future eviction decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del access_frequency[evicted_key]
    del last_access_time[evicted_key]
    del predicted_future_access[evicted_key]
    del contextual_workload[evicted_key]
    subspace_clusters[evicted_key].remove(evicted_obj)