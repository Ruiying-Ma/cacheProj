# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
LATENCY_SCORE_BASE = 1.0
CONTEXTUAL_RELEVANCE_BASE = 1.0
DATA_PRIORITY_BASE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains access timestamps, predicted future access times, latency scores, access frequency, last access time, contextual relevance score, and data priority level for each cache entry.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score that combines latency score, predicted future access times, inverse of access frequency, recency of access, contextual relevance, and data priority. The entry with the lowest composite score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_composite_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        composite_score = (
            meta['latency_score'] +
            meta['predicted_future_access_time'] +
            (1 / meta['access_frequency']) +
            (cache_snapshot.access_count - meta['last_access_time']) +
            meta['contextual_relevance_score'] +
            meta['data_priority_level']
        )
        
        if composite_score < min_composite_score:
            min_composite_score = composite_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access timestamp to the current time, recalculates the predicted future access time using the machine learning model, adjusts the latency score based on recent access patterns, increments the access frequency, updates the last access time to the current time, and recalculates the contextual relevance score based on the current context. The data priority level remains unchanged.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    meta = metadata[obj.key]
    
    meta['access_timestamp'] = current_time
    meta['predicted_future_access_time'] = predict_future_access_time(obj)
    meta['latency_score'] = adjust_latency_score(meta['latency_score'])
    meta['access_frequency'] += 1
    meta['last_access_time'] = current_time
    meta['contextual_relevance_score'] = compute_contextual_relevance_score(obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access timestamp to the current time, predicts the future access time using the model, assigns an initial latency score based on the object's type and size, sets the access frequency to 1, sets the last access time to the current time, computes the contextual relevance score based on the insertion context, and assigns the data priority level based on predefined criteria.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    metadata[obj.key] = {
        'access_timestamp': current_time,
        'predicted_future_access_time': predict_future_access_time(obj),
        'latency_score': initial_latency_score(obj),
        'access_frequency': 1,
        'last_access_time': current_time,
        'contextual_relevance_score': compute_contextual_relevance_score(obj),
        'data_priority_level': assign_data_priority_level(obj)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata associated with the evicted entry and recalibrates the latency scores, predicted access times, and composite scores for the remaining entries to ensure optimal future eviction decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata[evicted_obj.key]
    for key in cache_snapshot.cache:
        meta = metadata[key]
        meta['latency_score'] = adjust_latency_score(meta['latency_score'])
        meta['predicted_future_access_time'] = predict_future_access_time(cache_snapshot.cache[key])

def predict_future_access_time(obj):
    # Placeholder for the machine learning model prediction
    return 1.0

def adjust_latency_score(current_latency_score):
    # Placeholder for adjusting latency score based on recent access patterns
    return current_latency_score * 0.9

def initial_latency_score(obj):
    # Placeholder for initial latency score based on object's type and size
    return LATENCY_SCORE_BASE * obj.size

def compute_contextual_relevance_score(obj):
    # Placeholder for computing contextual relevance score based on the current context
    return CONTEXTUAL_RELEVANCE_BASE

def assign_data_priority_level(obj):
    # Placeholder for assigning data priority level based on predefined criteria
    return DATA_PRIORITY_BASE