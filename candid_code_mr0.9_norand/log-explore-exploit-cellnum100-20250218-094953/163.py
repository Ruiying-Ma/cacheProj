# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for LFU
BETA = 0.5   # Weight for LRU

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, user access patterns, and predicted future access likelihood for each cached object.
access_frequency = {}
last_access_time = {}
predicted_future_access = {}
user_access_patterns = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by combining least frequently used (LFU) and least recently used (LRU) metrics, adjusted by predicted future access likelihood and user priority levels.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        freq = access_frequency.get(key, 0)
        last_access = last_access_time.get(key, 0)
        future_access = predicted_future_access.get(key, 0)
        
        # Calculate combined score
        score = ALPHA * freq + BETA * (cache_snapshot.access_count - last_access) - future_access
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency, last access time, and refines the predicted future access likelihood based on the latest user access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = access_frequency.get(key, 0) + 1
    last_access_time[key] = cache_snapshot.access_count
    # Update predicted future access likelihood based on user access patterns
    predicted_future_access[key] = user_access_patterns.get(key, 0) + 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency, sets the last access time to the current time, and estimates the initial predicted future access likelihood based on user access profiling.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 1
    last_access_time[key] = cache_snapshot.access_count
    # Initialize predicted future access likelihood based on user access profiling
    predicted_future_access[key] = user_access_patterns.get(key, 0)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalibrates the predicted future access likelihood for remaining objects and adjusts user access profiles to reflect the change in cache composition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in access_frequency:
        del access_frequency[evicted_key]
    if evicted_key in last_access_time:
        del last_access_time[evicted_key]
    if evicted_key in predicted_future_access:
        del predicted_future_access[evicted_key]
    
    # Recalibrate predicted future access likelihood for remaining objects
    for key in cache_snapshot.cache:
        predicted_future_access[key] = user_access_patterns.get(key, 0)