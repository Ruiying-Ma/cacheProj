# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 1.0
WEIGHT_LAST_ACCESS_TIME = 1.0
WEIGHT_REPLICATION_FACTOR = 1.0
WEIGHT_PRIORITY_LEVEL = 1.0
WEIGHT_PREDICTIVE_LATENCY = 1.0
WEIGHT_RESOURCE_UTILIZATION = 1.0
WEIGHT_TEMPORAL_LOCALITY = 1.0
WEIGHT_NETWORK_CONNECTIVITY = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, replication factor, synchronization status, priority level, network topology, predictive latency model, temporal locality score, resource utilization index, and prefetch score for each cached object.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'replication_factor': {},
    'synchronization_status': {},
    'priority_level': {},
    'predictive_latency': {},
    'temporal_locality': {},
    'resource_utilization': {},
    'prefetch_score': {},
    'network_connectivity': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score that considers low access frequency, old last access time, low replication factor, low priority level, high predictive latency, high resource utilization index, and low temporal locality score. It also prefers to evict objects from nodes with higher connectivity to minimize network impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (
            WEIGHT_ACCESS_FREQUENCY * metadata['access_frequency'].get(key, 0) +
            WEIGHT_LAST_ACCESS_TIME * (cache_snapshot.access_count - metadata['last_access_time'].get(key, 0)) +
            WEIGHT_REPLICATION_FACTOR * metadata['replication_factor'].get(key, 0) +
            WEIGHT_PRIORITY_LEVEL * metadata['priority_level'].get(key, 0) +
            WEIGHT_PREDICTIVE_LATENCY * metadata['predictive_latency'].get(key, 0) +
            WEIGHT_RESOURCE_UTILIZATION * metadata['resource_utilization'].get(key, 0) +
            WEIGHT_TEMPORAL_LOCALITY * metadata['temporal_locality'].get(key, 0) +
            WEIGHT_NETWORK_CONNECTIVITY * metadata['network_connectivity'].get(key, 0)
        )
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the last access time, checks and updates the synchronization status, re-evaluates the priority level, increases the temporal locality score, updates the predictive latency model, and adjusts the resource utilization index.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Update other metadata as needed
    # For simplicity, we assume these are updated based on some predefined logic
    metadata['synchronization_status'][key] = True
    metadata['priority_level'][key] = 1
    metadata['temporal_locality'][key] = metadata['temporal_locality'].get(key, 0) + 1
    metadata['predictive_latency'][key] = 1
    metadata['resource_utilization'][key] = 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency, sets the current time as the last access time, determines the replication factor based on network topology, sets the initial synchronization status, assigns a priority level, initializes the temporal locality score, predictive latency model, resource utilization index, and prefetch score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['replication_factor'][key] = 1
    metadata['synchronization_status'][key] = True
    metadata['priority_level'][key] = 1
    metadata['temporal_locality'][key] = 1
    metadata['predictive_latency'][key] = 1
    metadata['resource_utilization'][key] = 1
    metadata['prefetch_score'][key] = 1
    metadata['network_connectivity'][key] = 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy updates the network topology metadata, adjusts the replication factors and synchronization statuses of related objects, and recalculates the predictive latency model and resource utilization index for the remaining entries.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    # Remove metadata for the evicted object
    for key in metadata:
        if evicted_key in metadata[key]:
            del metadata[key][evicted_key]
    
    # Update other metadata as needed
    # For simplicity, we assume these are updated based on some predefined logic
    for key in cache_snapshot.cache:
        metadata['replication_factor'][key] = 1
        metadata['synchronization_status'][key] = True
        metadata['predictive_latency'][key] = 1
        metadata['resource_utilization'][key] = 1