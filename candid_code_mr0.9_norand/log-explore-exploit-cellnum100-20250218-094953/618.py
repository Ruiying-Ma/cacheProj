# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import numpy as np

# Put tunable constant parameters below
LATENCY_IMPACT_WEIGHT = 0.5
PREDICTION_WEIGHT = 0.3
AGE_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains a latency extraction score for each cache entry, a neural feedback loop for learning access patterns, a prediction weight matrix for forecasting future accesses, and a temporal allocation counter for tracking the age of cache entries.
latency_extraction_score = {}
neural_feedback_loop = {}
prediction_weight_matrix = {}
temporal_allocation_counter = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by combining the latency extraction score, prediction weight matrix, and temporal allocation counter to identify the least likely to be accessed entry with the highest latency impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        latency_score = latency_extraction_score.get(key, 0)
        prediction_score = prediction_weight_matrix.get(key, 0)
        age_score = temporal_allocation_counter.get(key, 0)
        
        combined_score = (LATENCY_IMPACT_WEIGHT * latency_score +
                          PREDICTION_WEIGHT * prediction_score +
                          AGE_WEIGHT * age_score)
        
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the latency extraction score is updated based on the access time, the neural feedback loop adjusts its weights to reinforce the access pattern, the prediction weight matrix is updated to reflect the recent access, and the temporal allocation counter is reset.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    latency_extraction_score[key] = cache_snapshot.access_count
    neural_feedback_loop[key] = neural_feedback_loop.get(key, 0) + 1
    prediction_weight_matrix[key] = prediction_weight_matrix.get(key, 0) + 1
    temporal_allocation_counter[key] = 0

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the latency extraction score is initialized, the neural feedback loop is updated to include the new entry, the prediction weight matrix is adjusted to account for the new entry, and the temporal allocation counter is set to zero.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    latency_extraction_score[key] = cache_snapshot.access_count
    neural_feedback_loop[key] = 1
    prediction_weight_matrix[key] = 1
    temporal_allocation_counter[key] = 0

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the latency extraction score of the evicted entry is removed, the neural feedback loop is retrained to exclude the evicted entry, the prediction weight matrix is recalibrated, and the temporal allocation counters of remaining entries are incremented.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in latency_extraction_score:
        del latency_extraction_score[evicted_key]
    if evicted_key in neural_feedback_loop:
        del neural_feedback_loop[evicted_key]
    if evicted_key in prediction_weight_matrix:
        del prediction_weight_matrix[evicted_key]
    if evicted_key in temporal_allocation_counter:
        del temporal_allocation_counter[evicted_key]
    
    for key in cache_snapshot.cache.keys():
        temporal_allocation_counter[key] += 1