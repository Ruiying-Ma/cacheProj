# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
INITIAL_REPLICATION_FACTOR = 1
ADAPTIVE_THRESHOLD_DECAY = 0.9

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry including access frequency, last access timestamp, and a replication factor. It also keeps a global adaptive threshold for access frequency and temporal locality scores.
metadata = {}
global_adaptive_threshold = 1.0

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the entry with the lowest combined score of access frequency and temporal locality, adjusted by the adaptive threshold. If multiple candidates exist, the one with the lowest replication factor is chosen.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    min_replication_factor = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata[key]['access_frequency']
        last_access_timestamp = metadata[key]['last_access_timestamp']
        replication_factor = metadata[key]['replication_factor']
        
        combined_score = (access_frequency + (cache_snapshot.access_count - last_access_timestamp)) / global_adaptive_threshold
        
        if combined_score < min_score or (combined_score == min_score and replication_factor < min_replication_factor):
            min_score = combined_score
            min_replication_factor = replication_factor
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and last access timestamp of the hit entry are updated. The global adaptive threshold is recalibrated based on the new access patterns to ensure optimal performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['access_frequency'] += 1
    metadata[key]['last_access_timestamp'] = cache_snapshot.access_count
    
    # Recalibrate the global adaptive threshold
    global global_adaptive_threshold
    global_adaptive_threshold = ADAPTIVE_THRESHOLD_DECAY * global_adaptive_threshold + (1 - ADAPTIVE_THRESHOLD_DECAY) * metadata[key]['access_frequency']

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and last access timestamp. The replication factor is set based on the object's importance and likelihood of being accessed again. The global adaptive threshold is also adjusted to account for the new entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'access_frequency': 1,
        'last_access_timestamp': cache_snapshot.access_count,
        'replication_factor': INITIAL_REPLICATION_FACTOR
    }
    
    # Adjust the global adaptive threshold
    global global_adaptive_threshold
    global_adaptive_threshold = ADAPTIVE_THRESHOLD_DECAY * global_adaptive_threshold + (1 - ADAPTIVE_THRESHOLD_DECAY) * metadata[key]['access_frequency']

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an entry, the policy recalculates the global adaptive threshold to reflect the current cache state. The replication factors of remaining entries are reviewed and adjusted if necessary to maintain balance and performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    # Recalculate the global adaptive threshold
    global global_adaptive_threshold
    total_access_frequency = sum(meta['access_frequency'] for meta in metadata.values())
    global_adaptive_threshold = total_access_frequency / len(metadata) if metadata else 1.0
    
    # Adjust replication factors if necessary
    for key in metadata:
        metadata[key]['replication_factor'] = max(1, metadata[key]['replication_factor'] - 1)