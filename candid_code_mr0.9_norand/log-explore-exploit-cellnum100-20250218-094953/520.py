# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
INITIAL_PREDICTIVE_ENTROPY_SCORE = 0.5
INITIAL_REINFORCEMENT_PRIORITY = 1.0
PREDICTIVE_ENTROPY_DECREASE = 0.01
REINFORCEMENT_PRIORITY_INCREASE = 0.1
REINFORCEMENT_PRIORITY_DECREASE = 0.05

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including predictive entropy scores for each cache entry, access latency variations, reinforcement priority values, and a data synchronization buffer status.
metadata = {
    'predictive_entropy_scores': {},
    'access_latency_variations': {},
    'reinforcement_priorities': {},
    'data_sync_buffer': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the cache entry with the highest predictive entropy score, indicating the least predictable access pattern, while also considering entries with high access latency variation and low reinforcement priority.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    max_score = -1

    for key, cached_obj in cache_snapshot.cache.items():
        score = metadata['predictive_entropy_scores'].get(key, 0) + \
                metadata['access_latency_variations'].get(key, 0) - \
                metadata['reinforcement_priorities'].get(key, 0)
        if score > max_score:
            max_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the predictive entropy score by decreasing it slightly, adjusts the access latency variation based on the latest access time, increases the reinforcement priority value, and checks the data synchronization buffer for any necessary updates.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['predictive_entropy_scores'][key] = max(0, metadata['predictive_entropy_scores'].get(key, INITIAL_PREDICTIVE_ENTROPY_SCORE) - PREDICTIVE_ENTROPY_DECREASE)
    metadata['access_latency_variations'][key] = cache_snapshot.access_count
    metadata['reinforcement_priorities'][key] = metadata['reinforcement_priorities'].get(key, INITIAL_REINFORCEMENT_PRIORITY) + REINFORCEMENT_PRIORITY_INCREASE
    # Check and update data synchronization buffer if necessary
    if key in metadata['data_sync_buffer']:
        metadata['data_sync_buffer'][key] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the predictive entropy score to a moderate value, sets the initial access latency variation based on the insertion time, assigns a default reinforcement priority, and updates the data synchronization buffer to reflect the new entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['predictive_entropy_scores'][key] = INITIAL_PREDICTIVE_ENTROPY_SCORE
    metadata['access_latency_variations'][key] = cache_snapshot.access_count
    metadata['reinforcement_priorities'][key] = INITIAL_REINFORCEMENT_PRIORITY
    metadata['data_sync_buffer'][key] = cache_snapshot.access_count

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalculates the predictive entropy scores for remaining entries, adjusts the access latency variations to account for the removal, decreases the reinforcement priority values of other entries slightly, and clears any data synchronization buffer entries related to the evicted object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['predictive_entropy_scores']:
        del metadata['predictive_entropy_scores'][evicted_key]
    if evicted_key in metadata['access_latency_variations']:
        del metadata['access_latency_variations'][evicted_key]
    if evicted_key in metadata['reinforcement_priorities']:
        del metadata['reinforcement_priorities'][evicted_key]
    if evicted_key in metadata['data_sync_buffer']:
        del metadata['data_sync_buffer'][evicted_key]

    for key in cache_snapshot.cache:
        metadata['predictive_entropy_scores'][key] = max(0, metadata['predictive_entropy_scores'].get(key, INITIAL_PREDICTIVE_ENTROPY_SCORE) - PREDICTIVE_ENTROPY_DECREASE)
        metadata['access_latency_variations'][key] = cache_snapshot.access_count
        metadata['reinforcement_priorities'][key] = max(0, metadata['reinforcement_priorities'].get(key, INITIAL_REINFORCEMENT_PRIORITY) - REINFORCEMENT_PRIORITY_DECREASE)