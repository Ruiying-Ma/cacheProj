# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import threading

# Put tunable constant parameters below
DATA_RESIDENCY_THRESHOLD = 0.5  # Example threshold for data residency status

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry including last access time, frequency of access, data residency status, and a load factor indicating the current cache utilization. Synchronization locks are used to ensure thread-safe updates to the metadata.
metadata = {}
lock = threading.Lock()

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combination of the least frequently used (LFU) and least recently used (LRU) metrics, with a preference for evicting entries with lower data residency status and considering the current load factor to maintain optimal cache performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    with lock:
        for key, cached_obj in cache_snapshot.cache.items():
            last_access_time = metadata[key]['last_access_time']
            access_frequency = metadata[key]['access_frequency']
            data_residency_status = metadata[key]['data_residency_status']
            
            # Calculate score based on LRU and LFU
            score = (cache_snapshot.access_count - last_access_time) * access_frequency
            
            # Adjust score based on data residency status
            if data_residency_status < DATA_RESIDENCY_THRESHOLD:
                score *= 0.5
            
            if score < min_score:
                min_score = score
                candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the last access time and increments the access frequency for the hit entry. The data residency status is re-evaluated, and synchronization locks ensure these updates are thread-safe.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    with lock:
        metadata[obj.key]['last_access_time'] = cache_snapshot.access_count
        metadata[obj.key]['access_frequency'] += 1
        metadata[obj.key]['data_residency_status'] = calculate_data_residency_status(cache_snapshot, obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the metadata with the current time as the last access time, sets the access frequency to one, and determines the initial data residency status. The load factor is recalculated, and synchronization locks are used to ensure consistency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    with lock:
        metadata[obj.key] = {
            'last_access_time': cache_snapshot.access_count,
            'access_frequency': 1,
            'data_residency_status': calculate_data_residency_status(cache_snapshot, obj)
        }
        update_load_factor(cache_snapshot)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy updates the load factor to reflect the removal of the entry. It also re-evaluates the data residency status of remaining entries and releases any synchronization locks held during the eviction process.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    with lock:
        if evicted_obj.key in metadata:
            del metadata[evicted_obj.key]
        update_load_factor(cache_snapshot)
        for key in cache_snapshot.cache:
            metadata[key]['data_residency_status'] = calculate_data_residency_status(cache_snapshot, cache_snapshot.cache[key])

def calculate_data_residency_status(cache_snapshot, obj):
    '''
    Helper function to calculate the data residency status of an object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object for which to calculate the data residency status.
    - Return:
        - `data_residency_status`: The calculated data residency status.
    '''
    return obj.size / cache_snapshot.capacity

def update_load_factor(cache_snapshot):
    '''
    Helper function to update the load factor of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
    - Return: `None`
    '''
    load_factor = cache_snapshot.size / cache_snapshot.capacity
    for key in metadata:
        metadata[key]['load_factor'] = load_factor