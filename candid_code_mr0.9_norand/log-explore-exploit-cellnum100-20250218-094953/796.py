# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
BASELINE_TEMPORAL_ENTROPY = 1.0
INITIAL_PREDICTED_FUTURE_ACCESS_TIME = 10.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, predicted future access time, and a temporal entropy score for each cache entry. It also keeps a global consistency score to ensure cache coherence.
metadata = {}
global_consistency_score = 0

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score for each entry based on its temporal entropy, predicted future access time, and access frequency. The entry with the lowest composite score is selected for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_composite_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        entry_metadata = metadata[key]
        composite_score = (entry_metadata['temporal_entropy'] + 
                           entry_metadata['predicted_future_access_time'] - 
                           entry_metadata['access_frequency'])
        
        if composite_score < min_composite_score:
            min_composite_score = composite_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the last access time to the current time, increments the access frequency, recalculates the predicted future access time using predictive feedback, and adjusts the temporal entropy score based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    entry_metadata = metadata[obj.key]
    
    entry_metadata['last_access_time'] = current_time
    entry_metadata['access_frequency'] += 1
    entry_metadata['predicted_future_access_time'] = current_time + INITIAL_PREDICTED_FUTURE_ACCESS_TIME
    entry_metadata['temporal_entropy'] = BASELINE_TEMPORAL_ENTROPY / entry_metadata['access_frequency']

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the last access time to the current time, sets the access frequency to one, predicts the future access time based on initial patterns, and assigns a baseline temporal entropy score. The global consistency score is also updated to reflect the new state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    
    metadata[obj.key] = {
        'last_access_time': current_time,
        'access_frequency': 1,
        'predicted_future_access_time': current_time + INITIAL_PREDICTED_FUTURE_ACCESS_TIME,
        'temporal_entropy': BASELINE_TEMPORAL_ENTROPY
    }
    
    global global_consistency_score
    global_consistency_score += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an entry, the policy recalculates the global consistency score to ensure cache coherence and adjusts the temporal entropy scores of remaining entries to reflect the new cache state. It also updates the predicted future access times for remaining entries based on the eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata[evicted_obj.key]
    
    global global_consistency_score
    global_consistency_score -= 1
    
    for key, entry_metadata in metadata.items():
        entry_metadata['temporal_entropy'] *= 1.1
        entry_metadata['predicted_future_access_time'] += 1