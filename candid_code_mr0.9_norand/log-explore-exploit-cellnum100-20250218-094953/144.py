# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for predictive score calculation

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access timestamp, predictive score, temporal access index, and load distribution metrics for each cache entry.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'last_access_timestamp': {},  # {obj.key: timestamp}
    'predictive_score': {},  # {obj.key: score}
    'temporal_access_index': {},  # {obj.key: index}
    'load_distribution': {}  # {obj.key: load}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the cache entry with the lowest predictive score. If multiple entries have the same score, it considers the least recently accessed entry among them, while also ensuring balanced load distribution.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    min_timestamp = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        score = metadata['predictive_score'][key]
        timestamp = metadata['last_access_timestamp'][key]
        if score < min_score or (score == min_score and timestamp < min_timestamp):
            min_score = score
            min_timestamp = timestamp
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the last access timestamp, increments the access frequency, recalculates the predictive score, updates the temporal access index, and adjusts load distribution metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['access_frequency'][key] += 1
    metadata['predictive_score'][key] = ALPHA * metadata['access_frequency'][key] + (1 - ALPHA) * (cache_snapshot.access_count - metadata['last_access_timestamp'][key])
    metadata['temporal_access_index'][key] = cache_snapshot.access_count
    # Adjust load distribution metrics if needed

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the last access timestamp, sets the access frequency to one, calculates an initial predictive score, initializes the temporal access index, and updates load distribution metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['access_frequency'][key] = 1
    metadata['predictive_score'][key] = ALPHA * 1 + (1 - ALPHA) * (cache_snapshot.access_count - metadata['last_access_timestamp'][key])
    metadata['temporal_access_index'][key] = cache_snapshot.access_count
    metadata['load_distribution'][key] = obj.size
    # Update load distribution metrics if needed

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes all metadata associated with the evicted entry, recalculates predictive scores for remaining entries, and recalibrates load distribution metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_timestamp'][evicted_key]
    del metadata['predictive_score'][evicted_key]
    del metadata['temporal_access_index'][evicted_key]
    del metadata['load_distribution'][evicted_key]
    
    # Recalculate predictive scores for remaining entries
    for key in cache_snapshot.cache:
        metadata['predictive_score'][key] = ALPHA * metadata['access_frequency'][key] + (1 - ALPHA) * (cache_snapshot.access_count - metadata['last_access_timestamp'][key])
    
    # Recalibrate load distribution metrics if needed