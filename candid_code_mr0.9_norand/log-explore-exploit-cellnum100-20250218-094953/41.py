# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
LRU_WEIGHT = 0.4
LFU_WEIGHT = 0.4
SYNC_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for access frequency, last access time, synchronization status, and partition ownership for each cache line.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'last_access_time': {},  # {obj.key: last_access_time}
    'synchronization_status': {},  # {obj.key: sync_status}
    'partition_ownership': {},  # {obj.key: partition_id}
    'partition_population': {}  # {partition_id: population_count}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining least recently used (LRU), least frequently used (LFU), and synchronization status, prioritizing cache lines that are least synchronized and belong to the most populated partitions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        lru_score = cache_snapshot.access_count - metadata['last_access_time'][key]
        lfu_score = metadata['access_frequency'][key]
        sync_score = metadata['synchronization_status'][key]
        partition_id = metadata['partition_ownership'][key]
        partition_population = metadata['partition_population'][partition_id]
        
        weighted_score = (LRU_WEIGHT * lru_score) + (LFU_WEIGHT * lfu_score) + (SYNC_WEIGHT * sync_score / partition_population)
        
        if weighted_score < min_score:
            min_score = weighted_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the last access time to the current time, increments the access frequency, and checks the synchronization status to ensure coherence across parallel processes.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['access_frequency'][key] += 1
    # Assuming synchronization status is updated externally

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the last access time to the current time, sets the access frequency to one, assigns the object to a memory partition, and sets the synchronization status to unsynchronized.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['access_frequency'][key] = 1
    # Assign to a partition (for simplicity, using a single partition)
    partition_id = 0
    metadata['partition_ownership'][key] = partition_id
    if partition_id not in metadata['partition_population']:
        metadata['partition_population'][partition_id] = 0
    metadata['partition_population'][partition_id] += 1
    metadata['synchronization_status'][key] = 0  # Unsynchronized

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy updates the partition metadata to reflect the removal, adjusts the synchronization status of related cache lines, and recalculates the weighted scores for remaining cache lines in the affected partition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    partition_id = metadata['partition_ownership'][evicted_key]
    
    # Update partition population
    metadata['partition_population'][partition_id] -= 1
    if metadata['partition_population'][partition_id] == 0:
        del metadata['partition_population'][partition_id]
    
    # Remove metadata for evicted object
    del metadata['last_access_time'][evicted_key]
    del metadata['access_frequency'][evicted_key]
    del metadata['synchronization_status'][evicted_key]
    del metadata['partition_ownership'][evicted_key]
    
    # Adjust synchronization status of related cache lines (if any)
    # Assuming synchronization status is updated externally