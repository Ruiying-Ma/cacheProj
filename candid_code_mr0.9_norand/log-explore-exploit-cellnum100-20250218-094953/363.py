# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_COGNITIVE_DISSONANCE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains a computational ontology of cached objects, tracking their semantic relationships, access frequencies, and recency. It also keeps a measure of cognitive dissonance to gauge the disparity between expected and actual access patterns.
metadata = {
    'access_frequency': {},  # key -> frequency
    'recency': {},  # key -> last access time
    'cognitive_dissonance': {},  # key -> dissonance score
    'semantic_relationships': {}  # key -> set of related keys
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by identifying the object with the highest cognitive dissonance score, indicating it is least likely to be accessed again soon. If multiple objects have similar scores, it uses semantic parsing to select the one with the least critical relationship to other cached objects.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    max_dissonance = -1
    for key, cached_obj in cache_snapshot.cache.items():
        dissonance = metadata['cognitive_dissonance'].get(key, 0)
        if dissonance > max_dissonance:
            max_dissonance = dissonance
            candid_obj_key = key
        elif dissonance == max_dissonance:
            # Use semantic parsing to break ties
            if len(metadata['semantic_relationships'].get(key, set())) < len(metadata['semantic_relationships'].get(candid_obj_key, set())):
                candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and recency of the object. It also recalculates the cognitive dissonance score based on the updated access pattern and adjusts the semantic relationships within the ontology accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['recency'][key] = cache_snapshot.access_count
    # Recalculate cognitive dissonance score
    metadata['cognitive_dissonance'][key] = 1 / (metadata['access_frequency'][key] * (cache_snapshot.access_count - metadata['recency'][key] + 1))
    # Adjust semantic relationships (this is a placeholder, actual implementation would depend on specific semantics)
    metadata['semantic_relationships'][key] = set()  # Update with actual related keys

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy integrates it into the computational ontology, establishing initial semantic relationships and setting its access frequency and recency. It also assigns an initial cognitive dissonance score based on predicted access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['cognitive_dissonance'][key] = INITIAL_COGNITIVE_DISSONANCE
    metadata['semantic_relationships'][key] = set()  # Initialize with actual related keys

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the object from the computational ontology, recalculates the semantic relationships among the remaining objects, and adjusts their cognitive dissonance scores to reflect the new cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    # Remove evicted object from metadata
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['recency']:
        del metadata['recency'][evicted_key]
    if evicted_key in metadata['cognitive_dissonance']:
        del metadata['cognitive_dissonance'][evicted_key]
    if evicted_key in metadata['semantic_relationships']:
        del metadata['semantic_relationships'][evicted_key]
    
    # Recalculate semantic relationships and cognitive dissonance scores for remaining objects
    for key in cache_snapshot.cache:
        # Adjust semantic relationships (this is a placeholder, actual implementation would depend on specific semantics)
        metadata['semantic_relationships'][key] = set()  # Update with actual related keys
        # Recalculate cognitive dissonance score
        metadata['cognitive_dissonance'][key] = 1 / (metadata['access_frequency'][key] * (cache_snapshot.access_count - metadata['recency'][key] + 1))