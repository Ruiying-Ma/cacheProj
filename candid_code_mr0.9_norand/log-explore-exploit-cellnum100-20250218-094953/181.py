# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WRITE_BACK_POLICY = True  # Assume write-back policy is enabled
PREFETCH_FLAG = False  # Assume prefetch flag is initially False

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access timestamp, prefetch flag, dirty bit, global counter for cache coherence, prefetch buffer status, predictive score, cache miss ratio estimate, and memory footprint for each cache line.
metadata = {
    'access_frequency': {},
    'last_access_timestamp': {},
    'prefetch_flag': {},
    'dirty_bit': {},
    'global_counter': 0,
    'predictive_score': {},
    'cache_miss_ratio_estimate': {},
    'memory_footprint': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates a composite score for each cache line, combining LFU, LRU, prefetch flag, predictive accuracy, cache miss ratio, and memory footprint. The line with the lowest composite score is evicted, with a preference for non-dirty lines to minimize write-back overhead.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (
            metadata['access_frequency'][key] * 0.2 +
            (cache_snapshot.access_count - metadata['last_access_timestamp'][key]) * 0.2 +
            metadata['prefetch_flag'][key] * 0.1 +
            metadata['predictive_score'][key] * 0.2 +
            metadata['cache_miss_ratio_estimate'][key] * 0.2 +
            metadata['memory_footprint'][key] * 0.1
        )
        
        if metadata['dirty_bit'][key]:
            score += 1  # Penalize dirty lines to prefer non-dirty lines
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and last access timestamp are updated, the prefetch flag is cleared if set, the predictive score is adjusted for increased accuracy, the cache miss ratio is recalculated, and the memory footprint is adjusted if necessary. The global counter for cache coherence is incremented.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['prefetch_flag'][key] = False
    metadata['predictive_score'][key] += 1  # Adjust predictive score
    metadata['cache_miss_ratio_estimate'][key] = cache_snapshot.miss_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)
    metadata['memory_footprint'][key] = obj.size
    metadata['global_counter'] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the access frequency is set to 1, the last access timestamp is set to the current time, the prefetch flag is set if the object was prefetched, the dirty bit is set based on the write-back policy, the predictive score is initialized, the cache miss ratio estimate is set, and the memory footprint is recorded. The global counter for cache coherence is incremented.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['prefetch_flag'][key] = PREFETCH_FLAG
    metadata['dirty_bit'][key] = WRITE_BACK_POLICY
    metadata['predictive_score'][key] = 0
    metadata['cache_miss_ratio_estimate'][key] = cache_snapshot.miss_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)
    metadata['memory_footprint'][key] = obj.size
    metadata['global_counter'] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the global counter for cache coherence is incremented, the cache miss ratio for remaining objects is recalculated, the stochastic model is updated for future predictive accuracy, and the prefetch buffer status is updated to reflect the eviction. If the evicted line was dirty, it is written back to memory.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if metadata['dirty_bit'][evicted_key]:
        # Write back to memory if dirty
        pass
    
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_timestamp'][evicted_key]
    del metadata['prefetch_flag'][evicted_key]
    del metadata['dirty_bit'][evicted_key]
    del metadata['predictive_score'][evicted_key]
    del metadata['cache_miss_ratio_estimate'][evicted_key]
    del metadata['memory_footprint'][evicted_key]
    
    metadata['global_counter'] += 1
    
    for key in cache_snapshot.cache:
        metadata['cache_miss_ratio_estimate'][key] = cache_snapshot.miss_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)