# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
LATENCY_REDUCTION_WEIGHT = 1.0
ACCESS_FREQUENCY_WEIGHT = 1.0
SYSTEM_CALL_FREQUENCY_WEIGHT = 1.0
LAST_ACCESS_TIME_WEIGHT = 1.0
CONCURRENT_ACCESS_COUNT_WEIGHT = 1.0
SYNCHRONIZATION_PREFERENCE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, predicted future access time, synchronization status with main storage, system call frequency, and concurrent access counter for each cache entry.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'predicted_future_access_time': {},
    'synchronization_status': {},
    'system_call_frequency': {},
    'concurrent_access_counter': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combined score that considers the lowest predicted future access time, highest latency reduction potential, low access frequency, high system call frequency, old last access timestamp, and low concurrent access count, with a preference for synchronized objects.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (
            metadata['predicted_future_access_time'][key] * LATENCY_REDUCTION_WEIGHT +
            metadata['access_frequency'][key] * ACCESS_FREQUENCY_WEIGHT +
            metadata['system_call_frequency'][key] * SYSTEM_CALL_FREQUENCY_WEIGHT +
            (cache_snapshot.access_count - metadata['last_access_time'][key]) * LAST_ACCESS_TIME_WEIGHT +
            metadata['concurrent_access_counter'][key] * CONCURRENT_ACCESS_COUNT_WEIGHT +
            (0 if metadata['synchronization_status'][key] else SYNCHRONIZATION_PREFERENCE)
        )
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency, last access time, predicted future access time, system call frequency, and increments the concurrent access counter.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Predict future access time using historical data (simplified as current time + some constant)
    metadata['predicted_future_access_time'][key] = cache_snapshot.access_count + 100
    metadata['system_call_frequency'][key] += 1
    metadata['concurrent_access_counter'][key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, predicts the future access time using historical data, marks it as synchronized with main storage, sets the system call frequency based on recent patterns, and initializes the concurrent access counter to 1.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Predict future access time using historical data (simplified as current time + some constant)
    metadata['predicted_future_access_time'][key] = cache_snapshot.access_count + 100
    metadata['synchronization_status'][key] = True
    metadata['system_call_frequency'][key] = 1
    metadata['concurrent_access_counter'][key] = 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata, adjusts the synchronization status of remaining objects, recalculates the system call frequency for remaining entries, adjusts the concurrent access counters, and updates global statistics for throughput analysis.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_time'][evicted_key]
    del metadata['predicted_future_access_time'][evicted_key]
    del metadata['synchronization_status'][evicted_key]
    del metadata['system_call_frequency'][evicted_key]
    del metadata['concurrent_access_counter'][evicted_key]
    
    # Adjust synchronization status, system call frequency, and concurrent access counters for remaining objects
    for key in cache_snapshot.cache:
        metadata['synchronization_status'][key] = True
        metadata['system_call_frequency'][key] = max(1, metadata['system_call_frequency'][key] - 1)
        metadata['concurrent_access_counter'][key] = max(1, metadata['concurrent_access_counter'][key] - 1)