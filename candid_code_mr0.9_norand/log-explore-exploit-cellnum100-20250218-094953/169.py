# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
HEURISTIC_WEIGHT = 1.0
PREDICTIVE_LATENCY_FACTOR = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, synchronization lag, heuristic weights, predictive latency factors, and a FIFO queue with a circular pointer.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'last_access_time': {},  # {obj.key: last_access_time}
    'sync_lag': {},          # {obj.key: sync_lag}
    'heuristic_weights': {}, # {obj.key: heuristic_weight}
    'predictive_latency': {},# {obj.key: predictive_latency}
    'fifo_queue': [],        # list of obj.keys in FIFO order
    'circular_pointer': 0    # index of the circular pointer
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates a composite score for each entry using access frequency, last access time, synchronization lag, and predictive latency factors. The entry with the lowest score is evicted. If multiple entries have the same score, the circular pointer is used to select the victim.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    min_score_keys = []

    for key in cache_snapshot.cache:
        access_freq = metadata['access_frequency'][key]
        last_access = metadata['last_access_time'][key]
        sync_lag = metadata['sync_lag'][key]
        heuristic_weight = metadata['heuristic_weights'][key]
        predictive_latency = metadata['predictive_latency'][key]

        score = (access_freq * HEURISTIC_WEIGHT) + (last_access * PREDICTIVE_LATENCY_FACTOR) + sync_lag + heuristic_weight + predictive_latency

        if score < min_score:
            min_score = score
            min_score_keys = [key]
        elif score == min_score:
            min_score_keys.append(key)

    if len(min_score_keys) > 1:
        candid_obj_key = min_score_keys[metadata['circular_pointer'] % len(min_score_keys)]
        metadata['circular_pointer'] = (metadata['circular_pointer'] + 1) % len(metadata['fifo_queue'])
    else:
        candid_obj_key = min_score_keys[0]

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency is incremented, the last access time is updated to the current time, the synchronization lag is recalculated, heuristic weights are adjusted, and the object's frequency is set to 1 without moving it in the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['sync_lag'][key] = cache_snapshot.access_count - metadata['last_access_time'][key]
    metadata['heuristic_weights'][key] = HEURISTIC_WEIGHT
    metadata['predictive_latency'][key] = PREDICTIVE_LATENCY_FACTOR

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency to 1, sets the last access time to the current time, estimates the initial synchronization lag, assigns heuristic weights and predictive latency factors, and places the object at the rear of the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['sync_lag'][key] = 0
    metadata['heuristic_weights'][key] = HEURISTIC_WEIGHT
    metadata['predictive_latency'][key] = PREDICTIVE_LATENCY_FACTOR
    metadata['fifo_queue'].append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an entry, the policy recalculates heuristic weights and predictive latency factors for the remaining entries, adjusts synchronization lag estimates, removes the evicted object from the FIFO queue, and moves the remaining objects one step forward to fill the vacancy.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_time'][evicted_key]
    del metadata['sync_lag'][evicted_key]
    del metadata['heuristic_weights'][evicted_key]
    del metadata['predictive_latency'][evicted_key]
    metadata['fifo_queue'].remove(evicted_key)

    for key in metadata['fifo_queue']:
        metadata['sync_lag'][key] = cache_snapshot.access_count - metadata['last_access_time'][key]
        metadata['heuristic_weights'][key] = HEURISTIC_WEIGHT
        metadata['predictive_latency'][key] = PREDICTIVE_LATENCY_FACTOR