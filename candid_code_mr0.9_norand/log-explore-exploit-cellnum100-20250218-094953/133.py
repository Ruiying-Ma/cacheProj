# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_CONTEXTUAL_PRIORITY = 1

# Put the metadata specifically maintained by the policy below. The policy maintains a predictive index for future access patterns, a hierarchy level indicator for memory optimization, synchronized timestamps for each cache entry, and contextual priority scores based on usage context.
metadata = {
    'timestamps': {},  # key -> timestamp
    'contextual_priority': {},  # key -> priority score
    'predictive_index': {},  # key -> predictive index
    'hierarchy_level': {}  # key -> hierarchy level
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first considering the lowest contextual priority score, then the oldest timestamp if priorities are equal, and finally the least optimal memory hierarchy level if timestamps are also equal.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_priority = float('inf')
    oldest_timestamp = float('inf')
    lowest_hierarchy = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        priority = metadata['contextual_priority'].get(key, INITIAL_CONTEXTUAL_PRIORITY)
        timestamp = metadata['timestamps'].get(key, float('inf'))
        hierarchy = metadata['hierarchy_level'].get(key, float('inf'))

        if (priority < min_priority or
            (priority == min_priority and timestamp < oldest_timestamp) or
            (priority == min_priority and timestamp == oldest_timestamp and hierarchy < lowest_hierarchy)):
            min_priority = priority
            oldest_timestamp = timestamp
            lowest_hierarchy = hierarchy
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the timestamp to the current time, recalculates the contextual priority score based on recent usage patterns, and adjusts the predictive index to reflect the likelihood of future accesses.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    current_time = cache_snapshot.access_count
    metadata['timestamps'][obj.key] = current_time
    metadata['contextual_priority'][obj.key] = metadata['contextual_priority'].get(obj.key, INITIAL_CONTEXTUAL_PRIORITY) + 1
    metadata['predictive_index'][obj.key] = metadata['predictive_index'].get(obj.key, 0) + 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the timestamp to the current time, sets the contextual priority score based on initial usage context, and updates the predictive index to account for the new entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    current_time = cache_snapshot.access_count
    metadata['timestamps'][obj.key] = current_time
    metadata['contextual_priority'][obj.key] = INITIAL_CONTEXTUAL_PRIORITY
    metadata['predictive_index'][obj.key] = 1
    metadata['hierarchy_level'][obj.key] = 1  # Assuming initial hierarchy level is 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the evicted entry from the predictive index, recalculates the contextual priority scores for remaining entries, and adjusts the memory hierarchy indicators to optimize for the current cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    if evicted_obj.key in metadata['timestamps']:
        del metadata['timestamps'][evicted_obj.key]
    if evicted_obj.key in metadata['contextual_priority']:
        del metadata['contextual_priority'][evicted_obj.key]
    if evicted_obj.key in metadata['predictive_index']:
        del metadata['predictive_index'][evicted_obj.key]
    if evicted_obj.key in metadata['hierarchy_level']:
        del metadata['hierarchy_level'][evicted_obj.key]

    # Recalculate contextual priority scores for remaining entries
    for key in cache_snapshot.cache:
        metadata['contextual_priority'][key] = metadata['contextual_priority'].get(key, INITIAL_CONTEXTUAL_PRIORITY) + 1
        metadata['hierarchy_level'][key] = metadata['hierarchy_level'].get(key, 1)  # Adjust hierarchy level if needed