# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
INITIAL_BAYESIAN_SCORE = 1.0
FREQUENCY_DECAY = 0.9
RECENCY_DECAY = 0.9

# Put the metadata specifically maintained by the policy below. The policy maintains a probabilistic graph where nodes represent cached objects and edges represent causal relationships inferred from access patterns. Each node also stores temporal dynamics data, such as access frequency and recency, and a Bayesian score representing the likelihood of future access.
cache_metadata = {
    'nodes': {},  # key: obj.key, value: {'frequency': float, 'recency': int, 'bayesian_score': float}
    'edges': {},  # key: obj.key, value: set of keys it has causal relationships with
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by identifying the node with the lowest Bayesian score, adjusted by its temporal dynamics. It also considers the causal impact on connected nodes, preferring to evict objects that minimally disrupt the overall cache utility.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = math.inf

    for key, metadata in cache_metadata['nodes'].items():
        adjusted_score = metadata['bayesian_score'] * (metadata['frequency'] ** FREQUENCY_DECAY) * (metadata['recency'] ** RECENCY_DECAY)
        if adjusted_score < min_score:
            min_score = adjusted_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the temporal dynamics of the accessed node, increasing its access frequency and recency. It also updates the Bayesian score based on the new access pattern and adjusts the causal relationships in the graph to reflect the latest access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    if key in cache_metadata['nodes']:
        cache_metadata['nodes'][key]['frequency'] += 1
        cache_metadata['nodes'][key]['recency'] = cache_snapshot.access_count
        cache_metadata['nodes'][key]['bayesian_score'] = calculate_bayesian_score(key)

    update_causal_relationships(cache_snapshot, key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy adds a new node to the probabilistic graph, initializes its temporal dynamics, and sets an initial Bayesian score. It also updates the causal relationships by adding edges based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    cache_metadata['nodes'][key] = {
        'frequency': 1,
        'recency': cache_snapshot.access_count,
        'bayesian_score': INITIAL_BAYESIAN_SCORE
    }
    cache_metadata['edges'][key] = set()

    update_causal_relationships(cache_snapshot, key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the corresponding node from the probabilistic graph and adjusts the causal relationships of the remaining nodes. It also recalculates the Bayesian scores and temporal dynamics for the affected nodes to maintain accurate predictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in cache_metadata['nodes']:
        del cache_metadata['nodes'][evicted_key]
    if evicted_key in cache_metadata['edges']:
        del cache_metadata['edges'][evicted_key]

    for key, edges in cache_metadata['edges'].items():
        if evicted_key in edges:
            edges.remove(evicted_key)
            cache_metadata['nodes'][key]['bayesian_score'] = calculate_bayesian_score(key)

def calculate_bayesian_score(key):
    '''
    Calculate the Bayesian score for a given key based on its frequency and recency.
    '''
    metadata = cache_metadata['nodes'][key]
    return metadata['frequency'] / (1 + metadata['recency'])

def update_causal_relationships(cache_snapshot, key):
    '''
    Update the causal relationships in the graph to reflect the latest access.
    '''
    for other_key in cache_snapshot.cache:
        if other_key != key:
            cache_metadata['edges'][key].add(other_key)
            cache_metadata['nodes'][key]['bayesian_score'] = calculate_bayesian_score(key)