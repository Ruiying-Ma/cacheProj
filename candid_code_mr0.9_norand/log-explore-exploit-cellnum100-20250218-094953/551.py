# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 0.4
WEIGHT_LAST_ACCESS_TIME = 0.3
WEIGHT_CONTEXT_RELEVANCE = 0.2
WEIGHT_PREDICTED_FUTURE_ACCESS = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, context tags (e.g., user, application, time of day), predicted future access patterns, and current load on the system.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'last_access_time': {},  # {obj.key: last_access_time}
    'context_tags': {},      # {obj.key: context_tags}
    'predicted_future_access': {},  # {obj.key: predicted_future_access}
    'system_load': 0         # current system load
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by considering a weighted score that combines low access frequency, old last access time, low relevance of context tags, and low predicted future access probability, while also balancing the current system load.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'].get(key, 0)
        last_access_time = metadata['last_access_time'].get(key, 0)
        context_relevance = metadata['context_tags'].get(key, 0)
        predicted_future_access = metadata['predicted_future_access'].get(key, 0)
        
        score = (WEIGHT_ACCESS_FREQUENCY * access_frequency +
                 WEIGHT_LAST_ACCESS_TIME * (cache_snapshot.access_count - last_access_time) +
                 WEIGHT_CONTEXT_RELEVANCE * context_relevance +
                 WEIGHT_PREDICTED_FUTURE_ACCESS * predicted_future_access)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access time to the current time, and adjusts the predicted future access patterns based on the new access. It also re-evaluates the context tags for relevance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Adjust predicted future access patterns and context tags as needed
    metadata['predicted_future_access'][key] = predict_future_access(key)
    metadata['context_tags'][key] = evaluate_context_tags(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, assigns context tags based on the insertion context, and updates the predicted future access patterns. It also checks and adjusts the system load distribution.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['context_tags'][key] = assign_context_tags(key)
    metadata['predicted_future_access'][key] = predict_future_access(key)
    # Adjust system load as needed
    metadata['system_load'] = calculate_system_load()

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata for the evicted object, rebalances the load across the system, and updates the predictive models to refine future eviction decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in metadata['access_frequency']:
        del metadata['access_frequency'][key]
    if key in metadata['last_access_time']:
        del metadata['last_access_time'][key]
    if key in metadata['context_tags']:
        del metadata['context_tags'][key]
    if key in metadata['predicted_future_access']:
        del metadata['predicted_future_access'][key]
    # Rebalance system load and update predictive models
    metadata['system_load'] = calculate_system_load()
    update_predictive_models()

def predict_future_access(key):
    # Placeholder function to predict future access
    return 0

def evaluate_context_tags(key):
    # Placeholder function to evaluate context tags
    return 0

def assign_context_tags(key):
    # Placeholder function to assign context tags
    return 0

def calculate_system_load():
    # Placeholder function to calculate system load
    return 0

def update_predictive_models():
    # Placeholder function to update predictive models
    pass