# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
BASE_QCF = 1
DEFAULT_PRIORITY = 1
INITIAL_LATENCY = 10
INITIAL_APM = 0.5
INITIAL_TAI = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, predicted future access time, dynamic load metrics, data priority level, estimated latency for retrieval, Quantum Coherence Factor (QCF), Adaptive Prediction Model (APM) score, Temporal Accuracy Index (TAI), and Cross-System Synchronization (CSS) timestamp for each cached object.
metadata = {}

def calculate_composite_score(meta):
    return (meta['access_frequency'] * -1 +
            meta['last_access_time'] * -1 +
            meta['predicted_future_access_time'] * -1 +
            meta['dynamic_load'] +
            meta['priority'] * -1 +
            meta['latency'] +
            meta['QCF'] * -1 +
            meta['APM'] * -1 +
            meta['TAI'] * -1 +
            meta['CSS'] * -1)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score that combines low access frequency, old last access time, low predicted future access time, high dynamic load impact, low data priority, high latency, low QCF, low APM, and low TAI, while ensuring synchronization using the CSS timestamp. The entry with the lowest composite score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        score = calculate_composite_score(meta)
        if score < lowest_score:
            lowest_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the last access time to the current time, recalculates the predicted future access time, adjusts the data priority level, recalculates latency if necessary, increments the QCF, updates the APM score, recalculates the TAI, and refreshes the CSS timestamp to the current time.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta['access_frequency'] += 1
    meta['last_access_time'] = cache_snapshot.access_count
    meta['predicted_future_access_time'] = cache_snapshot.access_count + 10  # Example prediction
    meta['priority'] += 1
    meta['latency'] = max(1, meta['latency'] - 1)  # Example recalculation
    meta['QCF'] += 1
    meta['APM'] += 0.1  # Example update
    meta['TAI'] += 0.1  # Example recalculation
    meta['CSS'] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, estimates the initial predicted future access time, sets a default data priority level, estimates the initial latency for retrieval, initializes the QCF to a base value, sets the APM score using initial prediction data, calculates the TAI based on expected temporal relevance, and sets the CSS timestamp to the current time.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'access_frequency': 1,
        'last_access_time': cache_snapshot.access_count,
        'predicted_future_access_time': cache_snapshot.access_count + 10,  # Example prediction
        'dynamic_load': obj.size,
        'priority': DEFAULT_PRIORITY,
        'latency': INITIAL_LATENCY,
        'QCF': BASE_QCF,
        'APM': INITIAL_APM,
        'TAI': INITIAL_TAI,
        'CSS': cache_snapshot.access_count
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy recalculates the composite scores for the remaining entries, adjusts the data priority levels, recalculates the dynamic load metrics, resets the QCF of the evicted entry, adjusts the APM model, recalibrates the TAI, and updates the CSS timestamp to maintain synchronization.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata[evicted_obj.key]
    
    for key, meta in metadata.items():
        meta['priority'] = max(1, meta['priority'] - 1)  # Example adjustment
        meta['dynamic_load'] = max(1, meta['dynamic_load'] - 1)  # Example recalculation
        meta['CSS'] = cache_snapshot.access_count