# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import numpy as np

# Put tunable constant parameters below
INITIAL_CONTEXTUAL_RELEVANCE_SCORE = 1.0
INITIAL_LATENCY_EXTRACTION_SCORE = 1.0
INITIAL_PREDICTION_WEIGHT = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, contextual relevance score, knowledge graph, latency extraction score, neural feedback loop, prediction weight matrix, and temporal allocation counter for each cache entry.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'contextual_relevance_score': {},
    'knowledge_graph': {},
    'latency_extraction_score': {},
    'neural_feedback_loop': {},
    'prediction_weight_matrix': {},
    'temporal_allocation_counter': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by combining access frequency, contextual relevance score, latency extraction score, prediction weight matrix, and temporal allocation counter to identify the least relevant and least likely to be accessed entry with the highest latency impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (
            metadata['access_frequency'][key] * metadata['contextual_relevance_score'][key] *
            metadata['latency_extraction_score'][key] * metadata['prediction_weight_matrix'][key] *
            metadata['temporal_allocation_counter'][key]
        )
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates access frequency, last access time, contextual relevance score, and knowledge graph. It also updates the latency extraction score, adjusts the neural feedback loop, updates the prediction weight matrix, and resets the temporal allocation counter.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['contextual_relevance_score'][key] += 0.1  # Example update
    metadata['knowledge_graph'][key] = "Updated"  # Example update
    metadata['latency_extraction_score'][key] += 0.1  # Example update
    metadata['neural_feedback_loop'][key] = "Adjusted"  # Example update
    metadata['prediction_weight_matrix'][key] += 0.1  # Example update
    metadata['temporal_allocation_counter'][key] = 0

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes access frequency, sets the current time as the last access time, calculates an initial contextual relevance score, updates the knowledge graph, initializes the latency extraction score, updates the neural feedback loop, adjusts the prediction weight matrix, and sets the temporal allocation counter to zero.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['contextual_relevance_score'][key] = INITIAL_CONTEXTUAL_RELEVANCE_SCORE
    metadata['knowledge_graph'][key] = "Initialized"
    metadata['latency_extraction_score'][key] = INITIAL_LATENCY_EXTRACTION_SCORE
    metadata['neural_feedback_loop'][key] = "Initialized"
    metadata['prediction_weight_matrix'][key] = INITIAL_PREDICTION_WEIGHT
    metadata['temporal_allocation_counter'][key] = 0

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata of the evicted entry, including its knowledge graph entry, recalculates contextual relevance scores for remaining objects, removes the latency extraction score, retrains the neural feedback loop, recalibrates the prediction weight matrix, and increments the temporal allocation counters of remaining entries.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_time'][evicted_key]
    del metadata['contextual_relevance_score'][evicted_key]
    del metadata['knowledge_graph'][evicted_key]
    del metadata['latency_extraction_score'][evicted_key]
    del metadata['neural_feedback_loop'][evicted_key]
    del metadata['prediction_weight_matrix'][evicted_key]
    del metadata['temporal_allocation_counter'][evicted_key]
    
    for key in cache_snapshot.cache.keys():
        metadata['contextual_relevance_score'][key] -= 0.1  # Example recalculation
        metadata['temporal_allocation_counter'][key] += 1