# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 0.4
WEIGHT_RECENCY = 0.3
WEIGHT_PREDICTED_FUTURE_ACCESS = 0.2
WEIGHT_SYSTEM_LOAD_IMPACT = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, predicted future access patterns using machine learning, and system load metrics.
access_frequency = {}
recency_timestamp = {}
predicted_future_access = {}
system_load_impact = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by combining a weighted score of low access frequency, long recency of access, low predicted future access, and high system load impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (WEIGHT_ACCESS_FREQUENCY * access_frequency.get(key, 0) +
                 WEIGHT_RECENCY * (cache_snapshot.access_count - recency_timestamp.get(key, 0)) +
                 WEIGHT_PREDICTED_FUTURE_ACCESS * predicted_future_access.get(key, 0) +
                 WEIGHT_SYSTEM_LOAD_IMPACT * system_load_impact.get(key, 0))
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the recency timestamp, and updates the predicted future access pattern using the latest access data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = access_frequency.get(key, 0) + 1
    recency_timestamp[key] = cache_snapshot.access_count
    predicted_future_access[key] = predict_future_access(obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the recency timestamp to the current time, and runs a prediction model to estimate future access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 1
    recency_timestamp[key] = cache_snapshot.access_count
    predicted_future_access[key] = predict_future_access(obj)
    system_load_impact[key] = calculate_system_load_impact(obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalculates the system load metrics to reflect the change, and adjusts the predictive model to account for the removal of the evicted object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in access_frequency:
        del access_frequency[evicted_key]
    if evicted_key in recency_timestamp:
        del recency_timestamp[evicted_key]
    if evicted_key in predicted_future_access:
        del predicted_future_access[evicted_key]
    if evicted_key in system_load_impact:
        del system_load_impact[evicted_key]
    recalculate_system_load_metrics()

def predict_future_access(obj):
    '''
    Dummy function to predict future access pattern.
    '''
    # Implement your prediction model here
    return 0

def calculate_system_load_impact(obj):
    '''
    Dummy function to calculate system load impact.
    '''
    # Implement your system load impact calculation here
    return 0

def recalculate_system_load_metrics():
    '''
    Dummy function to recalculate system load metrics.
    '''
    # Implement your system load metrics recalculation here
    pass