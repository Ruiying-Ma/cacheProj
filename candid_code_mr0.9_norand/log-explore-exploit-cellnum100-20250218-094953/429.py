# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
INITIAL_CONTEXTUAL_RELEVANCE_SCORE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, contextual relevance score, and a knowledge graph linking cached objects with related data points.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'contextual_relevance_score': {},
    'knowledge_graph': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by combining predictive analytics to forecast future access patterns and contextual relevance scores to determine the least relevant object. The object with the lowest combined score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        combined_score = (metadata['access_frequency'][key] + 
                          metadata['contextual_relevance_score'][key] + 
                          (cache_snapshot.access_count - metadata['last_access_time'][key]))
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency, last access time, and recalculates the contextual relevance score based on the current context. The knowledge graph is also updated to reflect any new relationships formed by the access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['contextual_relevance_score'][key] = calculate_contextual_relevance_score(cache_snapshot, obj)
    update_knowledge_graph(cache_snapshot, obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, sets the current time as the last access time, calculates an initial contextual relevance score, and updates the knowledge graph to include the new object and its relationships.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['contextual_relevance_score'][key] = INITIAL_CONTEXTUAL_RELEVANCE_SCORE
    update_knowledge_graph(cache_snapshot, obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata, including its entry in the knowledge graph, and recalculates the contextual relevance scores for remaining objects to ensure they reflect the current cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_time'][evicted_key]
    del metadata['contextual_relevance_score'][evicted_key]
    del metadata['knowledge_graph'][evicted_key]
    
    for key in metadata['contextual_relevance_score']:
        metadata['contextual_relevance_score'][key] = calculate_contextual_relevance_score(cache_snapshot, cache_snapshot.cache[key])

def calculate_contextual_relevance_score(cache_snapshot, obj):
    '''
    This function calculates the contextual relevance score for an object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object for which the score is being calculated.
    - Return:
        - `score`: The calculated contextual relevance score.
    '''
    # Placeholder for actual contextual relevance score calculation logic
    return INITIAL_CONTEXTUAL_RELEVANCE_SCORE

def update_knowledge_graph(cache_snapshot, obj):
    '''
    This function updates the knowledge graph to reflect any new relationships formed by the access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object for which the knowledge graph is being updated.
    - Return: `None`
    '''
    key = obj.key
    if key not in metadata['knowledge_graph']:
        metadata['knowledge_graph'][key] = set()
    # Placeholder for actual knowledge graph update logic