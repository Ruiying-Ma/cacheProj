# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 1.0
WEIGHT_LAST_ACCESS_TIME = 1.0
WEIGHT_OBJECT_SIZE = 1.0
WEIGHT_PREDICTED_FUTURE_ACCESS = 1.0
WEIGHT_LATENCY_SENSITIVITY = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, object size, and predicted future access patterns using a machine learning model. It also tracks the latency sensitivity of each object and a scalability factor to adapt to varying cache sizes.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'predicted_future_access': {},
    'latency_sensitivity': {},
    'scalability_factor': 1.0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by considering a weighted score that combines low access frequency, old last access time, large object size, low predicted future access, and low latency sensitivity. The scalability factor adjusts the weight of each component based on current cache size and load.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'].get(key, 0)
        last_access_time = metadata['last_access_time'].get(key, 0)
        predicted_future_access = metadata['predicted_future_access'].get(key, 0)
        latency_sensitivity = metadata['latency_sensitivity'].get(key, 0)
        
        score = (
            WEIGHT_ACCESS_FREQUENCY * (1 / (access_frequency + 1)) +
            WEIGHT_LAST_ACCESS_TIME * (cache_snapshot.access_count - last_access_time) +
            WEIGHT_OBJECT_SIZE * cached_obj.size +
            WEIGHT_PREDICTED_FUTURE_ACCESS * (1 / (predicted_future_access + 1)) +
            WEIGHT_LATENCY_SENSITIVITY * (1 / (latency_sensitivity + 1))
        ) * metadata['scalability_factor']
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access time to the current time, and refines the predicted future access pattern using the machine learning model. The latency sensitivity and scalability factor remain unchanged.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Assuming a function `predict_future_access` from the machine learning model
    metadata['predicted_future_access'][key] = predict_future_access(obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, estimates the initial predicted future access using the machine learning model, and records the object's latency sensitivity. The scalability factor is adjusted if the cache size has changed.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Assuming a function `predict_future_access` from the machine learning model
    metadata['predicted_future_access'][key] = predict_future_access(obj)
    # Assuming a function `estimate_latency_sensitivity` to estimate latency sensitivity
    metadata['latency_sensitivity'][key] = estimate_latency_sensitivity(obj)
    metadata['scalability_factor'] = calculate_scalability_factor(cache_snapshot)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all metadata associated with the evicted object and recalculates the scalability factor to ensure it reflects the current cache size and load conditions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in metadata['access_frequency']:
        del metadata['access_frequency'][key]
    if key in metadata['last_access_time']:
        del metadata['last_access_time'][key]
    if key in metadata['predicted_future_access']:
        del metadata['predicted_future_access'][key]
    if key in metadata['latency_sensitivity']:
        del metadata['latency_sensitivity'][key]
    metadata['scalability_factor'] = calculate_scalability_factor(cache_snapshot)

def predict_future_access(obj):
    # Placeholder for machine learning model prediction
    return 1

def estimate_latency_sensitivity(obj):
    # Placeholder for latency sensitivity estimation
    return 1

def calculate_scalability_factor(cache_snapshot):
    # Placeholder for scalability factor calculation
    return 1.0