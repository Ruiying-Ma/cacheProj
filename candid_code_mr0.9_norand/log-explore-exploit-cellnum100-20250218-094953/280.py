# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 0.2
WEIGHT_PREDICTED_FUTURE_ACCESS_TIME = 0.3
WEIGHT_DATA_SIZE = 0.4
WEIGHT_CONTEXT_PRIORITY = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, predicted future access time using AI models, data size, and context tags (e.g., user activity, application type).
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'predicted_future_access_time': {},
    'context_tags': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by considering a weighted score combining low access frequency, distant predicted future access time, large data size, and low-priority context tags. The item with the highest score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    max_score = -float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'].get(key, 0)
        predicted_future_access_time = metadata['predicted_future_access_time'].get(key, float('inf'))
        data_size = cached_obj.size
        context_priority = metadata['context_tags'].get(key, 1)
        
        score = (WEIGHT_ACCESS_FREQUENCY * (1 / (access_frequency + 1)) +
                 WEIGHT_PREDICTED_FUTURE_ACCESS_TIME * predicted_future_access_time +
                 WEIGHT_DATA_SIZE * data_size +
                 WEIGHT_CONTEXT_PRIORITY * context_priority)
        
        if score > max_score:
            max_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access time to the current time, and updates the predicted future access time using the AI model based on the current context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['predicted_future_access_time'][key] = predict_future_access_time(obj)
    metadata['context_tags'][key] = get_context_tags(obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, predicts the future access time using the AI model, and assigns context tags based on the current system state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['predicted_future_access_time'][key] = predict_future_access_time(obj)
    metadata['context_tags'][key] = get_context_tags(obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy logs the eviction event to refine the AI model, adjusts the context-aware caching strategy if necessary, and recalculates the weighted scores for remaining items to ensure optimal data throughput and latency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    # Log the eviction event (this is a placeholder, actual logging mechanism would be more complex)
    log_eviction_event(evicted_obj)
    
    # Remove metadata of the evicted object
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_time']:
        del metadata['last_access_time'][evicted_key]
    if evicted_key in metadata['predicted_future_access_time']:
        del metadata['predicted_future_access_time'][evicted_key]
    if evicted_key in metadata['context_tags']:
        del metadata['context_tags'][evicted_key]
    
    # Recalculate the weighted scores for remaining items
    for key in cache_snapshot.cache.keys():
        if key != evicted_key:
            update_weighted_score(key)

def predict_future_access_time(obj):
    # Placeholder for AI model prediction
    # In a real implementation, this would use an AI model to predict future access time
    return time.time() + 1000  # Dummy future time

def get_context_tags(obj):
    # Placeholder for context tag assignment
    # In a real implementation, this would analyze the current system state to assign context tags
    return 1  # Dummy context priority

def log_eviction_event(evicted_obj):
    # Placeholder for logging eviction event
    # In a real implementation, this would log the event to refine the AI model
    pass

def update_weighted_score(key):
    # Placeholder for recalculating weighted scores
    # In a real implementation, this would recalculate the scores based on updated metadata
    pass