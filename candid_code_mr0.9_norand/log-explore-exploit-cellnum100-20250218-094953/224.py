# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_SYNC_SCORE = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, and a synchronization score that indicates the importance of data consistency with the main memory.
metadata = {
    'access_frequency': {},  # key -> access frequency
    'last_access_time': {},  # key -> last access time
    'sync_score': {}         # key -> synchronization score
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a heuristic evaluation that combines the least frequently used (LFU) and least recently used (LRU) metrics, adjusted by the synchronization score to prioritize evicting data with lower synchronization importance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        freq = metadata['access_frequency'][key]
        last_access = metadata['last_access_time'][key]
        sync_score = metadata['sync_score'][key]
        
        # Heuristic score combining LFU, LRU, and sync score
        heuristic_score = (freq + 1) * (cache_snapshot.access_count - last_access) * sync_score
        
        if heuristic_score < min_score:
            min_score = heuristic_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the last access time to the current time, and recalculates the synchronization score based on the latest data consistency requirements.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Recalculate sync score if needed, here we just keep it simple
    metadata['sync_score'][key] = INITIAL_SYNC_SCORE

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, and assigns an initial synchronization score based on the object's importance for data consistency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['sync_score'][key] = INITIAL_SYNC_SCORE

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata for the evicted object and adjusts the synchronization scores of remaining objects to reflect the change in overall cache consistency requirements.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_time'][evicted_key]
    del metadata['sync_score'][evicted_key]
    
    # Adjust sync scores of remaining objects if needed, here we just keep it simple
    for key in metadata['sync_score']:
        metadata['sync_score'][key] = INITIAL_SYNC_SCORE