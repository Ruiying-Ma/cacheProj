# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
DEFAULT_DATA_RETENTION_PRIORITY = 1
DEFAULT_RETRIEVAL_TIME_ESTIMATION = 1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, data retention priority, system uptime, throughput measurements, data type categorization, and retrieval time estimation for each cached object.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'data_retention_priority': {},
    'system_uptime': {},
    'retrieval_time_estimation': {},
    'data_type': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combined score from the predictive model's least likely to be accessed prediction, low access frequency, old last access time, low data retention priority, system uptime, less critical data type, and high retrieval time estimation. Items with the lowest combined scores are evicted first.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (
            metadata['access_frequency'].get(key, 0) * 0.2 +
            (cache_snapshot.access_count - metadata['last_access_time'].get(key, 0)) * 0.2 +
            metadata['data_retention_priority'].get(key, DEFAULT_DATA_RETENTION_PRIORITY) * 0.2 +
            metadata['system_uptime'].get(key, 0) * 0.1 +
            metadata['retrieval_time_estimation'].get(key, DEFAULT_RETRIEVAL_TIME_ESTIMATION) * 0.3
        )
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the predictive model with the new access pattern, increments the access frequency, refreshes the last access time to the current time, adjusts the data retention priority based on recent throughput measurements, updates the recency of access timestamp, and recalculates the retrieval time estimation for the accessed object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['data_retention_priority'][key] = metadata['data_retention_priority'].get(key, DEFAULT_DATA_RETENTION_PRIORITY)
    metadata['system_uptime'][key] = time.time() - cache_snapshot.access_count
    metadata['retrieval_time_estimation'][key] = metadata['retrieval_time_estimation'].get(key, DEFAULT_RETRIEVAL_TIME_ESTIMATION)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy updates the predictive model with the new entry, initializes the access frequency to 1, sets the last access time to the current time, assigns a default data retention priority, incorporates the current system uptime into the metadata, categorizes the data type, and estimates the retrieval time based on initial access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['data_retention_priority'][key] = DEFAULT_DATA_RETENTION_PRIORITY
    metadata['system_uptime'][key] = time.time() - cache_snapshot.access_count
    metadata['retrieval_time_estimation'][key] = DEFAULT_RETRIEVAL_TIME_ESTIMATION
    metadata['data_type'][key] = 'default'  # Assuming a default data type for simplicity

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy updates the predictive model to remove the evicted entry, takes a memory snapshot to capture the new state of the cache, recalculates the average throughput, adjusts the data retention priorities of remaining items based on recent system behavior, removes all associated metadata of the evicted object, and recalibrates the weighted scoring system to ensure balanced future evictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in metadata['access_frequency']:
        del metadata['access_frequency'][key]
    if key in metadata['last_access_time']:
        del metadata['last_access_time'][key]
    if key in metadata['data_retention_priority']:
        del metadata['data_retention_priority'][key]
    if key in metadata['system_uptime']:
        del metadata['system_uptime'][key]
    if key in metadata['retrieval_time_estimation']:
        del metadata['retrieval_time_estimation'][key]
    if key in metadata['data_type']:
        del metadata['data_type'][key]
    
    # Recalculate average throughput and adjust data retention priorities
    total_throughput = sum(metadata['access_frequency'].values())
    average_throughput = total_throughput / len(metadata['access_frequency']) if metadata['access_frequency'] else 0
    
    for key in metadata['data_retention_priority']:
        metadata['data_retention_priority'][key] = average_throughput