# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
DEFAULT_PRIORITY_SCORE = 1.0
INITIAL_PREDICTED_FUTURE_ACCESS_TIME = 1000  # Arbitrary large number for initial prediction

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, predicted future access time, and a priority score for each cache entry.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score based on low access frequency, old last access timestamp, distant predicted future access time, and low priority score. The entry with the lowest composite score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_composite_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        composite_score = (meta['access_frequency'] * 0.25 +
                           (cache_snapshot.access_count - meta['last_access_timestamp']) * 0.25 +
                           meta['predicted_future_access_time'] * 0.25 +
                           meta['priority_score'] * 0.25)
        
        if composite_score < min_composite_score:
            min_composite_score = composite_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access timestamp to the current time, adjusts the predicted future access time based on recent access patterns, and recalculates the priority score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    meta = metadata[key]
    meta['access_frequency'] += 1
    meta['last_access_timestamp'] = cache_snapshot.access_count
    meta['predicted_future_access_time'] = (meta['predicted_future_access_time'] + (cache_snapshot.access_count - meta['last_access_timestamp'])) // 2
    meta['priority_score'] = meta['access_frequency'] / (cache_snapshot.access_count - meta['last_access_timestamp'] + 1)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, estimates the predicted future access time based on initial heuristics, and assigns a default priority score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'access_frequency': 1,
        'last_access_timestamp': cache_snapshot.access_count,
        'predicted_future_access_time': INITIAL_PREDICTED_FUTURE_ACCESS_TIME,
        'priority_score': DEFAULT_PRIORITY_SCORE
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalibrates the priority scores of remaining entries to ensure balanced prioritization and may adjust predicted future access times based on the eviction event.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    for key, meta in metadata.items():
        meta['priority_score'] = meta['access_frequency'] / (cache_snapshot.access_count - meta['last_access_timestamp'] + 1)