# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for access frequency in composite score
BETA = 0.2   # Weight for last access time in composite score
GAMMA = 0.1  # Weight for contextual priority in composite score
DELTA = 0.1  # Weight for error rate prediction in composite score
EPSILON = 0.1  # Weight for load balancing in composite score

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, predicted future access time, contextual priority, error rate predictions, and load balancing metrics for each cache entry.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'last_access_time': {},  # {obj.key: last_access_time}
    'predicted_future_access_time': {},  # {obj.key: predicted_future_access_time}
    'contextual_priority': {},  # {obj.key: contextual_priority}
    'error_rate_prediction': {},  # {obj.key: error_rate_prediction}
    'load_balancing_metrics': {}  # {obj.key: load_balancing_metrics}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by evaluating a composite score derived from the least frequently accessed, longest time since last access, lowest contextual priority, highest error rate prediction, and load balancing needs, prioritizing entries that are least likely to be needed soon and most likely to cause errors.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (
            ALPHA * metadata['access_frequency'].get(key, 0) +
            BETA * (cache_snapshot.access_count - metadata['last_access_time'].get(key, 0)) +
            GAMMA * metadata['contextual_priority'].get(key, 0) +
            DELTA * metadata['error_rate_prediction'].get(key, 0) +
            EPSILON * metadata['load_balancing_metrics'].get(key, 0)
        )
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, refreshes the last access time to the current time, recalculates the predicted future access time, adjusts the error rate prediction based on recent access patterns, and recalibrates load balancing metrics to reflect the current state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Recalculate predicted future access time, error rate prediction, and load balancing metrics
    metadata['predicted_future_access_time'][key] = cache_snapshot.access_count + 100  # Example prediction
    metadata['error_rate_prediction'][key] = 0.1  # Example adjustment
    metadata['load_balancing_metrics'][key] = 0.1  # Example adjustment

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, assigns a contextual priority based on the type of data, estimates the predicted future access time, sets an initial error rate prediction based on historical data, and updates load balancing metrics to account for the new entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['contextual_priority'][key] = 1  # Example priority
    metadata['predicted_future_access_time'][key] = cache_snapshot.access_count + 100  # Example prediction
    metadata['error_rate_prediction'][key] = 0.1  # Example initial prediction
    metadata['load_balancing_metrics'][key] = 0.1  # Example initial metric

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata for the evicted object, adjusts the contextual priority of remaining objects if necessary, recalculates load balancing metrics to reflect the removal, and adjusts error rate predictions for remaining entries based on the eviction's impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in metadata['access_frequency']:
        del metadata['access_frequency'][key]
    if key in metadata['last_access_time']:
        del metadata['last_access_time'][key]
    if key in metadata['predicted_future_access_time']:
        del metadata['predicted_future_access_time'][key]
    if key in metadata['contextual_priority']:
        del metadata['contextual_priority'][key]
    if key in metadata['error_rate_prediction']:
        del metadata['error_rate_prediction'][key]
    if key in metadata['load_balancing_metrics']:
        del metadata['load_balancing_metrics'][key]
    # Adjust contextual priority, load balancing metrics, and error rate predictions for remaining entries
    for remaining_key in cache_snapshot.cache:
        metadata['contextual_priority'][remaining_key] = 1  # Example adjustment
        metadata['load_balancing_metrics'][remaining_key] = 0.1  # Example adjustment
        metadata['error_rate_prediction'][remaining_key] = 0.1  # Example adjustment