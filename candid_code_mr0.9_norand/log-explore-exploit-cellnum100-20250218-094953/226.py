# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
REDUNDANCY_WEIGHT = 0.5
ACCESS_FREQUENCY_WEIGHT = 0.2
LAST_ACCESS_TIME_WEIGHT = 0.2
CONTEXTUAL_RELEVANCE_WEIGHT = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, contextual tags (e.g., user behavior patterns, application type), and redundancy scores (indicating data duplication across cache).
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'last_access_time': {},  # {obj.key: last_access_time}
    'contextual_tags': {},   # {obj.key: contextual_tags}
    'redundancy_scores': {}  # {obj.key: redundancy_score}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by combining predictive insights from access patterns, contextual relevance, and redundancy scores. It prioritizes evicting items with low access frequency, outdated last access time, low contextual relevance, and high redundancy scores.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'].get(key, 0)
        last_access_time = metadata['last_access_time'].get(key, 0)
        contextual_relevance = metadata['contextual_tags'].get(key, 0)
        redundancy_score = metadata['redundancy_scores'].get(key, 0)
        
        score = (REDUNDANCY_WEIGHT * redundancy_score -
                 ACCESS_FREQUENCY_WEIGHT * access_frequency -
                 LAST_ACCESS_TIME_WEIGHT * last_access_time +
                 CONTEXTUAL_RELEVANCE_WEIGHT * contextual_relevance)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access time to the current time, and re-evaluates the contextual tags and redundancy scores based on the latest access context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Re-evaluate contextual tags and redundancy scores based on the latest access context
    metadata['contextual_tags'][key] = evaluate_contextual_tags(obj)
    metadata['redundancy_scores'][key] = calculate_redundancy_score(obj, cache_snapshot)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, assigns contextual tags based on the insertion context, and calculates the initial redundancy score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['contextual_tags'][key] = evaluate_contextual_tags(obj)
    metadata['redundancy_scores'][key] = calculate_redundancy_score(obj, cache_snapshot)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy rebalances the redundancy scores of remaining items, updates contextual tags to reflect the new cache state, and adjusts predictive models to improve future eviction decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_time']:
        del metadata['last_access_time'][evicted_key]
    if evicted_key in metadata['contextual_tags']:
        del metadata['contextual_tags'][evicted_key]
    if evicted_key in metadata['redundancy_scores']:
        del metadata['redundancy_scores'][evicted_key]
    
    # Rebalance redundancy scores and update contextual tags
    for key in cache_snapshot.cache:
        metadata['redundancy_scores'][key] = calculate_redundancy_score(cache_snapshot.cache[key], cache_snapshot)
        metadata['contextual_tags'][key] = evaluate_contextual_tags(cache_snapshot.cache[key])

def evaluate_contextual_tags(obj):
    # Placeholder function to evaluate contextual tags based on the object
    return 0

def calculate_redundancy_score(obj, cache_snapshot):
    # Placeholder function to calculate redundancy score based on the object and cache state
    return 0