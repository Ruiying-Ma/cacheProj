# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import hashlib
import zlib

# Put tunable constant parameters below
INITIAL_PREDICTIVE_EMULATION_SCORE = 100

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including the data compression rate, a cryptographic hash of the data, a predictive emulation score, and temporal data layers indicating the time of last access and insertion.
metadata = {
    'compression_rate': {},
    'hash': {},
    'predictive_emulation_score': {},
    'last_access_time': {},
    'insertion_time': {}
}

def calculate_compression_rate(data):
    original_size = len(data)
    compressed_size = len(zlib.compress(data.encode('utf-8')))
    return compressed_size / original_size

def generate_hash(data):
    return hashlib.sha256(data.encode('utf-8')).hexdigest()

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first considering the data with the lowest predictive emulation score, then among those, it selects the one with the highest data compression rate. If there is a tie, it evicts the data from the oldest temporal layer.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    max_compression_rate = float('-inf')
    oldest_time = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        score = metadata['predictive_emulation_score'][key]
        compression_rate = metadata['compression_rate'][key]
        insertion_time = metadata['insertion_time'][key]

        if score < min_score or (score == min_score and compression_rate > max_compression_rate) or (score == min_score and compression_rate == max_compression_rate and insertion_time < oldest_time):
            min_score = score
            max_compression_rate = compression_rate
            oldest_time = insertion_time
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the temporal data layer to reflect the current time of access and recalculates the predictive emulation score based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key

    # Update last access time
    metadata['last_access_time'][key] = current_time

    # Recalculate predictive emulation score (example: simple increment)
    metadata['predictive_emulation_score'][key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy calculates and stores the data compression rate, generates and stores a cryptographic hash of the data, assigns an initial predictive emulation score, and updates the temporal data layer with the current time.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key
    data = obj.key  # Assuming obj.key represents the data for simplicity

    # Calculate and store compression rate
    metadata['compression_rate'][key] = calculate_compression_rate(data)

    # Generate and store cryptographic hash
    metadata['hash'][key] = generate_hash(data)

    # Assign initial predictive emulation score
    metadata['predictive_emulation_score'][key] = INITIAL_PREDICTIVE_EMULATION_SCORE

    # Update temporal data layers
    metadata['last_access_time'][key] = current_time
    metadata['insertion_time'][key] = current_time

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata including the data compression rate, cryptographic hash, predictive emulation score, and temporal data layers, and adjusts the predictive emulation model based on the eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key

    # Remove all associated metadata
    del metadata['compression_rate'][key]
    del metadata['hash'][key]
    del metadata['predictive_emulation_score'][key]
    del metadata['last_access_time'][key]
    del metadata['insertion_time'][key]

    # Adjust predictive emulation model (example: no specific adjustment needed)