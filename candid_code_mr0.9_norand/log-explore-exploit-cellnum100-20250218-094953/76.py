# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
WEIGHT_SIZE = 1.0
WEIGHT_FREQUENCY = 1.0
WEIGHT_RECENCY = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, data size, and a distributed ledger entry for each cached object to ensure consistency across distributed systems.
metadata = {
    'access_frequency': {},  # key -> frequency
    'last_access_timestamp': {},  # key -> timestamp
    'data_size': {},  # key -> size
    'distributed_ledger': {}  # key -> metadata
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining access frequency, recency of access, and data size, with a preference for evicting larger, less frequently accessed, and older objects. The distributed ledger ensures that the eviction decision is consistent across all nodes.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        frequency = metadata['access_frequency'].get(key, 0)
        last_access = metadata['last_access_timestamp'].get(key, 0)
        size = cached_obj.size
        
        score = (WEIGHT_SIZE * size) - (WEIGHT_FREQUENCY * frequency) + (WEIGHT_RECENCY * (cache_snapshot.access_count - last_access))
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the last access timestamp and increments the access frequency for the object. The distributed ledger is updated to reflect these changes to maintain consistency across the distributed system.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['distributed_ledger'][key] = {
        'frequency': metadata['access_frequency'][key],
        'last_access': metadata['last_access_timestamp'][key],
        'size': obj.size
    }

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency and last access timestamp. The distributed ledger is updated with the new object's metadata to ensure all nodes are aware of the new entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['data_size'][key] = obj.size
    metadata['distributed_ledger'][key] = {
        'frequency': metadata['access_frequency'][key],
        'last_access': metadata['last_access_timestamp'][key],
        'size': obj.size
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata and updates the distributed ledger to reflect the removal, ensuring all nodes in the distributed system are consistent with the eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in metadata['access_frequency']:
        del metadata['access_frequency'][key]
    if key in metadata['last_access_timestamp']:
        del metadata['last_access_timestamp'][key]
    if key in metadata['data_size']:
        del metadata['data_size'][key]
    if key in metadata['distributed_ledger']:
        del metadata['distributed_ledger'][key]