# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
BASELINE_PREDICTIVE_CACHING_SCORE = 1.0
INITIAL_LATENCY_METRIC = 1.0
INITIAL_PREDICTED_LATENCY = 1.0
INITIAL_MEMORY_BANDWIDTH_USAGE = 1.0
INITIAL_LOAD_DISTRIBUTION_SCORE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains cache line alignment information, access frequency, last access time, predictive caching scores, latency metrics, predicted latency, memory bandwidth usage, data size, load distribution score, and a memory blueprint of access patterns for each cache entry.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'predictive_caching_score': {},
    'latency_metric': {},
    'predicted_latency': {},
    'memory_bandwidth_usage': {},
    'data_size': {},
    'load_distribution_score': {},
    'memory_blueprint': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates a composite score for each entry based on a weighted sum of low predictive caching score, high latency metric, high memory bandwidth usage, data size, and load distribution score. The entry with the highest composite score is chosen for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    highest_composite_score = -1

    for key, cached_obj in cache_snapshot.cache.items():
        composite_score = (
            -metadata['predictive_caching_score'][key] +
            metadata['latency_metric'][key] +
            metadata['memory_bandwidth_usage'][key] +
            metadata['data_size'][key] +
            metadata['load_distribution_score'][key]
        )
        if composite_score > highest_composite_score:
            highest_composite_score = composite_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the last access time to the current time, increases the predictive caching score, adjusts the latency metric and predicted latency based on recent access patterns, and recalculates the load distribution score based on the current system load and data throughput. The memory blueprint is also updated to reflect the new access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count

    metadata['access_frequency'][key] += 1
    metadata['last_access_time'][key] = current_time
    metadata['predictive_caching_score'][key] += 1
    metadata['latency_metric'][key] = max(1, metadata['latency_metric'][key] - 0.1)
    metadata['predicted_latency'][key] = max(1, metadata['predicted_latency'][key] - 0.1)
    metadata['load_distribution_score'][key] = max(1, metadata['load_distribution_score'][key] - 0.1)
    metadata['memory_blueprint'][key] = current_time

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, initializes the predictive caching score to a baseline value, sets the initial latency metric and predicted latency, estimates initial memory bandwidth usage, calculates the initial load distribution score based on the current system load and data throughput, and updates the memory blueprint to include the new object's access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count

    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = current_time
    metadata['predictive_caching_score'][key] = BASELINE_PREDICTIVE_CACHING_SCORE
    metadata['latency_metric'][key] = INITIAL_LATENCY_METRIC
    metadata['predicted_latency'][key] = INITIAL_PREDICTED_LATENCY
    metadata['memory_bandwidth_usage'][key] = INITIAL_MEMORY_BANDWIDTH_USAGE
    metadata['data_size'][key] = obj.size
    metadata['load_distribution_score'][key] = INITIAL_LOAD_DISTRIBUTION_SCORE
    metadata['memory_blueprint'][key] = current_time

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy clears the metadata for the evicted entry, recalculates the predictive caching scores, latency metrics, predicted latency, memory bandwidth usage, and load distribution scores for the remaining entries to reflect the new cache state and current system load, and updates the memory blueprint to remove the evicted object's access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key

    # Clear metadata for the evicted entry
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_time'][evicted_key]
    del metadata['predictive_caching_score'][evicted_key]
    del metadata['latency_metric'][evicted_key]
    del metadata['predicted_latency'][evicted_key]
    del metadata['memory_bandwidth_usage'][evicted_key]
    del metadata['data_size'][evicted_key]
    del metadata['load_distribution_score'][evicted_key]
    del metadata['memory_blueprint'][evicted_key]

    # Recalculate metadata for remaining entries
    for key in cache_snapshot.cache:
        metadata['predictive_caching_score'][key] = max(1, metadata['predictive_caching_score'][key] - 0.1)
        metadata['latency_metric'][key] = max(1, metadata['latency_metric'][key] - 0.1)
        metadata['predicted_latency'][key] = max(1, metadata['predicted_latency'][key] - 0.1)
        metadata['memory_bandwidth_usage'][key] = max(1, metadata['memory_bandwidth_usage'][key] - 0.1)
        metadata['load_distribution_score'][key] = max(1, metadata['load_distribution_score'][key] - 0.1)
        metadata['memory_blueprint'][key] = cache_snapshot.access_count