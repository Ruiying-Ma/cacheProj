# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
SHARD_COUNT = 1  # Assuming a single shard for simplicity

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including shard identifiers, access frequency counters, consensus scores, and state synchronization timestamps for each cache entry.
metadata = {
    'access_frequency': {},  # Dictionary to store access frequency of each object
    'sync_timestamp': {},    # Dictionary to store state synchronization timestamp of each object
    'consensus_score': {}    # Dictionary to store consensus score of each object
}

def calculate_consensus_score(key):
    '''
    Helper function to calculate the consensus score for a given key.
    Consensus score is calculated based on access frequency and state synchronization recency.
    '''
    access_freq = metadata['access_frequency'].get(key, 0)
    sync_time = metadata['sync_timestamp'].get(key, 0)
    return access_freq / (sync_time + 1)  # Simple formula for consensus score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the entry with the lowest consensus score, which is calculated based on access frequency and state synchronization recency across shards.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_consensus_score = float('inf')
    
    for key in cache_snapshot.cache:
        score = metadata['consensus_score'].get(key, float('inf'))
        if score < min_consensus_score:
            min_consensus_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency counter and updates the state synchronization timestamp for the accessed entry, and recalculates its consensus score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['sync_timestamp'][key] = cache_snapshot.access_count
    metadata['consensus_score'][key] = calculate_consensus_score(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency counter, sets the state synchronization timestamp to the current time, and calculates the initial consensus score for the new entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['sync_timestamp'][key] = cache_snapshot.access_count
    metadata['consensus_score'][key] = calculate_consensus_score(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an entry, the policy removes all associated metadata for the evicted entry and rebalances the consensus scores of the remaining entries to ensure fault tolerance and optimal state synchronization.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['sync_timestamp']:
        del metadata['sync_timestamp'][evicted_key]
    if evicted_key in metadata['consensus_score']:
        del metadata['consensus_score'][evicted_key]
    
    # Rebalance consensus scores
    for key in cache_snapshot.cache:
        metadata['consensus_score'][key] = calculate_consensus_score(key)