# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_PREDICTIVE_SCORE = 1.0
HEURISTIC_ADJUSTMENT_FACTOR = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains a data access log, predictive cache index scores for each object, and heuristic adjustment factors for memory optimization.
data_access_log = {}
predictive_cache_index_scores = {}
heuristic_adjustment_factors = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combination of the least predictive cache index score and the heuristic adjustment factor, prioritizing objects with the lowest scores and highest memory usage.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = predictive_cache_index_scores[key] - heuristic_adjustment_factors[key] * cached_obj.size
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the data access log to reflect the recent access, recalculates the predictive cache index score for the accessed object, and adjusts the heuristic factor to optimize memory usage.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    data_access_log[obj.key] = cache_snapshot.access_count
    predictive_cache_index_scores[obj.key] = calculate_predictive_score(obj)
    heuristic_adjustment_factors[obj.key] = calculate_heuristic_factor(obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy logs the insertion in the data access log, assigns an initial predictive cache index score based on historical access patterns, and sets an initial heuristic adjustment factor for memory optimization.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    data_access_log[obj.key] = cache_snapshot.access_count
    predictive_cache_index_scores[obj.key] = INITIAL_PREDICTIVE_SCORE
    heuristic_adjustment_factors[obj.key] = calculate_heuristic_factor(obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the evicted object from the data access log, recalculates predictive cache index scores for remaining objects if necessary, and adjusts heuristic factors to reflect the new memory state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del data_access_log[evicted_obj.key]
    del predictive_cache_index_scores[evicted_obj.key]
    del heuristic_adjustment_factors[evicted_obj.key]
    for key in cache_snapshot.cache:
        predictive_cache_index_scores[key] = calculate_predictive_score(cache_snapshot.cache[key])
        heuristic_adjustment_factors[key] = calculate_heuristic_factor(cache_snapshot.cache[key])

def calculate_predictive_score(obj):
    '''
    Calculate the predictive cache index score for an object.
    - Args:
        - `obj`: The object for which to calculate the score.
    - Return:
        - `score`: The predictive cache index score.
    '''
    # Example calculation, can be adjusted based on specific needs
    return 1.0 / (1 + data_access_log[obj.key])

def calculate_heuristic_factor(obj):
    '''
    Calculate the heuristic adjustment factor for an object.
    - Args:
        - `obj`: The object for which to calculate the factor.
    - Return:
        - `factor`: The heuristic adjustment factor.
    '''
    # Example calculation, can be adjusted based on specific needs
    return HEURISTIC_ADJUSTMENT_FACTOR