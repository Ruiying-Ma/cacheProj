# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
DEFAULT_HIT_RATE = 1
DEFAULT_LOCALITY_SCORE = 1
DEFAULT_RETENTION_TIME = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including a predictive cache hit rate for each object, a dynamic cache size parameter, temporal data locality scores, and latency-aware retention times.
metadata = {
    'hit_rate': {},  # Predictive cache hit rate for each object
    'locality_score': {},  # Temporal data locality scores for each object
    'retention_time': {},  # Latency-aware retention times for each object
    'dynamic_cache_size': 0  # Dynamic cache size parameter
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the object with the lowest combined score of predictive cache hit rate and temporal data locality, adjusted by its latency-aware retention time.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        combined_score = (metadata['hit_rate'][key] + metadata['locality_score'][key]) / metadata['retention_time'][key]
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the predictive cache hit rate by incrementing it, recalculates the temporal data locality score based on recent access patterns, and adjusts the latency-aware retention time to reflect the reduced likelihood of imminent eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['hit_rate'][key] += 1
    metadata['locality_score'][key] = cache_snapshot.access_count - metadata['locality_score'][key]
    metadata['retention_time'][key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its predictive cache hit rate to a default value, sets its temporal data locality score based on initial access patterns, and assigns a latency-aware retention time based on the current cache load and object size.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['hit_rate'][key] = DEFAULT_HIT_RATE
    metadata['locality_score'][key] = cache_snapshot.access_count
    metadata['retention_time'][key] = DEFAULT_RETENTION_TIME + (cache_snapshot.size / cache_snapshot.capacity) * obj.size

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy recalculates the dynamic cache size parameter to optimize for current workload, updates the predictive cache hit rates of remaining objects to reflect the new cache composition, and adjusts the temporal data locality scores and latency-aware retention times accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['hit_rate']:
        del metadata['hit_rate'][evicted_key]
    if evicted_key in metadata['locality_score']:
        del metadata['locality_score'][evicted_key]
    if evicted_key in metadata['retention_time']:
        del metadata['retention_time'][evicted_key]
    
    metadata['dynamic_cache_size'] = cache_snapshot.size - evicted_obj.size + obj.size
    
    for key in cache_snapshot.cache:
        metadata['hit_rate'][key] = max(metadata['hit_rate'][key] - 1, 0)
        metadata['locality_score'][key] = cache_snapshot.access_count - metadata['locality_score'][key]
        metadata['retention_time'][key] = max(metadata['retention_time'][key] - 1, 1)