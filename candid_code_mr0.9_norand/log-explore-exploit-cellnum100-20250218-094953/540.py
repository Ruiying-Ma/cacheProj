# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
WEIGHT_LFU = 1
WEIGHT_LRU = 1
WEIGHT_PRIORITY = 1
WEIGHT_LATENCY = 1
WEIGHT_COHERENCE = 1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, context tags, priority level, predicted future access patterns, synchronization status, access latency, data coherence status, thread ownership, and overall cache load metrics.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'context_tags': {},
    'priority_level': {},
    'predicted_future_access': {},
    'synchronization_status': {},
    'access_latency': {},
    'data_coherence_status': {},
    'thread_ownership': {},
    'cache_load_metrics': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining least frequently used, least recently used, lowest priority level, highest access latency, and lowest data coherence status. It also considers entries not owned by any active thread and balances the cache load adaptively.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (
            WEIGHT_LFU * metadata['access_frequency'].get(key, 0) +
            WEIGHT_LRU * (cache_snapshot.access_count - metadata['last_access_time'].get(key, 0)) +
            WEIGHT_PRIORITY * metadata['priority_level'].get(key, 0) +
            WEIGHT_LATENCY * metadata['access_latency'].get(key, 0) +
            WEIGHT_COHERENCE * metadata['data_coherence_status'].get(key, 0)
        )
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, last access time, context tags, priority level, predicted future access pattern, access latency, data coherence status, and records the thread ID that accessed the entry. It also recalculates the load metrics and adjusts thread synchronization states.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Update other metadata as needed
    # For example:
    # metadata['context_tags'][key] = ...
    # metadata['priority_level'][key] = ...
    # metadata['predicted_future_access'][key] = ...
    # metadata['access_latency'][key] = ...
    # metadata['data_coherence_status'][key] = ...
    # metadata['thread_ownership'][key] = ...

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, sets context tags, estimates the future access pattern, sets the initial priority level, begins access latency tracking, verifies and sets the data coherence status, records the thread ID that performed the insertion, and updates the overall cache load metrics. It also adjusts thread synchronization states.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Initialize other metadata as needed
    # For example:
    # metadata['context_tags'][key] = ...
    # metadata['priority_level'][key] = ...
    # metadata['predicted_future_access'][key] = ...
    # metadata['access_latency'][key] = ...
    # metadata['data_coherence_status'][key] = ...
    # metadata['thread_ownership'][key] = ...

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata of the evicted entry, recalculates the priority levels and predicted future access patterns for the remaining entries, updates synchronization status, and clears the access frequency, last access time, data coherence status, and thread ownership for the evicted entry. It also recalculates the overall cache load metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    # Remove metadata for the evicted object
    metadata['access_frequency'].pop(evicted_key, None)
    metadata['last_access_time'].pop(evicted_key, None)
    metadata['context_tags'].pop(evicted_key, None)
    metadata['priority_level'].pop(evicted_key, None)
    metadata['predicted_future_access'].pop(evicted_key, None)
    metadata['synchronization_status'].pop(evicted_key, None)
    metadata['access_latency'].pop(evicted_key, None)
    metadata['data_coherence_status'].pop(evicted_key, None)
    metadata['thread_ownership'].pop(evicted_key, None)
    # Recalculate overall cache load metrics
    # For example:
    # metadata['cache_load_metrics'] = ...