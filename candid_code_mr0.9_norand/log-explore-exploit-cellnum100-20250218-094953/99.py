# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
SCALABILITY_FACTOR_BASE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, data redundancy score, and a scalability factor for each cached object.
metadata = {}

def calculate_composite_score(obj_key):
    meta = metadata[obj_key]
    return (meta['access_frequency'], -meta['last_access_timestamp'], meta['data_redundancy_score'], -meta['scalability_factor'])

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score derived from the least access frequency, oldest access timestamp, highest data redundancy score, and lowest scalability factor.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_score = None
    for key in cache_snapshot.cache:
        score = calculate_composite_score(key)
        if min_score is None or score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the last access timestamp to the current time, recalculates the data redundancy score, and adjusts the scalability factor based on system load.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    meta = metadata[obj.key]
    meta['access_frequency'] += 1
    meta['last_access_timestamp'] = cache_snapshot.access_count
    meta['data_redundancy_score'] = calculate_data_redundancy_score(obj)
    meta['scalability_factor'] = calculate_scalability_factor(cache_snapshot)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, calculates the initial data redundancy score, and sets the scalability factor based on current system throughput.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    metadata[obj.key] = {
        'access_frequency': 1,
        'last_access_timestamp': cache_snapshot.access_count,
        'data_redundancy_score': calculate_data_redundancy_score(obj),
        'scalability_factor': calculate_scalability_factor(cache_snapshot)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalculates the overall cache data redundancy score and adjusts the scalability measure to reflect the current system throughput and load.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    del metadata[evicted_obj.key]
    for key in cache_snapshot.cache:
        metadata[key]['data_redundancy_score'] = calculate_data_redundancy_score(cache_snapshot.cache[key])
        metadata[key]['scalability_factor'] = calculate_scalability_factor(cache_snapshot)

def calculate_data_redundancy_score(obj):
    # Placeholder for actual data redundancy score calculation
    return 1.0

def calculate_scalability_factor(cache_snapshot):
    # Placeholder for actual scalability factor calculation
    return SCALABILITY_FACTOR_BASE