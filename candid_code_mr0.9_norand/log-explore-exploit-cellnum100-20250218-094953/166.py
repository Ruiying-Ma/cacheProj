# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
DEFAULT_PRIORITY_LEVEL = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, synchronization status, priority level, and predicted future access patterns for each cached object.
metadata = {
    'access_frequency': collections.defaultdict(int),
    'last_access_time': collections.defaultdict(int),
    'priority_level': collections.defaultdict(lambda: DEFAULT_PRIORITY_LEVEL),
    'predicted_future_access': collections.defaultdict(float),
    'synchronization_status': collections.defaultdict(bool)
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score that combines low access frequency, old last access time, low priority level, and low predicted future access probability, while also considering bandwidth constraints for synchronization.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (
            metadata['access_frequency'][key] * 0.25 +
            (cache_snapshot.access_count - metadata['last_access_time'][key]) * 0.25 +
            metadata['priority_level'][key] * 0.25 +
            metadata['predicted_future_access'][key] * 0.25
        )
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access time to the current time, adjusts the priority level based on recent access patterns, and refines the predictive model for future accesses.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['priority_level'][key] = min(metadata['priority_level'][key] + 1, 10)  # Example adjustment
    metadata['predicted_future_access'][key] = 0.5  # Example predictive model update

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, assigns a default priority level, and begins tracking the object's access pattern for predictive analytics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['priority_level'][key] = DEFAULT_PRIORITY_LEVEL
    metadata['predicted_future_access'][key] = 0.5  # Example initial prediction
    metadata['synchronization_status'][key] = False

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata for the evicted object and recalibrates the predictive model to account for the change in the cache's content, ensuring optimal future predictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    del metadata['access_frequency'][key]
    del metadata['last_access_time'][key]
    del metadata['priority_level'][key]
    del metadata['predicted_future_access'][key]
    del metadata['synchronization_status'][key]
    # Example recalibration of predictive model
    for k in metadata['predicted_future_access']:
        metadata['predicted_future_access'][k] *= 0.9