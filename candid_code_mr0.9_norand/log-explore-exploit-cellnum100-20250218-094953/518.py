# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
PREDICTIVE_ENTROPY_WEIGHT = 0.25
CONTEXTUAL_RELEVANCE_WEIGHT = 0.25
ADAPTIVE_LATENCY_WEIGHT = 0.25
REAL_TIME_PRIORITIZATION_WEIGHT = 0.25

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including predictive entropy scores, contextual relevance scores, adaptive latency measurements, and real-time prioritization levels for each cached object.
metadata = {
    'predictive_entropy': {},
    'contextual_relevance': {},
    'adaptive_latency': {},
    'real_time_prioritization': {}
}

def calculate_composite_score(key):
    return (
        PREDICTIVE_ENTROPY_WEIGHT * metadata['predictive_entropy'].get(key, 0) +
        CONTEXTUAL_RELEVANCE_WEIGHT * metadata['contextual_relevance'].get(key, 0) +
        ADAPTIVE_LATENCY_WEIGHT * metadata['adaptive_latency'].get(key, 0) +
        REAL_TIME_PRIORITIZATION_WEIGHT * metadata['real_time_prioritization'].get(key, 0)
    )

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score for each object, combining predictive entropy (to predict future access patterns), contextual relevance (based on current workload), adaptive latency (to minimize performance impact), and real-time prioritization (to ensure high-priority objects are retained). The object with the lowest composite score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_score = math.inf
    
    for key in cache_snapshot.cache:
        score = calculate_composite_score(key)
        if score < lowest_score:
            lowest_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the predictive entropy score based on recent access patterns, adjusts the contextual relevance score according to the current workload, recalculates the adaptive latency based on recent access times, and updates the real-time prioritization level if the object's priority has changed.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['predictive_entropy'][key] = metadata['predictive_entropy'].get(key, 0) + 1
    metadata['contextual_relevance'][key] = cache_snapshot.access_count
    metadata['adaptive_latency'][key] = cache_snapshot.access_count - metadata['adaptive_latency'].get(key, cache_snapshot.access_count)
    metadata['real_time_prioritization'][key] = metadata['real_time_prioritization'].get(key, 1)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the predictive entropy score based on initial access patterns, sets the contextual relevance score according to the current workload context, measures the initial adaptive latency, and assigns a real-time prioritization level based on the object's importance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['predictive_entropy'][key] = 1
    metadata['contextual_relevance'][key] = cache_snapshot.access_count
    metadata['adaptive_latency'][key] = 0
    metadata['real_time_prioritization'][key] = 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy recalculates the predictive entropy scores for remaining objects to reflect the new access patterns, adjusts the contextual relevance scores to account for the changed workload, updates the adaptive latency measurements to reflect the new cache state, and re-evaluates the real-time prioritization levels to ensure high-priority objects are still appropriately prioritized.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['predictive_entropy']:
        del metadata['predictive_entropy'][evicted_key]
    if evicted_key in metadata['contextual_relevance']:
        del metadata['contextual_relevance'][evicted_key]
    if evicted_key in metadata['adaptive_latency']:
        del metadata['adaptive_latency'][evicted_key]
    if evicted_key in metadata['real_time_prioritization']:
        del metadata['real_time_prioritization'][evicted_key]

    for key in cache_snapshot.cache:
        metadata['predictive_entropy'][key] = metadata['predictive_entropy'].get(key, 0) + 1
        metadata['contextual_relevance'][key] = cache_snapshot.access_count
        metadata['adaptive_latency'][key] = cache_snapshot.access_count - metadata['adaptive_latency'].get(key, cache_snapshot.access_count)
        metadata['real_time_prioritization'][key] = metadata['real_time_prioritization'].get(key, 1)