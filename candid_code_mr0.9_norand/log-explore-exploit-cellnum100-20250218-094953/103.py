# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
INITIAL_ANOMALY_SCORE = 1.0
INITIAL_PREDICTIVE_LOAD_SCORE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access timestamps, anomaly scores for each object, and a predictive load score for future access patterns. It also tracks resource allocation metrics to balance cache usage.
metadata = {
    'access_timestamps': {},  # {obj.key: timestamp}
    'anomaly_scores': {},     # {obj.key: anomaly_score}
    'predictive_load_scores': {},  # {obj.key: predictive_load_score}
    'resource_allocation': {}  # {obj.key: resource_allocation_metric}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by identifying objects with the highest anomaly scores and lowest predictive load scores, indicating they are less likely to be accessed soon. Resource allocation metrics are also considered to ensure balanced cache usage.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    max_anomaly_score = -1
    min_predictive_load_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        anomaly_score = metadata['anomaly_scores'].get(key, INITIAL_ANOMALY_SCORE)
        predictive_load_score = metadata['predictive_load_scores'].get(key, INITIAL_PREDICTIVE_LOAD_SCORE)
        
        if (anomaly_score > max_anomaly_score) or (anomaly_score == max_anomaly_score and predictive_load_score < min_predictive_load_score):
            max_anomaly_score = anomaly_score
            min_predictive_load_score = predictive_load_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access timestamp and recalculates the anomaly score based on recent access patterns. The predictive load score is adjusted to reflect the increased likelihood of future accesses.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key
    
    # Update access timestamp
    metadata['access_timestamps'][key] = current_time
    
    # Recalculate anomaly score (example: decrease it slightly)
    metadata['anomaly_scores'][key] = max(0, metadata['anomaly_scores'].get(key, INITIAL_ANOMALY_SCORE) - 0.1)
    
    # Adjust predictive load score (example: increase it slightly)
    metadata['predictive_load_scores'][key] = metadata['predictive_load_scores'].get(key, INITIAL_PREDICTIVE_LOAD_SCORE) + 0.1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access timestamp, sets an initial anomaly score based on historical data, and calculates a predictive load score. Resource allocation metrics are updated to reflect the new cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key
    
    # Initialize access timestamp
    metadata['access_timestamps'][key] = current_time
    
    # Set initial anomaly score
    metadata['anomaly_scores'][key] = INITIAL_ANOMALY_SCORE
    
    # Calculate initial predictive load score
    metadata['predictive_load_scores'][key] = INITIAL_PREDICTIVE_LOAD_SCORE
    
    # Update resource allocation metrics
    metadata['resource_allocation'][key] = obj.size

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy updates resource allocation metrics to account for the freed space. Anomaly scores and predictive load scores for remaining objects are recalibrated to ensure optimal future eviction decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    # Remove metadata for evicted object
    if evicted_key in metadata['access_timestamps']:
        del metadata['access_timestamps'][evicted_key]
    if evicted_key in metadata['anomaly_scores']:
        del metadata['anomaly_scores'][evicted_key]
    if evicted_key in metadata['predictive_load_scores']:
        del metadata['predictive_load_scores'][evicted_key]
    if evicted_key in metadata['resource_allocation']:
        del metadata['resource_allocation'][evicted_key]
    
    # Recalibrate anomaly scores and predictive load scores for remaining objects
    for key in cache_snapshot.cache:
        metadata['anomaly_scores'][key] = max(0, metadata['anomaly_scores'].get(key, INITIAL_ANOMALY_SCORE) - 0.05)
        metadata['predictive_load_scores'][key] = metadata['predictive_load_scores'].get(key, INITIAL_PREDICTIVE_LOAD_SCORE) + 0.05