# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 0.4
WEIGHT_LAST_ACCESS_TIME = 0.3
WEIGHT_SYNC_LAG = 0.2
WEIGHT_PREDICTIVE_LATENCY = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, synchronization lag, heuristic weights, and predictive latency factors for each cache entry.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score for each entry, which is a weighted sum of its access frequency, last access time, synchronization lag, and predictive latency factor. The entry with the lowest score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        score = (WEIGHT_ACCESS_FREQUENCY * meta['access_frequency'] +
                 WEIGHT_LAST_ACCESS_TIME * (cache_snapshot.access_count - meta['last_access_time']) +
                 WEIGHT_SYNC_LAG * meta['sync_lag'] +
                 WEIGHT_PREDICTIVE_LATENCY * meta['predictive_latency'])
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency is incremented, the last access time is updated to the current time, the synchronization lag is recalculated based on recent access patterns, and heuristic weights are adjusted to reflect the new access frequency and latency factors.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    meta = metadata[key]
    meta['access_frequency'] += 1
    meta['last_access_time'] = cache_snapshot.access_count
    meta['sync_lag'] = calculate_sync_lag(meta)
    meta['predictive_latency'] = calculate_predictive_latency(meta)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency to 1, sets the last access time to the current time, estimates the initial synchronization lag based on similar objects, and assigns heuristic weights and predictive latency factors based on historical data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'access_frequency': 1,
        'last_access_time': cache_snapshot.access_count,
        'sync_lag': estimate_initial_sync_lag(obj),
        'predictive_latency': estimate_initial_predictive_latency(obj)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an entry, the policy recalculates the heuristic weights and predictive latency factors for the remaining entries to ensure optimal future eviction decisions, and adjusts synchronization lag estimates based on the evicted entry's final state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata[evicted_key]
    
    for key, meta in metadata.items():
        meta['sync_lag'] = calculate_sync_lag(meta)
        meta['predictive_latency'] = calculate_predictive_latency(meta)

def calculate_sync_lag(meta):
    # Placeholder function to calculate synchronization lag
    return meta['access_frequency'] * 0.1

def calculate_predictive_latency(meta):
    # Placeholder function to calculate predictive latency
    return meta['access_frequency'] * 0.05

def estimate_initial_sync_lag(obj):
    # Placeholder function to estimate initial synchronization lag
    return 1.0

def estimate_initial_predictive_latency(obj):
    # Placeholder function to estimate initial predictive latency
    return 0.5