# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
BASELINE_WEIGHT = 1
INITIAL_PREDICTIVE_SCORE = 1
INITIAL_THROUGHPUT = 1

# Put the metadata specifically maintained by the policy below. The policy maintains a synaptic weight for each cache entry, a predictive score based on access patterns, and a data throughput metric for each entry.
synaptic_weights = {}
predictive_scores = {}
data_throughputs = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the entry with the lowest combined score of synaptic weight and predictive score, while also considering the data throughput to minimize performance impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        combined_score = synaptic_weights[key] + predictive_scores[key]
        if combined_score < min_score or (combined_score == min_score and data_throughputs[key] < data_throughputs[candid_obj_key]):
            min_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the synaptic weight of the accessed entry is increased, the predictive score is updated based on recent access patterns, and the data throughput metric is recalculated to reflect the latest access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    synaptic_weights[key] += 1
    predictive_scores[key] = cache_snapshot.access_count
    data_throughputs[key] = cache_snapshot.access_count - predictive_scores[key]

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the synaptic weight to a baseline value, sets an initial predictive score based on historical data, and calculates the initial data throughput metric.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    synaptic_weights[key] = BASELINE_WEIGHT
    predictive_scores[key] = INITIAL_PREDICTIVE_SCORE
    data_throughputs[key] = INITIAL_THROUGHPUT

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an entry, the policy adjusts the synaptic weights of remaining entries to maintain balance, recalculates predictive scores to reflect the new cache state, and updates data throughput metrics to ensure optimal performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in synaptic_weights:
        del synaptic_weights[evicted_key]
    if evicted_key in predictive_scores:
        del predictive_scores[evicted_key]
    if evicted_key in data_throughputs:
        del data_throughputs[evicted_key]
    
    for key in cache_snapshot.cache:
        synaptic_weights[key] = max(BASELINE_WEIGHT, synaptic_weights[key] - 1)
        predictive_scores[key] = cache_snapshot.access_count
        data_throughputs[key] = cache_snapshot.access_count - predictive_scores[key]