# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
INITIAL_PREDICTIVE_SCORE = 1.0
INITIAL_HEURISTIC_FACTOR = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains a data access log, access frequency, last access time, predictive cache index scores, heuristic adjustment factors for memory optimization, and a model of access patterns for different types of data.
access_log = collections.defaultdict(list)
access_frequency = collections.defaultdict(int)
last_access_time = collections.defaultdict(int)
predictive_cache_index_scores = collections.defaultdict(lambda: INITIAL_PREDICTIVE_SCORE)
heuristic_adjustment_factors = collections.defaultdict(lambda: INITIAL_HEURISTIC_FACTOR)
predictive_scores = collections.defaultdict(float)

def calculate_predictive_score(key):
    return (predictive_cache_index_scores[key] * heuristic_adjustment_factors[key]) / (access_frequency[key] + 1)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by combining the least predictive cache index score, heuristic adjustment factor, LFU, and LRU metrics with a predictive score. The item with the lowest combined score and highest memory usage is selected for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = calculate_predictive_score(key)
        if score < min_score or (score == min_score and cached_obj.size > cache_snapshot.cache[candid_obj_key].size):
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the data access log, increments the access frequency, updates the last access time to the current time, recalculates the predictive cache index score, adjusts the heuristic factor for memory optimization, and updates the predictive score based on the access pattern model.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    access_log[key].append(current_time)
    access_frequency[key] += 1
    last_access_time[key] = current_time
    predictive_cache_index_scores[key] = calculate_predictive_score(key)
    heuristic_adjustment_factors[key] *= 1.01  # Example adjustment
    predictive_scores[key] = calculate_predictive_score(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy logs the insertion in the data access log, initializes the access frequency, sets the last access time to the current time, assigns an initial predictive cache index score based on historical access patterns, sets an initial heuristic adjustment factor, and calculates the predictive score based on the initial access pattern model.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    access_log[key].append(current_time)
    access_frequency[key] = 1
    last_access_time[key] = current_time
    predictive_cache_index_scores[key] = INITIAL_PREDICTIVE_SCORE
    heuristic_adjustment_factors[key] = INITIAL_HEURISTIC_FACTOR
    predictive_scores[key] = calculate_predictive_score(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the evicted object from the data access log, updates the access pattern model, recalculates predictive cache index scores for remaining objects, adjusts heuristic factors, and recalculates the predictive scores of remaining items.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    del access_log[evicted_key]
    del access_frequency[evicted_key]
    del last_access_time[evicted_key]
    del predictive_cache_index_scores[evicted_key]
    del heuristic_adjustment_factors[evicted_key]
    del predictive_scores[evicted_key]
    
    for key in cache_snapshot.cache:
        predictive_cache_index_scores[key] = calculate_predictive_score(key)
        heuristic_adjustment_factors[key] *= 0.99  # Example adjustment
        predictive_scores[key] = calculate_predictive_score(key)