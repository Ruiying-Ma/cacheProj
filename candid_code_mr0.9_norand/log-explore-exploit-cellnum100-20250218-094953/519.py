# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
THROUGHPUT_DECAY_FACTOR = 0.9
PREDICTIVE_SCORE_DECAY_FACTOR = 0.95

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry including access frequency, last access timestamp, data throughput, and a predictive score for future access likelihood.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score that considers low access frequency, older last access timestamp, low data throughput, and low predictive cache hit ratio.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        score = (meta['access_frequency'] * 0.25 +
                 (cache_snapshot.access_count - meta['last_access_timestamp']) * 0.25 +
                 meta['data_throughput'] * 0.25 +
                 meta['predictive_score'] * 0.25)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the last access timestamp to the current time, recalculates the data throughput, and adjusts the predictive score based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta['access_frequency'] += 1
    meta['last_access_timestamp'] = cache_snapshot.access_count
    meta['data_throughput'] = (meta['data_throughput'] * THROUGHPUT_DECAY_FACTOR +
                               obj.size / (cache_snapshot.access_count - meta['last_access_timestamp'] + 1))
    meta['predictive_score'] = (meta['predictive_score'] * PREDICTIVE_SCORE_DECAY_FACTOR +
                                meta['access_frequency'] / (cache_snapshot.access_count + 1))

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, estimates initial data throughput based on object size and access time, and assigns a predictive score based on historical data of similar objects.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'access_frequency': 1,
        'last_access_timestamp': cache_snapshot.access_count,
        'data_throughput': obj.size,
        'predictive_score': 1 / (cache_snapshot.access_count + 1)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata for the evicted object and recalibrates the predictive model using the remaining cache entries to improve future predictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata[evicted_obj.key]
    # Recalibrate predictive model (if needed, based on remaining cache entries)
    for key, meta in metadata.items():
        meta['predictive_score'] = (meta['access_frequency'] / (cache_snapshot.access_count + 1))