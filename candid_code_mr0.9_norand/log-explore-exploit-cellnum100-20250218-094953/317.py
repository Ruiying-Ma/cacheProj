# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
DEFAULT_ACCESS_FREQUENCY = 1
DEFAULT_PRIORITY_LEVEL = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry including access frequency, last access timestamp, synchronization status, and priority level. Additionally, it keeps a global counter for system throughput and a list of recently synchronized data blocks.
metadata = {}
global_throughput_counter = 0
recently_synchronized_blocks = []

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, old last access timestamp, low priority level, and synchronization status. Entries with the lowest scores are evicted first, with a preference for non-synchronized data to minimize data loss.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        score = (meta['access_frequency'] * 0.4 + 
                 (cache_snapshot.access_count - meta['last_access_timestamp']) * 0.3 + 
                 meta['priority_level'] * 0.2 + 
                 (0 if meta['synchronized'] else 1) * 0.1)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the last access timestamp, and checks if the data needs synchronization. If synchronized, it updates the global counter for system throughput.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta['access_frequency'] += 1
    meta['last_access_timestamp'] = cache_snapshot.access_count
    
    if meta['synchronized']:
        global global_throughput_counter
        global_throughput_counter += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata with a default access frequency, current timestamp, synchronization status as false, and a priority level based on the type of data. It also updates the global counter for system throughput.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'access_frequency': DEFAULT_ACCESS_FREQUENCY,
        'last_access_timestamp': cache_snapshot.access_count,
        'synchronized': False,
        'priority_level': DEFAULT_PRIORITY_LEVEL
    }
    
    global global_throughput_counter
    global_throughput_counter += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes its metadata, updates the global counter for system throughput, and if the evicted data was synchronized, it removes it from the list of recently synchronized data blocks.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if metadata[evicted_obj.key]['synchronized']:
        recently_synchronized_blocks.remove(evicted_obj.key)
    
    del metadata[evicted_obj.key]
    
    global global_throughput_counter
    global_throughput_counter += 1