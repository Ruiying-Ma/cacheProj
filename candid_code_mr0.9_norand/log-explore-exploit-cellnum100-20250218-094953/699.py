# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
DEFAULT_PREDICTIVE_RELEVANCE_SCORE = 1.0
DEFAULT_MEMORY_TRACE_ADJUSTMENT = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains a predictive relevance score, a memory trace adjustment factor, a categorization index, and an algorithmic bias minimization factor for each cache entry.
metadata = {
    'predictive_relevance': collections.defaultdict(lambda: DEFAULT_PREDICTIVE_RELEVANCE_SCORE),
    'memory_trace_adjustment': collections.defaultdict(lambda: DEFAULT_MEMORY_TRACE_ADJUSTMENT),
    'categorization_index': collections.defaultdict(int),
    'algorithmic_bias_minimization': collections.defaultdict(int)
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the entry with the lowest combined score of predictive relevance and memory trace adjustment, while ensuring that the categorization index and algorithmic bias minimization factor are balanced across the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        combined_score = metadata['predictive_relevance'][key] + metadata['memory_trace_adjustment'][key]
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the predictive relevance score is increased, the memory trace adjustment factor is recalibrated based on recent access patterns, the categorization index is updated to reflect the current category's access frequency, and the algorithmic bias minimization factor is adjusted to ensure fair representation.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['predictive_relevance'][key] += 1
    metadata['memory_trace_adjustment'][key] = cache_snapshot.access_count
    metadata['categorization_index'][key] += 1
    metadata['algorithmic_bias_minimization'][key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the predictive relevance score is initialized based on historical data, the memory trace adjustment factor is set to a default value, the categorization index is updated to include the new category, and the algorithmic bias minimization factor is recalculated to maintain balance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['predictive_relevance'][key] = DEFAULT_PREDICTIVE_RELEVANCE_SCORE
    metadata['memory_trace_adjustment'][key] = DEFAULT_MEMORY_TRACE_ADJUSTMENT
    metadata['categorization_index'][key] += 1
    metadata['algorithmic_bias_minimization'][key] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the predictive relevance scores of remaining entries are slightly adjusted to reflect the change, the memory trace adjustment factors are recalibrated, the categorization index is updated to remove the evicted entry's category, and the algorithmic bias minimization factor is recalculated to ensure continued fairness.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['predictive_relevance'][evicted_key]
    del metadata['memory_trace_adjustment'][evicted_key]
    del metadata['categorization_index'][evicted_key]
    del metadata['algorithmic_bias_minimization'][evicted_key]
    
    for key in cache_snapshot.cache:
        metadata['predictive_relevance'][key] *= 0.99
        metadata['memory_trace_adjustment'][key] = cache_snapshot.access_count
        metadata['categorization_index'][key] -= 1
        metadata['algorithmic_bias_minimization'][key] -= 1