# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
LATENCY_SENSITIVITY_INITIAL = 1.0
ERROR_RATE_INITIAL = 0.01
BATCH_CYCLE_RESET_THRESHOLD = 1000

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry including access frequency, last access time, batch ID, latency sensitivity score, and error rate. Additionally, it keeps a global counter for batch processing cycles.
metadata = {}
global_batch_counter = 0

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, old access time, low latency sensitivity, and high error rate. Entries from older batch cycles are prioritized for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        score = (meta['access_frequency'] * 0.25 + 
                 (cache_snapshot.access_count - meta['last_access_time']) * 0.25 + 
                 meta['latency_sensitivity'] * 0.25 + 
                 meta['error_rate'] * 0.25 + 
                 meta['batch_id'] * 0.1)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency is incremented, the last access time is updated to the current time, and the latency sensitivity score is adjusted based on the current system state. The error rate is recalculated if applicable.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta['access_frequency'] += 1
    meta['last_access_time'] = cache_snapshot.access_count
    # Adjust latency sensitivity score based on current system state (simplified here)
    meta['latency_sensitivity'] = max(0.1, meta['latency_sensitivity'] - 0.01)
    # Recalculate error rate if applicable (simplified here)
    meta['error_rate'] = max(0.01, meta['error_rate'] - 0.001)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata with an access frequency of 1, the current time as the last access time, a batch ID corresponding to the current batch cycle, an initial latency sensitivity score, and an error rate based on initial observations.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'access_frequency': 1,
        'last_access_time': cache_snapshot.access_count,
        'batch_id': global_batch_counter,
        'latency_sensitivity': LATENCY_SENSITIVITY_INITIAL,
        'error_rate': ERROR_RATE_INITIAL
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy resets the global counter for batch processing cycles if necessary and adjusts the latency sensitivity scores and error rates of remaining entries based on the new cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    global global_batch_counter
    if global_batch_counter >= BATCH_CYCLE_RESET_THRESHOLD:
        global_batch_counter = 0
        for key in metadata:
            metadata[key]['batch_id'] = 0
    else:
        global_batch_counter += 1
    
    # Adjust latency sensitivity scores and error rates of remaining entries
    for key in metadata:
        if key != evicted_obj.key:
            metadata[key]['latency_sensitivity'] = min(1.0, metadata[key]['latency_sensitivity'] + 0.01)
            metadata[key]['error_rate'] = min(1.0, metadata[key]['error_rate'] + 0.001)