# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for access frequency
BETA = 0.3   # Weight for last access time
GAMMA = 0.2  # Weight for predicted future access time
DELTA = 0.1  # Weight for compression benefit

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, predicted future access time, data size, and compression ratio for each cached object.
metadata = {}

def calculate_score(obj, current_time):
    data = metadata[obj.key]
    access_frequency = data['access_frequency']
    last_access_time = data['last_access_time']
    predicted_future_access_time = data['predicted_future_access_time']
    compression_ratio = data['compression_ratio']
    
    score = (ALPHA * access_frequency +
             BETA * (current_time - last_access_time) +
             GAMMA * predicted_future_access_time +
             DELTA * compression_ratio)
    return score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score that considers the object's access frequency, last access time, predicted future access time, and the benefit of compression. Objects with the lowest score are evicted first.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    current_time = cache_snapshot.access_count
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = calculate_score(cached_obj, current_time)
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and last access time of the object. It also refines the predicted future access time based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    data = metadata[obj.key]
    data['access_frequency'] += 1
    data['last_access_time'] = current_time
    # Refine predicted future access time (simple heuristic)
    data['predicted_future_access_time'] = current_time + (current_time - data['last_access_time']) / data['access_frequency']

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, sets the last access time to the current time, estimates the predicted future access time, and calculates the initial compression ratio.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    metadata[obj.key] = {
        'access_frequency': 1,
        'last_access_time': current_time,
        'predicted_future_access_time': current_time + 100,  # Initial guess
        'compression_ratio': 1.0  # Assume no compression initially
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy recalculates the weighted scores for the remaining objects to ensure the eviction criteria remain accurate and updates the overall cache statistics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Remove metadata of the evicted object
    if evicted_obj.key in metadata:
        del metadata[evicted_obj.key]
    
    # Recalculate scores for remaining objects (if needed)
    current_time = cache_snapshot.access_count
    for key, cached_obj in cache_snapshot.cache.items():
        calculate_score(cached_obj, current_time)