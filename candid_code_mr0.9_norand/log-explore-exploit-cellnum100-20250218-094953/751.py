# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
WEIGHT_FREQUENCY = 1.0
WEIGHT_RECENCY = 1.0
WEIGHT_SPATIAL_LOCALITY = 1.0
WEIGHT_PREDICTED_FUTURE_ACCESS = 1.0
WEIGHT_SYSTEM_LOAD_IMPACT = 1.0
WEIGHT_PRIORITY = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains a frequency counter, recency timestamp, spatial locality score, predicted future access time, system load impact, and priority score for each cached object.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates a composite score for each object based on a weighted sum of low frequency, long recency, low spatial locality, distant predicted future access time, high system load impact, and low priority score. The object with the lowest composite score is selected for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_composite_score = math.inf
    
    for key, cached_obj in cache_snapshot.cache.items():
        freq = metadata[key]['frequency']
        recency = cache_snapshot.access_count - metadata[key]['recency']
        spatial_locality = metadata[key]['spatial_locality']
        predicted_future_access = metadata[key]['predicted_future_access']
        system_load_impact = metadata[key]['system_load_impact']
        priority = metadata[key]['priority']
        
        composite_score = (WEIGHT_FREQUENCY * (1 / freq) +
                           WEIGHT_RECENCY * recency +
                           WEIGHT_SPATIAL_LOCALITY * (1 / spatial_locality) +
                           WEIGHT_PREDICTED_FUTURE_ACCESS * predicted_future_access +
                           WEIGHT_SYSTEM_LOAD_IMPACT * system_load_impact +
                           WEIGHT_PRIORITY * (1 / priority))
        
        if composite_score < min_composite_score:
            min_composite_score = composite_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the frequency counter, updates the recency timestamp to the current time, adjusts the spatial locality score, updates the predicted future access time, recalculates the priority score, and adjusts the system load metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['frequency'] += 1
    metadata[key]['recency'] = cache_snapshot.access_count
    metadata[key]['spatial_locality'] = calculate_spatial_locality(obj)
    metadata[key]['predicted_future_access'] = predict_future_access(obj)
    metadata[key]['priority'] = calculate_priority(obj)
    metadata[key]['system_load_impact'] = calculate_system_load_impact()

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the frequency counter to 1, sets the recency timestamp to the current time, calculates the initial spatial locality score, runs a prediction model to estimate the future access time, assigns a default priority score, and updates the system load metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'frequency': 1,
        'recency': cache_snapshot.access_count,
        'spatial_locality': calculate_spatial_locality(obj),
        'predicted_future_access': predict_future_access(obj),
        'priority': calculate_priority(obj),
        'system_load_impact': calculate_system_load_impact()
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy recalculates the spatial locality scores of the remaining objects, adjusts the predictive model, recalibrates the priority scores, updates the predicted future access times, and adjusts the system load metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata[evicted_obj.key]
    for key in cache_snapshot.cache:
        metadata[key]['spatial_locality'] = calculate_spatial_locality(cache_snapshot.cache[key])
        metadata[key]['predicted_future_access'] = predict_future_access(cache_snapshot.cache[key])
        metadata[key]['priority'] = calculate_priority(cache_snapshot.cache[key])
        metadata[key]['system_load_impact'] = calculate_system_load_impact()

def calculate_spatial_locality(obj):
    # Placeholder function to calculate spatial locality score
    return 1.0

def predict_future_access(obj):
    # Placeholder function to predict future access time
    return 1.0

def calculate_priority(obj):
    # Placeholder function to calculate priority score
    return 1.0

def calculate_system_load_impact():
    # Placeholder function to calculate system load impact
    return 1.0