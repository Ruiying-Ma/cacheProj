# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
PREDICTIVE_CACHE_MISS_SCORE_DEFAULT = 1.0
TEMPORAL_ACCESS_CONSISTENCY_SCORE_DEFAULT = 0.0
SYNCHRONIZATION_INDEX_DEFAULT = 0.5
HEURISTIC_WEIGHT_FACTOR_DEFAULT = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains a predictive cache miss score, temporal access consistency score, synchronization index, and heuristic weight factor for each cache entry. These metadata help in predicting future access patterns and making informed eviction decisions.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score for each cache entry using a weighted sum of the predictive cache miss score, temporal access consistency score, and synchronization index. The entry with the lowest composite score is selected for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_composite_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        composite_score = (meta['predictive_cache_miss_score'] * meta['heuristic_weight_factor'] +
                           meta['temporal_access_consistency_score'] +
                           meta['synchronization_index'])
        if composite_score < min_composite_score:
            min_composite_score = composite_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the predictive cache miss score is decreased slightly to reflect the successful prediction. The temporal access consistency score is updated based on the time since the last access. The synchronization index is adjusted to reflect the current state of access patterns. The heuristic weight factor is fine-tuned based on recent access trends.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    meta = metadata[key]
    meta['predictive_cache_miss_score'] *= 0.9  # Decrease slightly
    meta['temporal_access_consistency_score'] = cache_snapshot.access_count
    meta['synchronization_index'] = (meta['synchronization_index'] + 1) / 2  # Adjust to reflect current state
    meta['heuristic_weight_factor'] *= 1.05  # Fine-tune based on recent trends

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the predictive cache miss score is initialized based on historical data or set to a default value. The temporal access consistency score is set to reflect the current time. The synchronization index is initialized to a neutral value. The heuristic weight factor is set based on initial access predictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'predictive_cache_miss_score': PREDICTIVE_CACHE_MISS_SCORE_DEFAULT,
        'temporal_access_consistency_score': cache_snapshot.access_count,
        'synchronization_index': SYNCHRONIZATION_INDEX_DEFAULT,
        'heuristic_weight_factor': HEURISTIC_WEIGHT_FACTOR_DEFAULT
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the predictive cache miss score of remaining entries is adjusted to reflect the change in cache composition. The temporal access consistency scores are recalibrated to account for the removal. The synchronization index is updated to maintain consistency. The heuristic weight factor is re-evaluated to ensure optimal future predictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    for key, meta in metadata.items():
        meta['predictive_cache_miss_score'] *= 1.1  # Adjust to reflect change in cache composition
        meta['temporal_access_consistency_score'] = cache_snapshot.access_count
        meta['synchronization_index'] = (meta['synchronization_index'] + 1) / 2  # Maintain consistency
        meta['heuristic_weight_factor'] *= 0.95  # Re-evaluate for optimal future predictions