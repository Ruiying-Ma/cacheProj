# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
T1_CAPACITY_RATIO = 0.5  # Ratio of the cache capacity allocated to T1
T2_CAPACITY_RATIO = 0.5  # Ratio of the cache capacity allocated to T2

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, data segment classification, priority score, and queue membership (T1, T2, B1, B2) for each cache entry.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'recency_timestamp': {},  # {obj.key: timestamp}
    'priority_score': {},  # {obj.key: score}
    'queue_membership': {},  # {obj.key: 'T1'/'T2'/'B1'/'B2'}
    'T1': [],  # List of keys in T1
    'T2': [],  # List of keys in T2
    'B1': [],  # List of keys in B1
    'B2': [],  # List of keys in B2
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first checking T1 and evicting the least-recently-used entry if T1 is not empty. If T1 is empty, it evicts the entry with the lowest priority score from T2. If there is a tie, the entry with the oldest access time is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    if metadata['T1']:
        # Evict the least-recently-used entry from T1
        candid_obj_key = metadata['T1'].pop(0)
    else:
        # Evict the entry with the lowest priority score from T2
        t2_keys = metadata['T2']
        min_priority_score = min(metadata['priority_score'][key] for key in t2_keys)
        candidates = [key for key in t2_keys if metadata['priority_score'][key] == min_priority_score]
        if len(candidates) > 1:
            # Tie-breaking by oldest access time
            candid_obj_key = min(candidates, key=lambda k: metadata['recency_timestamp'][k])
        else:
            candid_obj_key = candidates[0]
        metadata['T2'].remove(candid_obj_key)
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the recency timestamp, recalculates the priority score, and moves the entry to the most-recently-used end of T2.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency_timestamp'][key] = cache_snapshot.access_count
    metadata['priority_score'][key] = metadata['access_frequency'][key] / (cache_snapshot.access_count - metadata['recency_timestamp'][key] + 1)
    
    if key in metadata['T1']:
        metadata['T1'].remove(key)
    if key in metadata['T2']:
        metadata['T2'].remove(key)
    metadata['T2'].append(key)
    metadata['queue_membership'][key] = 'T2'

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the recency timestamp to the current time, classifies the data segment, calculates the initial priority score, and places the entry in T1 or T2 based on its previous presence in B1 or B2.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency_timestamp'][key] = cache_snapshot.access_count
    metadata['priority_score'][key] = 1 / (cache_snapshot.access_count + 1)
    
    if key in metadata['B1']:
        metadata['B1'].remove(key)
        metadata['T2'].append(key)
        metadata['queue_membership'][key] = 'T2'
    elif key in metadata['B2']:
        metadata['B2'].remove(key)
        metadata['T2'].append(key)
        metadata['queue_membership'][key] = 'T2'
    else:
        metadata['T1'].append(key)
        metadata['queue_membership'][key] = 'T1'

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an entry, the policy removes all associated metadata, moves the evicted entry to B1 or B2 based on its original queue, and adjusts the capacities of T1 and T2 if necessary, flushing redundant objects to their corresponding ghost FIFO queues.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    original_queue = metadata['queue_membership'][evicted_key]
    
    # Remove all associated metadata
    del metadata['access_frequency'][evicted_key]
    del metadata['recency_timestamp'][evicted_key]
    del metadata['priority_score'][evicted_key]
    del metadata['queue_membership'][evicted_key]
    
    if original_queue == 'T1':
        metadata['B1'].append(evicted_key)
    elif original_queue == 'T2':
        metadata['B2'].append(evicted_key)
    
    # Adjust capacities of T1 and T2 if necessary
    while sum(cache_snapshot.cache[key].size for key in metadata['T1']) > T1_CAPACITY_RATIO * cache_snapshot.capacity:
        oldest_key = metadata['T1'].pop(0)
        metadata['B1'].append(oldest_key)
    
    while sum(cache_snapshot.cache[key].size for key in metadata['T2']) > T2_CAPACITY_RATIO * cache_snapshot.capacity:
        lowest_priority_key = min(metadata['T2'], key=lambda k: metadata['priority_score'][k])
        metadata['T2'].remove(lowest_priority_key)
        metadata['B2'].append(lowest_priority_key)