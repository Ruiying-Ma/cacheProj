# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import threading

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 0.4
WEIGHT_LAST_ACCESS_TIME = 0.3
WEIGHT_DATA_COHERENCE = 0.2
WEIGHT_THREAD_OWNERSHIP = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, predicted future access time, contextual information, data coherence status, and thread ownership for each cache line.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'predicted_future_access_time': {},
    'data_coherence_status': {},
    'thread_ownership': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by combining predictive analytics, adaptive thresholding, contextual intelligence, and a weighted score of least access frequency, oldest access timestamp, and data coherence status, with a preference for cache lines not owned by active threads.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'].get(key, 0)
        last_access_time = metadata['last_access_time'].get(key, 0)
        data_coherence_status = metadata['data_coherence_status'].get(key, 1)
        thread_ownership = metadata['thread_ownership'].get(key, None)
        
        score = (WEIGHT_ACCESS_FREQUENCY * access_frequency +
                 WEIGHT_LAST_ACCESS_TIME * (cache_snapshot.access_count - last_access_time) +
                 WEIGHT_DATA_COHERENCE * data_coherence_status +
                 WEIGHT_THREAD_OWNERSHIP * (1 if thread_ownership is None else 0))
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency, last access time, predicted future access time using real-time synchronization with contextual information, verifies and updates data coherence status, and records the accessing thread ID.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['predicted_future_access_time'][key] = cache_snapshot.access_count + 100  # Example prediction
    metadata['data_coherence_status'][key] = 1  # Example coherence status
    metadata['thread_ownership'][key] = threading.get_ident()

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency, sets the last access time to the current time, generates an initial predicted future access time based on contextual intelligence and system load, verifies and sets data coherence status, and records the inserting thread ID.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['predicted_future_access_time'][key] = cache_snapshot.access_count + 100  # Example prediction
    metadata['data_coherence_status'][key] = 1  # Example coherence status
    metadata['thread_ownership'][key] = threading.get_ident()

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalibrates the adaptive threshold based on current cache usage and system load, updates the contextual intelligence model, and resets the metadata for the evicted cache line, clearing access frequency, last access time, data coherence status, and thread ownership.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    metadata['access_frequency'].pop(key, None)
    metadata['last_access_time'].pop(key, None)
    metadata['predicted_future_access_time'].pop(key, None)
    metadata['data_coherence_status'].pop(key, None)
    metadata['thread_ownership'].pop(key, None)