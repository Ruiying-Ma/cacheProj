# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
LFU_WEIGHT = 1
LRU_WEIGHT = 1
PREFETCH_WEIGHT = 1
DIRTY_WEIGHT = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache line including access frequency, last access timestamp, prefetch flag, and dirty bit. It also keeps a global counter for cache coherence checks and a prefetch buffer status.
metadata = {}
global_counter = 0
prefetch_buffer_status = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining least frequently used (LFU), least recently used (LRU), and whether the line is marked for prefetching. Lines with the lowest score are evicted first, with a preference for non-dirty lines to minimize write-back overhead.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        score = (LFU_WEIGHT * meta['access_frequency'] +
                 LRU_WEIGHT * (cache_snapshot.access_count - meta['last_access_timestamp']) +
                 PREFETCH_WEIGHT * meta['prefetch_flag'] +
                 DIRTY_WEIGHT * meta['dirty_bit'])
        
        if score < min_score or (score == min_score and meta['dirty_bit'] == 0):
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and last access timestamp of the cache line are updated. If the line was prefetched, the prefetch flag is cleared. The global counter for cache coherence is incremented.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    global global_counter
    meta = metadata[obj.key]
    meta['access_frequency'] += 1
    meta['last_access_timestamp'] = cache_snapshot.access_count
    if meta['prefetch_flag']:
        meta['prefetch_flag'] = 0
    global_counter += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the access frequency is initialized to 1, the last access timestamp is set to the current time, and the prefetch flag is set if the object was prefetched. The dirty bit is set based on the write-back policy. The global counter for cache coherence is incremented.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    global global_counter
    metadata[obj.key] = {
        'access_frequency': 1,
        'last_access_timestamp': cache_snapshot.access_count,
        'prefetch_flag': 1,  # Assuming the object was prefetched
        'dirty_bit': 0  # Assuming the object is clean initially
    }
    global_counter += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the global counter for cache coherence is incremented. If the evicted line was dirty, it is written back to memory. The prefetch buffer status is updated to reflect the eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    global global_counter
    if metadata[evicted_obj.key]['dirty_bit']:
        # Simulate write-back to memory
        pass
    del metadata[evicted_obj.key]
    global_counter += 1
    # Update prefetch buffer status if necessary
    prefetch_buffer_status[evicted_obj.key] = False