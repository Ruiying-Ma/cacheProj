# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ERROR_RATE_INITIAL = 0.1
LOAD_BALANCE_INITIAL = 1.0
ACCESS_FREQUENCY_WEIGHT = 0.5
ERROR_RATE_WEIGHT = 0.3
LOAD_BALANCE_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, error rate predictions, and load balancing metrics for each cache entry.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'last_access_time': {},  # {obj.key: last_access_time}
    'error_rate': {},        # {obj.key: error_rate}
    'load_balance': {}       # {obj.key: load_balance}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, high error rate prediction, and load balancing needs, prioritizing entries that are least likely to be needed soon and most likely to cause errors.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'].get(key, 0)
        error_rate = metadata['error_rate'].get(key, ERROR_RATE_INITIAL)
        load_balance = metadata['load_balance'].get(key, LOAD_BALANCE_INITIAL)
        
        score = (ACCESS_FREQUENCY_WEIGHT * access_frequency +
                 ERROR_RATE_WEIGHT * error_rate +
                 LOAD_BALANCE_WEIGHT * load_balance)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and last access time for the entry, adjusts the error rate prediction based on recent access patterns, and recalibrates load balancing metrics to reflect the current state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Adjust error rate prediction based on recent access patterns
    metadata['error_rate'][key] = max(0, metadata['error_rate'].get(key, ERROR_RATE_INITIAL) - 0.01)
    # Recalibrate load balancing metrics
    metadata['load_balance'][key] = 1.0 / (1 + metadata['access_frequency'][key])

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and last access time, sets an initial error rate prediction based on historical data, and updates load balancing metrics to account for the new entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['error_rate'][key] = ERROR_RATE_INITIAL
    metadata['load_balance'][key] = LOAD_BALANCE_INITIAL

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes its metadata, recalculates load balancing metrics to reflect the removal, and adjusts error rate predictions for remaining entries based on the eviction's impact.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    # Remove metadata for the evicted object
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_time']:
        del metadata['last_access_time'][evicted_key]
    if evicted_key in metadata['error_rate']:
        del metadata['error_rate'][evicted_key]
    if evicted_key in metadata['load_balance']:
        del metadata['load_balance'][evicted_key]
    
    # Recalculate load balancing metrics for remaining entries
    for key in metadata['load_balance']:
        metadata['load_balance'][key] = 1.0 / (1 + metadata['access_frequency'][key])
    
    # Adjust error rate predictions for remaining entries
    for key in metadata['error_rate']:
        metadata['error_rate'][key] = min(1.0, metadata['error_rate'][key] + 0.01)