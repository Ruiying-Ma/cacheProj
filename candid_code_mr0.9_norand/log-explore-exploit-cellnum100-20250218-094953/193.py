# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
PRIORITY_LEVELS = {
    'high': 3,
    'medium': 2,
    'low': 1
}

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, replication factor, synchronization status, and priority level of each cached object. It also keeps track of the network topology to understand the data flow and node connectivity.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'replication_factor': {},
    'synchronization_status': {},
    'priority_level': {},
    'network_topology': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score that considers low access frequency, old last access time, low replication factor, and low priority level. It also prefers to evict objects from nodes with higher connectivity to minimize the impact on the overall network.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_freq = metadata['access_frequency'].get(key, 0)
        last_access = metadata['last_access_time'].get(key, 0)
        replication_factor = metadata['replication_factor'].get(key, 1)
        priority = metadata['priority_level'].get(key, 1)
        connectivity = metadata['network_topology'].get(key, 1)
        
        score = (1 / (access_freq + 1)) + (time.time() - last_access) + (1 / replication_factor) + (1 / priority) + connectivity
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the last access time, and checks the synchronization status to ensure the object is up-to-date. It also re-evaluates the priority level based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = time.time()
    # Assuming synchronization status and priority level are updated by some external mechanism
    # Here we just re-evaluate the priority level based on access frequency
    if metadata['access_frequency'][key] > 10:
        metadata['priority_level'][key] = PRIORITY_LEVELS['high']
    elif metadata['access_frequency'][key] > 5:
        metadata['priority_level'][key] = PRIORITY_LEVELS['medium']
    else:
        metadata['priority_level'][key] = PRIORITY_LEVELS['low']

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency, sets the current time as the last access time, determines the replication factor based on network topology, and sets the initial synchronization status. It also assigns a priority level based on the object's importance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = time.time()
    # Assuming replication factor and synchronization status are determined by some external mechanism
    metadata['replication_factor'][key] = 1  # Initial replication factor
    metadata['synchronization_status'][key] = True  # Initial synchronization status
    metadata['priority_level'][key] = PRIORITY_LEVELS['medium']  # Initial priority level
    # Assuming network topology is updated by some external mechanism
    metadata['network_topology'][key] = 1  # Initial connectivity

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy updates the network topology metadata to reflect the change in data distribution. It also adjusts the replication factors and synchronization statuses of related objects to maintain consistency and balance across the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    # Remove metadata of the evicted object
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_time']:
        del metadata['last_access_time'][evicted_key]
    if evicted_key in metadata['replication_factor']:
        del metadata['replication_factor'][evicted_key]
    if evicted_key in metadata['synchronization_status']:
        del metadata['synchronization_status'][evicted_key]
    if evicted_key in metadata['priority_level']:
        del metadata['priority_level'][evicted_key]
    if evicted_key in metadata['network_topology']:
        del metadata['network_topology'][evicted_key]
    
    # Adjust replication factors and synchronization statuses of related objects
    # Assuming this is done by some external mechanism