# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
PREDICTIVE_SCORE_DECAY = 0.9

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, and a predictive score based on historical access patterns. Each cache entry has a timestamp of last access, a counter for access frequency, and a predictive score calculated using a simple heuristic model.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by combining the least frequently used (LFU) and least recently used (LRU) strategies with the predictive score. The entry with the lowest combined score (frequency + recency + predictive score) is selected for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    current_time = cache_snapshot.access_count

    for key, cached_obj in cache_snapshot.cache.items():
        freq = metadata[key]['frequency']
        last_access = metadata[key]['last_access']
        predictive_score = metadata[key]['predictive_score']
        combined_score = freq + (current_time - last_access) + predictive_score

        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency counter is incremented, the last access timestamp is updated to the current time, and the predictive score is adjusted based on the new access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key

    metadata[key]['frequency'] += 1
    metadata[key]['last_access'] = current_time
    metadata[key]['predictive_score'] *= PREDICTIVE_SCORE_DECAY

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency counter to 1, sets the last access timestamp to the current time, and calculates an initial predictive score based on the insertion context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key

    metadata[key] = {
        'frequency': 1,
        'last_access': current_time,
        'predictive_score': 1.0  # Initial predictive score can be set to 1.0 or any other heuristic value
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalculates the predictive scores of remaining entries to ensure they reflect the most recent access patterns and adjusts the overall cache metadata to maintain system stability.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]

    # Recalculate predictive scores for remaining entries
    for key in cache_snapshot.cache:
        metadata[key]['predictive_score'] *= PREDICTIVE_SCORE_DECAY