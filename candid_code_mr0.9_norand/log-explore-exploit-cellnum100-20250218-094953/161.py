# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 0.4
WEIGHT_LAST_ACCESS_TIME = 0.3
WEIGHT_CONTEXT_TAG_RELEVANCE = 0.2
WEIGHT_PREDICTED_FUTURE_ACCESS = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, data context tags, predicted future access patterns, and load distribution metrics.
metadata = {
    'access_frequency': {},  # key -> frequency
    'last_access_time': {},  # key -> last access time
    'context_tags': {},      # key -> context tags
    'predicted_future_access': {},  # key -> predicted future access probability
    'load_distribution': {}  # key -> load distribution metrics
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining low access frequency, old last access time, low relevance of data context tags, and low predicted future access probability, while ensuring balanced load distribution across cache nodes.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'].get(key, 0)
        last_access_time = metadata['last_access_time'].get(key, 0)
        context_tag_relevance = metadata['context_tags'].get(key, 0)
        predicted_future_access = metadata['predicted_future_access'].get(key, 0)
        
        score = (WEIGHT_ACCESS_FREQUENCY * access_frequency +
                 WEIGHT_LAST_ACCESS_TIME * (cache_snapshot.access_count - last_access_time) +
                 WEIGHT_CONTEXT_TAG_RELEVANCE * context_tag_relevance +
                 WEIGHT_PREDICTED_FUTURE_ACCESS * predicted_future_access)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access time to the current time, re-evaluates the relevance of data context tags, and adjusts the predicted future access patterns based on recent trends.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Re-evaluate context tags and predicted future access patterns
    metadata['context_tags'][key] = evaluate_context_tags(obj)
    metadata['predicted_future_access'][key] = predict_future_access(obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to one, sets the last access time to the current time, assigns initial data context tags based on the object's characteristics, and estimates initial future access patterns using heuristic analysis.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['context_tags'][key] = evaluate_context_tags(obj)
    metadata['predicted_future_access'][key] = predict_future_access(obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalculates load distribution metrics to ensure balanced cache usage, updates the data retention policy to reflect the removal, and adjusts predictive invalidation parameters to refine future eviction decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    # Remove metadata for the evicted object
    if key in metadata['access_frequency']:
        del metadata['access_frequency'][key]
    if key in metadata['last_access_time']:
        del metadata['last_access_time'][key]
    if key in metadata['context_tags']:
        del metadata['context_tags'][key]
    if key in metadata['predicted_future_access']:
        del metadata['predicted_future_access'][key]
    # Recalculate load distribution metrics
    recalculate_load_distribution()

def evaluate_context_tags(obj):
    # Placeholder function to evaluate context tags based on object's characteristics
    return 0

def predict_future_access(obj):
    # Placeholder function to predict future access patterns using heuristic analysis
    return 0

def recalculate_load_distribution():
    # Placeholder function to recalculate load distribution metrics
    pass