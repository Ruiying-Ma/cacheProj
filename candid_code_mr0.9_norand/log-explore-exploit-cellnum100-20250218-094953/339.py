# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
FRAGMENTATION_THRESHOLD = 0.1  # Example threshold for fragmentation level

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, predicted future access time, and fragmentation level for each cache block. It also keeps a hierarchical structure of cache levels and their respective latencies.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'last_access_time': {},  # {obj.key: last_access_time}
    'predicted_future_access_time': {},  # {obj.key: predicted_future_access_time}
    'fragmentation_level': {},  # {obj.key: fragmentation_level}
    'cache_levels': {},  # {obj.key: cache_level}
    'latencies': {}  # {cache_level: latency}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by analyzing a combination of the least frequently accessed blocks, the longest time since last access, the predicted future access time, and the fragmentation level. It prioritizes evicting blocks that are less likely to be accessed soon and have higher fragmentation.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_freq = metadata['access_frequency'].get(key, 0)
        last_access = metadata['last_access_time'].get(key, 0)
        predicted_future_access = metadata['predicted_future_access_time'].get(key, float('inf'))
        fragmentation = metadata['fragmentation_level'].get(key, 0)
        
        score = (access_freq * 0.25) + ((cache_snapshot.access_count - last_access) * 0.25) + (predicted_future_access * 0.25) + (fragmentation * 0.25)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency by incrementing it, records the current time as the last access time, and recalculates the predicted future access time based on recent access patterns. Fragmentation level is adjusted if the access pattern suggests changes in data usage.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['predicted_future_access_time'][key] = cache_snapshot.access_count + 10  # Example prediction logic
    metadata['fragmentation_level'][key] = obj.size / cache_snapshot.capacity

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to one, sets the current time as the last access time, and estimates the predicted future access time based on initial access patterns. Fragmentation level is assessed and recorded based on the object's size and placement.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['predicted_future_access_time'][key] = cache_snapshot.access_count + 10  # Example prediction logic
    metadata['fragmentation_level'][key] = obj.size / cache_snapshot.capacity

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata associated with the evicted block, recalculates the fragmentation level for the remaining blocks, and adjusts the hierarchical cache structure to optimize latency based on the new cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_time']:
        del metadata['last_access_time'][evicted_key]
    if evicted_key in metadata['predicted_future_access_time']:
        del metadata['predicted_future_access_time'][evicted_key]
    if evicted_key in metadata['fragmentation_level']:
        del metadata['fragmentation_level'][evicted_key]
    
    # Recalculate fragmentation level for remaining blocks
    total_size = sum(obj.size for obj in cache_snapshot.cache.values())
    for key, cached_obj in cache_snapshot.cache.items():
        metadata['fragmentation_level'][key] = cached_obj.size / total_size