# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import threading

# Put tunable constant parameters below
LFU_WEIGHT = 0.4
LRU_WEIGHT = 0.4
PRIORITY_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, context tags (e.g., user, process, priority), and load metrics for each cache entry. It also tracks overall cache load and thread synchronization states.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'last_access_time': {},  # {obj.key: last_access_time}
    'context_priority': {},  # {obj.key: priority}
    'load_metrics': {},      # {obj.key: load_metric}
    'overall_load': 0,
    'thread_sync': threading.Lock()
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining least frequently used, least recently used, and context priority. It also considers current load metrics to balance the cache load adaptively.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        frequency = metadata['access_frequency'].get(key, 0)
        last_access = metadata['last_access_time'].get(key, 0)
        priority = metadata['context_priority'].get(key, 0)
        
        score = (LFU_WEIGHT * frequency) + (LRU_WEIGHT * (cache_snapshot.access_count - last_access)) + (PRIORITY_WEIGHT * priority)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, last access time, and context tags of the accessed entry. It also recalculates the load metrics and adjusts thread synchronization states to ensure balanced access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    with metadata['thread_sync']:
        key = obj.key
        metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
        metadata['last_access_time'][key] = cache_snapshot.access_count
        # Assuming context tags are updated elsewhere, as they are not provided in the attributes

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata with default values and updates the overall cache load metrics. It also adjusts thread synchronization states to accommodate the new entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    with metadata['thread_sync']:
        key = obj.key
        metadata['access_frequency'][key] = 1
        metadata['last_access_time'][key] = cache_snapshot.access_count
        metadata['context_priority'][key] = 0  # Default priority
        metadata['load_metrics'][key] = obj.size
        metadata['overall_load'] += obj.size

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata of the evicted entry and recalculates the overall cache load metrics. It also updates thread synchronization states to reflect the reduced load.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    with metadata['thread_sync']:
        key = evicted_obj.key
        if key in metadata['access_frequency']:
            del metadata['access_frequency'][key]
        if key in metadata['last_access_time']:
            del metadata['last_access_time'][key]
        if key in metadata['context_priority']:
            del metadata['context_priority'][key]
        if key in metadata['load_metrics']:
            metadata['overall_load'] -= metadata['load_metrics'][key]
            del metadata['load_metrics'][key]