# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections
import heapq

# Put tunable constant parameters below
SQ_CAPACITY = 100  # Example capacity for SQ
MQ_CAPACITY = 100  # Example capacity for MQ
GQ_CAPACITY = 100  # Example capacity for GQ

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency timestamp, predicted future access time, data importance score, and queue positions in LRU, SQ, MQ, and GQ for each cached object.
metadata = {
    'frequency': collections.defaultdict(int),
    'recency': collections.defaultdict(int),
    'predicted_future_access': collections.defaultdict(int),
    'importance_score': collections.defaultdict(int),
    'lru_queue': collections.deque(),
    'sq_queue': collections.deque(),
    'mq_queue': collections.deque(),
    'gq_queue': collections.deque()
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    During eviction, if SQ exceeds its capacity, move objects from SQ to MQ until an object with frequency less than 2 is found or MQ is full. If MQ is full, reduce the frequency of objects in MQ cyclically until an object with zero frequency is found and evict it. If SQ is not full, calculate a composite score based on low access frequency, old recency timestamp, distant predicted future access time, and low data importance score, evicting the object with the lowest composite score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    if len(metadata['sq_queue']) > SQ_CAPACITY:
        while len(metadata['sq_queue']) > SQ_CAPACITY:
            sq_obj_key = metadata['sq_queue'].popleft()
            if metadata['frequency'][sq_obj_key] < 2 or len(metadata['mq_queue']) >= MQ_CAPACITY:
                break
            metadata['mq_queue'].append(sq_obj_key)
    
    if len(metadata['mq_queue']) >= MQ_CAPACITY:
        while True:
            mq_obj_key = metadata['mq_queue'].popleft()
            metadata['frequency'][mq_obj_key] -= 1
            if metadata['frequency'][mq_obj_key] == 0:
                candid_obj_key = mq_obj_key
                break
            metadata['mq_queue'].append(mq_obj_key)
    else:
        composite_scores = []
        for key in cache_snapshot.cache:
            score = (metadata['frequency'][key], 
                     cache_snapshot.access_count - metadata['recency'][key], 
                     metadata['predicted_future_access'][key], 
                     metadata['importance_score'][key])
            heapq.heappush(composite_scores, (score, key))
        candid_obj_key = heapq.heappop(composite_scores)[1]
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Immediately after a hit, increase the frequency of the hit object by 1 if it is less than 3, update its recency timestamp to the current timestamp, recalculate the predicted future access time using an advanced heuristic, and move it to the most-recently-used end of the LRU queue. Update its data importance score based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    if metadata['frequency'][obj.key] < 3:
        metadata['frequency'][obj.key] += 1
    metadata['recency'][obj.key] = cache_snapshot.access_count
    metadata['predicted_future_access'][obj.key] = cache_snapshot.access_count + 100  # Example heuristic
    metadata['importance_score'][obj.key] += 1  # Example update
    metadata['lru_queue'].remove(obj.key)
    metadata['lru_queue'].append(obj.key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    Immediately after insertion, set the inserted object's frequency to 1, update its recency timestamp to the current timestamp, predict the future access time using initial access patterns, and assign an initial data importance score based on the type of data. If it was in GQ, put it at the rear of MQ and remove it from GQ. Otherwise, put it at the rear of SQ and move it to the most-recently-used end of the LRU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    metadata['frequency'][obj.key] = 1
    metadata['recency'][obj.key] = cache_snapshot.access_count
    metadata['predicted_future_access'][obj.key] = cache_snapshot.access_count + 100  # Example heuristic
    metadata['importance_score'][obj.key] = 1  # Example initial score
    if obj.key in metadata['gq_queue']:
        metadata['gq_queue'].remove(obj.key)
        metadata['mq_queue'].append(obj.key)
    else:
        metadata['sq_queue'].append(obj.key)
    metadata['lru_queue'].append(obj.key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Immediately after eviction, remove the evicted object from the LRU queue and put it at the rear of GQ. If GQ is full, remove the front of GQ. Remove all metadata associated with the evicted object and recalibrate the data importance scores of remaining objects to ensure balanced retention.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    metadata['lru_queue'].remove(evicted_obj.key)
    metadata['gq_queue'].append(evicted_obj.key)
    if len(metadata['gq_queue']) > GQ_CAPACITY:
        metadata['gq_queue'].popleft()
    del metadata['frequency'][evicted_obj.key]
    del metadata['recency'][evicted_obj.key]
    del metadata['predicted_future_access'][evicted_obj.key]
    del metadata['importance_score'][evicted_obj.key]
    # Example recalibration
    for key in metadata['importance_score']:
        metadata['importance_score'][key] = max(1, metadata['importance_score'][key] - 1)