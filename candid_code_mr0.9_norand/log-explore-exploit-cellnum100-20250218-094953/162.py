# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
PREFETCH_SUCCESS_WEIGHT = 0.5
ACCESS_FREQUENCY_WEIGHT = 0.3
LAST_ACCESS_TIME_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, prefetching success rate, and runtime telemetry data such as system load and cache hit/miss ratio.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'prefetch_success_rate': {},
    'system_load': 0,
    'hit_ratio': 0,
    'miss_ratio': 0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a predictive eviction algorithm that considers the least likely to be accessed objects, factoring in access frequency, last access time, and prefetching success rate, while also tuning for current system load and cache performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_freq = metadata['access_frequency'].get(key, 0)
        last_access = metadata['last_access_time'].get(key, 0)
        prefetch_success = metadata['prefetch_success_rate'].get(key, 0)
        
        score = (PREFETCH_SUCCESS_WEIGHT * prefetch_success +
                 ACCESS_FREQUENCY_WEIGHT * access_freq +
                 LAST_ACCESS_TIME_WEIGHT * (cache_snapshot.access_count - last_access))
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and last access time for the accessed object, and adjusts the prefetching success rate based on whether the hit was a result of a prefetched object. Runtime telemetry data is also updated to reflect the hit.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Assuming we have a way to determine if the hit was due to prefetching
    # For simplicity, let's assume all hits are not due to prefetching
    metadata['prefetch_success_rate'][key] = metadata['prefetch_success_rate'].get(key, 0)
    
    # Update runtime telemetry data
    metadata['system_load'] = cache_snapshot.access_count
    metadata['hit_ratio'] = cache_snapshot.hit_count / cache_snapshot.access_count
    metadata['miss_ratio'] = cache_snapshot.miss_count / cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and last access time, and updates the prefetching success rate based on the success of recent prefetches. Runtime telemetry data is updated to reflect the insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Assuming we have a way to determine the success of recent prefetches
    # For simplicity, let's assume a default prefetch success rate
    metadata['prefetch_success_rate'][key] = 0.5
    
    # Update runtime telemetry data
    metadata['system_load'] = cache_snapshot.access_count
    metadata['hit_ratio'] = cache_snapshot.hit_count / cache_snapshot.access_count
    metadata['miss_ratio'] = cache_snapshot.miss_count / cache_snapshot.access_count

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes its metadata and recalculates the prefetching success rate and runtime telemetry data to reflect the eviction, ensuring the system load and cache performance metrics are up-to-date.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_time']:
        del metadata['last_access_time'][evicted_key]
    if evicted_key in metadata['prefetch_success_rate']:
        del metadata['prefetch_success_rate'][evicted_key]
    
    # Update runtime telemetry data
    metadata['system_load'] = cache_snapshot.access_count
    metadata['hit_ratio'] = cache_snapshot.hit_count / cache_snapshot.access_count
    metadata['miss_ratio'] = cache_snapshot.miss_count / cache_snapshot.access_count