# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
MAX_CONTEXTUAL_TAGS = 5

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, contextual tags (e.g., user behavior, application type), and adaptive metrics (e.g., hit rate, miss rate, system load).
access_frequency = collections.defaultdict(int)
last_access_time = collections.defaultdict(int)
contextual_tags = collections.defaultdict(list)
adaptive_metrics = {
    'hit_rate': 0.0,
    'miss_rate': 0.0,
    'system_load': 0.0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy uses predictive analysis to forecast future access patterns and selects the least likely to be accessed object for eviction, considering both contextual tags and adaptive metrics to ensure system resilience.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (access_frequency[key] * 0.5 + 
                 (cache_snapshot.access_count - last_access_time[key]) * 0.3 + 
                 len(contextual_tags[key]) * 0.2)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, last access time, and refines the contextual tags based on the current context. Adaptive metrics are adjusted to reflect the improved hit rate.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    access_frequency[obj.key] += 1
    last_access_time[obj.key] = cache_snapshot.access_count
    
    # Update contextual tags (example: user behavior, application type)
    if len(contextual_tags[obj.key]) < MAX_CONTEXTUAL_TAGS:
        contextual_tags[obj.key].append('hit_context')
    
    # Update adaptive metrics
    adaptive_metrics['hit_rate'] = cache_snapshot.hit_count / cache_snapshot.access_count
    adaptive_metrics['miss_rate'] = cache_snapshot.miss_count / cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, sets the current time as the last access time, assigns contextual tags based on the insertion context, and updates adaptive metrics to account for the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    access_frequency[obj.key] = 1
    last_access_time[obj.key] = cache_snapshot.access_count
    contextual_tags[obj.key] = ['insert_context']
    
    # Update adaptive metrics
    adaptive_metrics['hit_rate'] = cache_snapshot.hit_count / cache_snapshot.access_count
    adaptive_metrics['miss_rate'] = cache_snapshot.miss_count / cache_snapshot.access_count

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy recalibrates the adaptive metrics to reflect the change in cache composition, updates the contextual tags to remove the evicted object's influence, and adjusts system resilience parameters to maintain optimal performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Remove metadata of the evicted object
    if evicted_obj.key in access_frequency:
        del access_frequency[evicted_obj.key]
    if evicted_obj.key in last_access_time:
        del last_access_time[evicted_obj.key]
    if evicted_obj.key in contextual_tags:
        del contextual_tags[evicted_obj.key]
    
    # Update adaptive metrics
    adaptive_metrics['hit_rate'] = cache_snapshot.hit_count / cache_snapshot.access_count
    adaptive_metrics['miss_rate'] = cache_snapshot.miss_count / cache_snapshot.access_count