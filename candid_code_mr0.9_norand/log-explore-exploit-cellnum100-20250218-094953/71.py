# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
WEIGHT_FREQUENCY = 1
WEIGHT_AGE = 1
WEIGHT_SIZE = 1
WEIGHT_SYNC = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, data size, and synchronization status with the cloud. It also tracks load distribution across multiple cache nodes for optimized performance.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'last_access_time': {},  # {obj.key: last_access_time}
    'sync_status': {},       # {obj.key: sync_status}
    'load_distribution': {}  # {node_id: load}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score combining least frequently used, oldest access time, largest data size, and least recently synchronized with the cloud. It also considers the load distribution to ensure balanced cache usage across nodes.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        frequency = metadata['access_frequency'].get(key, 0)
        age = cache_snapshot.access_count - metadata['last_access_time'].get(key, 0)
        size = cached_obj.size
        sync_status = metadata['sync_status'].get(key, 0)
        
        score = (WEIGHT_FREQUENCY * frequency +
                 WEIGHT_AGE * age +
                 WEIGHT_SIZE * size +
                 WEIGHT_SYNC * sync_status)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access time to the current time, and checks the synchronization status to ensure it is up-to-date. It also re-evaluates the load distribution to maintain balance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Assuming sync_status is updated elsewhere
    # Re-evaluate load distribution if necessary

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to one, sets the last access time to the current time, marks the synchronization status as pending, and updates the load distribution to reflect the new addition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['sync_status'][key] = 0  # Mark as pending
    # Update load distribution if necessary

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the metadata associated with the evicted object, updates the load distribution to account for the removal, and ensures that the synchronization status of remaining objects is accurate.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_time']:
        del metadata['last_access_time'][evicted_key]
    if evicted_key in metadata['sync_status']:
        del metadata['sync_status'][evicted_key]
    # Update load distribution if necessary