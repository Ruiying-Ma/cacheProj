# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict, deque

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for recency in the prediction model
BETA = 0.5   # Weight for frequency in the prediction model

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, access recency, access patterns, and predicted future access based on behavior analytics and resource forecasting.
access_frequency = defaultdict(int)
access_recency = {}
access_patterns = defaultdict(deque)
predicted_future_access = defaultdict(float)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by dynamically prioritizing objects with the lowest predicted future access, considering both access frequency and recency, and identifying patterns that suggest declining usage.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_predicted_access = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        if predicted_future_access[key] < min_predicted_access:
            min_predicted_access = predicted_future_access[key]
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and recency for the accessed object, refines the access pattern recognition, and adjusts the predicted future access based on the latest behavior analytics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] += 1
    access_recency[key] = cache_snapshot.access_count
    access_patterns[key].append(cache_snapshot.access_count)
    
    # Update predicted future access
    recency_score = ALPHA * (cache_snapshot.access_count - access_recency[key])
    frequency_score = BETA * access_frequency[key]
    predicted_future_access[key] = recency_score + frequency_score

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and recency, begins tracking its access patterns, and starts forecasting its future access based on initial behavior analytics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 1
    access_recency[key] = cache_snapshot.access_count
    access_patterns[key] = deque([cache_snapshot.access_count])
    
    # Initialize predicted future access
    recency_score = ALPHA * (cache_snapshot.access_count - access_recency[key])
    frequency_score = BETA * access_frequency[key]
    predicted_future_access[key] = recency_score + frequency_score

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all metadata associated with the evicted object and recalibrates the dynamic prioritization model to account for the change in the cache's content.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    # Remove metadata associated with the evicted object
    if evicted_key in access_frequency:
        del access_frequency[evicted_key]
    if evicted_key in access_recency:
        del access_recency[evicted_key]
    if evicted_key in access_patterns:
        del access_patterns[evicted_key]
    if evicted_key in predicted_future_access:
        del predicted_future_access[evicted_key]
    
    # Recalibrate the dynamic prioritization model
    for key in cache_snapshot.cache:
        recency_score = ALPHA * (cache_snapshot.access_count - access_recency[key])
        frequency_score = BETA * access_frequency[key]
        predicted_future_access[key] = recency_score + frequency_score