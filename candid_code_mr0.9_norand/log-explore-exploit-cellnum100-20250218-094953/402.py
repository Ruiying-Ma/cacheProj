# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 0.4
WEIGHT_LAST_ACCESS_TIME = 0.3
WEIGHT_PREDICTIVE_SCORE = 0.2
WEIGHT_CONTEXT_MISMATCH = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, context tags (e.g., user, application, time of day), and a predictive score based on historical access patterns.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'last_access_time': {},  # {obj.key: timestamp}
    'context_tags': {},      # {obj.key: context}
    'predictive_score': {}   # {obj.key: score}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by combining a weighted score of low access frequency, old last access timestamp, low predictive score, and context mismatch with current usage patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    current_time = cache_snapshot.access_count
    current_context = get_current_context()

    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'].get(key, 0)
        last_access_time = metadata['last_access_time'].get(key, 0)
        predictive_score = metadata['predictive_score'].get(key, 0)
        context_tags = metadata['context_tags'].get(key, {})

        context_mismatch = calculate_context_mismatch(current_context, context_tags)

        score = (WEIGHT_ACCESS_FREQUENCY * access_frequency +
                 WEIGHT_LAST_ACCESS_TIME * (current_time - last_access_time) +
                 WEIGHT_PREDICTIVE_SCORE * predictive_score +
                 WEIGHT_CONTEXT_MISMATCH * context_mismatch)

        if score < min_score:
            min_score = score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access timestamp to the current time, and recalculates the predictive score based on the updated access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count

    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = current_time
    metadata['predictive_score'][key] = calculate_predictive_score(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access timestamp to the current time, assigns context tags based on the current context, and calculates an initial predictive score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    current_context = get_current_context()

    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = current_time
    metadata['context_tags'][key] = current_context
    metadata['predictive_score'][key] = calculate_predictive_score(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy logs the eviction event to refine the predictive heuristic model, adjusts the context tags' relevance, and updates the overall cache usage statistics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    # Log the eviction event (this is a placeholder, actual logging mechanism can be more complex)
    log_eviction_event(evicted_obj)
    # Adjust context tags' relevance (this is a placeholder, actual adjustment mechanism can be more complex)
    adjust_context_relevance(evicted_obj)
    # Update overall cache usage statistics (this is a placeholder, actual update mechanism can be more complex)
    update_cache_statistics(evicted_obj)

def get_current_context():
    '''
    This function returns the current context tags.
    - Return: `current_context` (dict)
    '''
    # Placeholder for actual context retrieval logic
    return {
        'user': 'default_user',
        'application': 'default_app',
        'time_of_day': time.strftime("%H:%M:%S")
    }

def calculate_context_mismatch(current_context, context_tags):
    '''
    This function calculates the context mismatch score.
    - Args:
        - `current_context`: The current context tags.
        - `context_tags`: The context tags of the cached object.
    - Return: `context_mismatch` (float)
    '''
    # Placeholder for actual context mismatch calculation logic
    return sum(1 for k in current_context if current_context[k] != context_tags.get(k, None))

def calculate_predictive_score(key):
    '''
    This function calculates the predictive score based on historical access patterns.
    - Args:
        - `key`: The key of the object.
    - Return: `predictive_score` (float)
    '''
    # Placeholder for actual predictive score calculation logic
    return 0.0

def log_eviction_event(evicted_obj):
    '''
    This function logs the eviction event.
    - Args:
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Placeholder for actual logging mechanism
    pass

def adjust_context_relevance(evicted_obj):
    '''
    This function adjusts the context tags' relevance.
    - Args:
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Placeholder for actual adjustment mechanism
    pass

def update_cache_statistics(evicted_obj):
    '''
    This function updates the overall cache usage statistics.
    - Args:
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Placeholder for actual update mechanism
    pass