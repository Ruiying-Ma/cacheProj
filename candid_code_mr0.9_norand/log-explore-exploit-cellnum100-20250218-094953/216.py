# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 1.0
WEIGHT_LAST_ACCESS_TIME = 1.0
WEIGHT_OBJECT_SIZE = 1.0
WEIGHT_PREDICTED_FUTURE_ACCESS = 1.0
WEIGHT_LATENCY_SENSITIVITY = 1.0
WEIGHT_LRU_QUEUE_INDEX = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, object size, predicted future access patterns, latency sensitivity, scalability factor, and the LRU queue index for each object.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'object_size': {},
    'predicted_future_access': {},
    'latency_sensitivity': {},
    'lru_queue_index': {},
    'scalability_factor': 1.0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by considering a weighted score that combines low access frequency, old last access time, large object size, low predicted future access, low latency sensitivity, and the LRU queue index. The scalability factor adjusts the weight of each component based on current cache size and load.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (
            WEIGHT_ACCESS_FREQUENCY * metadata['access_frequency'][key] +
            WEIGHT_LAST_ACCESS_TIME * (cache_snapshot.access_count - metadata['last_access_time'][key]) +
            WEIGHT_OBJECT_SIZE * metadata['object_size'][key] +
            WEIGHT_PREDICTED_FUTURE_ACCESS * metadata['predicted_future_access'][key] +
            WEIGHT_LATENCY_SENSITIVITY * metadata['latency_sensitivity'][key] +
            WEIGHT_LRU_QUEUE_INDEX * metadata['lru_queue_index'][key]
        ) * metadata['scalability_factor']
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, refreshes the last access time to the current time, refines the predicted future access pattern using the machine learning model, and moves the object to the most-recently-used end of the next higher LRU queue if applicable. The latency sensitivity and scalability factor remain unchanged.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    # Assuming a function `predict_future_access` exists for ML model prediction
    metadata['predicted_future_access'][key] = predict_future_access(obj)
    metadata['lru_queue_index'][key] = 0  # Move to the most-recently-used end of the next higher LRU queue

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the last access time to the current time, estimates the initial predicted future access using the machine learning model, records the object's latency sensitivity, places the object in the most-recently-used end of the L1 queue, and adjusts the scalability factor if the cache size has changed.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['object_size'][key] = obj.size
    # Assuming a function `predict_future_access` exists for ML model prediction
    metadata['predicted_future_access'][key] = predict_future_access(obj)
    # Assuming a function `estimate_latency_sensitivity` exists for latency sensitivity estimation
    metadata['latency_sensitivity'][key] = estimate_latency_sensitivity(obj)
    metadata['lru_queue_index'][key] = 0  # Place in the most-recently-used end of the L1 queue
    metadata['scalability_factor'] = calculate_scalability_factor(cache_snapshot)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all metadata associated with the evicted object, recalculates the scalability factor to reflect the current cache size and load conditions, and ensures the LRU queue indices are updated accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    del metadata['access_frequency'][key]
    del metadata['last_access_time'][key]
    del metadata['object_size'][key]
    del metadata['predicted_future_access'][key]
    del metadata['latency_sensitivity'][key]
    del metadata['lru_queue_index'][key]
    metadata['scalability_factor'] = calculate_scalability_factor(cache_snapshot)

def predict_future_access(obj):
    # Placeholder for machine learning model prediction
    return 0.5

def estimate_latency_sensitivity(obj):
    # Placeholder for latency sensitivity estimation
    return 0.5

def calculate_scalability_factor(cache_snapshot):
    # Placeholder for scalability factor calculation
    return 1.0