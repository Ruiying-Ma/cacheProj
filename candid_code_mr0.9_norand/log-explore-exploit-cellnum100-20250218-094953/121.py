# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import deque

# Put tunable constant parameters below
WEIGHT_FREQUENCY = 1.0
WEIGHT_RECENCY = 1.0
WEIGHT_HIT_COUNTER = 1.0
WEIGHT_AGE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains a hash table for object locations, access frequency, recency of access, a dynamic priority score, a hit counter, and a timestamp for each entry. It also maintains a queue to track the order of entries.
metadata = {
    'access_frequency': {},  # key -> frequency
    'recency': {},           # key -> last access timestamp
    'hit_counter': {},       # key -> hit count
    'priority_score': {},    # key -> priority score
    'queue': deque(),        # queue to track order of entries
}

def calculate_priority_score(key, cache_snapshot):
    frequency = metadata['access_frequency'].get(key, 0)
    recency = metadata['recency'].get(key, 0)
    hit_counter = metadata['hit_counter'].get(key, 0)
    age = cache_snapshot.access_count - recency
    return (WEIGHT_FREQUENCY * frequency +
            WEIGHT_RECENCY * recency +
            WEIGHT_HIT_COUNTER * hit_counter +
            WEIGHT_AGE * age)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a combined score for each object, which is a weighted combination of access frequency, recency, hit counter, and age. The object with the lowest combined score is selected for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key in cache_snapshot.cache:
        score = calculate_priority_score(key, cache_snapshot)
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency and hit counter, updates the recency timestamp, recalculates the priority score, moves the entry to the front of the queue, and updates the hash table to reflect the new state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['hit_counter'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['priority_score'][key] = calculate_priority_score(key, cache_snapshot)
    
    # Move to front of the queue
    metadata['queue'].remove(key)
    metadata['queue'].appendleft(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, sets the current timestamp as its recency, sets the initial hit counter to 1, calculates its initial priority score, adds the object to the front of the queue, and updates the hash table to include the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['hit_counter'][key] = 1
    metadata['priority_score'][key] = calculate_priority_score(key, cache_snapshot)
    
    # Add to front of the queue
    metadata['queue'].appendleft(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its entry from the hash table and the queue, and adjusts the priority scores, hit counters, and timestamps of the remaining objects to maintain accurate tracking and dynamic eviction decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    # Remove from metadata
    del metadata['access_frequency'][evicted_key]
    del metadata['recency'][evicted_key]
    del metadata['hit_counter'][evicted_key]
    del metadata['priority_score'][evicted_key]
    
    # Remove from queue
    metadata['queue'].remove(evicted_key)
    
    # Adjust priority scores for remaining objects
    for key in cache_snapshot.cache:
        metadata['priority_score'][key] = calculate_priority_score(key, cache_snapshot)