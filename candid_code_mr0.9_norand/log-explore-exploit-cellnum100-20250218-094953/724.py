# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
DEFAULT_PROACTIVE_ADJUSTMENT_FACTOR = 1.0
DEFAULT_NEURAL_PRIORITIZATION_INDEX = 0.5
COGNITIVE_RESONANCE_INCREMENT = 1.0
COGNITIVE_RESONANCE_DECAY = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains a cognitive resonance score for each cache entry, a proactive adjustment factor, a predictive learning model, and a neural prioritization index.
cognitive_resonance_scores = {}
proactive_adjustment_factor = DEFAULT_PROACTIVE_ADJUSTMENT_FACTOR
predictive_learning_model = {}
neural_prioritization_index = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the entry with the lowest combined score of cognitive resonance and neural prioritization, adjusted by the proactive adjustment factor.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        combined_score = (cognitive_resonance_scores[key] + neural_prioritization_index[key]) * proactive_adjustment_factor
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the cognitive resonance score of the accessed entry is increased, the proactive adjustment factor is recalibrated based on recent access patterns, the predictive learning model is updated with the new access data, and the neural prioritization index is adjusted to reflect the increased importance of the entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    cognitive_resonance_scores[key] += COGNITIVE_RESONANCE_INCREMENT
    proactive_adjustment_factor = 1 + (cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count))
    predictive_learning_model[key] = cache_snapshot.access_count
    neural_prioritization_index[key] = 1.0

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the cognitive resonance score is initialized based on the predictive learning model's output, the proactive adjustment factor is set to a default value, the predictive learning model is updated with the new entry, and the neural prioritization index is initialized to a mid-level value.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    cognitive_resonance_scores[key] = predictive_learning_model.get(key, 0)
    proactive_adjustment_factor = DEFAULT_PROACTIVE_ADJUSTMENT_FACTOR
    predictive_learning_model[key] = cache_snapshot.access_count
    neural_prioritization_index[key] = DEFAULT_NEURAL_PRIORITIZATION_INDEX

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the cognitive resonance scores of remaining entries are slightly adjusted to reflect the change in cache composition, the proactive adjustment factor is recalibrated, the predictive learning model is updated to remove the evicted entry, and the neural prioritization index is recalculated for all remaining entries.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del cognitive_resonance_scores[evicted_key]
    del predictive_learning_model[evicted_key]
    del neural_prioritization_index[evicted_key]
    
    for key in cache_snapshot.cache:
        cognitive_resonance_scores[key] *= (1 - COGNITIVE_RESONANCE_DECAY)
    
    proactive_adjustment_factor = 1 + (cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count))
    
    for key in cache_snapshot.cache:
        neural_prioritization_index[key] = 0.5 + (cognitive_resonance_scores[key] / (sum(cognitive_resonance_scores.values()) + 1))