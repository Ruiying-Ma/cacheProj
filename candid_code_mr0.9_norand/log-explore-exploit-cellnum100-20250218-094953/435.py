# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
PREDICTIVE_SCORE_WEIGHT = 0.5
ACCESS_FREQUENCY_WEIGHT = 0.3
LAST_ACCESS_TIME_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, user behavior profiles, and predictive scores for each cached object. It also keeps an access log to monitor patterns and prefetching status.
metadata = {
    'access_frequency': collections.defaultdict(int),
    'last_access_time': {},
    'predictive_score': {},
    'user_behavior_profile': {},
    'access_log': []
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combination of the lowest predictive score, least recent access, and lowest access frequency. It also considers user behavior profiles to avoid evicting objects likely to be accessed soon.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (PREDICTIVE_SCORE_WEIGHT * metadata['predictive_score'].get(key, 0) +
                 ACCESS_FREQUENCY_WEIGHT * metadata['access_frequency'].get(key, 0) +
                 LAST_ACCESS_TIME_WEIGHT * (cache_snapshot.access_count - metadata['last_access_time'].get(key, 0)))
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the last access time and increments the access frequency for the object. It also updates the user behavior profile and recalculates the predictive score based on the latest access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['access_frequency'][key] += 1
    # Update user behavior profile and predictive score
    metadata['user_behavior_profile'][key] = metadata['user_behavior_profile'].get(key, 0) + 1
    metadata['predictive_score'][key] = calculate_predictive_score(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, last access time, and predictive score. It also updates the user behavior profile and access log to reflect the new addition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['access_frequency'][key] = 1
    metadata['user_behavior_profile'][key] = 1
    metadata['predictive_score'][key] = calculate_predictive_score(key)
    metadata['access_log'].append((cache_snapshot.access_count, key))

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata and updates the access log to reflect the eviction. It also adjusts the user behavior profile and predictive scores of remaining objects to account for the change in cache contents.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in metadata['last_access_time']:
        del metadata['last_access_time'][key]
    if key in metadata['access_frequency']:
        del metadata['access_frequency'][key]
    if key in metadata['predictive_score']:
        del metadata['predictive_score'][key]
    if key in metadata['user_behavior_profile']:
        del metadata['user_behavior_profile'][key]
    metadata['access_log'] = [(time, k) for time, k in metadata['access_log'] if k != key]

def calculate_predictive_score(key):
    '''
    This function calculates the predictive score for a given key based on the user behavior profile and access patterns.
    - Args:
        - `key`: The key of the object for which the predictive score is being calculated.
    - Return:
        - `score`: The calculated predictive score.
    '''
    # For simplicity, let's assume the predictive score is based on the access frequency and user behavior profile
    return metadata['access_frequency'].get(key, 0) + metadata['user_behavior_profile'].get(key, 0)