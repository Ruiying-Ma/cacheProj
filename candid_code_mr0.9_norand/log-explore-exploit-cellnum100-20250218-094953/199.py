# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQ = 1.0
WEIGHT_SYS_CALL_FREQ = 1.0
WEIGHT_LAST_ACCESS_TIME = 1.0
WEIGHT_CONCURRENT_ACCESS = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, system call frequency, last access timestamp, and a concurrent access counter for each cache entry.
metadata = {
    'access_frequency': {},
    'system_call_frequency': {},
    'last_access_timestamp': {},
    'concurrent_access_counter': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score that considers low access frequency, high system call frequency, old last access timestamp, and low concurrent access count.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_freq = metadata['access_frequency'].get(key, 0)
        sys_call_freq = metadata['system_call_frequency'].get(key, 0)
        last_access_time = metadata['last_access_timestamp'].get(key, 0)
        concurrent_access = metadata['concurrent_access_counter'].get(key, 0)
        
        score = (WEIGHT_ACCESS_FREQ * access_freq -
                 WEIGHT_SYS_CALL_FREQ * sys_call_freq +
                 WEIGHT_LAST_ACCESS_TIME * (cache_snapshot.access_count - last_access_time) -
                 WEIGHT_CONCURRENT_ACCESS * concurrent_access)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the last access timestamp to the current time, and increments the concurrent access counter.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['concurrent_access_counter'][key] = metadata['concurrent_access_counter'].get(key, 0) + 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the system call frequency based on recent system call patterns, sets the last access timestamp to the current time, and initializes the concurrent access counter to 1.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['system_call_frequency'][key] = 1  # Assuming a default value for system call frequency
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['concurrent_access_counter'][key] = 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalculates the system call frequency for remaining entries, adjusts the concurrent access counters, and updates any global statistics used for throughput analysis.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['system_call_frequency']:
        del metadata['system_call_frequency'][evicted_key]
    if evicted_key in metadata['last_access_timestamp']:
        del metadata['last_access_timestamp'][evicted_key]
    if evicted_key in metadata['concurrent_access_counter']:
        del metadata['concurrent_access_counter'][evicted_key]
    
    # Recalculate system call frequency for remaining entries
    for key in cache_snapshot.cache.keys():
        metadata['system_call_frequency'][key] = 1  # Assuming a recalculated value for system call frequency
    
    # Adjust concurrent access counters
    for key in metadata['concurrent_access_counter']:
        metadata['concurrent_access_counter'][key] = max(0, metadata['concurrent_access_counter'][key] - 1)