# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for access frequency in the composite score
BETA = 0.3   # Weight for last access timestamp in the composite score
GAMMA = 0.2  # Weight for resource allocation score in the composite score

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access timestamp, predicted future access time, and resource allocation score for each cached object.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score derived from the least predicted future access time, lowest access frequency, and lowest resource allocation score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = math.inf
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        score = (ALPHA * meta['access_frequency'] +
                 BETA * (cache_snapshot.access_count - meta['last_access_timestamp']) +
                 GAMMA * meta['resource_allocation_score'])
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the last access timestamp to the current time, increments the access frequency, and recalculates the predicted future access time using a machine learning model.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['last_access_timestamp'] = cache_snapshot.access_count
    metadata[key]['access_frequency'] += 1
    metadata[key]['predicted_future_access_time'] = predict_future_access_time(obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the last access timestamp to the current time, sets the access frequency to one, and calculates the initial predicted future access time and resource allocation score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'last_access_timestamp': cache_snapshot.access_count,
        'access_frequency': 1,
        'predicted_future_access_time': predict_future_access_time(obj),
        'resource_allocation_score': calculate_resource_allocation_score(obj)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all metadata associated with the evicted object and recalibrates the resource allocation scores for the remaining objects to ensure optimal resource distribution.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata[evicted_key]
    
    for key in metadata:
        metadata[key]['resource_allocation_score'] = calculate_resource_allocation_score(cache_snapshot.cache[key])

def predict_future_access_time(obj):
    '''
    Placeholder function for predicting future access time using a machine learning model.
    '''
    # For simplicity, we return a constant value. In a real implementation, this would use a machine learning model.
    return 100

def calculate_resource_allocation_score(obj):
    '''
    Placeholder function for calculating resource allocation score.
    '''
    # For simplicity, we return the size of the object. In a real implementation, this could be more complex.
    return obj.size