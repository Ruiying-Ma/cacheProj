# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for combining different heuristics

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, predicted future access time, dynamic load metrics, recency of access, and load distribution across cache levels.
metadata = {
    'access_frequency': {},  # key -> frequency
    'last_access_time': {},  # key -> last access time
    'predicted_future_access_time': {},  # key -> predicted future access time
    'recency': {},  # key -> recency timestamp
    'dynamic_load_metrics': {},  # key -> dynamic load metrics
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by combining temporal access pattern analysis, predictive caching algorithm, and a weighted heuristic that considers low access frequency, least recent use, low predicted future access, and load balancing across cache levels.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        frequency = metadata['access_frequency'].get(key, 0)
        last_access = metadata['last_access_time'].get(key, 0)
        predicted_future = metadata['predicted_future_access_time'].get(key, float('inf'))
        recency = metadata['recency'].get(key, 0)
        load_metric = metadata['dynamic_load_metrics'].get(key, 0)
        
        # Calculate a combined score for eviction
        score = (ALPHA * frequency) + ((1 - ALPHA) * (cache_snapshot.access_count - last_access)) + predicted_future + recency + load_metric
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the last access time to the current time, increments the access frequency, updates the recency timestamp, and refines the predicted future access time based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata['last_access_time'][key] = current_time
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['recency'][key] = current_time
    # Update predicted future access time (simple heuristic for demonstration)
    metadata['predicted_future_access_time'][key] = current_time + (1 / (metadata['access_frequency'][key] + 1))

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the last access time to the current time, sets the access frequency to one, sets the recency timestamp to the current time, estimates the initial predicted future access time using temporal access pattern analysis, and generates an initial future access prediction based on the object's type and context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata['last_access_time'][key] = current_time
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = current_time
    # Initial predicted future access time (simple heuristic for demonstration)
    metadata['predicted_future_access_time'][key] = current_time + 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalculates the dynamic load metrics, adjusts the predicted future access times of remaining objects, rebalances the load across cache levels by redistributing objects if necessary, and updates the overall cache state to reflect the removal of the evicted object's metadata.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    # Remove metadata of the evicted object
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_time']:
        del metadata['last_access_time'][evicted_key]
    if evicted_key in metadata['predicted_future_access_time']:
        del metadata['predicted_future_access_time'][evicted_key]
    if evicted_key in metadata['recency']:
        del metadata['recency'][evicted_key]
    if evicted_key in metadata['dynamic_load_metrics']:
        del metadata['dynamic_load_metrics'][evicted_key]
    
    # Recalculate dynamic load metrics and adjust predicted future access times
    for key in cache_snapshot.cache:
        # Simple heuristic for demonstration
        metadata['dynamic_load_metrics'][key] = len(cache_snapshot.cache) / cache_snapshot.capacity
        metadata['predicted_future_access_time'][key] = cache_snapshot.access_count + (1 / (metadata['access_frequency'].get(key, 1) + 1))