# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
INITIAL_PREDICTIVE_SCORE = 1
LATENCY_WEIGHT = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains a frequency counter for each cached item, a predictive score based on access patterns, and a timestamp for the last access. It also keeps a global latency optimization score to prioritize low-latency access.
frequency_counter = {}
predictive_score = {}
last_access_timestamp = {}
global_latency_optimization_score = 0

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by combining the frequency counter, predictive score, and data retention policy. Items with the lowest combined score are considered first, with a preference for those with higher latency scores.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        combined_score = (frequency_counter[key] + predictive_score[key]) * LATENCY_WEIGHT + (cache_snapshot.access_count - last_access_timestamp[key])
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the frequency counter for the item is incremented, the predictive score is updated based on recent access patterns, and the last access timestamp is refreshed. The global latency optimization score is adjusted if the access latency was lower than expected.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    frequency_counter[key] += 1
    predictive_score[key] = (predictive_score[key] + 1) / 2  # Update predictive score based on recent access patterns
    last_access_timestamp[key] = cache_snapshot.access_count
    global_latency_optimization_score = sum(predictive_score.values()) / len(predictive_score)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the frequency counter is initialized to 1, the predictive score is set based on initial access patterns, and the last access timestamp is recorded. The global latency optimization score is recalculated to include the new item.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    frequency_counter[key] = 1
    predictive_score[key] = INITIAL_PREDICTIVE_SCORE
    last_access_timestamp[key] = cache_snapshot.access_count
    global_latency_optimization_score = sum(predictive_score.values()) / len(predictive_score)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy removes its metadata from the cache. The global latency optimization score is updated to reflect the removal, ensuring that future evictions continue to optimize for low-latency access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    del frequency_counter[key]
    del predictive_score[key]
    del last_access_timestamp[key]
    global_latency_optimization_score = sum(predictive_score.values()) / len(predictive_score)