# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections
import time

# Put tunable constant parameters below
WEIGHT_INVERSE_PREDICTIVE_ACCURACY = 0.25
WEIGHT_CACHE_MISS_RATIO = 0.25
WEIGHT_MEMORY_FOOTPRINT = 0.25
WEIGHT_DYNAMIC_PRIORITY_SCORE = 0.25

# Put the metadata specifically maintained by the policy below. The policy maintains a dynamic priority score, a stack for access order, memory latency counters, LRU queue, SQ, MQ, GQ, access frequency, recency timestamp, stochastic model with predictive score, cache miss ratio estimate, and memory footprint for each cached object.
metadata = {
    'access_frequency': collections.defaultdict(int),
    'recency_timestamp': collections.defaultdict(int),
    'dynamic_priority_score': collections.defaultdict(float),
    'memory_latency_counters': collections.defaultdict(int),
    'predictive_score': collections.defaultdict(float),
    'cache_miss_ratio_estimate': collections.defaultdict(float),
    'memory_footprint': collections.defaultdict(int),
    'lru_queue': collections.deque(),
    'stack': collections.deque(),
    'gq': collections.deque(),
}

def calculate_composite_score(obj_key):
    inverse_predictive_accuracy = 1 / metadata['predictive_score'][obj_key]
    cache_miss_ratio = metadata['cache_miss_ratio_estimate'][obj_key]
    memory_footprint = metadata['memory_footprint'][obj_key]
    dynamic_priority_score = metadata['dynamic_priority_score'][obj_key]
    
    composite_score = (
        WEIGHT_INVERSE_PREDICTIVE_ACCURACY * inverse_predictive_accuracy +
        WEIGHT_CACHE_MISS_RATIO * cache_miss_ratio +
        WEIGHT_MEMORY_FOOTPRINT * memory_footprint +
        WEIGHT_DYNAMIC_PRIORITY_SCORE * dynamic_priority_score
    )
    return composite_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates a composite score for each object using a weighted sum of the inverse of the predictive accuracy, cache miss ratio, memory footprint, and dynamic priority score. The object with the highest composite score is evicted. If scores are tied, the oldest entry in the stack is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    max_composite_score = -1
    oldest_entry = None
    
    for obj_key in cache_snapshot.cache:
        composite_score = calculate_composite_score(obj_key)
        if composite_score > max_composite_score:
            max_composite_score = composite_score
            candid_obj_key = obj_key
            oldest_entry = metadata['stack'][0]
        elif composite_score == max_composite_score:
            if metadata['stack'][0] == obj_key:
                candid_obj_key = obj_key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Increment the access frequency if less than 3, update recency timestamp, move to the most-recently-used end of the LRU queue, move to the top of the stack, recalculate dynamic priority score, adjust memory latency counters, update predictive score, recalculate cache miss ratio, and adjust memory footprint if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    obj_key = obj.key
    if metadata['access_frequency'][obj_key] < 3:
        metadata['access_frequency'][obj_key] += 1
    metadata['recency_timestamp'][obj_key] = cache_snapshot.access_count
    if obj_key in metadata['lru_queue']:
        metadata['lru_queue'].remove(obj_key)
    metadata['lru_queue'].append(obj_key)
    if obj_key in metadata['stack']:
        metadata['stack'].remove(obj_key)
    metadata['stack'].append(obj_key)
    # Recalculate dynamic priority score, predictive score, cache miss ratio, and memory footprint if necessary
    # These calculations are placeholders and should be replaced with actual logic
    metadata['dynamic_priority_score'][obj_key] = 1.0 / (1 + metadata['access_frequency'][obj_key])
    metadata['predictive_score'][obj_key] = 1.0 / (1 + metadata['access_frequency'][obj_key])
    metadata['cache_miss_ratio_estimate'][obj_key] = 1.0 / (1 + metadata['access_frequency'][obj_key])
    metadata['memory_footprint'][obj_key] = obj.size

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    Initialize frequency to 1, set recency timestamp, move to the most-recently-used end of the LRU queue, place at the top of the stack, set memory latency counter, calculate initial dynamic priority score, initialize predictive score, set initial cache miss ratio estimate, and record memory footprint.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    obj_key = obj.key
    metadata['access_frequency'][obj_key] = 1
    metadata['recency_timestamp'][obj_key] = cache_snapshot.access_count
    metadata['lru_queue'].append(obj_key)
    metadata['stack'].append(obj_key)
    metadata['memory_latency_counters'][obj_key] = 0
    metadata['dynamic_priority_score'][obj_key] = 1.0
    metadata['predictive_score'][obj_key] = 1.0
    metadata['cache_miss_ratio_estimate'][obj_key] = 1.0
    metadata['memory_footprint'][obj_key] = obj.size

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Remove from LRU queue, put at the rear of GQ, remove front of GQ if full, remove from stack, adjust memory latency counters, recalculate dynamic priority scores, recalculate cache miss ratio for remaining objects, and update stochastic model for future predictive accuracy.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['lru_queue']:
        metadata['lru_queue'].remove(evicted_key)
    metadata['gq'].append(evicted_key)
    if len(metadata['gq']) > cache_snapshot.capacity:
        metadata['gq'].popleft()
    if evicted_key in metadata['stack']:
        metadata['stack'].remove(evicted_key)
    del metadata['memory_latency_counters'][evicted_key]
    del metadata['dynamic_priority_score'][evicted_key]
    del metadata['predictive_score'][evicted_key]
    del metadata['cache_miss_ratio_estimate'][evicted_key]
    del metadata['memory_footprint'][evicted_key]
    # Recalculate dynamic priority scores, cache miss ratio for remaining objects, and update stochastic model
    for obj_key in cache_snapshot.cache:
        metadata['dynamic_priority_score'][obj_key] = 1.0 / (1 + metadata['access_frequency'][obj_key])
        metadata['cache_miss_ratio_estimate'][obj_key] = 1.0 / (1 + metadata['access_frequency'][obj_key])