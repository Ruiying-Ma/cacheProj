# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
INITIAL_PREDICTIVE_SCORE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, data size, and a predictive score based on historical access patterns. It also tracks the current load on the system to balance the cache usage across different nodes.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'predictive_score': {},
    'data_size': {},
    'system_load': 0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score for each cached item, which factors in low access frequency, older last access time, larger data size, and lower predictive score. Items with the lowest composite scores are selected for eviction, ensuring memory optimization and load balancing.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_composite_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_freq = metadata['access_frequency'].get(key, 0)
        last_access = metadata['last_access_time'].get(key, 0)
        predictive_score = metadata['predictive_score'].get(key, INITIAL_PREDICTIVE_SCORE)
        data_size = cached_obj.size
        
        composite_score = (1 / (access_freq + 1)) + (cache_snapshot.access_count - last_access) + data_size - predictive_score
        
        if composite_score < min_composite_score:
            min_composite_score = composite_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access time to the current time, and recalculates the predictive score based on the updated access pattern. The load on the system is also reassessed to ensure balanced cache usage.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['predictive_score'][key] = metadata['access_frequency'][key] / (cache_snapshot.access_count - metadata['last_access_time'][key] + 1)
    metadata['system_load'] = cache_snapshot.size / cache_snapshot.capacity

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to one, sets the last access time to the current time, and assigns an initial predictive score based on similar historical data. The system load is updated to reflect the new addition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['predictive_score'][key] = INITIAL_PREDICTIVE_SCORE
    metadata['data_size'][key] = obj.size
    metadata['system_load'] = cache_snapshot.size / cache_snapshot.capacity

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata for the evicted item and recalculates the load on the system to ensure that the remaining cache items are balanced across the nodes. The predictive heuristics are also adjusted to improve future eviction decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in metadata['access_frequency']:
        del metadata['access_frequency'][key]
    if key in metadata['last_access_time']:
        del metadata['last_access_time'][key]
    if key in metadata['predictive_score']:
        del metadata['predictive_score'][key]
    if key in metadata['data_size']:
        del metadata['data_size'][key]
    
    metadata['system_load'] = cache_snapshot.size / cache_snapshot.capacity