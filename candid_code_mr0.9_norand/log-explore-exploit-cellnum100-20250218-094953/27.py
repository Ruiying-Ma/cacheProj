# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import deque, defaultdict

# Put tunable constant parameters below
K = 3  # Number of LRU queues
SQ_CAPACITY = 5
MQ_CAPACITY = 5
GQ_CAPACITY = 5
LRU_CAPACITIES = [5, 5, 5]  # Capacities for L1, L2, ..., Lk

# Put the metadata specifically maintained by the policy below. The system maintains k LRU queues (L1, L2,..., Lk) with predetermined capacities, two FIFO queues (SQ and MQ) with predetermined capacities, and a ghost FIFO queue (GQ) with a predetermined capacity. Each object has a recency timestamp and an access frequency.
LRU_queues = [deque() for _ in range(K)]
SQ = deque()
MQ = deque()
GQ = deque()
recency = {}
frequency = defaultdict(int)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    If SQ is full, move objects from SQ to MQ until an object with frequency less than 2 is found or MQ is full. If the object with frequency less than 2 is found, evict it. If MQ is full, cyclically reduce the frequency of objects in MQ and move them to the rear until an object with zero frequency is found and evict it. If SQ is not full, evict the least-recently-used object from the non-empty LRU queue with the smallest subscript.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    if len(SQ) >= SQ_CAPACITY:
        while SQ:
            sq_obj_key = SQ.popleft()
            if frequency[sq_obj_key] < 2:
                candid_obj_key = sq_obj_key
                break
            MQ.append(sq_obj_key)
            if len(MQ) >= MQ_CAPACITY:
                break
        if candid_obj_key is None:
            while MQ:
                mq_obj_key = MQ.popleft()
                frequency[mq_obj_key] -= 1
                if frequency[mq_obj_key] == 0:
                    candid_obj_key = mq_obj_key
                    break
                MQ.append(mq_obj_key)
    else:
        for i in range(K):
            if LRU_queues[i]:
                candid_obj_key = LRU_queues[i].popleft()
                break
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Increase the hit object's frequency by 1 if it is less than 3. Update its recency timestamp to the current time. If it is in Li, move it to the most-recently-used end of the queue with subscript j = min(i+1, k). If Lj is full, flush the least-recently-used object in Lj to the most-recently-used end of Li.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    obj_key = obj.key
    if frequency[obj_key] < 3:
        frequency[obj_key] += 1
    recency[obj_key] = cache_snapshot.access_count
    
    for i in range(K):
        if obj_key in LRU_queues[i]:
            LRU_queues[i].remove(obj_key)
            j = min(i + 1, K - 1)
            if len(LRU_queues[j]) >= LRU_CAPACITIES[j]:
                lru_obj_key = LRU_queues[j].popleft()
                LRU_queues[i].append(lru_obj_key)
            LRU_queues[j].append(obj_key)
            break

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    Set the inserted object's frequency to 1 and recency timestamp to the current time. If it was in GQ, put it at the rear of MQ and remove it from GQ. Otherwise, put it at the rear of SQ and at the most-recently-used end of L1.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    obj_key = obj.key
    frequency[obj_key] = 1
    recency[obj_key] = cache_snapshot.access_count
    
    if obj_key in GQ:
        GQ.remove(obj_key)
        MQ.append(obj_key)
    else:
        SQ.append(obj_key)
        LRU_queues[0].append(obj_key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Remove the evicted object from the queue it resides in and stop tracking its recency and frequency. Put the evicted object at the rear of GQ. Remove the front of GQ if GQ is full.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_obj_key = evicted_obj.key
    
    for i in range(K):
        if evicted_obj_key in LRU_queues[i]:
            LRU_queues[i].remove(evicted_obj_key)
            break
    
    if evicted_obj_key in SQ:
        SQ.remove(evicted_obj_key)
    if evicted_obj_key in MQ:
        MQ.remove(evicted_obj_key)
    
    if evicted_obj_key in recency:
        del recency[evicted_obj_key]
    if evicted_obj_key in frequency:
        del frequency[evicted_obj_key]
    
    GQ.append(evicted_obj_key)
    if len(GQ) > GQ_CAPACITY:
        GQ.popleft()