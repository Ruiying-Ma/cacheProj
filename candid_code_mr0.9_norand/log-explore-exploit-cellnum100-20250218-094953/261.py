# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 0.4
WEIGHT_RECENCY = 0.3
WEIGHT_DATA_TYPE = 0.2
WEIGHT_RETRIEVAL_TIME = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, data type categorization, and retrieval time estimation for each cached object.
metadata = {
    'access_frequency': {},  # key -> frequency
    'recency': {},           # key -> last access time
    'data_type': {},         # key -> data type category
    'retrieval_time': {}     # key -> retrieval time estimation
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score that combines low access frequency, long time since last access, less critical data type, and high retrieval time estimation.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'].get(key, 0)
        recency = metadata['recency'].get(key, 0)
        data_type = metadata['data_type'].get(key, 0)
        retrieval_time = metadata['retrieval_time'].get(key, 0)
        
        score = (WEIGHT_ACCESS_FREQUENCY * access_frequency +
                 WEIGHT_RECENCY * (cache_snapshot.access_count - recency) +
                 WEIGHT_DATA_TYPE * data_type +
                 WEIGHT_RETRIEVAL_TIME * retrieval_time)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the recency of access timestamp, and recalculates the retrieval time estimation for the accessed object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['recency'][key] = cache_snapshot.access_count
    # Recalculate retrieval time estimation (this is a placeholder, actual calculation may vary)
    metadata['retrieval_time'][key] = metadata['access_frequency'][key] * 2  # Example calculation

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to one, sets the recency of access to the current time, categorizes the data type, and estimates the retrieval time based on initial access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['data_type'][key] = 1  # Example categorization, actual categorization logic may vary
    metadata['retrieval_time'][key] = 2  # Initial retrieval time estimation

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata of the evicted object and recalibrates the weighted scoring system to ensure balanced future evictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in metadata['access_frequency']:
        del metadata['access_frequency'][key]
    if key in metadata['recency']:
        del metadata['recency'][key]
    if key in metadata['data_type']:
        del metadata['data_type'][key]
    if key in metadata['retrieval_time']:
        del metadata['retrieval_time'][key]
    
    # Recalibrate the weighted scoring system if necessary (this is a placeholder, actual recalibration logic may vary)
    # Example: Adjust weights based on current cache state