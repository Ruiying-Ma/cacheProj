# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
# For simplicity, we will use a fixed size for the predictive index and temporal logs
PREDICTIVE_INDEX_SIZE = 100
TEMPORAL_LOG_SIZE = 100

# Put the metadata specifically maintained by the policy below. The policy maintains a predictive index of access patterns, memory snapshots of recent states, dynamic allocation metrics, and temporal access logs.
predictive_index = collections.OrderedDict()
temporal_logs = collections.OrderedDict()
dynamic_allocation_metrics = {
    'total_size': 0,
    'object_count': 0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by analyzing the predictive index to forecast future access patterns, comparing memory snapshots to identify less critical data, and considering temporal access logs to find the least recently used data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    # Find the least recently used object in the temporal logs
    for key in temporal_logs:
        if key in cache_snapshot.cache:
            candid_obj_key = key
            break
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the predictive index to refine future access predictions, refreshes the memory snapshot to reflect the current state, adjusts dynamic allocation metrics to optimize space, and logs the access time in the temporal analysis.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    # Update predictive index
    if obj.key in predictive_index:
        predictive_index.move_to_end(obj.key)
    else:
        predictive_index[obj.key] = cache_snapshot.access_count
        if len(predictive_index) > PREDICTIVE_INDEX_SIZE:
            predictive_index.popitem(last=False)
    
    # Update temporal logs
    if obj.key in temporal_logs:
        temporal_logs.move_to_end(obj.key)
    else:
        temporal_logs[obj.key] = cache_snapshot.access_count
        if len(temporal_logs) > TEMPORAL_LOG_SIZE:
            temporal_logs.popitem(last=False)
    
    # Update dynamic allocation metrics
    dynamic_allocation_metrics['total_size'] = cache_snapshot.size
    dynamic_allocation_metrics['object_count'] = len(cache_snapshot.cache)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy updates the predictive index to include the new access pattern, takes a new memory snapshot to capture the current state, recalculates dynamic allocation metrics to ensure optimal space usage, and logs the insertion time in the temporal analysis.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    # Update predictive index
    predictive_index[obj.key] = cache_snapshot.access_count
    if len(predictive_index) > PREDICTIVE_INDEX_SIZE:
        predictive_index.popitem(last=False)
    
    # Update temporal logs
    temporal_logs[obj.key] = cache_snapshot.access_count
    if len(temporal_logs) > TEMPORAL_LOG_SIZE:
        temporal_logs.popitem(last=False)
    
    # Update dynamic allocation metrics
    dynamic_allocation_metrics['total_size'] = cache_snapshot.size
    dynamic_allocation_metrics['object_count'] = len(cache_snapshot.cache)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy updates the predictive index to remove outdated patterns, takes a new memory snapshot to reflect the change, adjusts dynamic allocation metrics to account for the freed space, and logs the eviction time in the temporal analysis.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    # Update predictive index
    if evicted_obj.key in predictive_index:
        del predictive_index[evicted_obj.key]
    
    # Update temporal logs
    if evicted_obj.key in temporal_logs:
        del temporal_logs[evicted_obj.key]
    
    # Update dynamic allocation metrics
    dynamic_allocation_metrics['total_size'] = cache_snapshot.size
    dynamic_allocation_metrics['object_count'] = len(cache_snapshot.cache)