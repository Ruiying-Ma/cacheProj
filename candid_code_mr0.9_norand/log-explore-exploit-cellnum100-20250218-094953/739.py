# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
INITIAL_CONTEXTUAL_VECTOR = 1.0
NEUTRAL_ADAPTIVE_RESPONSE_SCORE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains a predictive cluster index, a contextual vector for each cache entry, a fusion score derived from data fusion techniques, and an adaptive response score that adjusts based on access patterns.
metadata = {
    'predictive_cluster_index': collections.defaultdict(float),
    'contextual_vector': collections.defaultdict(float),
    'fusion_score': collections.defaultdict(float),
    'adaptive_response_score': collections.defaultdict(float)
}

def calculate_fusion_score(key):
    return (metadata['predictive_cluster_index'][key] + 
            metadata['contextual_vector'][key] * 
            metadata['adaptive_response_score'][key])

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by identifying the cache entry with the lowest fusion score, which is a combination of the predictive cluster index and the contextual vector, adjusted by the adaptive response score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_fusion_score = float('inf')
    
    for key in cache_snapshot.cache:
        score = calculate_fusion_score(key)
        if score < min_fusion_score:
            min_fusion_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the contextual vector to reflect the current access context, recalculates the fusion score, and adjusts the adaptive response score to increase the likelihood of retaining frequently accessed items.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['contextual_vector'][key] += 1
    metadata['fusion_score'][key] = calculate_fusion_score(key)
    metadata['adaptive_response_score'][key] += 0.1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its predictive cluster index, sets an initial contextual vector based on the insertion context, calculates the initial fusion score, and sets the adaptive response score to a neutral value.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['predictive_cluster_index'][key] = 0.0
    metadata['contextual_vector'][key] = INITIAL_CONTEXTUAL_VECTOR
    metadata['adaptive_response_score'][key] = NEUTRAL_ADAPTIVE_RESPONSE_SCORE
    metadata['fusion_score'][key] = calculate_fusion_score(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy recalibrates the predictive cluster index for remaining entries, updates the contextual vectors to reflect the new cache state, and adjusts the adaptive response scores to account for the change in cache composition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['predictive_cluster_index'][evicted_key]
    del metadata['contextual_vector'][evicted_key]
    del metadata['fusion_score'][evicted_key]
    del metadata['adaptive_response_score'][evicted_key]
    
    for key in cache_snapshot.cache:
        metadata['predictive_cluster_index'][key] += 0.1
        metadata['contextual_vector'][key] -= 0.1
        metadata['adaptive_response_score'][key] *= 0.9
        metadata['fusion_score'][key] = calculate_fusion_score(key)