# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
INITIAL_PREDICTED_EXECUTION_TIME = 1
INITIAL_PRIORITY_LEVEL = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, predicted execution time for future accesses, and priority levels of cached objects. It also tracks resource allocation metrics to handle priority inversion.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'predicted_execution_time': {},
    'priority_level': {},
    'resource_allocation': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a composite score derived from the object's access frequency, last access time, predicted execution time, and priority level. Objects with lower scores are evicted first, with special handling to prevent priority inversion by considering resource allocation metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_freq = metadata['access_frequency'].get(key, 0)
        last_access = metadata['last_access_time'].get(key, 0)
        predicted_exec_time = metadata['predicted_execution_time'].get(key, INITIAL_PREDICTED_EXECUTION_TIME)
        priority = metadata['priority_level'].get(key, INITIAL_PRIORITY_LEVEL)
        
        # Composite score calculation
        score = (access_freq + 1) * (cache_snapshot.access_count - last_access) * predicted_exec_time / priority
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency by incrementing it, refreshes the last access time to the current time, and recalculates the predicted execution time based on recent access patterns. The priority level remains unchanged unless resource allocation metrics suggest a need for adjustment.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    # Update access frequency
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    
    # Update last access time
    metadata['last_access_time'][key] = current_time
    
    # Recalculate predicted execution time (simple heuristic: average time between accesses)
    if metadata['access_frequency'][key] > 1:
        last_exec_time = metadata['predicted_execution_time'].get(key, INITIAL_PREDICTED_EXECUTION_TIME)
        new_exec_time = (last_exec_time + (current_time - metadata['last_access_time'][key])) / 2
        metadata['predicted_execution_time'][key] = new_exec_time

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency to 1, sets the last access time to the current time, estimates the initial predicted execution time based on object characteristics, and assigns a priority level based on resource allocation policies.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    # Initialize access frequency
    metadata['access_frequency'][key] = 1
    
    # Set last access time
    metadata['last_access_time'][key] = current_time
    
    # Estimate initial predicted execution time
    metadata['predicted_execution_time'][key] = INITIAL_PREDICTED_EXECUTION_TIME
    
    # Assign initial priority level
    metadata['priority_level'][key] = INITIAL_PRIORITY_LEVEL

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy updates the resource allocation metrics to reflect the freed resources and adjusts the priority levels of remaining objects if necessary to handle any potential priority inversion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    # Remove metadata of evicted object
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_time']:
        del metadata['last_access_time'][evicted_key]
    if evicted_key in metadata['predicted_execution_time']:
        del metadata['predicted_execution_time'][evicted_key]
    if evicted_key in metadata['priority_level']:
        del metadata['priority_level'][evicted_key]
    
    # Update resource allocation metrics
    # (This is a placeholder, as the actual implementation would depend on specific resource allocation policies)
    # For example, we could adjust priority levels of remaining objects here if necessary