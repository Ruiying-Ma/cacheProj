# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
BASELINE_CCMS = 1
INITIAL_DLI = 1
INITIAL_PDS = 1

# Put the metadata specifically maintained by the policy below. The policy maintains a dynamic latency index (DLI) for each cache entry, a cognitive cache management score (CCMS) that reflects the importance and access patterns of data, a predictive data synthesis (PDS) score that forecasts future access likelihood, and a temporal allocation map (TAM) that tracks the time-based allocation and usage patterns of cache entries.
DLI = {}
CCMS = {}
PDS = {}
TAM = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by combining the DLI, CCMS, PDS, and TAM scores. It prioritizes evicting entries with the lowest CCMS and PDS scores, while also considering the DLI to avoid evicting entries with high latency impact and using TAM to ensure temporal relevance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = CCMS[key] + PDS[key] - DLI[key] + (cache_snapshot.access_count - TAM[key])
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the DLI is adjusted based on the current latency, the CCMS is incremented to reflect the increased importance, the PDS score is updated using recent access patterns to refine future predictions, and the TAM is updated to reflect the latest access time.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    DLI[key] = time.time() - TAM[key]
    CCMS[key] += 1
    PDS[key] = (PDS[key] + 1) / 2
    TAM[key] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the DLI is initialized based on the initial latency, the CCMS is set to a baseline value, the PDS score is calculated using initial predictive models, and the TAM is updated to include the new entry with its insertion time.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    DLI[key] = INITIAL_DLI
    CCMS[key] = BASELINE_CCMS
    PDS[key] = INITIAL_PDS
    TAM[key] = cache_snapshot.access_count

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the DLI is recalibrated for remaining entries to reflect the new cache state, the CCMS of remaining entries is adjusted to redistribute importance, the PDS model is refined to improve future predictions, and the TAM is updated to remove the evicted entry and adjust temporal patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del DLI[evicted_key]
    del CCMS[evicted_key]
    del PDS[evicted_key]
    del TAM[evicted_key]
    
    for key in cache_snapshot.cache:
        DLI[key] = time.time() - TAM[key]
        CCMS[key] = max(BASELINE_CCMS, CCMS[key] - 1)
        PDS[key] = (PDS[key] + 1) / 2