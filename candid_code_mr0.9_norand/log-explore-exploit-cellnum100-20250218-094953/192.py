# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
DEFAULT_PERSISTENCE_SCORE = 1.0
DEFAULT_QUANTUM_TUNNELING_PROB = 0.01
PERSISTENCE_SCORE_INCREMENT = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry including access frequency, last access timestamp, data persistence score, and a quantum tunneling probability factor.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combined score derived from the lowest access frequency, oldest last access timestamp, lowest data persistence score, and highest quantum tunneling probability.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        score = (meta['access_frequency'] * 0.25 + 
                 (cache_snapshot.access_count - meta['last_access_timestamp']) * 0.25 + 
                 meta['data_persistence_score'] * 0.25 + 
                 meta['quantum_tunneling_prob'] * 0.25)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency is incremented, the last access timestamp is updated to the current time, the data persistence score is slightly increased, and the quantum tunneling probability factor is recalculated based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta['access_frequency'] += 1
    meta['last_access_timestamp'] = cache_snapshot.access_count
    meta['data_persistence_score'] += PERSISTENCE_SCORE_INCREMENT
    meta['quantum_tunneling_prob'] = 1 / (1 + meta['access_frequency'])

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the access frequency is initialized to 1, the last access timestamp is set to the current time, the data persistence score is set based on the object's importance, and the quantum tunneling probability factor is initialized to a default low value.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'access_frequency': 1,
        'last_access_timestamp': cache_snapshot.access_count,
        'data_persistence_score': DEFAULT_PERSISTENCE_SCORE,
        'quantum_tunneling_prob': DEFAULT_QUANTUM_TUNNELING_PROB
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy recalculates the quantum tunneling probability factors for remaining entries to ensure they reflect the current cache state and adjusts the data persistence scores to account for the eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata[evicted_obj.key]
    
    for key, meta in metadata.items():
        meta['quantum_tunneling_prob'] = 1 / (1 + meta['access_frequency'])
        meta['data_persistence_score'] = max(DEFAULT_PERSISTENCE_SCORE, meta['data_persistence_score'] - PERSISTENCE_SCORE_INCREMENT)