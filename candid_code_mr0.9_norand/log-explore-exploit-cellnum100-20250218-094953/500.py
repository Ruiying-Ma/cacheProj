# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for predicted next access time
BETA = 0.3   # Weight for access frequency
GAMMA = 0.2  # Weight for spatial locality score

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, predicted next access time, and spatial locality score for each cache entry.
metadata = {
    'access_frequency': {},  # key -> frequency
    'last_access_time': {},  # key -> last access time
    'predicted_next_access_time': {},  # key -> predicted next access time
    'spatial_locality_score': {}  # key -> spatial locality score
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combined score derived from the least predicted next access time, lowest access frequency, and lowest spatial locality score, ensuring temporal consistency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        predicted_next_access_time = metadata['predicted_next_access_time'][key]
        access_frequency = metadata['access_frequency'][key]
        spatial_locality_score = metadata['spatial_locality_score'][key]
        
        score = (ALPHA * predicted_next_access_time +
                 BETA * access_frequency +
                 GAMMA * spatial_locality_score)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the last access time to the current time, increments the access frequency, and recalculates the predicted next access time based on recent access patterns. The spatial locality score is adjusted based on the proximity of accessed data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    # Update last access time
    metadata['last_access_time'][key] = current_time
    
    # Increment access frequency
    metadata['access_frequency'][key] += 1
    
    # Recalculate predicted next access time
    metadata['predicted_next_access_time'][key] = current_time + (current_time - metadata['last_access_time'][key]) / metadata['access_frequency'][key]
    
    # Adjust spatial locality score
    for other_key in metadata['spatial_locality_score']:
        if other_key != key:
            metadata['spatial_locality_score'][other_key] += 1
    metadata['spatial_locality_score'][key] = 0

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the last access time to the current time, sets the access frequency to one, predicts the next access time based on initial patterns, and calculates an initial spatial locality score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    # Initialize last access time
    metadata['last_access_time'][key] = current_time
    
    # Set access frequency to one
    metadata['access_frequency'][key] = 1
    
    # Predict next access time based on initial patterns
    metadata['predicted_next_access_time'][key] = current_time + 1
    
    # Calculate initial spatial locality score
    metadata['spatial_locality_score'][key] = 0
    for other_key in metadata['spatial_locality_score']:
        if other_key != key:
            metadata['spatial_locality_score'][other_key] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes all associated metadata for the evicted entry and adjusts the spatial locality scores of remaining entries to reflect the change in the cache landscape.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    # Remove all associated metadata for the evicted entry
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_time'][evicted_key]
    del metadata['predicted_next_access_time'][evicted_key]
    del metadata['spatial_locality_score'][evicted_key]
    
    # Adjust the spatial locality scores of remaining entries
    for key in metadata['spatial_locality_score']:
        metadata['spatial_locality_score'][key] -= 1