# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import heapq

# Put tunable constant parameters below
initial_importance = 1

# Put the metadata specifically maintained by the policy below. The policy maintains multiple eviction candidates, an importance score for each cached item, a probabilistic model for access patterns, and separate lists for frequently and less frequently accessed data.
cached_objects = {}                # Dictionary to hold importance and access frequency info
frequent_access_list = set()       # Set of frequently accessed keys
less_frequent_access_list = set()  # Set of less frequently accessed keys

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates multiple eviction candidates based on real-time access patterns and importance scores, using a probabilistic model to obfuscate actual usage frequency, and prioritizes evicting less important and less frequently accessed data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    
    # Candidate list for eviction
    candidates = []
    
    # Iterate over current cached objects and decide on eviction candidates
    for key, cached_obj in cache_snapshot.cache.items():
        importance_score = cached_objects[key]['importance_score']
        access_freq = cached_objects[key]['access_count']
        heapq.heappush(candidates, (importance_score, access_freq, key))
    
    # Choose the least important and least frequently accessed item for eviction
    while candidates:
        _, _, key = heapq.heappop(candidates)
        if key in less_frequent_access_list:
            candid_obj_key = key
            break
        elif not candidates:
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access pattern data, recalculates the importance score for the accessed item, and may adjust the item's position between the frequently and less frequently accessed lists.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    cached_objects[key]['access_count'] += 1
    cache_size = cache_snapshot.size
    cache_capacity = cache_snapshot.capacity

    # Recalculate the importance score
    importance_score = cached_objects[key]['importance_score']
    accessed_time = cache_snapshot.access_count
    cached_objects[key]['importance_score'] = importance_score + (1/cache_size) * (accessed_time/cache_capacity)

    # Adjust position between frequently and less frequently accessed lists
    if cached_objects[key]['access_count'] > 1:
        if key not in frequent_access_list:
            less_frequent_access_list.discard(key)
            frequent_access_list.add(key)
    else:
        less_frequent_access_list.add(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its importance score, updates the access pattern data, and places the item in the appropriate list based on its initial access frequency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    cached_objects[key] = {
        'importance_score': initial_importance,
        'access_count': 0
    }
    less_frequent_access_list.add(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the evicted item from all metadata structures, updates the access pattern data to reflect the change, and recalculates the importance scores for remaining items if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    
    # Remove evicted object from metadata structures
    cached_objects.pop(key, None)
    frequent_access_list.discard(key)
    less_frequent_access_list.discard(key)