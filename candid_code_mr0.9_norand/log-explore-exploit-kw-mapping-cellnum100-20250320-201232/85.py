# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
OVERFLOW_AREA_SIZE = 10

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, priority level, synchronization status, predictive access probabilities, and group associations for each cache item. It also includes an overflow area for recently evicted items.
metadata = {
    'access_frequency': {},  # {key: frequency}
    'recency': {},  # {key: last_access_time}
    'priority_level': {},  # {key: priority}
    'synchronization_status': {},  # {key: sync_status}
    'predictive_access_probabilities': {},  # {key: probability}
    'group_associations': {},  # {key: group_id}
    'overflow_area': []  # [(key, metadata)]
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by predicting access probabilities, evaluating groups of related entries, and using a decision matrix that considers access frequency, recency, priority level, and synchronization status. The item or group with the lowest predicted access probability and least importance is evicted, with a preference for the least recently synchronized item if priorities are equal.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_priority = float('inf')
    min_probability = float('inf')
    min_sync_status = float('inf')
    min_recency = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        priority = metadata['priority_level'][key]
        probability = metadata['predictive_access_probabilities'][key]
        sync_status = metadata['synchronization_status'][key]
        recency = metadata['recency'][key]

        if (probability < min_probability or
            (probability == min_probability and priority < min_priority) or
            (probability == min_probability and priority == min_priority and sync_status < min_sync_status) or
            (probability == min_probability and priority == min_priority and sync_status == min_sync_status and recency < min_recency)):
            min_probability = probability
            min_priority = priority
            min_sync_status = sync_status
            min_recency = recency
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, recency, and synchronization status of the accessed item. It recalculates the priority level based on the new frequency and recency values, adjusts the predictive model, and re-evaluates the grouping of related entries.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['synchronization_status'][key] = cache_snapshot.access_count
    metadata['priority_level'][key] = calculate_priority(metadata['access_frequency'][key], metadata['recency'][key])
    metadata['predictive_access_probabilities'][key] = predict_access_probability(metadata['access_frequency'][key], metadata['recency'][key])
    metadata['group_associations'][key] = determine_group(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and recency, calculates its priority level, sets its synchronization status, updates the predictive model, assigns it to a related group if applicable, and checks the overflow area for recent evictions of the same item.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['synchronization_status'][key] = cache_snapshot.access_count
    metadata['priority_level'][key] = calculate_priority(metadata['access_frequency'][key], metadata['recency'][key])
    metadata['predictive_access_probabilities'][key] = predict_access_probability(metadata['access_frequency'][key], metadata['recency'][key])
    metadata['group_associations'][key] = determine_group(key)

    # Check overflow area for recent evictions of the same item
    for i, (evicted_key, evicted_metadata) in enumerate(metadata['overflow_area']):
        if evicted_key == key:
            metadata['overflow_area'].pop(i)
            break

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy moves its metadata to the overflow area, updates the predictive model, adjusts the grouping of related entries, and modifies the decision matrix to reflect the change in cache composition. The overflow area is managed to ensure it does not exceed a predefined size, evicting the oldest items if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    evicted_metadata = {
        'access_frequency': metadata['access_frequency'].pop(evicted_key),
        'recency': metadata['recency'].pop(evicted_key),
        'priority_level': metadata['priority_level'].pop(evicted_key),
        'synchronization_status': metadata['synchronization_status'].pop(evicted_key),
        'predictive_access_probabilities': metadata['predictive_access_probabilities'].pop(evicted_key),
        'group_associations': metadata['group_associations'].pop(evicted_key)
    }
    metadata['overflow_area'].append((evicted_key, evicted_metadata))

    # Ensure overflow area does not exceed predefined size
    if len(metadata['overflow_area']) > OVERFLOW_AREA_SIZE:
        metadata['overflow_area'].pop(0)

def calculate_priority(frequency, recency):
    # Example priority calculation based on frequency and recency
    return frequency / (recency + 1)

def predict_access_probability(frequency, recency):
    # Example predictive model based on frequency and recency
    return frequency / (recency + 1)

def determine_group(key):
    # Example group determination logic
    return hash(key) % 10