# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict, deque

# Put tunable constant parameters below
OVERFLOW_SIZE = 100

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, priority level, synchronization status, predictive access probabilities, and group associations for each cache item. It also includes an overflow area for recently evicted items.
metadata = {
    'access_freq': defaultdict(int),       # Stores access frequency of each object
    'recency': {},                         # Stores last access time of each object
    'priority_level': defaultdict(int),    # Stores priority level of each object
    'sync_status': {},                     # Stores synchronization status of each object
    'pred_access_prob': defaultdict(float),# Stores predicted access probabilities of each object
    'group_assoc': defaultdict(set),       # Stores group associations for each object
    'overflow_area': deque()               # Stores overflow area for recently evicted items
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by predicting access probabilities, evaluating groups of related entries, and using a decision matrix that considers access frequency, recency, priority level, and synchronization status. The item or group with the lowest predicted access probability and least importance is evicted, with a preference for the least recently synchronized item if priorities are equal.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    lowest_priority = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        recency = metadata['recency'][key]
        priority = metadata['priority_level'][key]
        pred_prob = metadata['pred_access_prob'][key]
        sync_status = metadata['sync_status'][key]
        
        # Decision matrix logic
        importance_score = pred_prob * priority
        
        if importance_score < lowest_priority:
            lowest_priority = importance_score
            candid_obj_key = key
        elif importance_score == lowest_priority and not sync_status:
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, recency, and synchronization status of the accessed item. It recalculates the priority level based on the new frequency and recency values, adjusts the predictive model, and re-evaluates the grouping of related entries.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    now = cache_snapshot.access_count
    key = obj.key
    
    metadata['access_freq'][key] += 1
    metadata['recency'][key] = now
    metadata['sync_status'][key] = True  # Example for sync updating upon access
    
    # Recalculates the priority level
    freq = metadata['access_freq'][key]
    recency = now - metadata['recency'][key]
    metadata['priority_level'][key] = freq + recency  # Example priority calculation
    
    # Adjust predictive model (not detailed, assumed as increment in probability)
    metadata['pred_access_prob'][key] += 0.01
    
    # Example group association adjustment (no detailed logic provided)
    # metadata['group_assoc'][...] = ...

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and recency, calculates its priority level, sets its synchronization status, updates the predictive model, assigns it to a related group if applicable, and checks the overflow area for recent evictions of the same item.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    now = cache_snapshot.access_count
    key = obj.key
    
    metadata['access_freq'][key] = 1
    metadata['recency'][key] = now
    metadata['priority_level'][key] = 1  # Initial priority
    metadata['sync_status'][key] = False # Initial synchronization status
    metadata['pred_access_prob'][key] = 0.1  # Initial predictive probability
    metadata['group_assoc'][key] = set()  # Initialize group association
    
    for i, (evicted_key, _) in enumerate(metadata['overflow_area']):
        if evicted_key == key:
            metadata['overflow_area'].remove((evicted_key, _))
            break

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy moves its metadata to the overflow area, updates the predictive model, adjusts the grouping of related entries, and modifies the decision matrix to reflect the change in cache composition. The overflow area is managed to ensure it does not exceed a predefined size, evicting the oldest items if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    # Move metadata to the overflow area
    metadata_overflow = (
        evicted_key, metadata['access_freq'][evicted_key]
    )
    metadata['overflow_area'].append(metadata_overflow)
    
    if len(metadata['overflow_area']) > OVERFLOW_SIZE:
        metadata['overflow_area'].popleft()
    
    # Remove evicted object's metadata
    del metadata['access_freq'][evicted_key]
    del metadata['recency'][evicted_key]
    del metadata['priority_level'][evicted_key]
    del metadata['sync_status'][evicted_key]
    del metadata['pred_access_prob'][evicted_key]
    del metadata['group_assoc'][evicted_key]

    # Assume adjustment of decision matrix and grouping of related entries