# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import deque, defaultdict
import heapq

# Put tunable constant parameters below
MAX_FREQUENCY = 3
PRIORITY_THRESHOLD = 10

# Put the metadata specifically maintained by the policy below. The policy maintains a circular buffer index, a priority queue based on access frequency, two FIFO queues (SQ and MQ), two LRU queues (T1 and T2), two ghost FIFO queues (GQ and B1/B2), and metadata for insertion time, access frequency, last access time, and priority scores.
circular_buffer_index = 0
priority_queue = []
SQ = deque()
MQ = deque()
T1 = deque()
T2 = deque()
GQ = deque()
B1 = deque()
B2 = deque()
insertion_time = {}
access_frequency = defaultdict(int)
last_access_time = {}
priority_scores = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first checks if SQ exceeds its capacity, then moves objects to MQ. If MQ is full, it reduces frequencies in MQ until an object with zero frequency is found and evicts it. If SQ is not full, it evicts from T1 or T2 based on LRU. If multiple candidates exist, the item with the lowest priority score across all levels is chosen.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    if len(SQ) > cache_snapshot.capacity:
        while len(SQ) > cache_snapshot.capacity:
            moved_obj = SQ.popleft()
            MQ.append(moved_obj)
    
    if len(MQ) > cache_snapshot.capacity:
        while MQ:
            candidate = MQ.popleft()
            if access_frequency[candidate.key] == 0:
                candid_obj_key = candidate.key
                break
            else:
                access_frequency[candidate.key] -= 1
                MQ.append(candidate)
    
    if candid_obj_key is None:
        if T1:
            candid_obj_key = T1.popleft().key
        elif T2:
            candid_obj_key = T2.popleft().key
    
    if candid_obj_key is None:
        all_candidates = list(SQ) + list(MQ) + list(T1) + list(T2)
        candid_obj_key = min(all_candidates, key=lambda x: priority_scores[x.key]).key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the accessed object's frequency is increased by 1 if less than 3, its last access time is updated, and its priority score is recalculated. The object is moved to the most-recently-used end of T2 and may be promoted to a higher level if its priority exceeds a threshold. The position in the priority queue is adjusted accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    if access_frequency[obj.key] < MAX_FREQUENCY:
        access_frequency[obj.key] += 1
    last_access_time[obj.key] = cache_snapshot.access_count
    priority_scores[obj.key] = access_frequency[obj.key] * (cache_snapshot.access_count - insertion_time[obj.key])
    
    if obj in T1:
        T1.remove(obj)
    if obj in T2:
        T2.remove(obj)
    
    T2.append(obj)
    
    if priority_scores[obj.key] > PRIORITY_THRESHOLD:
        if obj in SQ:
            SQ.remove(obj)
            MQ.append(obj)
        elif obj in MQ:
            MQ.remove(obj)
            T2.append(obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its frequency is set to 1, recency to the current timestamp, and its priority score is initialized based on initial access patterns. The object is placed at the rear of SQ or the most-recently-used end of T1, and at the current pointer location. The circular buffer index is advanced, and the new entry is added to the recency list.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    access_frequency[obj.key] = 1
    insertion_time[obj.key] = cache_snapshot.access_count
    last_access_time[obj.key] = cache_snapshot.access_count
    priority_scores[obj.key] = access_frequency[obj.key] * (cache_snapshot.access_count - insertion_time[obj.key])
    
    if len(SQ) < cache_snapshot.capacity:
        SQ.append(obj)
    else:
        T1.append(obj)
    
    global circular_buffer_index
    circular_buffer_index = (circular_buffer_index + 1) % cache_snapshot.capacity

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After eviction, if evicted from SQ, the object is moved to the rear of GQ. If evicted from T1, it is moved to the rear of B1. If evicted from T2, it is moved to the rear of B2. The evicted object's metadata is removed from the associative arrays, and the priority scores of remaining items are recalculated. The circular buffer index is updated to point to the next oldest entry, and the metadata structures are adjusted to reflect the current state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    if evicted_obj in SQ:
        GQ.append(evicted_obj)
    elif evicted_obj in T1:
        B1.append(evicted_obj)
    elif evicted_obj in T2:
        B2.append(evicted_obj)
    
    del insertion_time[evicted_obj.key]
    del access_frequency[evicted_obj.key]
    del last_access_time[evicted_obj.key]
    del priority_scores[evicted_obj.key]
    
    global circular_buffer_index
    circular_buffer_index = (circular_buffer_index + 1) % cache_snapshot.capacity