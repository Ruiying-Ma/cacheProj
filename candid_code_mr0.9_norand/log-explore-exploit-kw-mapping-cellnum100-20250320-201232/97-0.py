# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict, deque

# Put tunable constant parameters below
LRU_COST = 1
LFU_COST = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for access frequency, recency, and partition-specific data. It also tracks the current workload pattern to dynamically adjust the eviction strategy.
access_frequency = defaultdict(int)
recency_metadata = {}
partition_metadata = defaultdict(list)
workload_pattern = "mixed"
access_time = 0

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first determining the current workload pattern. It then selects the least recently used or least frequently used item from the appropriate partition, or evicts the least recently used copy if redundancy is in play.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    global access_time
    candid_obj_key = None
    
    if workload_pattern == "LRU":
        least_recently_used = min(recency_metadata, key=lambda k: recency_metadata[k])
        candid_obj_key = least_recently_used
    elif workload_pattern == "LFU":
        least_frequently_used = min(access_frequency, key=lambda k: access_frequency[k])
        candid_obj_key = least_frequently_used
    else:
        # Mixed or balanced eviction strategy
        min_score = float('inf')
        for key in cache_snapshot.cache:
            lru_score = access_time - recency_metadata[key]
            lfu_score = access_frequency[key]
            combined_score = LRU_COST * lru_score + LFU_COST * lfu_score
            if combined_score < min_score:
                min_score = combined_score
                candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and recency metadata for the accessed item. It also adjusts the workload pattern metadata to reflect the current access behavior.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    global access_time
    access_time += 1
    key = obj.key
    
    access_frequency[key] += 1
    recency_metadata[key] = access_time

    # Adjust workload pattern (Simple heuristic)
    if access_frequency[key] > recency_metadata[key] / (access_time / cache_snapshot.access_count):
        workload_pattern = "LFU"
    else:
        workload_pattern = "LRU"

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy updates the access frequency and recency metadata for the new item. It also updates the partition-specific data to ensure balanced cache management.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    global access_time
    access_time += 1
    key = obj.key
    
    access_frequency[key] = 1
    recency_metadata[key] = access_time

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy updates the access frequency and recency metadata to remove the evicted item. It also adjusts the workload pattern and partition-specific data to maintain optimal performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    
    if key in access_frequency:
        del access_frequency[key]
    if key in recency_metadata:
        del recency_metadata[key]