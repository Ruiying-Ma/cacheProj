# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

from collections import defaultdict

# Put tunable constant parameters below
LRU_WEIGHT = 0.5
LFU_WEIGHT = 0.3
LIFO_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains a mapping table that tracks the frequency and recency of access for each cached object, along with a dynamic priority score. It also keeps a timestamp of the last access and insertion time for each object.

metadata = {
    'frequencies': defaultdict(int),
    'last_access_times': {},
    'insertion_times': {},
    'priority_scores': {}
}

def calculate_priority(key, current_time):
    frequency = metadata['frequencies'][key]
    last_access = metadata['last_access_times'][key]
    insertion_time = metadata['insertion_times'][key]
    
    lru_score = (current_time - last_access) * LRU_WEIGHT
    lfu_score = frequency * LFU_WEIGHT
    lifo_score = (current_time - insertion_time) * LIFO_WEIGHT
    priority_score = lru_score - lfu_score + lifo_score
    
    metadata['priority_scores'][key] = priority_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy periodically scans the cache and evicts the object with the lowest priority score, which is calculated based on a combination of least recently used (LRU), least frequently used (LFU), and LIFO principles.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_priority_score = float('inf')
    
    # Calculate current time
    current_time = cache_snapshot.access_count
    
    for key, cached_obj in cache_snapshot.cache.items():
        calculate_priority(key, current_time)
        if metadata['priority_scores'][key] < lowest_priority_score:
            lowest_priority_score = metadata['priority_scores'][key]
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, refreshes the last access timestamp, and recalculates the priority score for the accessed object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Update access frequency
    metadata['frequencies'][obj.key] += 1
    
    # Update last access timestamp
    metadata['last_access_times'][obj.key] = cache_snapshot.access_count
    
    # Recalculate priority score
    calculate_priority(obj.key, cache_snapshot.access_count)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy sets the initial access frequency to 1, records the current time as the last access and insertion timestamp, and assigns a base priority score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Set initial access frequency to 1
    metadata['frequencies'][obj.key] = 1
    
    # Record the last access timestamp and insertion time
    current_time = cache_snapshot.access_count
    metadata['last_access_times'][obj.key] = current_time
    metadata['insertion_times'][obj.key] = current_time
    
    # Assign a base priority score
    calculate_priority(obj.key, current_time)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the evicted object's metadata from the mapping table and recalculates the priority scores of the remaining objects to ensure optimal cache performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Remove metadata of evicted object
    if evicted_obj.key in metadata['frequencies']:
        del metadata['frequencies'][evicted_obj.key]
    if evicted_obj.key in metadata['last_access_times']:
        del metadata['last_access_times'][evicted_obj.key]
    if evicted_obj.key in metadata['insertion_times']:
        del metadata['insertion_times'][evicted_obj.key]
    if evicted_obj.key in metadata['priority_scores']:
        del metadata['priority_scores'][evicted_obj.key]
    
    # Recalculate priority scores for remaining objects
    current_time = cache_snapshot.access_count
    for key in cache_snapshot.cache.keys():
        calculate_priority(key, current_time)