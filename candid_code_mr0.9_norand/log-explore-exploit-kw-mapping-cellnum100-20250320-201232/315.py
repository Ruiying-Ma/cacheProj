# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
DEFAULT_FREQUENCY = 1
DEFAULT_RECENCY = 1

# Put the metadata specifically maintained by the policy below. Each cache line maintains its access frequency, recency score, and a fitness score. Additionally, each cache line has a small agent that can communicate with neighboring agents.
metadata = {}

def calculate_fitness(frequency, recency):
    # Fitness score is inversely proportional to frequency and recency
    return 1 / (frequency * recency)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy periodically evaluates the fitness scores of all cached objects. The object with the lowest fitness score, which is a combination of low access frequency and low recency, is chosen for eviction. Agents may also communicate with neighbors to make more informed decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_fitness = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        freq = metadata[key]['frequency']
        rec = metadata[key]['recency']
        fitness = calculate_fitness(freq, rec)
        
        if fitness < lowest_fitness:
            lowest_fitness = fitness
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency score of the accessed object are incremented. The fitness score is recalculated based on the updated frequency and recency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['frequency'] += 1
    metadata[key]['recency'] = cache_snapshot.access_count
    metadata[key]['fitness'] = calculate_fitness(metadata[key]['frequency'], metadata[key]['recency'])

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its access frequency and recency score are initialized to default values. The fitness score is calculated based on these initial values. Neighboring agents are informed of the new insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'frequency': DEFAULT_FREQUENCY,
        'recency': cache_snapshot.access_count,
        'fitness': calculate_fitness(DEFAULT_FREQUENCY, cache_snapshot.access_count)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the metadata of the evicted object is cleared. Neighboring agents are informed of the eviction to update their local information and potentially adjust their strategies.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]