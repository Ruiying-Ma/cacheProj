# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.7
BETA = 0.3

# Put the metadata specifically maintained by the policy below. The policy maintains a priority score for each cached object, which is a combination of access frequency and recency. Additionally, it keeps a probabilistic prediction score indicating the likelihood of future accesses.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the object with the lowest combined priority and probabilistic prediction score, ensuring that the least likely accessed and lowest priority items are evicted first.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_priority = float('inf')
    for key, cached_obj in cache_snapshot.cache.items():
        metadata_entry = metadata[key]
        combined_score = ALPHA * metadata_entry['priority_score'] + BETA * metadata_entry['prob_prediction_score']
        if combined_score < min_priority:
            min_priority = combined_score
            candid_obj_key = key
    # Remove metadata to avoid inconsistency alongside the cached object
    del metadata[candid_obj_key]
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increases the access frequency and updates the recency for the accessed object, recalculating its priority score and adjusting its probabilistic prediction score accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    metadata_entry = metadata[obj.key]
    metadata_entry['access_frequency'] += 1
    metadata_entry['last_access_time'] = cache_snapshot.access_count
    metadata_entry['priority_score'] = calculate_priority_score(
        metadata_entry['access_frequency'], 
        metadata_entry['last_access_time'], 
        cache_snapshot.access_count
    )
    metadata_entry['prob_prediction_score'] = calculate_probabilistic_prediction_score(
        metadata_entry['access_frequency'], 
        cache_snapshot.access_count
    )

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency, and probabilistic prediction score, then calculates its initial priority score based on these values.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    metadata[obj.key] = {
        'access_frequency': 1,
        'last_access_time': cache_snapshot.access_count,
        'priority_score': calculate_priority_score(1, cache_snapshot.access_count, cache_snapshot.access_count),
        'prob_prediction_score': calculate_probabilistic_prediction_score(1, cache_snapshot.access_count)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata associated with the evicted object and may adjust the probabilistic prediction scores of remaining objects to reflect the updated cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    # Metadata for the evicted object has already been removed in the evict function
    # Optionally, adjust the metadata of remaining objects

def calculate_priority_score(access_frequency, last_access_time, current_time):
    '''
    This function calculates the priority score of an object.
    - Args:
        - `access_frequency`: The frequency with which the object was accessed.
        - `last_access_time`: The last time at which the object was accessed.
        - `current_time`: The current time (total number of accesses).
    - Return:
        - `priority_score`: The calculated priority score.
    '''
    return access_frequency + (1 / (current_time - last_access_time + 1))

def calculate_probabilistic_prediction_score(access_frequency, current_time):
    '''
    This function calculates the probabilistic prediction score indicating the likelihood of future accesses.
    - Args:
        - `access_frequency`: The frequency with which the object was accessed.
        - `current_time`: The current time (total number of accesses).
    - Return:
        - `probabilistic_prediction_score`: The calculated probabilistic prediction score.
    '''
    return access_frequency / current_time