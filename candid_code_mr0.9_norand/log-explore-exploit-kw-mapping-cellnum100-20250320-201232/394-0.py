# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
VOTES_THRESHOLD = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry, including access frequency, last access time, and insertion time. It also keeps a record of votes from multiple algorithms (LRU, LFU, FIFO) for each entry.
metadata = {
    'access_frequency': {},   # {obj.key: frequency}
    'last_access_time': {},   # {obj.key: last access time}
    'insertion_time': {},     # {obj.key: insertion time}
    'votes': {}               # {obj.key: {'LRU': int, 'LFU': int, 'FIFO': int}}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a consensus vote among LRU, LFU, and FIFO algorithms. The entry with the most eviction votes is selected for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    max_votes = -1

    for key in cache_snapshot.cache:
        num_votes = sum(metadata['votes'][key].values())
        if num_votes > max_votes or (num_votes == max_votes and key < candid_obj_key):
            max_votes = num_votes
            candid_obj_key = key
            
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and last access time for the hit entry. It also resets the votes from the algorithms for this entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    # Update access frequency and last access time
    metadata['access_frequency'][key] += 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    
    # Reset votes
    metadata['votes'][key] = {'LRU': 0, 'LFU': 0, 'FIFO': 0}

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, last access time, and insertion time. It also resets the votes from the algorithms for this new entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    # Initialize access frequency, last access time, and insertion time
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['insertion_time'][key] = cache_snapshot.access_count
    
    # Initialize votes
    metadata['votes'][key] = {'LRU': 0, 'LFU': 0, 'FIFO': 0}

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an entry, the policy removes all metadata associated with the evicted entry and adjusts the votes from the algorithms accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    # Remove all metadata associated with the evicted entry
    del metadata['access_frequency'][key]
    del metadata['last_access_time'][key]
    del metadata['insertion_time'][key]
    del metadata['votes'][key]

    # Adjust other entries' votes if necessary (simplified, perhaps further logic needed)
    for vote_set in metadata['votes'].values():
        if vote_set['LRU'] > 0:
            vote_set['LRU'] -= 1
        if vote_set['LFU'] > 0:
            vote_set['LFU'] -= 1
        if vote_set['FIFO'] > 0:
            vote_set['FIFO'] -= 1