# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
ALPHA = 0.1
BETA = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached item, including access frequency, recency, a priority score, and a utility score. Additionally, it keeps global statistics on overall access patterns and workload characteristics.
metadata = {
    'freq': collections.defaultdict(int),
    'recency': collections.defaultdict(int),
    'priority': collections.defaultdict(float),
    'utility': collections.defaultdict(float),
    'global_accesses': 0,
    'global_hits': 0,
    'global_misses': 0
}

def calculate_priority(key):
    freq = metadata['freq'][key]
    recency = metadata['recency'][key]
    utility = metadata['utility'][key]
    return freq / (recency + 1) + utility

def calculate_eviction_probability(key):
    priority = metadata['priority'][key]
    return 1.0 / (1.0 + priority)
    
def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates an eviction probability for each item based on its priority score, which is derived from its access frequency, recency, and utility score. Items with the lowest priority scores and highest eviction probabilities are chosen for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_priority = float('inf')
    for key in cache_snapshot.cache:
        priority = calculate_priority(key)
        if priority < min_priority:
            min_priority = priority
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the item are updated. The priority score is recalculated based on the new frequency and recency values, and the utility score is adjusted to reflect the item's contribution to the cache's performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata['freq'][obj.key] += 1
    metadata['recency'][obj.key] = cache_snapshot.access_count
    metadata['priority'][obj.key] = calculate_priority(obj.key)
    metadata['utility'][obj.key] += BETA
    metadata['global_hits'] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its initial access frequency and recency are set, and a priority score is assigned based on these initial values. The utility score is estimated based on the expected contribution of the item to the cache's performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata['freq'][obj.key] = 1
    metadata['recency'][obj.key] = cache_snapshot.access_count
    metadata['priority'][obj.key] = calculate_priority(obj.key)
    metadata['utility'][obj.key] = ALPHA
    metadata['global_misses'] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the global statistics are updated to reflect the change in the cache's working set. The priority scores and utility scores of remaining items are recalibrated to ensure optimal adaptation to the current workload characteristics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata['freq'][evicted_obj.key]
    del metadata['recency'][evicted_obj.key]
    del metadata['priority'][evicted_obj.key]
    del metadata['utility'][evicted_obj.key]

    for key in cache_snapshot.cache:
        metadata['priority'][key] = calculate_priority(key)