# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below
REGION_HIGH_THRESHOLD = 10
REGION_MEDIUM_THRESHOLD = 5

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry, including access frequency, recency (timestamp of last access), data size, and a region identifier indicating the access frequency region (e.g., high, medium, low).
cache_metadata = defaultdict(lambda: {
    "frequency": 0,
    "recency": 0,
    "size": 0,
    "region": "low"
})

def get_region(frequency):
    if frequency >= REGION_HIGH_THRESHOLD:
        return "high"
    elif frequency >= REGION_MEDIUM_THRESHOLD:
        return "medium"
    else:
        return "low"

def calculate_score(obj_metadata):
    # Example scoring system using weighted sum of negative values for eviction
    return -obj_metadata["frequency"] * 1 - obj_metadata["recency"] * 0.1 + obj_metadata["size"] * 0.01

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates multiple eviction candidates simultaneously from different regions, using a multi-dimensional scoring system that considers access frequency, recency, and data size. The candidate with the lowest score is chosen for eviction.
    '''
    candid_obj_key = None
    lowest_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        obj_metadata = cache_metadata[key]
        score = calculate_score(obj_metadata)
        if score < lowest_score:
            lowest_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency (timestamp) of the accessed entry are updated. The entry may be moved to a different region if its access frequency changes significantly.
    '''
    obj_metadata = cache_metadata[obj.key]
    obj_metadata["frequency"] += 1
    obj_metadata["recency"] = cache_snapshot.access_count
    obj_metadata["region"] = get_region(obj_metadata["frequency"])

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata (access frequency, recency, data size, and region). The object is placed in the appropriate region based on its initial access frequency.
    '''
    cache_metadata[obj.key] = {
        "frequency": 1,
        "recency": cache_snapshot.access_count,
        "size": obj.size,
        "region": get_region(1)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an entry, the policy updates the metadata of the remaining entries if necessary, such as adjusting region boundaries or recalculating scores for the next eviction decision.
    '''
    del cache_metadata[evicted_obj.key]