# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

from collections import defaultdict

# Put tunable constant parameters below
ENCRYPTION_THRESHOLD = 5  # access frequency threshold for encryption

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached item, including access frequency, recency of access, encryption status, and a trust score derived from frequency and recency.

metadata = {
    'access_frequency': defaultdict(int),
    'recency': {},
    'encryption_status': {},
    'trust_score': {}
}

def calculate_trust_score(access_freq, recency, current_time):
    """
    Calculate trust score based on access frequency and recency.
    Lower score for less frequently and less recently accessed items.
    """
    return access_freq + (current_time - recency)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the item with the lowest trust score, which is calculated based on a combination of access frequency and recency. Items that are less frequently accessed and less recently accessed are prioritized for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_trust_score = float('inf')
    
    current_time = cache_snapshot.access_count

    for key, item in cache_snapshot.cache.items():
        trust_score = calculate_trust_score(
            metadata['access_frequency'][key],
            metadata['recency'][key],
            current_time
        )
        if trust_score < min_trust_score:
            min_trust_score = trust_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and recency of the accessed item, recalculates its trust score, and ensures the item remains encrypted if it is frequently accessed.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count

    metadata['access_frequency'][obj.key] += 1
    metadata['recency'][obj.key] = current_time
    metadata['trust_score'][obj.key] = calculate_trust_score(
        metadata['access_frequency'][obj.key],
        metadata['recency'][obj.key],
        current_time
    )
    if metadata['access_frequency'][obj.key] >= ENCRYPTION_THRESHOLD:
        metadata['encryption_status'][obj.key] = True

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and recency, calculates its initial trust score, and encrypts the item if it is expected to be frequently accessed based on initial usage patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count

    metadata['access_frequency'][obj.key] = 1
    metadata['recency'][obj.key] = current_time
    metadata['trust_score'][obj.key] = calculate_trust_score(
        metadata['access_frequency'][obj.key],
        metadata['recency'][obj.key],
        current_time
    )
    if metadata['access_frequency'][obj.key] >= ENCRYPTION_THRESHOLD:
        metadata['encryption_status'][obj.key] = True

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy removes its metadata from the cache and recalculates the trust scores of remaining items to ensure accurate prioritization for future evictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_obj.key]
    if evicted_obj.key in metadata['recency']:
        del metadata['recency'][evicted_obj.key]
    if evicted_obj.key in metadata['encryption_status']:
        del metadata['encryption_status'][evicted_obj.key]
    if evicted_obj.key in metadata['trust_score']:
        del metadata['trust_score'][evicted_obj.key]

    current_time = cache_snapshot.access_count
    for key in cache_snapshot.cache:
        metadata['trust_score'][key] = calculate_trust_score(
            metadata['access_frequency'][key],
            metadata['recency'][key],
            current_time
        )