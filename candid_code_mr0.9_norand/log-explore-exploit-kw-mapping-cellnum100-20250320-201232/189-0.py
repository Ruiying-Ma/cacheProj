# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
INITIAL_FITNESS_SCORE = 1.0
INITIAL_STATE_PROBABILITY = 1.0
INITIAL_VIRTUAL_PHEROMONE_LEVEL = 1.0

FITNESS_SCORE_INCREMENT = 0.1
STATE_PROBABILITY_DECREMENT = 0.1
VIRTUAL_PHEROMONE_INCREMENT = 0.1

# Put the metadata specifically maintained by the policy below. Each cache line maintains a fitness score, a collective score, a state probability, and a virtual pheromone level. The fitness score is based on access patterns and usage history. The collective score is influenced by the access frequency and recency of all cache lines. The state probability represents the likelihood of eviction based on access frequency. The virtual pheromone level indicates the likelihood of retention based on recent accesses.

cache_metadata = {
    'fitness_scores': collections.defaultdict(lambda: INITIAL_FITNESS_SCORE),
    'collective_scores': collections.defaultdict(float),
    'state_probabilities': collections.defaultdict(lambda: INITIAL_STATE_PROBABILITY),
    'virtual_pheromone_levels': collections.defaultdict(lambda: INITIAL_VIRTUAL_PHEROMONE_LEVEL),
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by evaluating the fitness scores, collective scores, state probabilities, and virtual pheromone levels of all cache lines. The cache line with the lowest combined score is selected for eviction, ensuring a balance between individual and collective behavior.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_combined_score = float('inf')

    for obj_key, cached_obj in cache_snapshot.cache.items():
        combined_score = (
            cache_metadata['fitness_scores'][obj_key]
            + cache_metadata['collective_scores'][obj_key]
            + cache_metadata['state_probabilities'][obj_key]
            + cache_metadata['virtual_pheromone_levels'][obj_key]
        )

        if combined_score < min_combined_score:
            min_combined_score = combined_score
            candid_obj_key = obj_key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the fitness score of the accessed cache line is increased. The collective score of all cache lines is updated to reflect the increased access frequency and recency. The state probability of the accessed cache line is decreased, and its virtual pheromone level is increased to indicate higher retention likelihood.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    obj_key = obj.key
    cache_metadata['fitness_scores'][obj_key] += FITNESS_SCORE_INCREMENT
    for key in cache_snapshot.cache:
        cache_metadata['collective_scores'][key] += FITNESS_SCORE_INCREMENT

    cache_metadata['state_probabilities'][obj_key] = max(0, cache_metadata['state_probabilities'][obj_key] - STATE_PROBABILITY_DECREMENT)
    cache_metadata['virtual_pheromone_levels'][obj_key] += VIRTUAL_PHEROMONE_INCREMENT

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the fitness score of the new cache line is initialized based on initial access patterns. The collective scores of all cache lines are recalculated to include the new line. The state probability of the new cache line is set to a default value, and its virtual pheromone level is initialized to a baseline level.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    obj_key = obj.key
    cache_metadata['fitness_scores'][obj_key] = INITIAL_FITNESS_SCORE
    cache_metadata['state_probabilities'][obj_key] = INITIAL_STATE_PROBABILITY
    cache_metadata['virtual_pheromone_levels'][obj_key] = INITIAL_VIRTUAL_PHEROMONE_LEVEL

    for key in cache_snapshot.cache:
        cache_metadata['collective_scores'][key] += INITIAL_FITNESS_SCORE

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a cache line, the fitness scores of the remaining lines are adjusted to reflect the removal. The collective scores are recalculated to exclude the evicted line. The state probabilities of the remaining lines are updated to reflect the new cache state, and the virtual pheromone levels are adjusted to account for the change in cache composition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    num_lines = len(cache_snapshot.cache)
    
    if evicted_key in cache_metadata['fitness_scores']:
        del cache_metadata['fitness_scores'][evicted_key]
    if evicted_key in cache_metadata['collective_scores']:
        del cache_metadata['collective_scores'][evicted_key]
    if evicted_key in cache_metadata['state_probabilities']:
        del cache_metadata['state_probabilities'][evicted_key]
    if evicted_key in cache_metadata['virtual_pheromone_levels']:
        del cache_metadata['virtual_pheromone_levels'][evicted_key]
    
    for key in cache_snapshot.cache:
        if key != evicted_key:
            cache_metadata['collective_scores'][key] -= INITIAL_FITNESS_SCORE