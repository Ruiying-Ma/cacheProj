# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
INITIAL_WEIGHT = 1.0
FREQUENCY_WEIGHT = 0.5
RECENCY_WEIGHT = 0.3

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, and a dynamic weight for each cached object. It also tracks overall workload characteristics and access patterns over time.
cache_metadata = collections.defaultdict(lambda: {
    'frequency': 0,
    'recency': 0,
    'weight': INITIAL_WEIGHT
})

def calculate_score(metadata):
    # Calculate a score for the cached object based on frequency, recency, and weight.
    return metadata['frequency'] * FREQUENCY_WEIGHT + metadata['recency'] * RECENCY_WEIGHT + metadata['weight']

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a score for each cached object based on its access frequency, recency, and dynamic weight. The object with the lowest score is selected for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    
    # Calculate the score for each cached object and find the one with the lowest score
    lowest_score = float('inf')
    for key, cached_obj in cache_snapshot.cache.items():
        score = calculate_score(cache_metadata[key])
        if score < lowest_score:
            lowest_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the recency timestamp, and adjusts the dynamic weight based on the current workload characteristics for the accessed object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata = cache_metadata[obj.key]
    
    metadata['frequency'] += 1
    metadata['recency'] = cache_snapshot.access_count
    metadata['weight'] = calculate_dynamic_weight(cache_snapshot, obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, sets the recency timestamp to the current time, and assigns an initial dynamic weight based on the current workload characteristics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata = cache_metadata[obj.key]
    
    metadata['frequency'] = 1
    metadata['recency'] = cache_snapshot.access_count
    metadata['weight'] = calculate_initial_weight(cache_snapshot, obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy recalculates the dynamic weights for the remaining objects to reflect the updated workload characteristics and access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Recalculate the dynamic weights for all cached objects
    for key, cached_obj in cache_snapshot.cache.items():
        cache_metadata[key]['weight'] = calculate_dynamic_weight(cache_snapshot, cached_obj)
    
def calculate_dynamic_weight(cache_snapshot, obj):
    # Calculate the dynamic weight for an object based on current workload characteristics and access patterns.
    # This is a placeholder function. Adjust the logic based on desired workload characteristics.
    return INITIAL_WEIGHT + (cache_snapshot.access_count - cache_metadata[obj.key]['recency']) * 0.1

def calculate_initial_weight(cache_snapshot, obj):
    # Calculate the initial dynamic weight for a new object based on initial workload characteristics.
    # This is a placeholder function. Adjust the logic based on desired workload characteristics.
    return INITIAL_WEIGHT