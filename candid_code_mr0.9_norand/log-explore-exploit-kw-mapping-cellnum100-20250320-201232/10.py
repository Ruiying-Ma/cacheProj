# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_PRIORITY = 1
PRIORITY_INCREMENT = 1

# Put the metadata specifically maintained by the policy below. The policy maintains a priority score for each cached item, a partition identifier, a sequence of access steps, and system load metrics.
priority_scores = {}
partitions = {}
access_sequence = []
system_load_metrics = {
    'total_accesses': 0,
    'total_hits': 0,
    'total_misses': 0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first selecting the partition with the least critical access pattern, then evicting the item with the lowest priority score within that partition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    # Find the partition with the least critical access pattern
    least_critical_partition = min(partitions, key=lambda p: partitions[p]['criticality'])
    
    # Find the item with the lowest priority score within that partition
    lowest_priority_score = float('inf')
    for key in partitions[least_critical_partition]['items']:
        if priority_scores[key] < lowest_priority_score:
            lowest_priority_score = priority_scores[key]
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the priority score by increasing it based on the recency and frequency of access, updates the sequence of access steps to reflect the most recent access, and adjusts the system load metrics if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    priority_scores[obj.key] += PRIORITY_INCREMENT
    access_sequence.append((cache_snapshot.access_count, obj.key))
    system_load_metrics['total_hits'] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy assigns an initial priority score based on expected access patterns, places the object in the appropriate partition, initializes its sequence of access steps, and updates system load metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    priority_scores[obj.key] = INITIAL_PRIORITY
    partition_id = determine_partition(obj)
    if partition_id not in partitions:
        partitions[partition_id] = {'items': set(), 'criticality': 0}
    partitions[partition_id]['items'].add(obj.key)
    access_sequence.append((cache_snapshot.access_count, obj.key))
    system_load_metrics['total_accesses'] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy recalculates the priority scores of remaining items in the affected partition, updates the sequence of access steps to remove the evicted item, and adjusts system load metrics to reflect the change in cache content.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    partition_id = determine_partition(evicted_obj)
    partitions[partition_id]['items'].remove(evicted_obj.key)
    del priority_scores[evicted_obj.key]
    access_sequence[:] = [(t, k) for t, k in access_sequence if k != evicted_obj.key]
    system_load_metrics['total_accesses'] += 1

def determine_partition(obj):
    '''
    This function determines the partition identifier for a given object.
    - Args:
        - `obj`: The object for which the partition identifier is to be determined.
    - Return:
        - `partition_id`: The partition identifier for the object.
    '''
    # For simplicity, we can use the size of the object to determine the partition.
    # This is just an example and can be replaced with a more sophisticated method.
    if obj.size <= 1024:
        return 'small'
    elif obj.size <= 10240:
        return 'medium'
    else:
        return 'large'