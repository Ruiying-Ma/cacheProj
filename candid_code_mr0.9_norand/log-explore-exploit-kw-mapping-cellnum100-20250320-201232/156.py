# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
USEFULNESS_THRESHOLD = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, data importance score, and a usefulness score for each cached item. It also tracks a sequence of access times for all items.
metadata = {}

def calculate_usefulness(access_frequency, last_access_time, current_time):
    recency = current_time - last_access_time
    return access_frequency / (recency + 1)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first filtering out items that fail to meet a predefined usefulness threshold. Among the remaining items, it prioritizes eviction based on a combination of the lowest data importance score and the longest time since last access, using an optimization algorithm to balance these factors.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_importance_score = float('inf')
    max_last_access_time = -1

    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        usefulness = calculate_usefulness(meta['access_frequency'], meta['last_access_time'], cache_snapshot.access_count)
        if usefulness < USEFULNESS_THRESHOLD:
            continue
        if (meta['importance_score'] < min_importance_score or
            (meta['importance_score'] == min_importance_score and meta['last_access_time'] < max_last_access_time)):
            min_importance_score = meta['importance_score']
            max_last_access_time = meta['last_access_time']
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the last access time and increments the access frequency for the accessed item. It also recalculates the usefulness score based on the new access frequency and recency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta['last_access_time'] = cache_snapshot.access_count
    meta['access_frequency'] += 1
    meta['usefulness_score'] = calculate_usefulness(meta['access_frequency'], meta['last_access_time'], cache_snapshot.access_count)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata with the current time as the last access time, sets the access frequency to one, assigns a data importance score, and calculates an initial usefulness score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'last_access_time': cache_snapshot.access_count,
        'access_frequency': 1,
        'importance_score': 1,  # Assuming a default importance score of 1 for simplicity
        'usefulness_score': calculate_usefulness(1, cache_snapshot.access_count, cache_snapshot.access_count)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy removes its metadata from the tracking system and recalculates the sequence of access times for the remaining items to ensure accurate tracking for future evictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata[evicted_obj.key]
    # No need to recalculate the sequence of access times as we are using the access_count directly