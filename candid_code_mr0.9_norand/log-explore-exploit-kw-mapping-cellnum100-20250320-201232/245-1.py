# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
COST_WEIGHT = 1
RECENCY_WEIGHT = 1
FREQUENCY_WEIGHT = 1

# Put the metadata specifically maintained by the policy below. The policy maintains a hierarchical structure of cached objects, access frequency, recency, and computational cost for each object. It also keeps a list of heuristics for voting on eviction candidates.
metadata = {
    'frequency': {},
    'recency': {},
    'computational_cost': {},
    'hierarchical_structure': [],
    'heuristics': []
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates multiple eviction candidates in parallel, considering access frequency, recency, and computational cost. It uses a hierarchical structure to prioritize lower levels for eviction and employs a consensus mechanism where multiple heuristics vote on the eviction victim.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_score = float('inf')
    
    for candidate_key in cache_snapshot.cache.keys():
        frequency_score = metadata['frequency'].get(candidate_key, 0)
        recency_score = cache_snapshot.access_count - metadata['recency'].get(candidate_key, 0)
        computational_cost_score = metadata['computational_cost'].get(candidate_key, 0)
        
        score = (FREQUENCY_WEIGHT * frequency_score +
                 RECENCY_WEIGHT * recency_score +
                 COST_WEIGHT * computational_cost_score)
        
        if score < lowest_score:
            lowest_score = score
            candid_obj_key = candidate_key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and recency of the accessed object. It also adjusts the object's position in the hierarchical structure based on the updated metadata.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['frequency'][key] = metadata['frequency'].get(key, 0) + 1
    metadata['recency'][key] = cache_snapshot.access_count
    
    # Adjust hierarchical structure position
    # Simply update recent access might be enough for our policy
    if key in metadata['hierarchical_structure']:
        metadata['hierarchical_structure'].remove(key)
    metadata['hierarchical_structure'].append(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency, and computational cost. It places the object in the appropriate level of the hierarchy and updates the list of heuristics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    
    metadata['frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['computational_cost'][key] = obj.size  # Here assuming size as the computational cost as an example
    
    # Insert into hierarchical structure
    metadata['hierarchical_structure'].append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata from the hierarchical structure and updates the list of heuristics to reflect the change. It also recalculates the computational cost distribution among the remaining objects.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in metadata['frequency']:
        del metadata['frequency'][key]
    if key in metadata['recency']:
        del metadata['recency'][key]
    if key in metadata['computational_cost']:
        del metadata['computational_cost'][key]
    if key in metadata['hierarchical_structure']:
        metadata['hierarchical_structure'].remove(key)
        
    # Recalculate computational cost distribution if needed
    # Here, assuming cost recalculation is simplified.