# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
EVICTION_CANDIDATE_COUNT = 3

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry, including access frequency, last access time, and a probabilistic eviction score. Additionally, it tracks global access patterns to dynamically adjust strategies.
global_metadata = {
    "total_access_frequency": 0,
    "access_frequencies": {},
    "last_access_times": {},
    "eviction_scores": {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy probabilistically selects multiple candidates for eviction based on their eviction scores. It then chooses the final victim by balancing recency and frequency, optimizing for current access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    import heapq

    candidates = heapq.nlargest(EVICTION_CANDIDATE_COUNT, cache_snapshot.cache.keys(), key=lambda k: global_metadata["eviction_scores"][k])
    best_victim = min(candidates, key=lambda k: (global_metadata["access_frequencies"][k], global_metadata["last_access_times"][k]))
    
    return best_victim

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and last access time for the accessed entry. It also adjusts the global access pattern metadata to reflect the recent hit.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    obj_key = obj.key
    global_metadata["access_frequencies"][obj_key] += 1
    global_metadata["last_access_times"][obj_key] = cache_snapshot.access_count
    global_metadata["total_access_frequency"] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata with default values for access frequency, last access time, and eviction score. It also updates the global access pattern metadata to account for the new entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    obj_key = obj.key
    global_metadata["access_frequencies"][obj_key] = 1
    global_metadata["last_access_times"][obj_key] = cache_snapshot.access_count
    global_metadata["eviction_scores"][obj_key] = 1 / obj.size  # Assign an initial eviction score based on size
    global_metadata["total_access_frequency"] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata of the evicted entry and recalculates the eviction scores for remaining entries. It also updates the global access pattern metadata to reflect the eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key

    # Remove metadata of the evicted entry
    global_metadata["total_access_frequency"] -= global_metadata["access_frequencies"].pop(evicted_key, 0)
    global_metadata["last_access_times"].pop(evicted_key, None)
    global_metadata["eviction_scores"].pop(evicted_key, None)

    # Recalculate eviction scores for remaining entries.
    for key in global_metadata["eviction_scores"]:
        access_frequency = global_metadata["access_frequencies"][key]
        last_access_time = global_metadata["last_access_times"][key]
        size = cache_snapshot.cache[key].size
        global_metadata["eviction_scores"][key] = access_frequency / size + 1 / (cache_snapshot.access_count - last_access_time + 1)