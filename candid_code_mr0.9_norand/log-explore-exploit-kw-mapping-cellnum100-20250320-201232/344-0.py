# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time
from collections import defaultdict, deque

# Put tunable constant parameters below
GLOBAL_ADJUSTMENT_FACTOR = 1.0
K_LRU_QUEUES = 5

# Put the metadata specifically maintained by the policy below. The policy maintains a priority score, access frequency, last access timestamp, global adjustment factor, k LRU queues, relationship strength score, ordered list of items, timestamps for recency tracking, a log of eviction reasons, and success scores for competing algorithms.

metadata = {
    'priority_score': defaultdict(float),
    'access_frequency': defaultdict(int),
    'last_access_timestamp': defaultdict(float),
    'global_adjustment_factor': GLOBAL_ADJUSTMENT_FACTOR,
    'lru_queues': [deque() for _ in range(K_LRU_QUEUES)],
    'relationship_strength': defaultdict(float),
    'ordered_list': [],
    'recency_timestamps': defaultdict(float),
    'eviction_log': [],
    'success_scores': defaultdict(lambda: defaultdict(float))
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by evaluating the lowest combined score of priority, relationship strength, access frequency, and recency. If there is a tie, it evaluates the success scores of competing algorithms and evicts the item with the lowest combined score. If still tied, it evicts the least recently used item from the non-empty LRU queue with the smallest subscript.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_combined_score = float('inf')

    for obj_key, cached_obj in cache_snapshot.cache.items():
        combined_score = (
            metadata['priority_score'][obj_key] +
            metadata['relationship_strength'][obj_key] +
            metadata['access_frequency'][obj_key] +
            (cache_snapshot.access_count - metadata['last_access_timestamp'][obj_key])
        )

        if combined_score < min_combined_score:
            min_combined_score = combined_score
            candid_obj_key = obj_key
        elif combined_score == min_combined_score:
            comp_alg_score = sum(metadata['success_scores'][alg][obj_key] for alg in metadata['success_scores'])
            curr_comp_alg_score = sum(metadata['success_scores'][alg][candid_obj_key] for alg in metadata['success_scores'])
            if comp_alg_score < curr_comp_alg_score:
                candid_obj_key = obj_key
            elif comp_alg_score == curr_comp_alg_score:
                for queue in metadata['lru_queues']:
                    if candid_obj_key in queue:
                        curr_lru_index = metadata['lru_queues'].index(queue)
                        break
                for queue in metadata['lru_queues']:
                    if obj_key in queue:
                        obj_lru_index = metadata['lru_queues'].index(queue)
                        break
                if obj_lru_index < curr_lru_index:
                    candid_obj_key = obj_key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    The policy increments the access frequency, updates the last access timestamp, recalculates the priority score using the global adjustment factor, adjusts the relationship strength scores, moves the item to the front of the ordered list, updates the success scores of the algorithms, and moves the item to the most-recently-used end of the appropriate LRU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['priority_score'][key] = (metadata['access_frequency'][key] * metadata['global_adjustment_factor'])

    if key in metadata['ordered_list']:
        metadata['ordered_list'].remove(key)
    metadata['ordered_list'].insert(0, key)

    for queue in metadata['lru_queues']:
        if key in queue:
            queue.remove(key)
            queue.append(key)
            break

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    The policy initializes the priority score, sets the relationship strength score, places the item at the front of the ordered list, sets the recency timestamp, initializes the access frequency, logs the insertion reason, updates the success scores of the algorithms, places the item at the most-recently-used end of L1, and recalculates the global adjustment factor if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['priority_score'][key] = 1.0
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    metadata['relationship_strength'][key] = 1.0
    metadata['ordered_list'].insert(0, key)
    metadata['recency_timestamps'][key] = cache_snapshot.access_count
    metadata['eviction_log'].append(f'Insertion: {key}')
    metadata['lru_queues'][0].append(key)
    if cache_snapshot.size + obj.size > cache_snapshot.capacity:
        metadata['global_adjustment_factor'] += 0.1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    The policy removes the item's metadata, adjusts the relationship strength scores of remaining items, updates the ordered list, removes the item from its LRU queue, logs the eviction reason, updates the success scores of the algorithms, adjusts the access frequency and recency of remaining items if necessary, and recalibrates the global adjustment factor if needed.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['priority_score']:
        del metadata['priority_score'][evicted_key]
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_timestamp']:
        del metadata['last_access_timestamp'][evicted_key]
    if evicted_key in metadata['relationship_strength']:
        del metadata['relationship_strength'][evicted_key]
    if evicted_key in metadata['recency_timestamps']:
        del metadata['recency_timestamps'][evicted_key]
        
    for queue in metadata['lru_queues']:
        if evicted_key in queue:
            queue.remove(evicted_key)
            break
    
    if evicted_key in metadata['ordered_list']:
        metadata['ordered_list'].remove(evicted_key)
        
    metadata['eviction_log'].append(f'Eviction: {evicted_key}')
    if cache_snapshot.size - evicted_obj.size < cache_snapshot.capacity:
        metadata['global_adjustment_factor'] -= 0.1