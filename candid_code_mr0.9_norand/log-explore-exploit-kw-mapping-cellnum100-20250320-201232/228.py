# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections
import time

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 1.0
WEIGHT_RECENCY = 1.0
WEIGHT_MEMORY_CONSUMPTION = 1.0
WEIGHT_CONNECTION_SCORE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access timestamp, memory consumption, dynamic priority score, connection score, and a graph with nodes representing cached items and edges representing access patterns.
metadata = {
    'access_frequency': collections.defaultdict(int),
    'last_access_timestamp': collections.defaultdict(int),
    'memory_consumption': collections.defaultdict(int),
    'dynamic_priority_score': collections.defaultdict(float),
    'connection_score': collections.defaultdict(float),
    'access_graph': collections.defaultdict(set)
}

def calculate_composite_score(key):
    return (WEIGHT_ACCESS_FREQUENCY * metadata['access_frequency'][key] +
            WEIGHT_RECENCY * (time.time() - metadata['last_access_timestamp'][key]) +
            WEIGHT_MEMORY_CONSUMPTION * metadata['memory_consumption'][key] +
            WEIGHT_CONNECTION_SCORE * metadata['connection_score'][key])

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates a composite score for each item using a weighted sum of access frequency, recency, memory consumption, and connection score. Items with the lowest scores are prioritized for eviction, with weights dynamically adjusted based on current system load. If further eviction is needed, it evicts from the least-recently-used end of the appropriate queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key in cache_snapshot.cache:
        score = calculate_composite_score(key)
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the last access timestamp, recalculates the dynamic priority score, and updates the connection score based on recent access patterns. The item is moved to the most-recently-used end of the appropriate queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['last_access_timestamp'][key] = time.time()
    metadata['dynamic_priority_score'][key] = calculate_composite_score(key)
    # Update connection score based on recent access patterns
    for other_key in cache_snapshot.cache:
        if other_key != key:
            metadata['access_graph'][key].add(other_key)
            metadata['connection_score'][key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, sets the current timestamp as the last access time, records its memory consumption, calculates its initial dynamic priority score based on the current system load, and sets its connection score. The object is placed in the appropriate queue and graph node is created.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_timestamp'][key] = time.time()
    metadata['memory_consumption'][key] = obj.size
    metadata['dynamic_priority_score'][key] = calculate_composite_score(key)
    metadata['connection_score'][key] = 0
    metadata['access_graph'][key] = set()

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy removes its metadata, adjusts the weights used in the composite score calculation based on current workload and system load, and recalculates connection scores if necessary. The evicted item is moved to the appropriate ghost queue if applicable.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['last_access_timestamp'][evicted_key]
    del metadata['memory_consumption'][evicted_key]
    del metadata['dynamic_priority_score'][evicted_key]
    del metadata['connection_score'][evicted_key]
    del metadata['access_graph'][evicted_key]
    # Adjust weights based on current workload and system load if necessary
    # Recalculate connection scores if necessary