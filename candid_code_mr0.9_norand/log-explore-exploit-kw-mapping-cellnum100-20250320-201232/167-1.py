# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

import time

# Put tunable constant parameters below
LRU_WEIGHT = 0.4
LFU_WEIGHT = 0.4
MRU_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains a hierarchical structure of metadata, including access frequency counters, timestamps of last access, MRU flags, estimated future access patterns, and dynamic weight vectors for LRU, LFU, and MRU strategies. It also keeps a list of potential eviction candidates and a feedback mechanism to track hit and miss rates.

metadata_cache = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy traverses the cache hierarchy starting from the lowest level, using a weighted combination of LRU, LFU, and MRU scores to identify potential eviction candidates.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        metadata = metadata_cache[key]
        time_diff = cache_snapshot.access_count - metadata['last_access_time']
        
        # LRU weight and score
        score_lru = time_diff * LRU_WEIGHT
        # LFU weight and score
        score_lfu = metadata['access_count'] * LFU_WEIGHT
        # MRU weight and score
        score_mru = metadata['mru_flag'] * MRU_WEIGHT
        
        total_score = score_lru + score_lfu - score_mru
        
        if total_score < min_score:
            min_score = total_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency counter, the timestamp of last access, and sets the MRU flag for the corresponding cache line. It refines the estimated future access pattern and adjusts the weights of the strategies based on the hit rate feedback mechanism.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    if obj.key in metadata_cache:
        metadata = metadata_cache[obj.key]
        metadata['access_count'] += 1
        metadata['last_access_time'] = cache_snapshot.access_count
        metadata['mru_flag'] = True

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency counter, the timestamp of last access, and the MRU flag for the new cache line. It sets an initial estimated future access pattern based on historical data, updates the list of potential eviction candidates, and adjusts the strategy weights based on the current system state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata_cache[obj.key] = {
        'access_count': 1,
        'last_access_time': cache_snapshot.access_count,
        'mru_flag': False,
        'future_access_pattern': 0  # Example placeholder, needs historical data
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy resets the metadata for the evicted cache line, including clearing the access frequency counter, timestamp of last access, MRU flag, and estimated future access pattern. It updates the list of potential eviction candidates and adjusts the strategy weights based on the miss rate feedback mechanism.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in metadata_cache:
        del metadata_cache[evicted_obj.key]