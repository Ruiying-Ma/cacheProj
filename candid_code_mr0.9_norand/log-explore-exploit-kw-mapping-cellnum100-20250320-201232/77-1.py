# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import heapq
import collections
import time

# Put tunable constant parameters below
LRU_WEIGHT = 0.5
LFU_WEIGHT = 0.5
EVICT_THRESHOLD = 0.8  # Threshold to switch purely based on predicted access score

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache item, including access frequency, last access time, and a predicted access score generated by a machine learning model. Additionally, it tracks overall cache usage and dynamically adjusts eviction thresholds.
metadata = {
    # obj_key: (access_frequency, last_access_time, predicted_access_score)
    # Note: predicted_access_score is obtained from a machine learning model
    'access_frequency': collections.defaultdict(int),
    'last_access_time': collections.defaultdict(int),
    'predicted_access_score': collections.defaultdict(float)
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first checking if the cache is nearing its capacity. If so, it prioritizes evicting items with the lowest predicted access score. If the cache is not near capacity, it uses a weighted combination of LRU and LFU, dynamically adjusting the weights based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    if cache_snapshot.size + obj.size > cache_snapshot.capacity * EVICT_THRESHOLD:
        # Prioritizes evicting items with the lowest predicted access score
        candidate_items = [(metadata['predicted_access_score'][k], k) for k in cache_snapshot.cache]
        heapq.heapify(candidate_items)
    else:
        # Uses a weighted combination of LRU and LFU
        candidate_items = []
        for k in cache_snapshot.cache:
            score = (LRU_WEIGHT * (cache_snapshot.access_count - metadata['last_access_time'][k]) +
                     LFU_WEIGHT * metadata['access_frequency'][k])
            candidate_items.append((score, k))
        heapq.heapify(candidate_items)
        
    # Extract the item with the lowest score
    candid_obj_key = heapq.heappop(candidate_items)[1]

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and last access time of the item. It also recalculates the predicted access score using the machine learning model, considering the latest access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata['access_frequency'][obj.key] += 1
    metadata['last_access_time'][obj.key] = cache_snapshot.access_count
    metadata['predicted_access_score'][obj.key] = get_predicted_access_score(obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and last access time. It also generates an initial predicted access score using the machine learning model and adjusts the overall cache usage metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata['access_frequency'][obj.key] = 1
    metadata['last_access_time'][obj.key] = cache_snapshot.access_count
    metadata['predicted_access_score'][obj.key] = get_initial_predicted_access_score(obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy updates the overall cache usage metrics and may adjust the eviction threshold based on the current cache usage. It also recalibrates the weights for LRU and LFU strategies based on recent eviction patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Update overall cache usage metrics
    metadata['access_frequency'].pop(evicted_obj.key, None)
    metadata['last_access_time'].pop(evicted_obj.key, None)
    metadata['predicted_access_score'].pop(evicted_obj.key, None)
    
    # Adjust eviction threshold based on current cache usage
    current_usage_ratio = cache_snapshot.size / cache_snapshot.capacity
    global EVICT_THRESHOLD
    EVICT_THRESHOLD = min(max(0.5, current_usage_ratio), 0.95)
    
    # Recalibrate the weights for LRU and LFU based on recent patterns
    global LRU_WEIGHT, LFU_WEIGHT
    LRU_WEIGHT = 1 - EVICT_THRESHOLD
    LFU_WEIGHT = EVICT_THRESHOLD

def get_predicted_access_score(obj):
    # Dummy implementation for generating predicted access score
    return 0.0

def get_initial_predicted_access_score(obj):
    # Dummy implementation for generating initial predicted access score
    return 0.0