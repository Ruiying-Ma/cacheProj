# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for recency in priority score
BETA = 0.5   # Weight for frequency in priority score

# Put the metadata specifically maintained by the policy below. The policy maintains a priority score for each cached object, calculated based on access frequency and recency. It also keeps track of the last access time and access count for each object.
metadata = {
    'access_count': {},  # Dictionary to store access count for each object
    'last_access_time': {},  # Dictionary to store last access time for each object
    'priority_score': {}  # Dictionary to store priority score for each object
}

def calculate_priority_score(key, current_time):
    '''
    Calculate the priority score for a given object key.
    - Args:
        - `key`: The key of the object.
        - `current_time`: The current time (cache_snapshot.access_count).
    - Return:
        - `priority_score`: The calculated priority score.
    '''
    recency = current_time - metadata['last_access_time'][key]
    frequency = metadata['access_count'][key]
    priority_score = ALPHA * recency + BETA * frequency
    return priority_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    When eviction is necessary, the policy considers multiple candidates and uses a majority vote from different heuristics (least recently used, least frequently used, and random) to choose the eviction victim. The object with the lowest combined priority score is evicted first.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_priority_score = float('inf')
    
    for key in cache_snapshot.cache:
        priority_score = calculate_priority_score(key, cache_snapshot.access_count)
        if priority_score < lowest_priority_score:
            lowest_priority_score = priority_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access count and last access time of the object are updated. The priority score is recalculated based on the new access frequency and recency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_count'][key] += 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['priority_score'][key] = calculate_priority_score(key, cache_snapshot.access_count)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its access count is initialized, and the last access time is set to the current time. The priority score is calculated based on these initial values.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_count'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['priority_score'][key] = calculate_priority_score(key, cache_snapshot.access_count)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the metadata for the evicted object is removed from the cache. The priority scores of remaining objects are recalculated if necessary to maintain accurate eviction decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_count']:
        del metadata['access_count'][evicted_key]
        del metadata['last_access_time'][evicted_key]
        del metadata['priority_score'][evicted_key]
    
    # Recalculate priority scores for remaining objects if necessary
    for key in cache_snapshot.cache:
        metadata['priority_score'][key] = calculate_priority_score(key, cache_snapshot.access_count)