# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_FEEDBACK_SCORE = 0
INITIAL_PRIORITY_SCORE = 0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry, including access timestamps, feedback scores, priority scores from competing algorithms, task priorities, partition-specific access patterns, inter-cache communication data, access frequency/load distribution metrics, and a shared information table for collaborative caches.
metadata = {
    "timestamps": {},
    "feedback_scores": {},
    "priority_scores": {},
    "task_priorities": {},
    "access_patterns": {},
    "inter_cache_comm": {},
    "access_frequencies": {},
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates multiple eviction candidates in parallel, considering their recency of access, feedback scores, priority scores, task completion status, task priority, partition-specific access patterns, and least frequently accessed items. It selects the candidate with the lowest combined score for eviction, ensuring balanced load distribution across cache nodes.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        combined_score = (
            metadata["feedback_scores"].get(key, 0) +
            metadata["priority_scores"].get(key, 0) +
            metadata["access_frequencies"].get(key, 0) +
            cache_snapshot.access_count - metadata["timestamps"].get(key, 0)
        )
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key
            
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access timestamp, increments the feedback score, adjusts the priority score of the predicting algorithm, updates the access frequency and load distribution metrics for the relevant partition and task, and updates the inter-cache communication data to reflect the current state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata["timestamps"][key] = cache_snapshot.access_count
    metadata["feedback_scores"][key] = metadata["feedback_scores"].get(key, 0) + 1
    metadata["priority_scores"][key] = metadata["priority_scores"].get(key, 0) + 1
    metadata["access_frequencies"][key] = metadata["access_frequencies"].get(key, 0) + 1
    # Update additional necessary metadata fields here if needed

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata with the current timestamp, a neutral feedback score, priority scores based on initial predictions, updates the task allocation metadata to reflect the new task's priority and completion status, updates the partition-specific access patterns, adjusts the load distribution metrics, and updates the shared information table with the new entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata["timestamps"][key] = cache_snapshot.access_count
    metadata["feedback_scores"][key] = INITIAL_FEEDBACK_SCORE
    metadata["priority_scores"][key] = INITIAL_PRIORITY_SCORE
    metadata["access_frequencies"][key] = 1
    # Initialize additional necessary metadata fields here if needed

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy adjusts the feedback score of the evicted entry based on subsequent hit/miss rate, adjusts the priority score of the predicting algorithm, updates the task allocation metadata to reflect the removal of the task's data, updates the partition-specific access patterns, inter-cache communication data, load distribution metrics, and the shared information table to reflect the eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    del metadata["timestamps"][key]
    del metadata["feedback_scores"][key]
    del metadata["priority_scores"][key]
    del metadata["access_frequencies"][key]
    # Remove additional necessary metadata fields here if needed