# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict
import time

# Put tunable constant parameters below

# Put the metadata specifically maintained by the policy below. The policy maintains a dependency graph, an importance score for each object, a usage frequency counter, and a timestamp for each cache entry.
dependency_graph = defaultdict(set)  # key -> set of dependent keys
importance_scores = defaultdict(int)  # key -> importance score
usage_frequency = defaultdict(int)  # key -> usage frequency
timestamps = defaultdict(int)  # key -> timestamp

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first identifying objects with the least number of dependencies, then among those, selecting the one with the lowest importance score. If there is a tie, the object with the lowest usage frequency and oldest timestamp is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_dependencies = float('inf')
    min_importance = float('inf')
    min_usage = float('inf')
    oldest_timestamp = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        dependencies = len(dependency_graph[key])
        importance = importance_scores[key]
        usage = usage_frequency[key]
        timestamp = timestamps[key]

        if (dependencies < min_dependencies or
            (dependencies == min_dependencies and importance < min_importance) or
            (dependencies == min_dependencies and importance == min_importance and usage < min_usage) or
            (dependencies == min_dependencies and importance == min_importance and usage == min_usage and timestamp < oldest_timestamp)):
            min_dependencies = dependencies
            min_importance = importance
            min_usage = usage
            oldest_timestamp = timestamp
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the usage frequency counter, updates the timestamp to the current time, and adjusts the importance score based on the object's current context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    usage_frequency[obj.key] += 1
    timestamps[obj.key] = cache_snapshot.access_count
    # Adjust importance score based on the object's current context
    # This is a placeholder for the actual logic to adjust the importance score
    importance_scores[obj.key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its dependency count, sets its importance score, usage frequency counter, and timestamp. It also updates the dependency graph to reflect the new relationships.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    dependency_graph[obj.key] = set()  # Initialize with no dependencies
    importance_scores[obj.key] = 1  # Initial importance score
    usage_frequency[obj.key] = 1  # Initial usage frequency
    timestamps[obj.key] = cache_snapshot.access_count  # Set timestamp to current time

    # Update dependency graph to reflect new relationships
    # This is a placeholder for the actual logic to update the dependency graph
    for key in cache_snapshot.cache:
        if key != obj.key:
            dependency_graph[key].add(obj.key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes it from the dependency graph, adjusts the dependency counts of related objects, and recalculates the importance scores if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    del dependency_graph[evicted_obj.key]
    del importance_scores[evicted_obj.key]
    del usage_frequency[evicted_obj.key]
    del timestamps[evicted_obj.key]

    for key in dependency_graph:
        if evicted_obj.key in dependency_graph[key]:
            dependency_graph[key].remove(evicted_obj.key)
            # Recalculate importance scores if necessary
            # This is a placeholder for the actual logic to recalculate importance scores
            importance_scores[key] -= 1