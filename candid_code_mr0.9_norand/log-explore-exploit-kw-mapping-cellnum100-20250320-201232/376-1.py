# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below
EVP_LRU_WEIGHT = 1
EVP_LFU_WEIGHT = 1
EVP_RANDOM_WEIGHT = 1  # This is a placeholder; actual "random" will be an arbitrary order but deterministic


# Put the metadata specifically maintained by the policy below. The policy maintains a frequency counter, a recency timestamp, and a consensus score for each cache item. The frequency counter tracks how often an item is accessed, the recency timestamp records the last access time, and the consensus score aggregates votes from multiple eviction algorithms.
frequency_counter = defaultdict(int)
recency_timestamp = defaultdict(int)
consensus_score = defaultdict(int)


def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by having multiple algorithms (e.g., LRU, LFU, and Random) vote on which item to evict. The item with the highest consensus score (most votes) is selected for eviction, ensuring a balanced decision.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    candidate_scores = defaultdict(int)
    
    for key in cache_snapshot.cache.keys():
        # LRU based voting
        candidate_scores[key] += EVP_LRU_WEIGHT * (cache_snapshot.access_count - recency_timestamp[key])
        
        # LFU based voting
        candidate_scores[key] += EVP_LFU_WEIGHT * frequency_counter[key]
        
        # (Deterministic) Random
        candidate_scores[key] += EVP_RANDOM_WEIGHT * hash(key)
    
    # Choose the candidate with the highest consensus score
    candid_obj_key = max(candidate_scores, key=candidate_scores.get)
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the frequency counter for the accessed item is incremented, the recency timestamp is updated to the current time, and the consensus score is recalculated based on the updated metadata.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    frequency_counter[obj.key] += 1
    recency_timestamp[obj.key] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the frequency counter to 1, sets the recency timestamp to the current time, and calculates the initial consensus score based on the metadata of the new item.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    frequency_counter[obj.key] = 1
    recency_timestamp[obj.key] = cache_snapshot.access_count
    consensus_score[obj.key] = 0  # Assuming consensus score is recalculated dynamically

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata of the evicted item and recalculates the consensus scores for the remaining items to ensure the eviction decision remains balanced.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    del frequency_counter[evicted_obj.key]
    del recency_timestamp[evicted_obj.key]
    del consensus_score[evicted_obj.key]
    
    # Recalculate consensus scores for consistency
    for key in cache_snapshot.cache.keys():
        consensus_score[key] = 0
        consensus_score[key] += EVP_LRU_WEIGHT * (cache_snapshot.access_count - recency_timestamp[key])
        consensus_score[key] += EVP_LFU_WEIGHT * frequency_counter[key]
        consensus_score[key] += EVP_RANDOM_WEIGHT * hash(key)