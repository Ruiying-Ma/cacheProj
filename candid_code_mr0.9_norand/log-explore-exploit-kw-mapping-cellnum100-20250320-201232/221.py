# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
PRIORITY_WEIGHT = 0.7
CONNECTIVITY_WEIGHT = 0.3

# Put the metadata specifically maintained by the policy below. The policy maintains a relationship graph where nodes represent cached items and edges represent access correlations between items. Each node has a priority score based on access frequency and recency, and a connectivity score based on the number of edges and their weights.
cache_metadata = {
    'priority_scores': {},  # {obj.key: priority_score}
    'connectivity_scores': {},  # {obj.key: connectivity_score}
    'access_frequency': {},  # {obj.key: access_count}
    'recency': {},  # {obj.key: last_access_time}
    'edges': {},  # {obj.key: {connected_obj.key: weight}}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by identifying the item with the lowest combined score of priority and connectivity. Items with weaker connections and lower access frequency/recency are prioritized for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_combined_score = float('inf')
    
    for key in cache_snapshot.cache:
        priority_score = cache_metadata['priority_scores'].get(key, 0)
        connectivity_score = cache_metadata['connectivity_scores'].get(key, 0)
        combined_score = PRIORITY_WEIGHT * priority_score + CONNECTIVITY_WEIGHT * connectivity_score
        
        if combined_score < min_combined_score:
            min_combined_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and recency of the item, adjusts its priority score, and strengthens the edges between this item and other recently accessed items.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    # Update access frequency and recency
    cache_metadata['access_frequency'][key] = cache_metadata['access_frequency'].get(key, 0) + 1
    cache_metadata['recency'][key] = current_time
    
    # Update priority score
    access_frequency = cache_metadata['access_frequency'][key]
    recency = cache_metadata['recency'][key]
    cache_metadata['priority_scores'][key] = access_frequency / (current_time - recency + 1)
    
    # Strengthen edges
    if key not in cache_metadata['edges']:
        cache_metadata['edges'][key] = {}
    
    for other_key in cache_snapshot.cache:
        if other_key != key:
            if other_key not in cache_metadata['edges'][key]:
                cache_metadata['edges'][key][other_key] = 0
            cache_metadata['edges'][key][other_key] += 1
            if key not in cache_metadata['edges'][other_key]:
                cache_metadata['edges'][other_key][key] = 0
            cache_metadata['edges'][other_key][key] += 1
    
    # Update connectivity score
    cache_metadata['connectivity_scores'][key] = sum(cache_metadata['edges'][key].values())

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its priority and connectivity scores, and creates edges to other recently accessed items, adjusting their weights based on access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    # Initialize access frequency and recency
    cache_metadata['access_frequency'][key] = 1
    cache_metadata['recency'][key] = current_time
    
    # Initialize priority score
    cache_metadata['priority_scores'][key] = 1 / (current_time + 1)
    
    # Initialize edges
    cache_metadata['edges'][key] = {}
    for other_key in cache_snapshot.cache:
        if other_key != key:
            cache_metadata['edges'][key][other_key] = 1
            if key not in cache_metadata['edges'][other_key]:
                cache_metadata['edges'][other_key][key] = 1
    
    # Initialize connectivity score
    cache_metadata['connectivity_scores'][key] = sum(cache_metadata['edges'][key].values())

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy removes the node and its edges from the relationship graph, and recalculates the connectivity scores of the remaining connected items.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    # Remove the evicted node and its edges
    if evicted_key in cache_metadata['edges']:
        for connected_key in cache_metadata['edges'][evicted_key]:
            if evicted_key in cache_metadata['edges'][connected_key]:
                del cache_metadata['edges'][connected_key][evicted_key]
        del cache_metadata['edges'][evicted_key]
    
    # Remove metadata of the evicted object
    if evicted_key in cache_metadata['priority_scores']:
        del cache_metadata['priority_scores'][evicted_key]
    if evicted_key in cache_metadata['connectivity_scores']:
        del cache_metadata['connectivity_scores'][evicted_key]
    if evicted_key in cache_metadata['access_frequency']:
        del cache_metadata['access_frequency'][evicted_key]
    if evicted_key in cache_metadata['recency']:
        del cache_metadata['recency'][evicted_key]
    
    # Recalculate connectivity scores of remaining connected items
    for key in cache_metadata['edges']:
        cache_metadata['connectivity_scores'][key] = sum(cache_metadata['edges'][key].values())