# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

from collections import defaultdict

# Put tunable constant parameters below
CANDIDATE_SET_SIZE = 5  # Size of random subset of cache entries to consider for eviction

# Put the metadata specifically maintained by the policy below. The policy maintains a fitness score, cost score, access frequency, recency of access, trend factor, combined access frequency for groups, dynamic threshold, and performance metrics of eviction strategies.
metadata = {
    'access_frequency': defaultdict(int),  # Store access frequencies of objects
    'recency_of_access': defaultdict(int),  # Store the last access time of objects
    'fitness_score': defaultdict(float),  # Store fitness scores of objects
    'cost_score': defaultdict(float),  # Store cost scores of objects
    'trend_factor': defaultdict(float),  # Store trend factors of objects
    'combined_access_frequency': defaultdict(int),  # Store combined access frequencies for groups
    'dynamic_threshold': 0.5,  # Dynamic threshold for eviction strategy decisions
    'eviction_metrics': {'success': 0, 'failure': 0}  # Performance metrics of eviction strategies
}

def calculate_scores(obj_key):
    access_frequency = metadata['access_frequency'][obj_key]
    recency_of_access = metadata['recency_of_access'][obj_key]
    fitness_score = metadata['fitness_score'][obj_key]
    cost_score = metadata['cost_score'][obj_key]
    combined_score = fitness_score + cost_score  # Simplified combined score
    return combined_score, access_frequency

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects a random subset of cache entries and evaluates their fitness and cost scores. It considers both scores and the combined access frequency of groups. The entry with the lowest combined score from the group with the lowest combined access frequency is evicted. If scores are similar, the dynamic threshold and best-performing eviction strategy are used.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_combined_score = float('inf')
    group_frequency = float('inf')

    for key in list(cache_snapshot.cache.keys())[:CANDIDATE_SET_SIZE]:
        combined_score, freq = calculate_scores(key)
        if freq < group_frequency or (freq == group_frequency and combined_score < min_combined_score):
            group_frequency = freq
            min_combined_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, recency of access, fitness score, cost score, and trend factor of the hit entry. It also updates the combined access frequency for the group and adjusts the dynamic threshold based on new access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency_of_access'][key] = cache_snapshot.access_count
    metadata['fitness_score'][key] = metadata['access_frequency'][key] / (metadata['recency_of_access'][key] + 1)
    metadata['cost_score'][key] = obj.size
    metadata['trend_factor'][key] = (metadata['trend_factor'][key] * 0.9) + 1
    group_key = obj.size
    metadata['combined_access_frequency'][group_key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its fitness score, cost score, access frequency, recency of access, and trend factor. It updates the combined access frequency for the group and recalibrates the dynamic threshold to reflect the new state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency_of_access'][key] = cache_snapshot.access_count
    metadata['fitness_score'][key] = 1.0 / (metadata['recency_of_access'][key] + 1)
    metadata['cost_score'][key] = obj.size
    metadata['trend_factor'][key] = 1.0
    group_key = obj.size
    metadata['combined_access_frequency'][group_key] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the evicted entry's metadata, recalculates the combined access frequency for the group, and adjusts the fitness scores of remaining entries if necessary. It updates the performance metrics of the eviction strategy used and recalibrates the dynamic threshold.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evict_key = evicted_obj.key
    if evict_key in metadata['access_frequency']:
        del metadata['access_frequency'][evict_key]
        del metadata['recency_of_access'][evict_key]
        del metadata['fitness_score'][evict_key]
        del metadata['cost_score'][evict_key]
        del metadata['trend_factor'][evict_key]
    
    group_key = evicted_obj.size
    if group_key in metadata['combined_access_frequency']:
        metadata['combined_access_frequency'][group_key] -= 1
        if metadata['combined_access_frequency'][group_key] < 0:
            metadata['combined_access_frequency'][group_key] = 0

    if metadata['combined_access_frequency'][group_key] == 0:
        metadata['eviction_metrics']['success'] += 1
        if metadata['eviction_metrics']['failure'] > 0:
            metadata['dynamic_threshold'] -= 0.1
    else:
        metadata['eviction_metrics']['failure'] += 1
        metadata['dynamic_threshold'] += 0.1

    # Ensure dynamic threshold remains within sensible boundaries
    metadata['dynamic_threshold'] = min(max(metadata['dynamic_threshold'], 0.0), 1.0)