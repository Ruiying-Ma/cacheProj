# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
FREQUENCY_WEIGHT = 0.4
RECENCY_WEIGHT = 0.4
SIZE_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached object, including access frequency, recency (timestamp of last access), size, and a dynamic priority score calculated from these metrics.
metadata = {}

def calculate_priority(frequency, recency, size, current_time):
    """Calculates the priority score based on the provided weights."""
    return (FREQUENCY_WEIGHT * frequency) + (RECENCY_WEIGHT * (current_time - recency)) + (SIZE_WEIGHT * size)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates a weighted score for each cached object based on access frequency, recency, and size. The object with the lowest score is chosen as the eviction victim.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_priority = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        priority = calculate_priority(meta['frequency'], meta['recency'], cached_obj.size, cache_snapshot.access_count)

        if priority < min_priority:
            min_priority = priority
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency is incremented, the recency timestamp is updated to the current time, and the priority score is recalculated based on the updated metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    if obj.key in metadata:
        meta = metadata[obj.key]
        meta['frequency'] += 1
        meta['recency'] = cache_snapshot.access_count
        meta['priority'] = calculate_priority(meta['frequency'], meta['recency'], obj.size, cache_snapshot.access_count)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency to 1, sets the recency timestamp to the current time, and calculates the initial priority score based on its size and the initial metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'frequency': 1,
        'recency': cache_snapshot.access_count,
        'priority': calculate_priority(1, cache_snapshot.access_count, obj.size, cache_snapshot.access_count)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy recalculates the priority scores of the remaining objects to ensure they reflect the current state of the cache, adjusting for any changes in access patterns or external factors.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in metadata:
        del metadata[evicted_obj.key]

    for key, meta in metadata.items():
        cached_obj = cache_snapshot.cache[key]
        meta['priority'] = calculate_priority(meta['frequency'], meta['recency'], cached_obj.size, cache_snapshot.access_count)