# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import deque, defaultdict

# Put tunable constant parameters below
SQ_CAPACITY = 10
MQ_CAPACITY = 20
GQ_CAPACITY = 30
OVERFLOW_CAPACITY = 40

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, priority level, synchronization status, relationship strength score, an ordered list of items, and a multi-level structure for cache organization. It also includes a LFU queue, FIFO queues (SQ, MQ, GQ), and an overflow area for recently evicted items.
class CacheMetadata:
    def __init__(self):
        self.access_frequency = defaultdict(int)
        self.recency = {}
        self.priority_level = {}
        self.synchronization_status = {}
        self.relationship_strength_score = {}
        self.ordered_list = deque()
        self.lfu_queue = deque()
        self.sq = deque()
        self.mq = deque()
        self.gq = deque()
        self.overflow_area = deque()

cache_metadata = CacheMetadata()

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first checks if SQ exceeds its capacity and moves objects to MQ. If MQ is full, it cyclically reduces frequencies in MQ until an object with zero frequency is found and evicts it. If SQ is not full, it evicts the least-frequently-used and least-recently-used object from the LFU queue. It also considers the lowest priority level, access frequency, recency, and relationship strength score. Evicted items are moved to the overflow area and GQ.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    if len(cache_metadata.sq) > SQ_CAPACITY:
        while len(cache_metadata.sq) > SQ_CAPACITY:
            moved_obj = cache_metadata.sq.popleft()
            cache_metadata.mq.append(moved_obj)
            if len(cache_metadata.mq) > MQ_CAPACITY:
                while cache_metadata.access_frequency[cache_metadata.mq[0]] > 0:
                    cache_metadata.access_frequency[cache_metadata.mq[0]] -= 1
                    cache_metadata.mq.rotate(-1)
                candid_obj_key = cache_metadata.mq.popleft()
                break
    if candid_obj_key is None:
        if len(cache_metadata.sq) < SQ_CAPACITY:
            candid_obj_key = cache_metadata.lfu_queue.popleft()
        else:
            candid_obj_key = cache_metadata.sq.popleft()
    cache_metadata.gq.append(candid_obj_key)
    cache_metadata.overflow_area.append(candid_obj_key)
    if len(cache_metadata.gq) > GQ_CAPACITY:
        cache_metadata.gq.popleft()
    if len(cache_metadata.overflow_area) > OVERFLOW_CAPACITY:
        cache_metadata.overflow_area.popleft()
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increases the access frequency by 1, updates the recency to the current timestamp, recalculates the priority level, updates the synchronization status, adjusts the relationship strength scores, and moves the item to the front of the ordered list. If the item's frequency is less than 3, it is increased by 1. The item's position in the LFU queue is adjusted if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    cache_metadata.access_frequency[obj.key] += 1
    cache_metadata.recency[obj.key] = cache_snapshot.access_count
    cache_metadata.priority_level[obj.key] = calculate_priority(obj)
    cache_metadata.synchronization_status[obj.key] = True
    cache_metadata.relationship_strength_score[obj.key] = calculate_relationship_strength(obj)
    cache_metadata.ordered_list.remove(obj.key)
    cache_metadata.ordered_list.appendleft(obj.key)
    if cache_metadata.access_frequency[obj.key] < 3:
        cache_metadata.access_frequency[obj.key] += 1
    adjust_lfu_queue(obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy sets its frequency to 1, recency to the current timestamp, calculates the priority level, sets the synchronization status, initializes the relationship strength score, places it at the front of the ordered list, and inserts it into the appropriate level based on its initial priority score. If the object was in GQ, it is placed at the rear of MQ and removed from GQ. Otherwise, it is placed at the rear of SQ and in the appropriate place in the LFU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    cache_metadata.access_frequency[obj.key] = 1
    cache_metadata.recency[obj.key] = cache_snapshot.access_count
    cache_metadata.priority_level[obj.key] = calculate_priority(obj)
    cache_metadata.synchronization_status[obj.key] = True
    cache_metadata.relationship_strength_score[obj.key] = calculate_relationship_strength(obj)
    cache_metadata.ordered_list.appendleft(obj.key)
    if obj.key in cache_metadata.gq:
        cache_metadata.gq.remove(obj.key)
        cache_metadata.mq.append(obj.key)
    else:
        cache_metadata.sq.append(obj.key)
    cache_metadata.lfu_queue.append(obj.key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy moves its metadata to the overflow area and GQ, adjusts the relationship strength scores of remaining items, updates the ordered list to remove the evicted item, and ensures the overflow area and GQ do not exceed their predefined sizes by evicting the oldest items if necessary. The evicted object is removed from the LFU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    cache_metadata.gq.append(evicted_obj.key)
    cache_metadata.overflow_area.append(evicted_obj.key)
    if len(cache_metadata.gq) > GQ_CAPACITY:
        cache_metadata.gq.popleft()
    if len(cache_metadata.overflow_area) > OVERFLOW_CAPACITY:
        cache_metadata.overflow_area.popleft()
    cache_metadata.ordered_list.remove(evicted_obj.key)
    cache_metadata.lfu_queue.remove(evicted_obj.key)
    adjust_relationship_strength_scores()

def calculate_priority(obj):
    # Placeholder function to calculate priority level
    return 1

def calculate_relationship_strength(obj):
    # Placeholder function to calculate relationship strength score
    return 1

def adjust_lfu_queue(obj):
    # Placeholder function to adjust the LFU queue
    pass

def adjust_relationship_strength_scores():
    # Placeholder function to adjust relationship strength scores
    pass