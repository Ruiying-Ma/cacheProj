from collections import defaultdict

# Put tunable constant parameters below
PREDICTION_THRESHOLD = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains task allocation, partition isolation, coordination, load balancing, access frequency, recency, machine learning prediction scores, and a log of eviction reasons.
access_freq = defaultdict(int)
recency = defaultdict(int)
prediction_scores = defaultdict(float)
eviction_log = []

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates multiple eviction candidates using task completion status, task priority, partition-specific access patterns, access frequency, recency, and prediction scores. It selects the least likely to be accessed item and logs the reason for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = access_freq[key] - recency[key] + prediction_scores[key]
        if score < min_score:
            min_score = score
            candid_obj_key = key

    eviction_log.append(f"Evicting object with key {candid_obj_key} due to low score {min_score}")
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    The policy updates access frequency, recency, load distribution metrics, and prediction model based on the new access pattern. It also updates task allocation metadata, partition-specific access patterns, and inter-cache communication data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    access_freq[obj.key] += 1
    recency[obj.key] = cache_snapshot.access_count
    prediction_scores[obj.key] = update_prediction_model(obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    The policy initializes access frequency and recency, updates the prediction model, and adjusts task allocation metadata, partition-specific access patterns, and load distribution metrics to reflect the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    access_freq[obj.key] = 1
    recency[obj.key] = cache_snapshot.access_count
    prediction_scores[obj.key] = initialize_prediction_score(obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    The policy logs the reason for eviction, updates the prediction model, and adjusts access frequency, recency, task allocation metadata, partition-specific access patterns, inter-cache communication data, and load distribution metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    eviction_log.append(f"Evicted object with key {evicted_obj.key} to make room for object with key {obj.key}")
    del access_freq[evicted_obj.key]
    del recency[evicted_obj.key]
    del prediction_scores[evicted_obj.key]

def update_prediction_model(obj):
    # Placeholder for an actual machine learning model update, using a dummy value here
    return 1.0 if access_freq[obj.key] > PREDICTION_THRESHOLD else 0.0

def initialize_prediction_score(obj):
    # Placeholder for an actual machine learning initialization, using a dummy value here
    return 0.5