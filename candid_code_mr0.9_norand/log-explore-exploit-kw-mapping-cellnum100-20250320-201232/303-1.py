# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
FREQUENCY_WEIGHT = 0.4
RECENCY_WEIGHT = 0.4
PREDICTED_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency (timestamp of last access), and a predicted future access score for each cache entry. It also keeps a list of eviction candidates evaluated in parallel.
cache_metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects eviction candidates by evaluating multiple entries simultaneously, considering access frequency, recency, and predicted future access. The entry with the lowest combined score is chosen for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, value in cache_snapshot.cache.items():
        metadata = cache_metadata[key]
        combined_score = (FREQUENCY_WEIGHT * metadata['frequency'] + 
                          RECENCY_WEIGHT * (cache_snapshot.access_count - metadata['recency']) +
                          PREDICTED_WEIGHT * metadata['predicted'])
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency is incremented, the recency timestamp is updated to the current time, and the predicted future access score is recalculated based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    metadata = cache_metadata[obj.key]
    metadata['frequency'] += 1
    metadata['recency'] = cache_snapshot.access_count
    metadata['predicted'] = predict_future_access(cache_snapshot, obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency to 1, sets the recency timestamp to the current time, and calculates an initial predicted future access score based on similar objects' patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    cache_metadata[obj.key] = {
        'frequency': 1,
        'recency': cache_snapshot.access_count,
        'predicted': predict_future_access(cache_snapshot, obj)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an entry, the policy removes its metadata and updates the list of eviction candidates by re-evaluating the remaining entries' combined scores to ensure optimal future evictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    del cache_metadata[evicted_obj.key]
    for key in cache_metadata.keys():
        cache_metadata[key]['combined_score'] = (
            FREQUENCY_WEIGHT * cache_metadata[key]['frequency'] + 
            RECENCY_WEIGHT * (cache_snapshot.access_count - cache_metadata[key]['recency']) +
            PREDICTED_WEIGHT * cache_metadata[key]['predicted']
        )

def predict_future_access(cache_snapshot, obj):
    '''
    This helper function predicts the future access score based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object for which to predict future accesses.
    - Return:
        - `predicted_score`: The predicted future access score.
    '''
    # Example simple prediction logic (can be improved based on access patterns)
    return cache_snapshot.access_count % 100