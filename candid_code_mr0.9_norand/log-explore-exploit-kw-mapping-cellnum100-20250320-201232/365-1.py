# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQ = 0.4
WEIGHT_LAST_ACCESS_TIME = 0.3
WEIGHT_RELIABILITY_SCORE = 0.2
WEIGHT_CONTEXT_RELEVANCE = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, context tags associated with each data item, and a reliability score. It also keeps track of collaborative information shared between caches, such as shared access patterns and usage statistics.
metadata = {
    "access_frequency": {},  # obj.key -> int
    "last_access_time": {},  # obj.key -> int
    "context_tags": {},  # obj.key -> set
    "reliability_score": {},  # obj.key -> float
    "collaborative_info": {}  # obj.key -> any collaborative information needed
}

def _calculate_eviction_score(key, current_time):
    access_frequency = metadata["access_frequency"].get(key, 0)
    last_access_time = metadata["last_access_time"].get(key, 0)
    reliability_score = metadata["reliability_score"].get(key, 0.5)  # Default reliability score
    context_relevance = len(metadata["context_tags"].get(key, set()))
    
    score = (WEIGHT_ACCESS_FREQ * access_frequency +
             WEIGHT_LAST_ACCESS_TIME * (current_time - last_access_time) +
             WEIGHT_RELIABILITY_SCORE * (1 - reliability_score) +
             WEIGHT_CONTEXT_RELEVANCE * context_relevance)
    
    return score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by evaluating a weighted score that combines infrequent access, low reliability, and lack of contextual relevance to recent access patterns. It also considers collaborative information from other caches to avoid redundant data eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    current_time = cache_snapshot.access_count
    
    # Evaluate each object
    for key in cache_snapshot.cache.keys():
        score = _calculate_eviction_score(key, current_time)
        if score < min_score:
            min_score = score
            candid_obj_key = key
            
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, last access time, and context tags of the accessed data. It also adjusts the reliability score based on the success of the access and updates collaborative information to reflect the recent access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    # Update access frequency
    metadata["access_frequency"][key] = metadata["access_frequency"].get(key, 0) + 1
    
    # Update last access time
    metadata["last_access_time"][key] = current_time
    
    # Update context tags (dummy update, real logic based on context should be applied)
    metadata["context_tags"][key] = metadata["context_tags"].get(key, set())
    
    # Update reliability score (dummy update, real logic based on success of access)
    metadata["reliability_score"][key] = metadata["reliability_score"].get(key, 0.5) + 0.1
    
    # Update collaborative information (dummy update, real logic based on shared access patterns)
    metadata["collaborative_info"][key] = metadata["collaborative_info"].get(key, {})

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, last access time, context tags, and reliability score. It also updates collaborative information to include the new object and its initial metadata.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    # Initialize access frequency
    metadata["access_frequency"][key] = 1
    
    # Initialize last access time
    metadata["last_access_time"][key] = current_time
    
    # Initialize context tags (dummy initialization, real logic based on context should be applied)
    metadata["context_tags"][key] = set()
    
    # Initialize reliability score
    metadata["reliability_score"][key] = 0.5
    
    # Initialize collaborative information (dummy initialization, real logic based on shared access patterns)
    metadata["collaborative_info"][key] = {}

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes its metadata from the cache and updates collaborative information to reflect the eviction. It also adjusts the context tags and reliability scores of remaining objects based on the eviction decision.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    # Remove metadata of evicted object
    if evicted_key in metadata["access_frequency"]: del metadata["access_frequency"][evicted_key]
    if evicted_key in metadata["last_access_time"]: del metadata["last_access_time"][evicted_key]
    if evicted_key in metadata["context_tags"]: del metadata["context_tags"][evicted_key]
    if evicted_key in metadata["reliability_score"]: del metadata["reliability_score"][evicted_key]
    if evicted_key in metadata["collaborative_info"]: del metadata["collaborative_info"][evicted_key]
    
    # Update remaining objects' metadata based on eviction (dummy update, real logic based on context-specific handling)
    for key in cache_snapshot.cache.keys():
        metadata["context_tags"][key] = metadata["context_tags"].get(key, set())
        metadata["reliability_score"][key] = max(0, metadata["reliability_score"].get(key, 0.5) - 0.1)