# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict, deque

# Put tunable constant parameters below
SEGMENT_SIZE = 100  # Example size that defines a segment, you can tune this

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency, sensitivity level, validation score, priority score, hierarchical data structure, subscription list, and timestamp for each cached item.
metadata = {
    'access_freq': defaultdict(int),
    'recency': {},
    'sensitivity_level': {},
    'validation_score': {},
    'priority_score': {},
    'hierarchical_data': defaultdict(list),
    'subscription_list': deque(),
    'timestamp': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the eviction victim by first identifying the segment with the highest load, then choosing the item with the lowest combined validation and priority score, prioritizing less sensitive data and evicting the oldest item if scores are tied.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    highest_load_segment = None
    highest_load = 0
    
    # Find the segment with the highest load
    for segment_key, objects in metadata['hierarchical_data'].items():
        load = sum(o.size for o in objects) 
        if load > highest_load:
            highest_load = load
            highest_load_segment = objects

    # Select the item with the lowest combined validation and priority score
    if highest_load_segment:
        min_score = float('inf')
        oldest_timestamp = float('inf')
        for candidate in highest_load_segment:
            key = candidate.key
            score = metadata['validation_score'][key] + metadata['priority_score'][key]
            if (score < min_score) or (score == min_score and metadata['timestamp'][key] < oldest_timestamp):
                min_score = score
                oldest_timestamp = metadata['timestamp'][key]
                candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, recency, validation score, and priority score of the accessed item, adjusts the hierarchical data structure, updates the subscription list to mark the item as recently accessed, and recalculates the load metrics for the corresponding segment.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_freq'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['validation_score'][key] = calculate_validation_score(obj)
    metadata['priority_score'][key] = calculate_priority_score(obj)
    
    if key in metadata['subscription_list']:
        metadata['subscription_list'].remove(key)
    metadata['subscription_list'].appendleft(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency, sensitivity level, validation score, priority score, adds it to the hierarchical data structure, marks it as recently accessed in the subscription list, records the current timestamp, and updates the load metrics for the segment where the object is inserted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    segment = key[:SEGMENT_SIZE]
    
    metadata['access_freq'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['sensitivity_level'][key] = calculate_sensitivity_level(obj)
    metadata['validation_score'][key] = calculate_validation_score(obj)
    metadata['priority_score'][key] = calculate_priority_score(obj)
    metadata['hierarchical_data'][segment].append(obj)
    metadata['subscription_list'].appendleft(key)
    metadata['timestamp'][key] = cache_snapshot.access_count
    
def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the item's metadata from the priority mapping, hierarchical data structure, subscription list, and order of arrival records, updates the load metrics for the affected segment, and recalculates the validation and priority scores for the remaining items in that segment.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    segment = key[:SEGMENT_SIZE]
    
    del metadata['access_freq'][key]
    del metadata['recency'][key]
    del metadata['sensitivity_level'][key]
    del metadata['validation_score'][key]
    del metadata['priority_score'][key]
    metadata['hierarchical_data'][segment].remove(evicted_obj)
    metadata['subscription_list'].remove(key)
    del metadata['timestamp'][key]
    
    for remaining_obj in metadata['hierarchical_data'][segment]:
        key = remaining_obj.key
        metadata['validation_score'][key] = calculate_validation_score(remaining_obj)
        metadata['priority_score'][key] = calculate_priority_score(remaining_obj)

def calculate_validation_score(obj):
    # Placeholder for calculating validation score
    return 0

def calculate_priority_score(obj):
    # Placeholder for calculating priority score
    return 0

def calculate_sensitivity_level(obj):
    # Placeholder for calculating sensitivity level
    return 0