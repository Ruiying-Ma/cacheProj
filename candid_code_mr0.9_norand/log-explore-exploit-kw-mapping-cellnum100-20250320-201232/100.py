# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
REDUNDANCY_WEIGHT = 1.0
FREQUENCY_WEIGHT = 1.0
TIME_WEIGHT = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, redundancy score, and a dynamic adjustment factor for each cached item.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'last_access_time': {},  # {obj.key: last_access_time}
    'redundancy_score': {},  # {obj.key: redundancy_score}
    'dynamic_adjustment_factor': 1.0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by evaluating a combined score derived from access frequency, redundancy score, and last access time, prioritizing items with high redundancy and low access frequency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        frequency = metadata['access_frequency'].get(key, 0)
        last_time = metadata['last_access_time'].get(key, 0)
        redundancy = metadata['redundancy_score'].get(key, 0)
        
        score = (REDUNDANCY_WEIGHT * redundancy) - (FREQUENCY_WEIGHT * frequency) + (TIME_WEIGHT * (cache_snapshot.access_count - last_time))
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and last access time of the accessed item, and adjusts the dynamic adjustment factor based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata with default values and recalculates redundancy scores for all items to ensure diversity in the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 0
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['redundancy_score'][key] = 1.0  # Initialize with a default redundancy score
    
    # Recalculate redundancy scores for all items
    for cached_key in cache_snapshot.cache:
        if cached_key != key:
            metadata['redundancy_score'][cached_key] = calculate_redundancy_score(cache_snapshot.cache[cached_key])

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy updates the redundancy scores of the remaining items and adjusts the dynamic adjustment factor to optimize future eviction decisions based on recent performance metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_time']:
        del metadata['last_access_time'][evicted_key]
    if evicted_key in metadata['redundancy_score']:
        del metadata['redundancy_score'][evicted_key]
    
    # Update redundancy scores for remaining items
    for cached_key in cache_snapshot.cache:
        metadata['redundancy_score'][cached_key] = calculate_redundancy_score(cache_snapshot.cache[cached_key])
    
    # Adjust dynamic adjustment factor based on recent performance metrics
    metadata['dynamic_adjustment_factor'] = adjust_dynamic_factor(cache_snapshot)

def calculate_redundancy_score(obj):
    # Placeholder function to calculate redundancy score
    # This should be replaced with the actual logic to calculate redundancy score
    return 1.0

def adjust_dynamic_factor(cache_snapshot):
    # Placeholder function to adjust dynamic adjustment factor
    # This should be replaced with the actual logic to adjust the factor
    return 1.0