# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
PROTECTION_THRESHOLD = 5  # Example threshold for setting the protection flag

# Put the metadata specifically maintained by the policy below. Each cache line maintains a local access frequency counter, a recency score, and a protection status flag. Additionally, each cache line has a small agent that occasionally communicates with neighboring agents to share access patterns.

# To maintain the additional metadata specified in the policy, we will extend the cache entries with a dictionary:
class CacheEntry:
    def __init__(self, obj, access_freq=1, recency=0, protection=False):
        self.obj = obj
        self.access_freq = access_freq
        self.recency = recency
        self.protection = protection

# The dictionary to hold metadata for each cache line
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the cache line with the lowest combined score of access frequency and recency, unless the protection status flag is set. If all lines are protected, the least recently used among them is chosen.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    all_protected = True
    lru_protected_time = float('inf')
    lru_protected_key = None
    
    for key, entry in metadata.items():
        if not entry.protection:
            all_protected = False
            score = entry.access_freq + (cache_snapshot.access_count - entry.recency)
            if score < min_score:
                min_score = score
                candid_obj_key = key
        else:
            if entry.recency < lru_protected_time:
                lru_protected_time = entry.recency
                lru_protected_key = key
    
    if all_protected:
        candid_obj_key = lru_protected_key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency counter of the hit cache line is incremented, its recency score is updated to the current time, and the protection status flag is set if the access frequency exceeds a certain threshold.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    entry = metadata[obj.key]
    entry.access_freq += 1
    entry.recency = cache_snapshot.access_count
    if entry.access_freq > PROTECTION_THRESHOLD:
        entry.protection = True

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the new cache line's access frequency counter is initialized to 1, its recency score is set to the current time, and the protection status flag is initially unset. Neighboring agents are informed of the new insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = CacheEntry(obj, access_freq=1, recency=cache_snapshot.access_count, protection=False)
    # Communicate with neighboring agents (if needed)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the neighboring agents are informed of the eviction to adjust their local strategies. The metadata of the evicted line is reset, and the protection status flags of remaining lines are re-evaluated based on the new access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata[evicted_obj.key]
    # Reset metadata of evicted line
    for key, entry in metadata.items():
        entry.protection = entry.access_freq > PROTECTION_THRESHOLD
    # Communicate with neighboring agents (if needed)