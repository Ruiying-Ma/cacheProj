# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
DEFAULT_FREQUENCY = 1
DEFAULT_RECENCY = 0
DEFAULT_IMPORTANCE = 1

# Put the metadata specifically maintained by the policy below. Each cache node maintains metadata for access frequency, recency, and data importance scores for each cached object. Additionally, a set of predefined rules and a list of heuristics are maintained locally.
metadata = {
    "frequency": {},    # Maps obj.key to access frequency score
    "recency": {},      # Maps obj.key to recency score (access_count when last accessed)
    "importance": {}    # Maps obj.key to importance score
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates a score for each cached object using multiple heuristics. The object with the lowest average score across all heuristics is chosen for eviction. This decision is made independently by each cache node based on local metadata.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_score = float('inf')
    
    for cached_key, cached_obj in cache_snapshot.cache.items():
        frequency_score = metadata['frequency'][cached_key]
        recency_score = cache_snapshot.access_count - metadata['recency'][cached_key]
        importance_score = metadata['importance'][cached_key]

        average_score = (frequency_score + recency_score + importance_score) / 3

        if average_score < lowest_score:
            lowest_score = average_score
            candid_obj_key = cached_key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency scores for the accessed object are updated. The data importance score is recalculated based on predefined rules considering the new access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    
    calculate_importance(key, obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, initial access frequency and recency scores are set to default values. The data importance score is calculated based on predefined rules considering the object's characteristics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['frequency'][key] = DEFAULT_FREQUENCY
    metadata['recency'][key] = cache_snapshot.access_count
    
    calculate_importance(key, obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the metadata for the evicted object is removed. The predefined rules and heuristics list are reviewed and updated if necessary to ensure optimal future eviction decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in metadata['frequency']:
        del metadata['frequency'][key]
    if key in metadata['recency']:
        del metadata['recency'][key]
    if key in metadata['importance']:
        del metadata['importance'][key]

def calculate_importance(key, obj):
    '''
    This function calculates the importance score for an object based on predefined rules.
    - Args:
        - `key`: The key of the object.
        - `obj`: The object itself.
    - Return: `None`
    '''
    # Example rule: Importance could be related to the size of the object
    importance_score = obj.size
    metadata['importance'][key] = importance_score