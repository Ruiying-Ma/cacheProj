# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
NEUTRAL_FEEDBACK_SCORE = 5
# In case some initial predicted priorities are required by the algorithm
INITIAL_PRIORITY_SCORE = 5
LOAD_DISTRIBUTION_METRIC_INIT = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry, including access timestamps, feedback scores, priority scores from competing algorithms, task priorities, partition-specific access patterns, inter-cache communication data, access frequency/load distribution metrics, and a shared information table for collaborative caches.
metadata = {
    # metadata for objects in cache
    'timestamps': {},  # access timestamps
    'feedback_scores': {},  # feedback scores
    'priority_scores': {},  # priority scores from competing algorithms
    'access_frequency': {},  # access frequency
    'partition_access_patterns': {}  # partition-specific access patterns
}


def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates multiple eviction candidates in parallel, considering their recency of access, feedback scores, priority scores, task completion status, task priority, partition-specific access patterns, and least frequently accessed items. It selects the candidate with the lowest combined score for eviction, ensuring balanced load distribution across cache nodes.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    def combine_score(cached_obj):
        key = cached_obj.key
        age_score = cache_snapshot.access_count - metadata['timestamps'][key]
        feedback_score = metadata['feedback_scores'][key]
        priority_score = metadata['priority_scores'][key]
        frequency_score = metadata['access_frequency'][key]
        
        # Assuming these scores are to be combined in simple weighted sum,
        # you might want to add specific logic as per requirement
        combined = age_score + feedback_score - priority_score + frequency_score  
        return combined
    
    # List of candidate keys
    candidate_keys = list(cache_snapshot.cache.keys())
    
    # Sort the candidates by their combined score
    candidate_keys.sort(key=lambda candidate_key: combine_score(cache_snapshot.cache[candidate_key]))
    
    # Return the key with the lowest combined score
    candid_obj_key = candidate_keys[0]
    
    return candid_obj_key


def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access timestamp, increments the feedback score, adjusts the priority score of the predicting algorithm, updates the access frequency and load distribution metrics for the relevant partition and task, and updates the inter-cache communication data to reflect the current state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    # Updating access timestamp
    metadata['timestamps'][key] = cache_snapshot.access_count
    # Incrementing feedback score
    metadata['feedback_scores'][key] += 1
    # Re-calculating the priority score if needed. Adjustments based on feedback and events.
    metadata['priority_scores'][key] = max(metadata['priority_scores'][key] - 1, 0)  # suppose to be decreased
    # Update access frequency
    metadata['access_frequency'][key] += 1
    # Update load distribution and other inter-cache communication data as needed.
    # placeholder, when needed metadata will be updated here

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata with the current timestamp, a neutral feedback score, priority scores based on initial predictions, updates the task allocation metadata to reflect the new task's priority and completion status, updates the partition-specific access patterns, adjusts the load distribution metrics, and updates the shared information table with the new entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    # Initializing access timestamp
    metadata['timestamps'][key] = cache_snapshot.access_count
    # Initializing feedback score
    metadata['feedback_scores'][key] = NEUTRAL_FEEDBACK_SCORE
    # Initializing priority score
    metadata['priority_scores'][key] = INITIAL_PRIORITY_SCORE
    # Initializing access frequency
    metadata['access_frequency'][key] = 1
    # Initialize partition-specific access pattern and load distribution and other inter-cache data

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy adjusts the feedback score of the evicted entry based on subsequent hit/miss rate, adjusts the priority score of the predicting algorithm, updates the task allocation metadata to reflect the removal of the task's data, updates the partition-specific access patterns, inter-cache communication data, load distribution metrics, and the shared information table to reflect the eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    # Adjust feedback scores, for example reduce them
    if key in metadata['feedback_scores']:
        metadata['feedback_scores'][key] = max(metadata['feedback_scores'][key] - 1, 0)
    # Adjust priority score
    if key in metadata['priority_scores']:
        metadata['priority_scores'][key] = max(metadata['priority_scores'][key] - 1, 0)
    # Remove metadata as necessary
    if key in metadata['timestamps']:
        del metadata['timestamps'][key]
    if key in metadata['access_frequency']:
        del metadata['access_frequency'][key]
    if key in metadata['partition_access_patterns']:
        del metadata['partition_access_patterns'][key]
    # Updates to the inter-cache communication data and shared informations table
    # Placeholder for additional updates