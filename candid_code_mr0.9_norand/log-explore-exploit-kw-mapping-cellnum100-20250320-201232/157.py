# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_FREQUENCY = 1.0
WEIGHT_RECENCY = 1.0
WEIGHT_SIZE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache item, including access frequency, last access timestamp, memory consumption, and a dynamic priority score that adjusts based on system load and access patterns.
metadata = {}

def calculate_priority(frequency, recency, size):
    return WEIGHT_FREQUENCY * frequency + WEIGHT_RECENCY * recency + WEIGHT_SIZE * size

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score for each item, which is a weighted sum of its access frequency, recency, and memory consumption. Items with the lowest scores are prioritized for eviction, with weights dynamically adjusted based on current system load.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_priority = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        freq = metadata[key]['frequency']
        recency = cache_snapshot.access_count - metadata[key]['last_access']
        size = cached_obj.size
        priority = calculate_priority(freq, recency, size)
        
        if priority < min_priority:
            min_priority = priority
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the last access timestamp, and recalculates the dynamic priority score for the accessed item.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['frequency'] += 1
    metadata[key]['last_access'] = cache_snapshot.access_count
    metadata[key]['priority'] = calculate_priority(
        metadata[key]['frequency'],
        cache_snapshot.access_count - metadata[key]['last_access'],
        obj.size
    )

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, sets the current timestamp as the last access time, records its memory consumption, and calculates its initial dynamic priority score based on the current system load.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'frequency': 1,
        'last_access': cache_snapshot.access_count,
        'priority': calculate_priority(1, 0, obj.size)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy removes its metadata and may adjust the weights used in the composite score calculation to better align with the current workload and system load conditions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    # Optionally adjust weights based on current system load
    # This part is left as a placeholder for dynamic adjustment logic