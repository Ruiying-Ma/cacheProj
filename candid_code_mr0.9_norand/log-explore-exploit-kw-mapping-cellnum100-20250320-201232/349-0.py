# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
LOCALITY_DECAY_FACTOR = 0.9

# Put the metadata specifically maintained by the policy below. The policy maintains a dependency graph with nodes representing cached objects and edges representing dependencies. Each object has an access frequency counter, a recency timestamp, and a locality score. Each application or process has its own isolated cache space with its own metadata.
class CacheMetadata:
    def __init__(self):
        self.frequency_counter = {}
        self.recency_timestamp = {}
        self.locality_score = {}
        self.dependencies = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates an eviction probability for each object based on its access frequency, recency, and locality score. Objects with fewer dependencies and lower combined scores have higher probabilities. A random selection is made based on these probabilities to choose the eviction victim within the isolated cache space.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    scores_dict = {}
    for key, cached_obj in cache_snapshot.cache.items():
        dependencies_count = len(cache_metadata.dependencies.get(key, set()))
        frequency = cache_metadata.frequency_counter[key]
        recency = cache_metadata.recency_timestamp[key]
        locality = cache_metadata.locality_score[key]

        # Calculate the score
        score = (frequency + 1) / (recency + 1) * locality / (dependencies_count + 1)
        scores_dict[key] = score

    # Select the object with the lowest score for eviction
    if scores_dict:
        candid_obj_key = min(scores_dict, key=scores_dict.get)

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency counter of the object is incremented, its recency timestamp is updated to the current time, and the locality score is recalculated based on recent access patterns of nearby nodes. Dependencies are checked and updated if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count

    # Update the access frequency
    cache_metadata.frequency_counter[key] += 1

    # Update recency timestamp
    cache_metadata.recency_timestamp[key] = current_time

    # Update locality score
    cache_metadata.locality_score[key] *= LOCALITY_DECAY_FACTOR
    cache_metadata.locality_score[key] += 1

    # Update dependencies if necessary --- in this simple case we assume dependencies are not updated on hit

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its access frequency counter is initialized to 1, its recency timestamp is set to the current time, and its locality score is computed based on the initial access context. Dependencies are established based on the context of the insertion. The isolated cache space metadata is updated to reflect the new entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count

    # Initialize access frequency counter
    cache_metadata.frequency_counter[key] = 1

    # Initialize recency timestamp
    cache_metadata.recency_timestamp[key] = current_time

    # Initialize locality score
    cache_metadata.locality_score[key] = 1.0

    # Initialize dependencies --- for simplicity, we assume no initial dependencies
    cache_metadata.dependencies[key] = set()

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the dependency graph is updated to remove the evicted object and its edges. The access frequency counters, recency timestamps, and locality scores of remaining objects are adjusted if they were dependent on the evicted object. The isolated cache space metadata is updated to remove the evicted entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key

    # Remove metadata for the evicted object
    del cache_metadata.frequency_counter[evicted_key]
    del cache_metadata.recency_timestamp[evicted_key]
    del cache_metadata.locality_score[evicted_key]

    # Update dependencies for the remaining objects
    for key, dependencies in cache_metadata.dependencies.items():
        if evicted_key in dependencies:
            dependencies.remove(evicted_key)

    # Remove the evicted object from the dependencies dictionary
    if evicted_key in cache_metadata.dependencies:
        del cache_metadata.dependencies[evicted_key]

# Initialize global cache metadata instance
cache_metadata = CacheMetadata()