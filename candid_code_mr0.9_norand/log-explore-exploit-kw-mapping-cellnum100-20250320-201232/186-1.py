# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
REGION_HIGH_THRESHOLD = 10
REGION_MEDIUM_THRESHOLD = 5

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry, including access frequency, recency (timestamp of last access), data size, and a region identifier indicating the access frequency region (e.g., high, medium, low).
metadata = {
    'access_frequency': collections.defaultdict(int),
    'last_access_time': {},
    'region': {}
}

def get_region(access_frequency):
    if access_frequency >= REGION_HIGH_THRESHOLD:
        return 'high'
    elif access_frequency >= REGION_MEDIUM_THRESHOLD:
        return 'medium'
    else:
        return 'low'

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates multiple eviction candidates simultaneously from different regions, using a multi-dimensional scoring system that considers access frequency, recency, and data size. The candidate with the lowest score is chosen for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for obj_key, cached_obj in cache_snapshot.cache.items():
        freq = metadata['access_frequency'][obj_key]
        recency = cache_snapshot.access_count - metadata['last_access_time'][obj_key]
        size = cached_obj.size
        region = metadata['region'][obj_key]

        # Multi-dimensional scoring system
        score = region_priority(region) + recency + size

        if score < min_score:
            min_score = score
            candid_obj_key = obj_key

    return candid_obj_key

def region_priority(region):
    if region == 'high':
        return 1
    elif region == 'medium':
        return 2
    return 3

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency (timestamp) of the accessed entry are updated. The entry may be moved to a different region if its access frequency changes significantly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    obj_key = obj.key
    metadata['access_frequency'][obj_key] += 1
    metadata['last_access_time'][obj_key] = cache_snapshot.access_count
    metadata['region'][obj_key] = get_region(metadata['access_frequency'][obj_key])

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata (access frequency, recency, data size, and region). The object is placed in the appropriate region based on its initial access frequency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    obj_key = obj.key
    metadata['access_frequency'][obj_key] = 1
    metadata['last_access_time'][obj_key] = cache_snapshot.access_count
    metadata['region'][obj_key] = get_region(1)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an entry, the policy updates the metadata of the remaining entries if necessary, such as adjusting region boundaries or recalculating scores for the next eviction decision.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_obj_key = evicted_obj.key
    if evicted_obj_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_obj_key]
        del metadata['last_access_time'][evicted_obj_key]
        del metadata['region'][evicted_obj_key]

    # Adjust regions if necessary
    for obj_key in metadata['region']:
        metadata['region'][obj_key] = get_region(metadata['access_frequency'][obj_key])