# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
FREQUENCY_THRESHOLD = 10

# Put the metadata specifically maintained by the policy below. Each cache line maintains a state (frequently accessed, recently accessed, rarely accessed) and a neighbor influence score based on the states of adjacent cache lines.
cache_metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the cache line in the 'rarely accessed' state with the lowest neighbor influence score. If no such line exists, it evicts the most recently added cache line (LIFO).
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_neighbor_influence = float('inf')

    # Find the rarely accessed object with the lowest neighbor influence score
    for key, cached_obj in cache_snapshot.cache.items():
        if cache_metadata[key]['state'] == 'rarely accessed' and cache_metadata[key]['neighbor_influence'] < lowest_neighbor_influence:
            lowest_neighbor_influence = cache_metadata[key]['neighbor_influence']
            candid_obj_key = key

    # If no rarely accessed object found, find the most recently added object (LIFO)
    if not candid_obj_key:
        candid_obj_key = max(cache_metadata.keys(), key=lambda k: cache_metadata[k]['timestamp'])

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the accessed cache line transitions to a 'recently accessed' state if it was 'rarely accessed', or to 'frequently accessed' if it was 'recently accessed'. Neighbor influence scores of adjacent lines are updated to reflect the new state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    if obj.key in cache_metadata:
        meta = cache_metadata[obj.key]
        
        if meta['state'] == 'rarely accessed':
            meta['state'] = 'recently accessed'
        elif meta['state'] == 'recently accessed':
            meta['state'] = 'frequently accessed'

        # Update neighbor influence score for neighboring objects
        for neighbor_key in cache_metadata.keys():
            if neighbor_key == obj.key:
                continue
            cache_metadata[neighbor_key]['neighbor_influence'] += 1

        meta['timestamp'] = cache_snapshot.access_count  # Update access timestamp
        
def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the new cache line is set to 'recently accessed' state. Neighbor influence scores of adjacent lines are incremented to account for the new line.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    cache_metadata[obj.key] = {
        'state': 'recently accessed',
        'neighbor_influence': 0,
        'timestamp': cache_snapshot.access_count
    }

    # Increment neighbor influence score of adjacent objects
    for key in cache_snapshot.cache.keys():
        if key != obj.key:
            cache_metadata[key]['neighbor_influence'] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a cache line, the neighbor influence scores of adjacent lines are decremented. The states of remaining lines are re-evaluated to ensure they reflect the current access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in cache_metadata:
        del cache_metadata[evicted_obj.key]

    # Decrement neighbor influence score of adjacent objects
    for key in cache_snapshot.cache.keys():
        if key != evicted_obj.key:
            cache_metadata[key]['neighbor_influence'] = max(0, cache_metadata[key]['neighbor_influence'] - 1)
        
    # Reevaluate states
    for key, meta in cache_metadata.items():
        if meta['state'] == 'recently accessed' and meta['timestamp'] + FREQUENCY_THRESHOLD < cache_snapshot.access_count:
            meta['state'] = 'rarely accessed'