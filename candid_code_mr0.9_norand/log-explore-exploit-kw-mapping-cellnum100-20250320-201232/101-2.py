# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
PRIORITY_WEIGHT = 1.0
ACCESS_FREQUENCY_WEIGHT = 1.0
RECENCY_WEIGHT = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached object, including its size, access frequency, recency of access, and a dynamic priority score that adjusts based on system load and access patterns.
metadata = {}

def calculate_priority(size, access_frequency, recency, capacity, current_time):
    # Example formula for priority which can be tuned.
    return (size / capacity) * PRIORITY_WEIGHT + \
           (access_frequency * ACCESS_FREQUENCY_WEIGHT) / (current_time - recency + 1) + \
           RECENCY_WEIGHT / (current_time - recency + 1)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first considering the largest items to maximize space, then adjusting based 
    on the dynamic priority score to ensure optimal performance and resource utilization.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    maximum_priority = -math.inf
    
    # First, gather all cache objects' data with their priority scores
    for key, cached_obj in cache_snapshot.cache.items():
        cache_obj_metadata = metadata[key]
        size = cached_obj.size
        access_frequency = cache_obj_metadata['access_frequency']
        recency = cache_obj_metadata['recency']
        priority = calculate_priority(size, access_frequency, recency, cache_snapshot.capacity, cache_snapshot.access_count)
        
        if priority > maximum_priority:
            maximum_priority = priority
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, recency of access, and recalculates the dynamic priority score 
    for the accessed object to reflect its increased importance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    if key in metadata:
        metadata[key]['access_frequency'] += 1
        metadata[key]['recency'] = cache_snapshot.access_count
        metadata[key]['priority'] = calculate_priority(
            obj.size,
            metadata[key]['access_frequency'],
            metadata[key]['recency'],
            cache_snapshot.capacity,
            cache_snapshot.access_count
        )

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata, including size, access frequency, recency of access, and 
    sets an initial dynamic priority score based on current system load and access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'size': obj.size,
        'access_frequency': 1,
        'recency': cache_snapshot.access_count,
        'priority': calculate_priority(
            obj.size,
            1,  # initial access frequency
            cache_snapshot.access_count,
            cache_snapshot.capacity,
            cache_snapshot.access_count
        )
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy recalculates the dynamic priority scores for the remaining objects to ensure that 
    the most relevant data is retained based on the updated system state and load.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    # Recalculate priority scores for all remaining objects
    for key, cached_obj in cache_snapshot.cache.items():
        if key in metadata:
            metadata[key]['priority'] = calculate_priority(
                cached_obj.size,
                metadata[key]['access_frequency'],
                metadata[key]['recency'],
                cache_snapshot.capacity,
                cache_snapshot.access_count
            )