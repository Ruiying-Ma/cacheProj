# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
EVICTION_PROB_CONSTANT = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains a dependency graph where nodes represent cached objects and edges represent dependencies between them. Each object also has an access frequency counter and a recency timestamp.
class Metadata:
    def __init__(self):
        self.frequency = {}
        self.recency = {}
        self.dependencies = {}

metadata = Metadata()

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates an eviction probability for each object based on its access frequency and recency. Objects with fewer dependencies have higher probabilities. A random selection is made based on these probabilities to choose the eviction victim.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        freq = metadata.frequency[key]
        recency = metadata.recency[key]
        dep_count = len(metadata.dependencies.get(key, []))
        
        eviction_score = (freq * EVICTION_PROB_CONSTANT) + ((cache_snapshot.access_count - recency) * (1 - EVICTION_PROB_CONSTANT)) + dep_count
        
        if eviction_score < min_score:
            min_score = eviction_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency counter of the object is incremented, and its recency timestamp is updated to the current time. Dependencies are checked and updated if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    if key in metadata.frequency:
        metadata.frequency[key] += 1
    else:
        metadata.frequency[key] = 1

    metadata.recency[key] = cache_snapshot.access_count
    
    # Update dependencies if necessary
    # Here we assume that the context is simple enough not to modify dependencies on hits directly

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its access frequency counter is initialized to 1, and its recency timestamp is set to the current time. Dependencies are established based on the context of the insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata.frequency[key] = 1
    metadata.recency[key] = cache_snapshot.access_count

    # Establish new dependencies based on the insertion context
    # Here we assume no new dependencies are established on insertion for simplicity

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the dependency graph is updated to remove the evicted object and its edges. The access frequency counters and recency timestamps of remaining objects are adjusted if they were dependent on the evicted object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata.frequency:
        del metadata.frequency[evicted_key]
    if evicted_key in metadata.recency:
        del metadata.recency[evicted_key]
    if evicted_key in metadata.dependencies:
        del metadata.dependencies[evicted_key]
    
    # Adjust the dependencies of other objects
    # For this simplified context, we assume dependencies are removal-only