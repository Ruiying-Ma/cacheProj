# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import deque, defaultdict

# Put tunable constant parameters below
SQ_CAPACITY = 10
MQ_CAPACITY = 100
GQ_CAPACITY = 50
OVERFLOW_CAPACITY = 100

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, priority level, synchronization status, and an overflow area for recently evicted items. It also includes an LFU queue with recency as the tie breaker, a FIFO queue called SQ with a small predetermined capacity, a FIFO queue called MQ with a large predetermined capacity, and a ghost FIFO queue called GQ with a predetermined capacity.
access_frequency = defaultdict(int)
recency = {}
priority_level = {}
synchronization_status = {}
overflow_area = deque(maxlen=OVERFLOW_CAPACITY)
LFU_queue = deque()
SQ = deque(maxlen=SQ_CAPACITY)
MQ = deque(maxlen=MQ_CAPACITY)
GQ = deque(maxlen=GQ_CAPACITY)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on the lowest priority level, considering both access frequency and recency. If multiple items have the same priority, the least recently synchronized item is evicted first. If SQ exceeds its capacity, move objects from SQ to MQ until an object with frequency less than 2 is found or MQ is full. If MQ is full, cyclically reduce frequencies in MQ until an object with zero frequency is found and evict it. Evicted items are moved to the overflow area and GQ.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    if len(SQ) >= SQ_CAPACITY:
        while SQ:
            sq_obj_key = SQ.popleft()
            if access_frequency[sq_obj_key] < 2 or len(MQ) >= MQ_CAPACITY:
                candid_obj_key = sq_obj_key
                break
            MQ.append(sq_obj_key)
    
    if candid_obj_key is None:
        if len(MQ) >= MQ_CAPACITY:
            while True:
                mq_obj_key = MQ.popleft()
                access_frequency[mq_obj_key] -= 1
                if access_frequency[mq_obj_key] == 0:
                    candid_obj_key = mq_obj_key
                    break
                MQ.append(mq_obj_key)
    
    if candid_obj_key is None:
        # Find the object with the lowest priority level
        min_priority = float('inf')
        for key in cache_snapshot.cache:
            if priority_level[key] < min_priority:
                min_priority = priority_level[key]
                candid_obj_key = key
            elif priority_level[key] == min_priority:
                if synchronization_status[key] < synchronization_status[candid_obj_key]:
                    candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the accessed item are updated. The priority level is recalculated based on the new frequency and recency values. The synchronization status is also updated if applicable. The object's frequency is increased by 1 and its recency is set to the current timestamp. Adjust its place in the LFU queue if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    access_frequency[obj.key] += 1
    recency[obj.key] = cache_snapshot.access_count
    priority_level[obj.key] = access_frequency[obj.key] / (cache_snapshot.access_count - recency[obj.key] + 1)
    synchronization_status[obj.key] = cache_snapshot.access_count
    
    # Adjust place in LFU queue
    if obj.key in LFU_queue:
        LFU_queue.remove(obj.key)
    LFU_queue.append(obj.key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its access frequency is initialized, and its recency is set to the current time. The priority level is calculated based on these initial values. The synchronization status is set. If the object was in GQ, place it at the rear of MQ and remove it from GQ. Otherwise, place it at the rear of SQ and in the appropriate place in the LFU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    access_frequency[obj.key] = 1
    recency[obj.key] = cache_snapshot.access_count
    priority_level[obj.key] = access_frequency[obj.key] / (cache_snapshot.access_count - recency[obj.key] + 1)
    synchronization_status[obj.key] = cache_snapshot.access_count
    
    if obj.key in GQ:
        GQ.remove(obj.key)
        MQ.append(obj.key)
    else:
        SQ.append(obj.key)
    
    LFU_queue.append(obj.key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, its metadata is moved to the overflow area, including its access frequency, recency, priority level, and synchronization status. The overflow area is managed to ensure it does not exceed a predefined size, evicting the oldest items if necessary. The evicted object is also placed at the rear of GQ. If GQ is full, remove the front of GQ.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    overflow_area.append({
        'key': evicted_obj.key,
        'access_frequency': access_frequency[evicted_obj.key],
        'recency': recency[evicted_obj.key],
        'priority_level': priority_level[evicted_obj.key],
        'synchronization_status': synchronization_status[evicted_obj.key]
    })
    
    GQ.append(evicted_obj.key)
    if len(GQ) > GQ_CAPACITY:
        GQ.popleft()
    
    # Clean up metadata
    del access_frequency[evicted_obj.key]
    del recency[evicted_obj.key]
    del priority_level[evicted_obj.key]
    del synchronization_status[evicted_obj.key]
    if evicted_obj.key in LFU_queue:
        LFU_queue.remove(evicted_obj.key)