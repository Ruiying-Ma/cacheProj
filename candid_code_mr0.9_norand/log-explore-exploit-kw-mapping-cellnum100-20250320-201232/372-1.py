# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict
import heapq

# Put tunable constant parameters below
ALPHA = 0.8  # Weight for future access prediction
BETA = 0.7   # Weight for recency part
GAMMA = 0.5  # Weight for access frequency

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, predicted future access patterns, and classification categories for each cached object.
access_frequency = defaultdict(int)
recency_timestamp = {}
future_access_prediction = defaultdict(lambda: 1)
classification = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by combining access frequency, recency, predicted future access, and category-specific rules to identify the lowest priority object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_priority = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        frequency = access_frequency[key]
        recency = recency_timestamp[key]
        future_prediction = future_access_prediction[key]
        category_score = hash(classification[key]) % 10 # Simplified category rule
        
        priority = (GAMMA * frequency) + (BETA * (cache_snapshot.access_count - recency)) + (ALPHA * future_prediction) + category_score
        
        if priority < min_priority:
            min_priority = priority
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency, recency timestamp, and refines the predicted future access pattern for the accessed object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] += 1
    recency_timestamp[key] = cache_snapshot.access_count
    future_access_prediction[key] = (future_access_prediction[key] + 1) * ALPHA

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, sets the current timestamp as its recency, predicts its future access pattern, and classifies it into a category.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 1
    recency_timestamp[key] = cache_snapshot.access_count
    future_access_prediction[key] = 1
    classification[key] = obj.size % 3  # Simplified category based on size modulus

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata and may adjust the classification rules or predictive model based on the eviction outcome.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in access_frequency:
        del access_frequency[evicted_key]
    if evicted_key in recency_timestamp:
        del recency_timestamp[evicted_key]
    if evicted_key in future_access_prediction:
        del future_access_prediction[evicted_key]
    if evicted_key in classification:
        del classification[evicted_key]