# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
DEFAULT_TRUST_LEVEL = 1

# Put the metadata specifically maintained by the policy below. Each cache node maintains a local access frequency counter, a trust level indicator for each cache line, and a random seed for eviction decisions.
access_frequency = {}
trust_level = {}
random_seed = 0

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first filters cache lines with the lowest trust levels, then randomly selects one of these lines for eviction, ensuring privacy and randomness.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    global random_seed
    candid_obj_key = None
    # Your code below
    min_trust_level = min(trust_level.values())
    candidates = [key for key, level in trust_level.items() if level == min_trust_level]
    
    # Deterministic "random" selection based on the current random_seed
    index = random_seed % len(candidates)
    candid_obj_key = candidates[index]
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency counter for the accessed cache line is incremented, and the trust level indicator is updated based on predefined hierarchical rules.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    access_frequency[key] += 1
    # Update trust level based on predefined hierarchical rules
    if access_frequency[key] > 10:
        trust_level[key] = 3
    elif access_frequency[key] > 5:
        trust_level[key] = 2
    else:
        trust_level[key] = 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the access frequency counter for the new cache line is initialized, and its trust level is set to a default value based on its data type or source.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    access_frequency[key] = 0
    trust_level[key] = DEFAULT_TRUST_LEVEL

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the metadata for the evicted cache line is reset, and the random seed is updated to ensure future eviction decisions remain unpredictable.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    global random_seed
    # Your code below
    evicted_key = evicted_obj.key
    if evicted_key in access_frequency:
        del access_frequency[evicted_key]
    if evicted_key in trust_level:
        del trust_level[evicted_key]
    
    # Update the random seed in a deterministic way
    random_seed = (random_seed + 1) % 1000000