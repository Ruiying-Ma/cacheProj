# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
FREQUENCY_WEIGHT = 0.4
RECENCY_WEIGHT = 0.4
GLOBAL_STATISTIC_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. Each cache entry maintains a fitness score, access frequency, recency of access, and a shared global usage statistic updated by all agents.
cache_metadata = {
    'access_frequency': collections.defaultdict(int),
    'recency': {},
    'fitness_score': {},
    'global_usage_statistic': 0
}

def _recalculate_fitness_score(key, cache_snapshot):
    frequency = cache_metadata['access_frequency'][key]
    recency = cache_metadata['recency'][key]
    global_stat = cache_metadata['global_usage_statistic']
    fitness_score = (FREQUENCY_WEIGHT * frequency) + \
                    (RECENCY_WEIGHT * (cache_snapshot.access_count - recency)) + \
                    (GLOBAL_STATISTIC_WEIGHT * global_stat)
    cache_metadata['fitness_score'][key] = fitness_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the eviction victim based on the lowest fitness score, which is calculated using a combination of access frequency, recency, and global usage statistics.
    '''
    candid_obj_key = None
    min_fitness_score = float('inf')

    for key in cache_snapshot.cache:
        _recalculate_fitness_score(key, cache_snapshot)
        if cache_metadata['fitness_score'][key] < min_fitness_score:
            min_fitness_score = cache_metadata['fitness_score'][key]
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    Upon a cache hit, the access frequency and recency of the accessed entry are updated.
    The fitness score is recalculated, and the global usage statistic is adjusted to reflect the recent access.
    '''
    key = obj.key
    cache_metadata['access_frequency'][key] += 1
    cache_metadata['recency'][key] = cache_snapshot.access_count
    _recalculate_fitness_score(key, cache_snapshot)
    cache_metadata['global_usage_statistic'] += 1  # Adjust as required

def update_after_insert(cache_snapshot, obj):
    '''
    After inserting a new object, its initial fitness score is set based on default values of access frequency and recency.
    The global usage statistic is updated to include the new entry.
    '''
    key = obj.key
    cache_metadata['access_frequency'][key] = 1  # Default access frequency
    cache_metadata['recency'][key] = cache_snapshot.access_count  # Default latest access time
    _recalculate_fitness_score(key, cache_snapshot)
    cache_metadata['global_usage_statistic'] += 1  # Adjust as required

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    Following an eviction, the global usage statistic is updated to remove the evicted entry's contribution.
    The fitness scores of remaining entries are recalculated to reflect the new cache state.
    '''
    evicted_key = evicted_obj.key
    cache_metadata['global_usage_statistic'] -= 1  # Adjust as required

    # Remove evicted object's metadata
    del cache_metadata['access_frequency'][evicted_key]
    del cache_metadata['recency'][evicted_key]
    del cache_metadata['fitness_score'][evicted_key]

    # Recalculate fitness scores for remaining entries
    for key in cache_snapshot.cache:
        _recalculate_fitness_score(key, cache_snapshot)