# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_PRIORITY = 1

# Put the metadata specifically maintained by the policy below. The policy maintains a FIFO queue, priority scores for each cached item, partition identifiers, a sequence of access steps, and system load metrics.

fifo_queue = []
priority_scores = {}
partitions = {}
access_sequence = {}
system_load_metrics = {"hits": 0, "misses": 0, "inserts": 0, "evicts": 0}
# We'll use a simple partitioning function in this example
def partition_func(obj):
    return obj.key[0]  # Example: partition by the first character of the key

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first selects the partition with the least critical access pattern, then evicts the item with the lowest priority score within that partition. If there is a tie, the item at the front of the FIFO queue within that partition is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    
    # Find the partition with the least critical access pattern (in this simplistic case, we'll just pick any partition)
    partition_keys = {}
    for k in cache_snapshot.cache:
        part_key = partition_func(cache_snapshot.cache[k])
        if part_key not in partition_keys:
            partition_keys[part_key] = []
        partition_keys[part_key].append(k)

    target_partition = min(partition_keys, key=lambda part_key: len(partition_keys[part_key]))  # Least filled partition
    
    # Find the item with the lowest priority score within that partition
    target_items = partition_keys[target_partition]
    target_items.sort(key=lambda x: (priority_scores.get(x, INITIAL_PRIORITY), fifo_queue.index(x)))
    
    if target_items:
        candid_obj_key = target_items[0]
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    The policy increases the priority score based on the recency and frequency of access, updates the sequence of access steps to reflect the most recent access, and adjusts the system load metrics if necessary. The FIFO queue remains unchanged.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    priority_scores[obj.key] = priority_scores.get(obj.key, 0) + 1
    access_sequence[obj.key] = cache_snapshot.access_count
    system_load_metrics["hits"] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    The policy assigns an initial priority score based on expected access patterns, places the object in the appropriate partition, initializes its sequence of access steps, updates system load metrics, and adds the object to the rear of the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    priority_scores[obj.key] = INITIAL_PRIORITY
    partitions[obj.key] = partition_func(obj)
    access_sequence[obj.key] = cache_snapshot.access_count
    system_load_metrics["inserts"] += 1
    fifo_queue.append(obj.key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    The policy recalculates the priority scores of remaining items in the affected partition, updates the sequence of access steps to remove the evicted item, adjusts system load metrics to reflect the change in cache content, and removes the evicted object from the front of the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del priority_scores[evicted_obj.key]
    del access_sequence[evicted_obj.key]
    del partitions[evicted_obj.key]
    system_load_metrics["evicts"] += 1
    
    if evicted_obj.key in fifo_queue:
        fifo_queue.remove(evicted_obj.key)