# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
SQ_CAPACITY = 10
MQ_CAPACITY = 10
GQ_CAPACITY = 10
B1_CAPACITY = 10
B2_CAPACITY = 10

# Put the metadata specifically maintained by the policy below. The system maintains two FIFO queues (SQ and MQ) with fixed capacities, two LRU queues (T1 and T2) with dynamic capacities, and two ghost FIFO queues (GQ and B1/B2). Each cached object has an access frequency and a recency timestamp. A circular pointer traverses the cache.
SQ = []
MQ = []
T1 = []
T2 = []
GQ = []
B1 = []
B2 = []
frequencies = {}
recencies = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    If SQ exceeds its capacity, move objects from SQ to MQ until an object with frequency < 2 is found or MQ is full. If MQ is full, reduce frequencies in MQ until an object with zero frequency is found and evict it. If SQ is not full, evict from T1's least-recently-used end if T1 is not empty, otherwise from T2's least-recently-used end.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    if len(SQ) > SQ_CAPACITY:
        while len(SQ) > SQ_CAPACITY:
            moved_obj = SQ.pop(0)
            if frequencies[moved_obj.key] < 2 or len(MQ) >= MQ_CAPACITY:
                candid_obj_key = moved_obj.key
                break
            MQ.append(moved_obj)
    elif len(MQ) >= MQ_CAPACITY:
        for mq_obj in MQ:
            frequencies[mq_obj.key] -= 1
            if frequencies[mq_obj.key] == 0:
                candid_obj_key = mq_obj.key
                break
    else:
        if T1:
            candid_obj_key = T1.pop(0).key
        elif T2:
            candid_obj_key = T2.pop(0).key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Increase the hit object's frequency by 1 if it is less than 3. Set its recency as the current timestamp. Move it to the most-recently-used end of T2. The pointer does not move.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    if frequencies[obj.key] < 3:
        frequencies[obj.key] += 1
    recencies[obj.key] = cache_snapshot.access_count
    if obj in T1:
        T1.remove(obj)
    if obj in T2:
        T2.remove(obj)
    T2.append(obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    Set the inserted object's frequency to 1 and recency as the current timestamp. If it was in GQ or B1/B2, put it at the most-recently-used end of T2 and expand T2's capacity by preempting part of T1's capacity. Otherwise, put it at the rear of SQ or the most-recently-used end of T1. Place it at the current pointer location. The pointer does not move.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    frequencies[obj.key] = 1
    recencies[obj.key] = cache_snapshot.access_count
    if obj in GQ:
        GQ.remove(obj)
        T2.append(obj)
    elif obj in B1:
        B1.remove(obj)
        T2.append(obj)
    elif obj in B2:
        B2.remove(obj)
        T2.append(obj)
    else:
        if len(SQ) < SQ_CAPACITY:
            SQ.append(obj)
        else:
            T1.append(obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    If evicted from SQ, move it to the rear of GQ. If evicted from T1, move it to the rear of B1. If evicted from T2, move it to the rear of B2. The evicted object's frequency is no longer tracked. Remove the redundant object from the front of GQ, B1, or B2 if full. The pointer does not move.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    if evicted_obj in SQ:
        GQ.append(evicted_obj)
        if len(GQ) > GQ_CAPACITY:
            GQ.pop(0)
    elif evicted_obj in T1:
        B1.append(evicted_obj)
        if len(B1) > B1_CAPACITY:
            B1.pop(0)
    elif evicted_obj in T2:
        B2.append(evicted_obj)
        if len(B2) > B2_CAPACITY:
            B2.pop(0)
    del frequencies[evicted_obj.key]
    del recencies[evicted_obj.key]