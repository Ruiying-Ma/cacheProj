# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
DYNAMIC_THRESHOLD_SCORE = 10  # Example value, can adjust based on scenario

# Put the metadata specifically maintained by the policy below. The policy maintains a hierarchical structure of metadata for each cache line,
# including access frequency counters, timestamps of last access, estimated future access patterns, recency, and a dynamic threshold score.
# It also tracks the current access pattern to select the best eviction strategy.

metadata = {
    # 'key': {'access_count': int, 'last_access_time': float, 'recency': float}
}
current_access_pattern = {
    'recency_weight': 1.0,
    'frequency_weight': 1.0,
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy traverses the cache hierarchy starting from the lowest level, evaluating items below the dynamic threshold score.
    It uses a combination of LRU, LFU, and FIFO based on the current access pattern and estimated future access patterns to select the final eviction victim.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for obj_key, cache_obj in cache_snapshot.cache.items():
        data = metadata[obj_key]
        score = (current_access_pattern['recency_weight'] * (cache_snapshot.access_count - data['last_access_time']) + 
                 current_access_pattern['frequency_weight'] * (data['access_count']))
        
        if score < DYNAMIC_THRESHOLD_SCORE and score < min_score:
            min_score = score
            candid_obj_key = obj_key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency counter, recency, and the timestamp of last access for the corresponding cache line.
    It refines the estimated future access pattern and adjusts the dynamic threshold score based on the updated access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    if obj.key in metadata:
        data = metadata[obj.key]
        data['access_count'] += 1
        data['last_access_time'] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency counter, recency, and the timestamp of last access for the new cache line.
    It sets an initial estimated future access pattern based on historical data and recalculates the dynamic threshold score.
    The current access pattern is updated to reflect the new insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Initialize metadata for new object
    metadata[obj.key] = {
        'access_count': 1,
        'last_access_time': cache_snapshot.access_count,
        'recency': cache_snapshot.access_count,
        'future_access_pattern': None,  # Placeholder for future pattern estimation
    }

    # Adjust dynamic threshold score based on historical data (simple implementation)
    recalculate_dynamic_threshold()

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy resets the metadata for the evicted cache line,
    including clearing the access frequency counter, timestamp of last access, recency, and estimated future access pattern.
    It recalculates the dynamic threshold score and updates the current access pattern to ensure the most suitable eviction strategy is selected for future decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in metadata:
        del metadata[evicted_obj.key]

    recalculate_dynamic_threshold()

def recalculate_dynamic_threshold():
    global DYNAMIC_THRESHOLD_SCORE
    if metadata:
        avg_access_count = sum(data['access_count'] for data in metadata.values()) / len(metadata)
        avg_recency = sum(data['recency'] for data in metadata.values()) / len(metadata)
        DYNAMIC_THRESHOLD_SCORE = int(avg_access_count + avg_recency)