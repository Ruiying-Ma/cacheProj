# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
DEFAULT_DEPENDENCY_SCORE = 1

# Put the metadata specifically maintained by the policy below. The policy maintains a hierarchical structure of metadata, including access frequency counters, timestamps of last access, estimated future access patterns, and dependency scores for each cache line at different levels of the cache hierarchy. It also tracks a combined score that integrates access frequency, recency, and dependency score.
metadata = {
    'access_frequency': collections.defaultdict(int),
    'last_access_time': collections.defaultdict(int),
    'estimated_future_access': collections.defaultdict(int),
    'dependency_score': collections.defaultdict(lambda: DEFAULT_DEPENDENCY_SCORE),
    'combined_score': collections.defaultdict(float)
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy traverses the cache hierarchy starting from the lowest level, using a combination of LRU, LFU, and the combined score to identify potential eviction candidates. It then uses estimated future access patterns to select the final eviction victim.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_score = float('inf')
    for key in cache_snapshot.cache:
        combined_score = metadata['combined_score'][key]
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency counter, updates the timestamp of last access, refines the estimated future access pattern, recalculates the dependency score if necessary, and updates the combined score for the corresponding cache line.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    obj_key = obj.key
    metadata['access_frequency'][obj_key] += 1
    metadata['last_access_time'][obj_key] = cache_snapshot.access_count
    metadata['estimated_future_access'][obj_key] = metadata['access_frequency'][obj_key] + 1  # Example heuristic
    metadata['combined_score'][obj_key] = (metadata['access_frequency'][obj_key] +
                                           (cache_snapshot.access_count - metadata['last_access_time'][obj_key]) +
                                           metadata['dependency_score'][obj_key])

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency counter to 1, sets the timestamp of last access to the current time, sets an initial estimated future access pattern based on historical data, calculates the dependency score, and computes the combined score for the new cache line.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    obj_key = obj.key
    metadata['access_frequency'][obj_key] = 1
    metadata['last_access_time'][obj_key] = cache_snapshot.access_count
    metadata['estimated_future_access'][obj_key] = 2  # Assumed initial future access pattern
    metadata['dependency_score'][obj_key] = DEFAULT_DEPENDENCY_SCORE
    metadata['combined_score'][obj_key] = (metadata['access_frequency'][obj_key] +
                                           (cache_snapshot.access_count - metadata['last_access_time'][obj_key]) +
                                           metadata['dependency_score'][obj_key])

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy resets the metadata for the evicted cache line, including clearing the access frequency counter, timestamp of last access, estimated future access pattern, and dependency score. It also adjusts the hierarchical structure and updates the dependency scores and combined scores of the remaining items.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_obj_key = evicted_obj.key
    if evicted_obj_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_obj_key]
    if evicted_obj_key in metadata['last_access_time']:
        del metadata['last_access_time'][evicted_obj_key]
    if evicted_obj_key in metadata['estimated_future_access']:
        del metadata['estimated_future_access'][evicted_obj_key]
    if evicted_obj_key in metadata['dependency_score']:
        del metadata['dependency_score'][evicted_obj_key]
    if evicted_obj_key in metadata['combined_score']:
        del metadata['combined_score'][evicted_obj_key]

    # Adjusting the hierarchical structure and updating the scores of remaining items can be complex,
    # here we assume it involves recalculating the combined scores for all remaining items
    
    for key in cache_snapshot.cache:
        metadata['combined_score'][key] = (metadata['access_frequency'][key] +
                                           (cache_snapshot.access_count - metadata['last_access_time'][key]) +
                                           metadata['dependency_score'][key])