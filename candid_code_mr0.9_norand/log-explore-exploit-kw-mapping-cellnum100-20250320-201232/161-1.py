# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import numpy as np

# Put tunable constant parameters below

# Parameters for ML model, statistical model, decision tree thresholds.
ML_WEIGHT = 0.4
STAT_WEIGHT = 0.3
DECISION_TREE_WEIGHT = 0.2
PROXIMITY_MATRIX_WEIGHT = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains a machine learning model for predicting future access patterns, a statistical model for calculating access likelihood, a decision tree for conditional checks, and a proximity matrix for access frequency in relation to recent accesses.
future_access_model = {}
access_likelihood = {}
decision_tree = {}
proximity_matrix = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first predicting future access patterns using the ML model, then calculating the likelihood of future access using historical data, followed by a decision tree to evaluate access frequency, recency, and data importance, and finally considering the proximity matrix to ensure items accessed together are retained.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        model_score = future_access_model.get(key, 0)
        stat_score = access_likelihood.get(key, 0)
        decision_tree_score = decision_tree.get(key, 0)
        proximity_score = proximity_matrix.get(key, 0)
        
        total_score = (ML_WEIGHT * model_score +
                       STAT_WEIGHT * stat_score +
                       DECISION_TREE_WEIGHT * decision_tree_score +
                       PROXIMITY_MATRIX_WEIGHT * proximity_score)
        
        if total_score < min_score:
            min_score = total_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the ML model with the new access data, recalculates the likelihood of future access for the accessed item, updates the decision tree with the latest access frequency and recency, and adjusts the proximity matrix to reflect the new access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    
    # Update ML model
    future_access_model[key] = future_access_model.get(key, 0) + 1
    
    # Update access likelihood
    access_likelihood[key] = access_likelihood.get(key, 0) + 1
    
    # Update decision tree
    decision_tree[key] = decision_tree.get(key, 0) + 1
    
    # Adjust proximity matrix
    for recent_key in cache_snapshot.cache.keys():
        if recent_key != key:
            proximity_matrix[(recent_key, key)] = proximity_matrix.get((recent_key, key), 0) + 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy updates the ML model with the new object data, recalculates the likelihood of future access for all items, updates the decision tree to include the new object, and adjusts the proximity matrix to incorporate the new access relationships.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    
    # Update ML model
    future_access_model[key] = 1
    
    # Recalculate likelihood for all items
    for k in cache_snapshot.cache.keys():
        access_likelihood[k] = access_likelihood.get(k, 0) + 1
    
    # Update decision tree
    decision_tree[key] = 1
    
    # Adjust proximity matrix
    for recent_key in cache_snapshot.cache.keys():
        if recent_key != key:
            proximity_matrix[(recent_key, key)] = 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy updates the ML model to remove the evicted item, recalculates the likelihood of future access for the remaining items, updates the decision tree to exclude the evicted item, and adjusts the proximity matrix to remove the evicted item's access relationships.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    # Remove evicted item from ML model
    if evicted_key in future_access_model:
        del future_access_model[evicted_key]
    
    # Recalculate likelihood for remaining items
    for k in cache_snapshot.cache.keys():
        access_likelihood[k] = access_likelihood.get(k, 0)
    
    # Remove evicted item from decision tree
    if evicted_key in decision_tree:
        del decision_tree[evicted_key]
    
    # Adjust proximity matrix
    to_remove = [pair for pair in proximity_matrix.keys() if evicted_key in pair]
    for pair in to_remove:
        del proximity_matrix[pair]