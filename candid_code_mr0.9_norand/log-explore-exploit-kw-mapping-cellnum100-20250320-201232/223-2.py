# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
ALPHA = 0.5  # weight for access frequency
BETA = 0.2  # weight for recency of access
GAMMA = 0.1  # weight for size
DELTA = 0.1  # weight for mediation role
EPSILON = 0.1  # weight for security validation timestamp

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached object, including access frequency, recency of access, data size, role in mediating access, and a security validation timestamp.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the eviction victim by evaluating a weighted score based on low access frequency, low recency of access, larger data size, lower mediation role, and older security validation timestamp.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        freq = metadata[key]['access_frequency']
        recency = cache_snapshot.access_count - metadata[key]['recency']
        obj_size = cached_obj.size
        role = metadata[key]['mediation_role']
        security_ts = cache_snapshot.access_count - metadata[key]['security_validation_ts']
        
        score = (ALPHA * freq + BETA * recency + GAMMA * obj_size + DELTA * role + EPSILON * security_ts)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the recency of access timestamp, and refreshes the security validation timestamp if applicable.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    if key in metadata:
        metadata[key]['access_frequency'] += 1
        metadata[key]['recency'] = cache_snapshot.access_count
        metadata[key]['security_validation_ts'] = cache_snapshot.access_count  # refresh security ts

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency to 1, sets the recency of access to the current time, records the data size, assigns a mediation role score, and sets the security validation timestamp to the current time.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    obj_key = obj.key
    metadata[obj_key] = {
        'access_frequency': 1,
        'recency': cache_snapshot.access_count,
        'data_size': obj.size,
        'mediation_role': 1,  # Default role score, can be changed
        'security_validation_ts': cache_snapshot.access_count
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes all associated metadata for the evicted object and may adjust the mediation role scores of remaining objects if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]

    # Adjust mediation role scores if necessary (Example logic)
    for key in cache_snapshot.cache.keys():
        if key != obj.key:
            metadata[key]['mediation_role'] += 1  # Just an example of adjustment