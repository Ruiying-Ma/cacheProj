# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below
ALPHA = 0.5
BETA = 0.1
GAMMA = 0.1
DELTA = 0.3

# Put the metadata specifically maintained by the policy below. The policy maintains an importance score, access frequency, recency of access, and a predicted future access score for each cached object. It also keeps track of overall access patterns and workload characteristics.
importance = {}
frequency = defaultdict(int)
recency = {}
predicted_future_access = {}
overall_access_patterns = {}
workload_characteristics = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score for each cached object, which is a weighted sum of its importance score, access frequency, recency of access, and predicted future access score. The object with the lowest composite score is chosen for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_composite_score = float('inf')

    for obj_key, cached_obj in cache_snapshot.cache.items():

        composite_score = (
            ALPHA * importance[obj_key] +
            BETA * frequency[obj_key] +
            GAMMA * (cache_snapshot.access_count - recency[obj_key]) +
            DELTA * predicted_future_access[obj_key]
        )

        if composite_score < lowest_composite_score:
            lowest_composite_score = composite_score
            candid_obj_key = obj_key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and recency of access for the hit object. It also recalculates the predicted future access score based on the updated access patterns and adjusts the importance score if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    frequency[obj.key] += 1
    recency[obj.key] = cache_snapshot.access_count

    # Update predicted future access score based on new access pattern
    predicted_future_access[obj.key] = frequency[obj.key] / (cache_snapshot.access_count - recency[obj.key] + 1)
    
    # Adjust importance if necessary (pseudo-code, can be customized)
    importance[obj.key] = importance[obj.key] * (1 + 0.01)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency of access, and predicted future access score. It also updates the overall access patterns and workload characteristics to reflect the new insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    importance[obj.key] = 1  # initial importance score
    frequency[obj.key] = 1   # initial frequency
    recency[obj.key] = cache_snapshot.access_count  # current time as last access time
    predicted_future_access[obj.key] = 1  # initial prediction

    # Update overall access patterns and workload characteristics based on the new object
    overall_access_patterns[obj.key] = frequency[obj.key]
    workload_characteristics[obj.key] = recency[obj.key]

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes its metadata and recalculates the overall access patterns and workload characteristics to account for the eviction. It also adjusts the importance scores of remaining objects if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Remove metadata of evicted object
    del importance[evicted_obj.key]
    del frequency[evicted_obj.key]
    del recency[evicted_obj.key]
    del predicted_future_access[evicted_obj.key]
    del overall_access_patterns[evicted_obj.key]
    del workload_characteristics[evicted_obj.key]

    # Recalculate importance scores of remaining objects if necessary
    for key in cache_snapshot.cache:
        importance[key] = importance[key] * (1 - 0.01)