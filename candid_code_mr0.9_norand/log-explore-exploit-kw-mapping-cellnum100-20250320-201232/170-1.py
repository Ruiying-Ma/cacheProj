# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

from collections import OrderedDict, defaultdict

# Put tunable constant parameters below
T1_CAPACITY_RATIO = 0.5  # Ratio of cache capacity assigned to T1
T2_CAPACITY_RATIO = 0.5  # Ratio of cache capacity assigned to T2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for access frequency, recency, partition-specific data, and workload pattern. It also tracks the current timestamp for each object and the capacities of two LRU queues (T1 and T2) and two FIFO ghost queues (B1 and B2).
T1 = OrderedDict()  # LRU queue T1
T2 = OrderedDict()  # LRU queue T2
B1 = OrderedDict()  # FIFO ghost queue B1
B2 = OrderedDict()  # FIFO ghost queue B2
access_time = {}  # Dictionary to track access time for items
access_frequency = defaultdict(int)  # Dictionary to track access frequency for items

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy determines the current workload pattern and selects the eviction victim based on the least recently used or least frequently used item from the appropriate partition. If T1 is not empty, it evicts from T1; otherwise, it evicts from T2. The evicted object is moved to the corresponding ghost queue (B1 or B2).
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # If T1 is not empty, evict from T1
    if T1:
        candid_obj_key = next(iter(T1))
        B1[candid_obj_key] = T1.pop(candid_obj_key)
    else:
        candid_obj_key = next(iter(T2))
        B2[candid_obj_key] = T2.pop(candid_obj_key)
        
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency, recency, and timestamp metadata for the accessed item. It moves the item to the most-recently-used end of T2 and adjusts the workload pattern metadata to reflect the current access behavior.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    obj_key = obj.key
    if obj_key in T1:
        T1.pop(obj_key)
        T2[obj_key] = obj
    elif obj_key in T2:
        T2.move_to_end(obj_key)
        
    access_time[obj_key] = cache_snapshot.access_count
    access_frequency[obj_key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy updates the access frequency, recency, and timestamp metadata for the new item. If the object was in B1 or B2, it is placed at the most-recently-used end of T2; otherwise, it is placed at the most-recently-used end of T1. The policy also updates the partition-specific data to ensure balanced cache management.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    obj_key = obj.key
    if obj_key in B1:
        B1.pop(obj_key)
        T2[obj_key] = obj
    elif obj_key in B2:
        B2.pop(obj_key)
        T2[obj_key] = obj
    else:
        T1[obj_key] = obj
        
    access_time[obj_key] = cache_snapshot.access_count
    access_frequency[obj_key] += 1

    # Ensure capacity constraints
    current_t1_size = sum(item.size for item in T1.values())
    current_t2_size = sum(item.size for item in T2.values())
    t1_capacity = int(T1_CAPACITY_RATIO * cache_snapshot.capacity)
    t2_capacity = int(T2_CAPACITY_RATIO * cache_snapshot.capacity)

    while current_t1_size > t1_capacity:
        removed_obj_key, removed_obj = T1.popitem(last=False)
        B1[removed_obj_key] = removed_obj
        current_t1_size -= removed_obj.size

    while current_t2_size > t2_capacity:
        removed_obj_key, removed_obj = T2.popitem(last=False)
        B2[removed_obj_key] = removed_obj
        current_t2_size -= removed_obj.size

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy updates the access frequency, recency, and timestamp metadata to remove the evicted item. The evicted object is moved to the rear of the corresponding ghost queue (B1 or B2). The policy adjusts the workload pattern and partition-specific data to maintain optimal performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_obj_key = evicted_obj.key
    if evicted_obj_key in T1:
        T1.pop(evicted_obj_key)
        B1[evicted_obj_key] = evicted_obj
    elif evicted_obj_key in T2:
        T2.pop(evicted_obj_key)
        B2[evicted_obj_key] = evicted_obj

    # Remove metadata of evicted object
    if evicted_obj_key in access_time:
        del access_time[evicted_obj_key]
    if evicted_obj_key in access_frequency:
        del access_frequency[evicted_obj_key]

    # Adjust capacities if needed
    t1_capacity = int(T1_CAPACITY_RATIO * cache_snapshot.capacity)
    t2_capacity = int(T2_CAPACITY_RATIO * cache_snapshot.capacity)
    while len(B1) > t1_capacity:
        B1.popitem(last=False)
    while len(B2) > t2_capacity:
        B2.popitem(last=False)