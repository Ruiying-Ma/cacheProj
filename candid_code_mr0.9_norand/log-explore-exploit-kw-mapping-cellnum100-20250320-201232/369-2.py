# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
TUNABLE_CONSTANT_A = 0.5
TUNABLE_CONSTANT_B = 0.5

# Put the metadata specifically maintained by the policy below. 
# Each cache entry maintains a fitness score, access frequency, recency of access, and a shared global usage statistic updated by all agents.
metadata = {}
global_usage_statistic = {
    'total_freq': 0,
    'total_recency': 0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the eviction victim based on the lowest fitness score, which is calculated using a combination of access frequency, recency, and global usage statistics. Probabilistic adjustments are made to introduce variability and adaptability.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_fitness = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        if key in metadata:
            freq = metadata[key]['frequency']
            recency = metadata[key]['recency']
            fitness = TUNABLE_CONSTANT_A * freq + TUNABLE_CONSTANT_B * (cache_snapshot.access_count - recency)
            if fitness < lowest_fitness:
                lowest_fitness = fitness
                candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the accessed entry are updated. The fitness score is recalculated, and the global usage statistic is adjusted to reflect the recent access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    if key in metadata:
        metadata[key]['frequency'] += 1
        metadata[key]['recency'] = cache_snapshot.access_count
        global_usage_statistic['total_freq'] += 1
        global_usage_statistic['total_recency'] += cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its initial fitness score is set based on default values of access frequency and recency. The global usage statistic is updated to include the new entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    initial_recency = cache_snapshot.access_count
    metadata[key] = {
        'frequency': 1,
        'recency': initial_recency
    }
    global_usage_statistic['total_freq'] += 1
    global_usage_statistic['total_recency'] += initial_recency

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the global usage statistic is updated to remove the evicted entry's contribution. The fitness scores of remaining entries are recalculated to reflect the new cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        global_usage_statistic['total_freq'] -= metadata[evicted_key]['frequency']
        global_usage_statistic['total_recency'] -= metadata[evicted_key]['recency']
        del metadata[evicted_key]

    for key in cache_snapshot.cache:
        if key in metadata:
            metadata[key]['fitness'] = TUNABLE_CONSTANT_A * metadata[key]['frequency'] + TUNABLE_CONSTANT_B * (cache_snapshot.access_count - metadata[key]['recency'])