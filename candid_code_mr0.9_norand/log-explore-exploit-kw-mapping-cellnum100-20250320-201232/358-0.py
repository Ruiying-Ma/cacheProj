# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict, deque
import math

# Put tunable constant parameters below
WEIGHTS = {
    'access_frequency': 1,
    'recency_timestamp': -1e-6,  # with negative weight to favor more recent accesses
    'insertion_time': -1e-6,
    'locality_score': 1,
    'priority_score': 1,
    'connection_score': 1,
}

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency timestamp, insertion time, locality score, priority score, connection score, and a graph with nodes and edges representing cached items and access patterns. It also uses FIFO and LRU queues for organization.
metadata = {
    'access_frequency': defaultdict(int),
    'recency_timestamp': {},
    'insertion_time': {},
    'locality_score': {},
    'priority_score': {},
    'connection_score': {},
    'graph': defaultdict(set),
    'FIFO_queue': deque(),
    'LRU_queue': deque()
}

def calculate_combined_weighted_score(key):
    score = (WEIGHTS['access_frequency'] * metadata['access_frequency'][key] +
             WEIGHTS['recency_timestamp'] * metadata['recency_timestamp'][key] +
             WEIGHTS['insertion_time'] * metadata['insertion_time'][key] +
             WEIGHTS['locality_score'] * metadata['locality_score'][key] +
             WEIGHTS['priority_score'] * metadata['priority_score'][key] +
             WEIGHTS['connection_score'] * metadata['connection_score'][key])
    return score

def evict(cache_snapshot, obj):
    candid_obj_key = None
    # Your code below
    min_score = math.inf
    for key in cache_snapshot.cache:
        score = calculate_combined_weighted_score(key)
        if score < min_score:
            min_score = score
            candid_obj_key = key
        elif score == min_score and metadata['recency_timestamp'][key] < metadata['recency_timestamp'][candid_obj_key]:
            candid_obj_key = key
    
    # Consider FIFO and LRU queues. Simplified for now; typically more complex.
    # Here we assume FIFO_queue for simplicity.
    if candid_obj_key:
        if candid_obj_key in metadata['FIFO_queue']:
            metadata['FIFO_queue'].remove(candid_obj_key)
        elif candid_obj_key in metadata['LRU_queue']:
            metadata['LRU_queue'].remove(candid_obj_key)
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency_timestamp'][key] = cache_snapshot.access_count
    metadata['locality_score'][key] += 1  # Placeholder for actual locality score calculation
    metadata['priority_score'][key] += 1  # Placeholder for actual priority score calculation
    metadata['connection_score'][key] += 1  # Placeholder for actual connection score calculation

def update_after_insert(cache_snapshot, obj):
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency_timestamp'][key] = cache_snapshot.access_count
    metadata['insertion_time'][key] = cache_snapshot.access_count
    metadata['locality_score'][key] = 1  # Placeholder for initial locality score
    metadata['priority_score'][key] = 1  # Placeholder for initial priority score
    metadata['connection_score'][key] = 1  # Placeholder for initial connection score
    metadata['FIFO_queue'].append(key)
    metadata['graph'][key] = set()

def update_after_evict(cache_snapshot, obj, evicted_obj):
    # Your code below
    key = evicted_obj.key
    del metadata['access_frequency'][key]
    del metadata['recency_timestamp'][key]
    del metadata['insertion_time'][key]
    del metadata['locality_score'][key]
    del metadata['priority_score'][key]
    del metadata['connection_score'][key]
    
    # Update graph by removing the node and associated edges
    for node in metadata['graph'].values():
        node.discard(key)
    del metadata['graph'][key]

    # Placeholder for recalculating connection scores
    for node in metadata['graph']:
        metadata['connection_score'][node] = len(metadata['graph'][node])
    
    # Placeholder for recalculating locality and priority scores
    for node in metadata['graph']:
        metadata['locality_score'][node] = 1  # Placeholder for actual locality score recalculation
        metadata['priority_score'][node] = 1  # Placeholder for actual priority score recalculation