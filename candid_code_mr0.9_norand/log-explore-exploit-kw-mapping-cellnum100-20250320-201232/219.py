# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import numpy as np

# Put tunable constant parameters below
LRU_WEIGHT = 0.4
LFU_WEIGHT = 0.4
MRU_WEIGHT = 0.2
RETRAIN_INTERVAL = 100

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency, and a machine learning model's prediction score for each cache entry. It also tracks the success rate of different eviction strategies (LRU, LFU, MRU) over time.
metadata = {
    'access_frequency': {},  # key -> frequency
    'recency': {},  # key -> last access time
    'ml_scores': {},  # key -> prediction score
    'strategy_success': {'LRU': 0, 'LFU': 0, 'MRU': 0},  # strategy -> success count
    'total_evictions': 0  # total number of evictions
}

# Dummy machine learning model for prediction scores
class DummyMLModel:
    def predict(self, key):
        return 0.5  # Dummy prediction score

    def retrain(self, data):
        pass  # Dummy retrain method

ml_model = DummyMLModel()

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy uses a weighted combination of LRU, LFU, and MRU strategies, dynamically adjusted based on their historical success rates. It also incorporates the machine learning model's prediction scores to prioritize eviction candidates with the lowest likelihood of future access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        lru_score = cache_snapshot.access_count - metadata['recency'][key]
        lfu_score = metadata['access_frequency'][key]
        mru_score = -metadata['recency'][key]
        ml_score = metadata['ml_scores'][key]

        combined_score = (LRU_WEIGHT * lru_score +
                          LFU_WEIGHT * lfu_score +
                          MRU_WEIGHT * mru_score +
                          ml_score)

        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency metadata for the accessed entry are updated. The machine learning model is also retrained periodically using the latest access patterns to improve prediction accuracy.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count

    if cache_snapshot.access_count % RETRAIN_INTERVAL == 0:
        ml_model.retrain(metadata)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata with default values for access frequency and recency. The machine learning model is updated with the new entry to refine its predictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['ml_scores'][key] = ml_model.predict(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy updates the success rates of the eviction strategies based on the accuracy of their predictions. The metadata for the evicted entry is removed, and the machine learning model is retrained if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['recency'][evicted_key]
    del metadata['ml_scores'][evicted_key]

    metadata['total_evictions'] += 1
    if metadata['total_evictions'] % RETRAIN_INTERVAL == 0:
        ml_model.retrain(metadata)