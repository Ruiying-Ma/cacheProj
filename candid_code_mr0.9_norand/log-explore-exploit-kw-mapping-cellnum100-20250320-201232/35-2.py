# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
GROUP_COUNT = 3

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry, including access frequency, last access time, and a group identifier. It also keeps global statistics on hit/miss rates and group access patterns.
entry_metadata = {}  # {obj.key: {"frequency": int, "last_access_time": int, "group_id": int}}
group_metadata = [{} for _ in range(GROUP_COUNT)]  # List of dictionaries for each group's objects
group_access_patterns = [0] * GROUP_COUNT  # To maintain access patterns for each group

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first identifying the least frequently accessed group based on collective access patterns. Within that group, it selects the least recently accessed entry for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    # Identify the least frequently accessed group
    least_frequent_group = min(range(GROUP_COUNT), key=lambda i: group_access_patterns[i])

    # Within that group, find the least recently accessed entry
    least_recent_time = float('inf')
    for key, metadata in group_metadata[least_frequent_group].items():
        if metadata["last_access_time"] < least_recent_time:
            least_recent_time = metadata["last_access_time"]
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and last access time for the accessed entry. It also updates the global hit rate statistics and adjusts the group access pattern data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    metadata = entry_metadata[obj.key]
    metadata["frequency"] += 1
    metadata["last_access_time"] = cache_snapshot.access_count
    
    group_access_patterns[metadata["group_id"]] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy assigns it to a group based on its access pattern. It initializes the access frequency and last access time metadata and updates the global miss rate statistics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    initial_group_id = min(range(GROUP_COUNT), key=lambda i: group_access_patterns[i])
    entry_metadata[obj.key] = {"frequency": 1, "last_access_time": cache_snapshot.access_count, "group_id": initial_group_id}
    group_metadata[initial_group_id][obj.key] = entry_metadata[obj.key]

    group_access_patterns[initial_group_id] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an entry, the policy updates the group access pattern data to reflect the removal. It also adjusts the global statistics on hit/miss rates and re-evaluates group associations if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_metadata = entry_metadata.pop(evicted_obj.key)
    group_metadata[evicted_metadata["group_id"]].pop(evicted_obj.key)
    
    group_access_patterns[evicted_metadata["group_id"]] -= evicted_metadata["frequency"]