# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
OVERFLOW_AREA_CAPACITY = 10

# Put the metadata specifically maintained by the policy below.
fifo_queue = []
access_frequency = {}
recency = {}
priority_level = {}
synchronization_status = {}
overflow_area = []

def calculate_priority_level(frequency, recency, current_time):
    # Example calculation assuming higher frequency and more recent accesses give higher priority
    return frequency + (current_time - recency)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on the lowest priority level, considering both access frequency and recency. If multiple items have the same priority, the least recently synchronized item is evicted first. The evicted item is removed from the front of the FIFO queue and moved to the overflow area.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    if not fifo_queue:
        return candid_obj_key

    # Find the object with the lowest priority level
    lowest_priority = float('inf')
    for key in fifo_queue:
        pl = priority_level[key]
        if pl < lowest_priority:
            lowest_priority = pl
            candid_obj_key = key

    for key in fifo_queue:
        if priority_level[key] == lowest_priority:
            if candid_obj_key is None or synchronization_status[key] < synchronization_status[candid_obj_key]:
                candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the accessed item are updated. The priority level is recalculated based on the new frequency and recency values. The synchronization status is also updated if applicable. No changes are made to the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    access_frequency[key] += 1
    recency[key] = cache_snapshot.access_count
    priority_level[key] = calculate_priority_level(access_frequency[key], recency[key], cache_snapshot.access_count)
    synchronization_status[key] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its access frequency is initialized, and its recency is set to the current time. The priority level is calculated based on these initial values. The synchronization status is set, and the overflow area is checked for any recent evictions of the same item. The inserted object is placed at the rear of the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    access_frequency[key] = 1
    recency[key] = cache_snapshot.access_count
    priority_level[key] = calculate_priority_level(access_frequency[key], recency[key], cache_snapshot.access_count)
    synchronization_status[key] = cache_snapshot.access_count
    fifo_queue.append(key)

    # Check overflow area for recently evicted same item
    for evicted_item in overflow_area:
        if evicted_item['key'] == key:
            access_frequency[key] = evicted_item['access_frequency']
            recency[key] = evicted_item['recency']
            priority_level[key] = calculate_priority_level(access_frequency[key], recency[key], cache_snapshot.access_count)
            synchronization_status[key] = evicted_item['synchronization_status']
            overflow_area.remove(evicted_item)
            break

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, its metadata is moved to the overflow area, including its access frequency, recency, priority level, and synchronization status. The evicted item is removed from the front of the FIFO queue. The overflow area is managed to ensure it does not exceed a predefined size, evicting the oldest items if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    key = evicted_obj.key
    evicted_info = {
        'key': key,
        'access_frequency': access_frequency.pop(key, None),
        'recency': recency.pop(key, None),
        'priority_level': priority_level.pop(key, None),
        'synchronization_status': synchronization_status.pop(key, None)
    }
    fifo_queue.remove(key)
    overflow_area.append(evicted_info)

    # Ensure overflow area does not exceed a predefined size
    if len(overflow_area) > OVERFLOW_AREA_CAPACITY:
        overflow_area.pop(0)