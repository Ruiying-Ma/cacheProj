# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import deque, defaultdict
import heapq

# Put tunable constant parameters below
PATTERN_RECOGNITION_LENGTH = 5

# Put the metadata specifically maintained by the policy below. The policy maintains multiple layers of metadata: a recency list for LRU, a frequency counter for LFU, a random eviction list, and a pattern recognition module that tracks access sequences and predicts future usage.
recency_list = deque()  # For LRU
frequency_counter = defaultdict(int)  # For LFU
random_eviction_list = []  # Maintain a list of keys for random eviction
access_patterns = defaultdict(list)  # For pattern recognition
access_sequence = []  # Track the access sequence

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first checks the pattern recognition module to predict future usage. If no clear prediction is available, it evicts based on a sequence of criteria: least recently used (LRU), then least frequently used (LFU), and finally a random choice if needed.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None

    # Check pattern recognition for future usage prediction
    future_usage = defaultdict(int)
    for index, key in enumerate(access_sequence):
        if cache_snapshot.access_count - index <= PATTERN_RECOGNITION_LENGTH:
            for future_obj in access_patterns[key]:
                future_usage[future_obj] += 1

    cache_keys = set(cache_snapshot.cache.keys())
    future_access_sorted = sorted((future_usage[key], key) for key in cache_keys)
    if future_access_sorted:
        for (_, key) in future_access_sorted:
            if future_usage[key] == 0:
                candid_obj_key = key
                break

    if candid_obj_key is None:
        # Fallback on LRU eviction
        if recency_list:
            candid_obj_key = recency_list.pop()

    if candid_obj_key is None:
        # Fallback on LFU eviction
        if frequency_counter:
            candid_obj_key = min(frequency_counter, key=frequency_counter.get)

    if candid_obj_key is None:
        # Fallback on random eviction (deterministic due to index based)
        if random_eviction_list:
            candid_obj_key = random_eviction_list[-1]

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the recency list to move the accessed item to the front, increments the frequency counter for the item, and updates the pattern recognition module with the new access sequence.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    
    if key in recency_list:
        recency_list.remove(key)
    recency_list.appendleft(key)
    
    frequency_counter[key] += 1

    access_sequence.append(key)
    if len(access_sequence) > PATTERN_RECOGNITION_LENGTH:
        access_sequence.pop(0)
    if len(access_patterns[key]) >= PATTERN_RECOGNITION_LENGTH:
        access_patterns[key].pop(0)
    access_patterns[key].append(cache_snapshot.access_count)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy adds the item to the recency list, initializes its frequency counter, includes it in the random eviction list, and updates the pattern recognition module with the new access sequence.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key

    recency_list.appendleft(key)
    frequency_counter[key] = 1
    random_eviction_list.append(key)

    access_sequence.append(key)
    if len(access_sequence) > PATTERN_RECOGNITION_LENGTH:
        access_sequence.pop(0)
    if len(access_patterns[key]) >= PATTERN_RECOGNITION_LENGTH:
        access_patterns[key].pop(0)
    access_patterns[key].append(cache_snapshot.access_count)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy removes the item from the recency list, deletes its frequency counter, removes it from the random eviction list, and updates the pattern recognition module to reflect the change in the cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key

    if key in recency_list:
        recency_list.remove(key)
    if key in frequency_counter:
        del frequency_counter[key]
    if key in random_eviction_list:
        random_eviction_list.remove(key)

    # Also remove the key from pattern recognition module
    if key in access_patterns:
        del access_patterns[key]