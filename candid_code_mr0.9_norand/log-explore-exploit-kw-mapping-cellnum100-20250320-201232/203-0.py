# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
DEFAULT_SENSITIVITY = 1
DEFAULT_VALIDATION = 1
DEFAULT_PRIORITY = 1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency, priority score, relationship strength score, sensitivity level, validation score, load metrics, hierarchical structure for access paths, discovery timestamps, and partition information.
metadata = {
    'access_frequency': {},
    'recency': {},
    'priority_score': {},
    'relationship_strength_score': {},
    'sensitivity_level': {},
    'validation_score': {},
    'load_metrics': {},
    'discovery_timestamps': {},
    'partition_information': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy identifies the partition with the lowest overall priority and the segment with the highest load within that partition. It then selects the item with the lowest priority score, considering relationship strength score, validation score, and recency in case of ties.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below

    partitions = {}
    for key, item in cache_snapshot.cache.items():
        partition = metadata['partition_information'].get(key, 0)
        if partition not in partitions:
            partitions[partition] = []
        partitions[partition].append(item)

    # Find the partition with the lowest overall priority
    lowest_priority_partition = min(partitions, key=lambda part: sum(metadata['priority_score'].get(item.key, DEFAULT_PRIORITY) for item in partitions[part]))

    # Within that partition, find the segment with the highest load
    highest_load_segment = max(partitions[lowest_priority_partition], key=lambda item: metadata['load_metrics'].get(item.key, 0))

    # Select the object with the lowest priority score, considering relationships, validation, and recency
    candid_obj_key = min(partitions[lowest_priority_partition], key=lambda item: (
        metadata['priority_score'].get(item.key, DEFAULT_PRIORITY),
        -metadata['relationship_strength_score'].get(item.key, 0),
        -metadata['validation_score'].get(item.key, 0),
        -metadata['recency'].get(item.key, 0)
    )).key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates access frequency, recency, priority score, relationship strength score, validation score, and load metrics. It also updates the hierarchical structure and discovery timestamp, and may promote the item to a higher level.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    obj_key = obj.key
    current_time = cache_snapshot.access_count

    # Update access frequency
    metadata['access_frequency'][obj_key] = metadata['access_frequency'].get(obj_key, 0) + 1

    # Update recency
    metadata['recency'][obj_key] = current_time

    # Update priority score
    metadata['priority_score'][obj_key] = metadata['priority_score'].get(obj_key, DEFAULT_PRIORITY) + 1

    # Update relationship strength score
    metadata['relationship_strength_score'][obj_key] = metadata['relationship_strength_score'].get(obj_key, 0) + 1

    # Update validation score
    metadata['validation_score'][obj_key] = metadata['validation_score'].get(obj_key, DEFAULT_VALIDATION) + 1

    # Update load metrics
    metadata['load_metrics'][obj_key] = metadata['load_metrics'].get(obj_key, 0) + 1

    # Update discovery timestamp
    metadata['discovery_timestamps'][obj_key] = current_time

    # Update hierarchical structure and potentially promote item
    metadata['partition_information'][obj_key] = metadata['partition_information'].get(obj_key, 0) + 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes access frequency, recency, priority score, relationship strength score, sensitivity level, and validation score. It updates load metrics, hierarchical structure, and discovery timestamp, placing the item in the appropriate level and partition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    obj_key = obj.key
    current_time = cache_snapshot.access_count

    # Initialize access frequency
    metadata['access_frequency'][obj_key] = 1

    # Initialize recency
    metadata['recency'][obj_key] = current_time

    # Initialize priority score
    metadata['priority_score'][obj_key] = DEFAULT_PRIORITY

    # Initialize relationship strength score
    metadata['relationship_strength_score'][obj_key] = 0

    # Initialize sensitivity level
    metadata['sensitivity_level'][obj_key] = DEFAULT_SENSITIVITY

    # Initialize validation score
    metadata['validation_score'][obj_key] = DEFAULT_VALIDATION

    # Initialize load metrics
    metadata['load_metrics'][obj_key] = 1

    # Initialize hierarchical structure and discovery timestamp
    metadata['discovery_timestamps'][obj_key] = current_time
    metadata['partition_information'][obj_key] = 0

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the evicted item's metadata, adjusts relationship strength scores, validation scores, and load metrics. It updates the hierarchical structure and may promote an item from a lower level to fill the vacancy.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_obj_key = evicted_obj.key

    # Remove evicted item's metadata
    for key in ['access_frequency', 'recency', 'priority_score', 'relationship_strength_score', 'sensitivity_level', 'validation_score', 'load_metrics', 'discovery_timestamps', 'partition_information']:
        if evicted_obj_key in metadata[key]:
            del metadata[key][evicted_obj_key]

    # Adjust relationship strength scores, validation scores, and load metrics
    for other_key in cache_snapshot.cache:
        if other_key != evicted_obj_key:
            metadata['relationship_strength_score'][other_key] = max(metadata['relationship_strength_score'].get(other_key, 0) - 1, 0)
            metadata['validation_score'][other_key] = max(metadata['validation_score'].get(other_key, 0) - 1, 0)
            metadata['load_metrics'][other_key] = max(metadata['load_metrics'].get(other_key, 0) - 1, 0)

    # Update hierarchical structure and may promote an item
    for other_key in cache_snapshot.cache:
        if metadata['partition_information'].get(other_key, 0) > 0:
            metadata['partition_information'][other_key] -= 1