# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
PRIORITY_WEIGHT_USAGE = 0.5
PRIORITY_WEIGHT_WAIT = 0.3
PRIORITY_WEIGHT_RECENT_ACCESS = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache item including usage frequency, last access time, insertion time, and a dynamic priority score based on system load and access patterns.
metadata = {
    'frequency': {},  # Usage frequency
    'last_access': {},  # Last access time
    'insertion_time': {},  # Time of insertion into the cache
    'priority_score': {}  # Dynamic priority score
}

def calculate_priority_score(obj_key, cache_snapshot):
    frequency = metadata['frequency'][obj_key]
    last_access = metadata['last_access'][obj_key]
    insertion_time = metadata['insertion_time'][obj_key]
    
    waiting_time = cache_snapshot.access_count - insertion_time
    recent_access = cache_snapshot.access_count - last_access
    
    priority_score = (PRIORITY_WEIGHT_USAGE * (1 / frequency) if frequency != 0 else math.inf) + \
                     (PRIORITY_WEIGHT_WAIT * waiting_time) + \
                     (PRIORITY_WEIGHT_RECENT_ACCESS * recent_access)
    
    return priority_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a priority score for each item, which is a weighted combination of its usage frequency, waiting time, and recent access patterns, with higher weights given to items with lower usage during high system load.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_priority = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        priority = calculate_priority_score(key, cache_snapshot)
        if priority < min_priority:
            min_priority = priority
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the item's last access time to the current time, increments its usage frequency, and recalculates its priority score based on the updated metadata and current system load.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    obj_key = obj.key
    metadata['last_access'][obj_key] = cache_snapshot.access_count
    metadata['frequency'][obj_key] += 1
    metadata['priority_score'][obj_key] = calculate_priority_score(obj_key, cache_snapshot)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy sets its insertion time and last access time to the current time, initializes its usage frequency to 1, and calculates its initial priority score considering the current system load and access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    obj_key = obj.key
    current_time = cache_snapshot.access_count
    metadata['insertion_time'][obj_key] = current_time
    metadata['last_access'][obj_key] = current_time
    metadata['frequency'][obj_key] = 1
    metadata['priority_score'][obj_key] = calculate_priority_score(obj_key, cache_snapshot)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy recalculates the priority scores of the remaining items to ensure they reflect the current system load and access patterns, and adjusts any global metadata related to system load and access frequency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    # Remove the metadata of the evicted object
    if evicted_key in metadata['frequency']:
        del metadata['frequency'][evicted_key]
        del metadata['last_access'][evicted_key]
        del metadata['insertion_time'][evicted_key]
        del metadata['priority_score'][evicted_key]

    # Recalculate the priority scores of the remaining items
    for key in cache_snapshot.cache:
        metadata['priority_score'][key] = calculate_priority_score(key, cache_snapshot)