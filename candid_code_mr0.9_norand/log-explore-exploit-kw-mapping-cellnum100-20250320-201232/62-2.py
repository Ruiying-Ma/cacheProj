# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
MAX_DEPENDENCY_COUNT = 3

# Put the metadata specifically maintained by the policy below. The policy maintains a dependency graph where nodes represent cached objects and edges represent dependencies between them. Each object also has an access frequency counter and a recency timestamp.
cache_metadata = {
    'access_frequency': {},  # Mapping from object key to frequency counter
    'recency_timestamp': {},  # Mapping from object key to the timestamp
    'dependencies': {},  # Mapping from object key to a set of dependent object keys
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates an eviction probability for each object based on its access frequency and recency. Objects with fewer dependencies have higher probabilities. A random selection is made based on these probabilities to choose the eviction victim.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        frequency = cache_metadata['access_frequency'][key]
        recency = cache_metadata['recency_timestamp'][key]
        dependency_count = len(cache_metadata['dependencies'].get(key, set()))
        
        score = frequency + recency * dependency_count  # Lower scores are more likely to be evicted
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency counter of the object is incremented, and its recency timestamp is updated to the current time. Dependencies are checked and updated if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    obj_key = obj.key
    current_time = cache_snapshot.access_count
    
    # Update frequency counter and recency timestamp
    cache_metadata['access_frequency'][obj_key] = cache_metadata['access_frequency'].get(obj_key, 0) + 1
    cache_metadata['recency_timestamp'][obj_key] = current_time
    
    # Update dependencies of related objects
    for key in cache_snapshot.cache:
        if key != obj_key:
            if obj_key in cache_metadata['dependencies'].get(key, set()):
                cache_metadata['dependencies'][key].remove(obj_key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its access frequency counter is initialized to 1, and its recency timestamp is set to the current time. Dependencies are established based on the context of the insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    obj_key = obj.key
    current_time = cache_snapshot.access_count
    
    # Initialize metadata for the new object
    cache_metadata['access_frequency'][obj_key] = 1
    cache_metadata['recency_timestamp'][obj_key] = current_time
    cache_metadata['dependencies'][obj_key] = set()
    
    # Establish dependencies based on context
    for key in cache_snapshot.cache:
        if key != obj_key and len(cache_metadata['dependencies'][key]) < MAX_DEPENDENCY_COUNT:
            cache_metadata['dependencies'][key].add(obj_key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the dependency graph is updated to remove the evicted object and its edges. The access frequency counters and recency timestamps of remaining objects are adjusted if they were dependent on the evicted object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    
    # Remove evicted object's metadata
    cache_metadata['access_frequency'].pop(evicted_key, None)
    cache_metadata['recency_timestamp'].pop(evicted_key, None)
    cache_metadata['dependencies'].pop(evicted_key, None)
    
    for key in cache_snapshot.cache:
        if evicted_key in cache_metadata['dependencies'].get(key, set()):
            cache_metadata['dependencies'][key].remove(evicted_key)