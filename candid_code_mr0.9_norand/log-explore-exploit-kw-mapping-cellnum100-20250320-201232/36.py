# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
LFU_WEIGHT = 0.5
LRU_WEIGHT = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains a mapping table that tracks the frequency (LFU) and recency (LRU) of access for each cached object, as well as dependency counts indicating how many other objects depend on each cached object.
metadata = {
    'frequency': {},  # LFU: {obj.key: access_count}
    'recency': {},    # LRU: {obj.key: last_access_time}
    'dependencies': {}  # {obj.key: dependency_count}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy dynamically chooses the eviction victim based on the current workload. It can switch between LRU and LFU strategies, and it prioritizes evicting items with the fewest dependencies to ensure that critical items remain in the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        frequency = metadata['frequency'].get(key, 0)
        recency = metadata['recency'].get(key, 0)
        dependencies = metadata['dependencies'].get(key, 0)
        
        # Calculate the score based on LFU and LRU weights
        score = LFU_WEIGHT * frequency + LRU_WEIGHT * (cache_snapshot.access_count - recency)
        
        # Prioritize items with fewer dependencies
        if dependencies == 0:
            score -= 1e6  # Large negative value to prioritize eviction
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the recency information (LRU) and increments the frequency count (LFU) for the accessed object. It also updates the dependency counts if the accessed object has dependencies.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['frequency'][key] = metadata['frequency'].get(key, 0) + 1
    metadata['recency'][key] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its recency and frequency metadata, and sets its dependency count based on the current state of the cache. It also updates the mapping table to include the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['dependencies'][key] = 0  # Initialize dependency count

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata from the mapping table and adjusts the dependency counts of any objects that depended on the evicted object. It also recalculates the overall strategy based on the current workload.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['frequency']:
        del metadata['frequency'][evicted_key]
    if evicted_key in metadata['recency']:
        del metadata['recency'][evicted_key]
    if evicted_key in metadata['dependencies']:
        del metadata['dependencies'][evicted_key]
    
    # Adjust dependency counts for other objects
    for key in metadata['dependencies']:
        if metadata['dependencies'][key] > 0:
            metadata['dependencies'][key] -= 1