# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ACCESS_WEIGHT = 1.0
RECENCY_WEIGHT = 1.0
SUBSET_SIZE = 5

# Put the metadata specifically maintained by the policy below. The policy maintains a cost score for each cached item, which is a combination of access frequency and recency. It also keeps a dynamic threshold for access frequency and recency, and a list of eviction strategies with their performance metrics.
cache_metadata = {
    'access_frequency': {},  # Dictionary to store access frequency of each key.
    'recency': {},           # Dictionary to store the last access time of each key.
    'cost': {},              # Dictionary to store the cost score of each key.
    'dynamic_threshold': 1.0,  # Starting dynamic threshold.
    'eviction_performance': {  # Tracking eviction strategies performance.
        'random_subset': {
            'evictions': 0,
            'hits': 0,
            'misses': 0,
        }
    }
}

def calculate_cost(key):
    '''
    Helper function to calculate the cost for a given key based on access frequency and recency.
    '''
    access_freq = cache_metadata['access_frequency'][key]
    recency = cache_metadata['recency'][key]
    return ACCESS_WEIGHT * access_freq + RECENCY_WEIGHT * recency

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects a subset of cache entries and evaluates their cost scores. Items with the highest cost scores are considered for eviction. If multiple items have similar scores, the policy uses the dynamic threshold to decide. The best-performing eviction strategy based on current workload characteristics is applied.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Select subset of cache entries
    subset_keys = list(cache_snapshot.cache.keys())[:SUBSET_SIZE]
    max_cost = -1

    # Evaluate their cost scores
    for key in subset_keys:
        cost = calculate_cost(key)
        if cost > max_cost:
            max_cost = cost
            candid_obj_key = key

    # Use dynamic threshold
    if cache_metadata['cost'][candid_obj_key] < cache_metadata['dynamic_threshold']:
        candid_obj_key = min(subset_keys, key=lambda k: calculate_cost(k))

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the item are updated, and its cost score is recalculated. The dynamic threshold is adjusted based on the new access patterns observed.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    cache_metadata['access_frequency'][key] += 1
    cache_metadata['recency'][key] = cache_snapshot.access_count
    cache_metadata['cost'][key] = calculate_cost(key)
    hits = cache_snapshot.hit_count
    cache_metadata['dynamic_threshold'] = (cache_metadata['dynamic_threshold'] * (hits - 1) + cache_metadata['cost'][key]) / hits

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its initial access frequency and recency are set, and its cost score is calculated. The dynamic threshold is updated to reflect the new state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    cache_metadata['access_frequency'][key] = 1
    cache_metadata['recency'][key] = cache_snapshot.access_count
    cache_metadata['cost'][key] = calculate_cost(key)
    hits = cache_snapshot.hit_count
    cache_metadata['dynamic_threshold'] = (cache_metadata['dynamic_threshold'] * cache_snapshot.miss_count + cache_metadata['cost'][key]) / (cache_snapshot.miss_count + 1)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy updates the performance metrics of the eviction strategy used. The dynamic threshold is recalibrated to ensure it remains effective for future evictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    del cache_metadata['access_frequency'][key]
    del cache_metadata['recency'][key]
    del cache_metadata['cost'][key]
    cache_metadata['eviction_performance']['random_subset']['evictions'] += 1
    cache_metadata['dynamic_threshold'] = sum(cache_metadata['cost'].values()) / len(cache_metadata['cost']) if cache_metadata['cost'] else 1.0