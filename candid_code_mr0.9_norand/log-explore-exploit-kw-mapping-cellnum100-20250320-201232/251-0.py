# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
GROUP_SIZE = 10  # Group size for combined access frequency calculation
AGE_WEIGHT = 0.5  # Weight for age in fitness score
TREND_WEIGHT = 0.3  # Weight for trend in fitness score
ACCESS_FREQ_WEIGHT = 0.2  # Weight for access frequency in fitness score

# Put the metadata specifically maintained by the policy below. The policy maintains a fitness score for each cache entry, which is calculated based on access frequency, recency of access, and a trend factor indicating whether the access frequency is increasing or decreasing. Additionally, it keeps a combined access frequency for groups of cache lines.
metadata = {
    'access_frequency': {},  # {key: frequency}
    'recency_of_access': {},  # {key: last_access_time}
    'trend_factor': {},  # {key: trend}
    'group_access_frequency': {}  # {group_id: combined_access_frequency}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the cache entry with the lowest fitness score for eviction. If multiple entries have the same fitness score, it considers the combined access frequency of groups of cache lines and evicts the entry from the group with the lowest combined access frequency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    def fitness_score(key):
        freq = metadata['access_frequency'].get(key, 0)
        recency = cache_snapshot.access_count - metadata['recency_of_access'].get(key, 0)
        trend = metadata['trend_factor'].get(key, 0)
        score = (ACCESS_FREQ_WEIGHT * freq) + (AGE_WEIGHT * recency) + (TREND_WEIGHT * trend)
        return score

    candid_obj_key = None
    min_fitness = float('inf')
    min_group_frequency = float('inf')

    for key in cache_snapshot.cache.keys():
        current_fitness = fitness_score(key)
        group_id = hash(key) % GROUP_SIZE
        group_freq = metadata['group_access_frequency'].get(group_id, 0)

        if current_fitness < min_fitness or (current_fitness == min_fitness and group_freq < min_group_frequency):
            min_fitness = current_fitness
            min_group_frequency = group_freq
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increases the access frequency and updates the recency of access for the hit entry. It also recalculates the trend factor based on the change in access frequency and updates the combined access frequency for the group to which the entry belongs.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_count = cache_snapshot.access_count
    previous_freq = metadata['access_frequency'].get(key, 0)
    new_freq = previous_freq + 1

    # Update access frequency and recency of access
    metadata['access_frequency'][key] = new_freq
    metadata['recency_of_access'][key] = current_count

    # Update trend factor
    if previous_freq > 0:
        trend = (new_freq - previous_freq) / previous_freq
    else:
        trend = new_freq
    metadata['trend_factor'][key] = trend

    # Update group access frequency
    group_id = hash(key) % GROUP_SIZE
    combined_freq = sum(metadata['access_frequency'][k] for k in cache_snapshot.cache 
                        if hash(k) % GROUP_SIZE == group_id)
    metadata['group_access_frequency'][group_id] = combined_freq

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its fitness score, access frequency, recency of access, and trend factor. It also updates the combined access frequency for the group to which the new entry is added.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_count = cache_snapshot.access_count

    # Initialize access frequency, recency of access, and trend factor
    metadata['access_frequency'][key] = 1
    metadata['recency_of_access'][key] = current_count
    metadata['trend_factor'][key] = 1  # Initial assumption

    # Update group access frequency
    group_id = hash(key) % GROUP_SIZE
    combined_freq = sum(metadata['access_frequency'][k] for k in cache_snapshot.cache 
                        if hash(k) % GROUP_SIZE == group_id)
    metadata['group_access_frequency'][group_id] = combined_freq

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the evicted entry's metadata and recalculates the combined access frequency for the group from which the entry was evicted. It also adjusts the fitness scores of remaining entries if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    group_id = hash(evicted_key) % GROUP_SIZE

    # Remove metadata of evicted entry
    metadata['access_frequency'].pop(evicted_key, None)
    metadata['recency_of_access'].pop(evicted_key, None)
    metadata['trend_factor'].pop(evicted_key, None)

    # Recalculate group access frequency
    combined_freq = sum(metadata['access_frequency'][k] for k in cache_snapshot.cache 
                        if hash(k) % GROUP_SIZE == group_id)
    metadata['group_access_frequency'][group_id] = combined_freq