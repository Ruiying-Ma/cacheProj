# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

from collections import deque

# Put tunable constant parameters below
GQ_CAPACITY = 10  # Tunable ghost queue capacity
B2_CAPACITY = 10  # Tunable ghost FIFO queue capacity

# Put the metadata specifically maintained by the policy below. The system maintains two queues in the cache: a FIFO queue SQ and an LRU queue T2. It also maintains two ghost FIFO queues outside the cache: GQ and B2. Each object in the cache has a frequency counter and a recency timestamp. The sum of SQ and T2 capacities equals the cache capacity. GQ and B2 have predetermined capacities.
SQ = deque()      # FIFO queue in cache
T2 = deque()      # LRU queue in cache
GQ = deque()      # Ghost FIFO queue outside cache
B2 = deque()      # Ghost FIFO queue outside cache
FREQ = dict()     # Frequency counter for objects in cache
RECENCY = dict()  # Recency timestamp for objects in cache

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    If SQ is full, move objects from SQ to T2 until an object with frequency less than 2 is found or T2 is full. If T2 is full, reduce the frequency of objects in T2 until an object with zero frequency is found. Evict the object with zero frequency from T2. If SQ is not full, evict the object from the front of SQ.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    cache_size = cache_snapshot.size
    max_cache_size = cache_snapshot.capacity

    while cache_size + obj.size > max_cache_size:
        # If SQ is full
        if sum(FREQ[o.key] for o in SQ) >= cache_size // 2:
            while True:
                move_obj = SQ.pop()
                T2.append(move_obj)
                if FREQ[move_obj.key] < 2 or sum(o.size for o in T2) > max_cache_size // 2:
                    break

        if sum(o.size for o in T2) > max_cache_size // 2:
            while len(T2) > 0:
                victim = T2.popleft()
                if FREQ[victim.key] > 0:
                    FREQ[victim.key] -= 1
                    T2.append(victim)
                else:
                    candid_obj_key = victim.key
                    break
        else:
            candid_obj_key = SQ.popleft().key

        cache_size = cache_snapshot.size - cache_snapshot.cache[candid_obj_key].size
        
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after a cache hit.
    Increase the frequency of the hit object by 1 if it is less than 3. Update its recency timestamp to the current time. Move the object to the most-recently-used end of T2 if it is in T2.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    if FREQ[obj.key] < 3:
        FREQ[obj.key] += 1
    RECENCY[obj.key] = cache_snapshot.access_count
    if obj in T2:
        T2.remove(obj)
        T2.append(obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    Set the inserted object's frequency to 1 and its recency timestamp to the current time. If the object was in GQ, move it to the rear of T2 and remove it from GQ. Otherwise, insert it at the rear of SQ. If the object was in B2, adjust the capacities of SQ and T2 accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    FREQ[obj.key] = 1
    RECENCY[obj.key] = cache_snapshot.access_count
    if obj in GQ:
        GQ.remove(obj)
        T2.append(obj)
    else:
        SQ.append(obj)
    if obj in B2:
        T2.append(SQ.popleft())
        B2.remove(obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Move the evicted object to the rear of GQ if it was from SQ, or to the rear of B2 if it was from T2. Remove the front object from GQ or B2 if they are full. The evicted object's frequency and recency are no longer tracked.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj in SQ:
        GQ.append(evicted_obj)
        if len(GQ) > GQ_CAPACITY:
            GQ.popleft()
    else:
        B2.append(evicted_obj)
        if len(B2) > B2_CAPACITY:
            B2.popleft()
    del FREQ[evicted_obj.key]
    del RECENCY[evicted_obj.key]