# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
MAX_OVERFLOW_SIZE = 50  # Maximum entries for overflow area

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, priority level, synchronization status, and a FIFO queue position for each cached object. It also includes an overflow area for recently evicted items.
cache_metadata = {}
fifo_queue = []
overflow_area = []

def calculate_priority(access_count, recency):
    return access_count / recency

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on the lowest priority level, considering both access frequency and recency. If multiple items have the same priority, the least recently synchronized item is evicted first. The FIFO pointer is used to traverse the cache cyclically to find the victim.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_priority = float('inf')
    least_recent_sync = float('inf')
    
    for key in fifo_queue:
        meta = cache_metadata[key]
        priority = meta['priority']
        if priority < min_priority:
            min_priority = priority
            least_recent_sync = meta['sync_status']
            candid_obj_key = key
        elif priority == min_priority and meta['sync_status'] < least_recent_sync:
            least_recent_sync = meta['sync_status']
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency is set to 1, recency is updated to the current time, and the priority level is recalculated based on the new frequency and recency values. The synchronization status is updated if applicable.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = cache_metadata[obj.key]
    meta['access_count'] = 1
    meta['recency'] = cache_snapshot.access_count
    meta['priority'] = calculate_priority(meta['access_count'], meta['recency'])
    meta['sync_status'] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its access frequency is set to 1, recency is set to the current time, and the priority level is calculated based on these initial values. The synchronization status is set, and the object is placed at the rear of the FIFO queue. The overflow area is checked for any recent evictions of the same item.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    cache_metadata[obj.key] = {
        'access_count': 1,
        'recency': cache_snapshot.access_count,
        'priority': calculate_priority(1, cache_snapshot.access_count),
        'sync_status': cache_snapshot.access_count
    }
    fifo_queue.append(obj.key)

    for evicted_obj in overflow_area:
        if evicted_obj['key'] == obj.key:
            overflow_area.remove(evicted_obj)
            break

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, its metadata, including access frequency, recency, priority level, and synchronization status, is moved to the overflow area. The FIFO queue is updated to remove the evicted object, and the remaining objects are shifted to fill the vacancy. The overflow area is managed to ensure it does not exceed a predefined size, evicting the oldest items if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_meta = cache_metadata.pop(evicted_obj.key)
    fifo_queue.remove(evicted_obj.key)

    overflow_data = {
        'key': evicted_obj.key,
        'access_count': evicted_meta['access_count'],
        'recency': evicted_meta['recency'],
        'priority': evicted_meta['priority'],
        'sync_status': evicted_meta['sync_status']
    }
    
    overflow_area.append(overflow_data)
    
    if len(overflow_area) > MAX_OVERFLOW_SIZE:
        overflow_area.pop(0)