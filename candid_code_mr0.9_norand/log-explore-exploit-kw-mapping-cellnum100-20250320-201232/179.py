# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_RELEVANCE_SCORE = 1
INITIAL_FREQUENCY_COUNTER = 1

# Put the metadata specifically maintained by the policy below. The policy maintains a relevance score for each cache entry based on recent access patterns, a frequency counter for usage patterns, and a round-robin index to ensure equitable distribution.
relevance_scores = {}
frequency_counters = {}
round_robin_index = 0

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first identifying entries with the lowest relevance scores and least frequently used patterns, then applying a round-robin approach among these candidates to ensure fairness.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    global round_robin_index
    candid_obj_key = None
    min_relevance_score = float('inf')
    min_frequency = float('inf')
    candidates = []

    # Identify the candidates with the lowest relevance scores and least frequently used patterns
    for key, cached_obj in cache_snapshot.cache.items():
        if relevance_scores[key] < min_relevance_score or (relevance_scores[key] == min_relevance_score and frequency_counters[key] < min_frequency):
            min_relevance_score = relevance_scores[key]
            min_frequency = frequency_counters[key]
            candidates = [key]
        elif relevance_scores[key] == min_relevance_score and frequency_counters[key] == min_frequency:
            candidates.append(key)

    # Apply round-robin approach among the candidates
    if candidates:
        candid_obj_key = candidates[round_robin_index % len(candidates)]
        round_robin_index = (round_robin_index + 1) % len(candidates)
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the relevance score of the accessed entry is increased, the frequency counter is incremented, and the round-robin index is updated to the next entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    global round_robin_index
    key = obj.key
    relevance_scores[key] += 1
    frequency_counters[key] += 1
    round_robin_index = (round_robin_index + 1) % len(cache_snapshot.cache)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its relevance score and frequency counter, and updates the round-robin index to point to the next entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    global round_robin_index
    key = obj.key
    relevance_scores[key] = INITIAL_RELEVANCE_SCORE
    frequency_counters[key] = INITIAL_FREQUENCY_COUNTER
    round_robin_index = (round_robin_index + 1) % len(cache_snapshot.cache)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an entry, the policy resets the relevance score and frequency counter of the evicted entry, and updates the round-robin index to ensure the next eviction follows the round-robin order.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    global round_robin_index
    evicted_key = evicted_obj.key
    if evicted_key in relevance_scores:
        del relevance_scores[evicted_key]
    if evicted_key in frequency_counters:
        del frequency_counters[evicted_key]
    round_robin_index = (round_robin_index + 1) % len(cache_snapshot.cache)