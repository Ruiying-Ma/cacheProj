# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import deque, defaultdict

# Put tunable constant parameters below

# Put the metadata specifically maintained by the policy below. The policy maintains two LRU queues (T1 and T2) within the cache, two FIFO ghost queues (B1 and B2) outside the cache, access frequency, recency, group identifiers, dynamic scores, and overall cache hit/miss patterns and workload characteristics.
T1 = deque()
T2 = deque()
B1 = deque()
B2 = deque()
access_frequency = defaultdict(int)
recency = {}
group_identifier = {}
dynamic_score = defaultdict(int)
overall_access_patterns = {
    'hit_count': 0,
    'miss_count': 0,
    'access_count': 0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first checks T1 for eviction. If T1 is not empty, it evicts the least-recently-used object from T1. If T1 is empty, it evicts the least-recently-used object from T2. Within the chosen queue, it selects the item with the lowest dynamic score for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    queue = T1 if T1 else T2
    if queue:
        candid_obj_key = min(queue, key=lambda k: dynamic_score[k])
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, recency, and dynamic score of the accessed item. It moves the item to the most-recently-used end of T2 and adjusts the group identifier if necessary. It also updates the overall access pattern metadata.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    overall_access_patterns['hit_count'] += 1
    overall_access_patterns['access_count'] += 1
    key = obj.key
    access_frequency[key] += 1
    recency[key] = cache_snapshot.access_count
    dynamic_score[key] = access_frequency[key] - recency[key] // 10

    if key in T1:
        T1.remove(key)
    else:
        T2.remove(key)

    T2.append(key)
    group_identifier[key] = 'T2'
    
def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency, and dynamic score based on initial access patterns. It assigns an initial group identifier and updates the overall access pattern metadata. If the object was in B1 or B2, it is placed at the most-recently-used end of T2; otherwise, it is placed at the most-recently-used end of T1.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    overall_access_patterns['miss_count'] += 1
    overall_access_patterns['access_count'] += 1
    key = obj.key

    access_frequency[key] = 1
    recency[key] = cache_snapshot.access_count
    dynamic_score[key] = access_frequency[key] - recency[key] // 10

    if key in B1:
        B1.remove(key)
        T2.append(key)
        group_identifier[key] = 'T2'
    elif key in B2:
        B2.remove(key)
        T2.append(key)
        group_identifier[key] = 'T2'
    else:
        T1.append(key)
        group_identifier[key] = 'T1'

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy updates the overall access pattern metadata and re-evaluates group identifiers and dynamic scores. If the evicted object was from T1, it is moved to the rear of B1; if from T2, it is moved to the rear of B2. The policy may adjust the scoring algorithm based on the latest workload characteristics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    key = evicted_obj.key
    if key in T1:
        T1.remove(key)
        B1.append(key)
    else:
        T2.remove(key)
        B2.append(key)

    del access_frequency[key]
    del recency[key]
    del dynamic_score[key]
    del group_identifier[key]