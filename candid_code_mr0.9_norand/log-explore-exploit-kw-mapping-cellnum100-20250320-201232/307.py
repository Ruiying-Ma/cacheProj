# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
FREQUENCY_THRESHOLD = 2
RECENCY_THRESHOLD = 5

# Put the metadata specifically maintained by the policy below. The policy maintains a frequency count for each item, a recency timestamp, and two lists: one for recently accessed items and one for predicted future accesses. It also tracks the layer each item belongs to.
frequency_count = {}
recency_timestamp = {}
recently_accessed = []
predicted_future_accesses = []
layer = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first checking items that fall below a predefined frequency or recency threshold. It then considers items from both the recently accessed and predicted future access lists, prioritizing those with the lowest combined score of frequency and recency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    # Check items below frequency or recency threshold
    for key, cached_obj in cache_snapshot.cache.items():
        if frequency_count[key] < FREQUENCY_THRESHOLD or (cache_snapshot.access_count - recency_timestamp[key]) > RECENCY_THRESHOLD:
            score = frequency_count[key] + (cache_snapshot.access_count - recency_timestamp[key])
            if score < min_score:
                min_score = score
                candid_obj_key = key
    
    # If no candidate found, consider all items
    if candid_obj_key is None:
        for key, cached_obj in cache_snapshot.cache.items():
            score = frequency_count[key] + (cache_snapshot.access_count - recency_timestamp[key])
            if score < min_score:
                min_score = score
                candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the frequency count of the item, updates its recency timestamp, and moves it to the top of the recently accessed list. If the item is in a lower layer, it may be promoted to a higher layer based on its updated access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    frequency_count[key] += 1
    recency_timestamp[key] = cache_snapshot.access_count
    
    if key in recently_accessed:
        recently_accessed.remove(key)
    recently_accessed.insert(0, key)
    
    # Promote to higher layer if necessary
    if layer[key] > 0:
        layer[key] -= 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its frequency count and recency timestamp, and places it in the recently accessed list. The item is initially placed in the lowest layer, and its future promotion is determined by subsequent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    frequency_count[key] = 1
    recency_timestamp[key] = cache_snapshot.access_count
    recently_accessed.insert(0, key)
    layer[key] = 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy removes its metadata from all lists and layers. It then re-evaluates the remaining items to ensure they are correctly placed in their respective layers and lists based on the current access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in frequency_count:
        del frequency_count[evicted_key]
    if evicted_key in recency_timestamp:
        del recency_timestamp[evicted_key]
    if evicted_key in recently_accessed:
        recently_accessed.remove(evicted_key)
    if evicted_key in predicted_future_accesses:
        predicted_future_accesses.remove(evicted_key)
    if evicted_key in layer:
        del layer[evicted_key]
    
    # Re-evaluate remaining items
    for key in cache_snapshot.cache:
        if key not in recently_accessed:
            recently_accessed.append(key)
        if key not in predicted_future_accesses:
            predicted_future_accesses.append(key)