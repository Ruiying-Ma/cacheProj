# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
HISTORICAL_DATA = {
    'initial_hit_count': 1,
    'initial_last_access': 0,
    'initial_future_access_pattern': 5 
}

# Put the metadata specifically maintained by the policy below. The policy maintains a hierarchical structure of metadata, including access frequency counters, timestamps of last access, and estimated future access patterns for each cache line at different levels of the cache hierarchy.
METADATA = {
    'access_freq': {},    # Frequency counters
    'last_access': {},    # Timestamps of last access
    'future_access': {}   # Estimated future access patterns
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy traverses the cache hierarchy starting from the lowest level, using a combination of least recently used (LRU) and least frequently used (LFU) policies to identify potential eviction candidates. It then uses estimated future access patterns to select the final eviction victim.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        # Combining LRU and LFU
        score = (cache_snapshot.access_count - METADATA['last_access'][key]) + METADATA['access_freq'][key]
        score -= METADATA['future_access'][key]
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
            
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency counter and the timestamp of last access for the corresponding cache line. It also refines the estimated future access pattern based on the new access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    METADATA['access_freq'][key] += 1
    METADATA['last_access'][key] = cache_snapshot.access_count
    METADATA['future_access'][key] -= 1  # simple model that future access decreases with actual access

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency counter and the timestamp of last access for the new cache line. It also sets an initial estimated future access pattern based on historical data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    METADATA['access_freq'][key] = HISTORICAL_DATA['initial_hit_count']
    METADATA['last_access'][key] = cache_snapshot.access_count
    METADATA['future_access'][key] = HISTORICAL_DATA['initial_future_access_pattern']

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy resets the metadata for the evicted cache line, including clearing the access frequency counter, timestamp of last access, and estimated future access pattern. It may also adjust the hierarchical structure to reflect the change.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    if evicted_key in METADATA['access_freq']:
        del METADATA['access_freq'][evicted_key]
        del METADATA['last_access'][evicted_key]
        del METADATA['future_access'][evicted_key]