# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import numpy as np

# Put tunable constant parameters below
ALPHA = 0.5
BETA = 0.5
GAMMA = 0.5
DELTA = 0.5
EPSILON = 0.5
ZETA = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of use, data size, importance score, dependency count, predicted access probability, and a standardized score based on deviation from mean usage patterns. It also keeps a global history of access patterns.
metadata = {
    "access_frequency": {},       # {key: frequency}
    "recency_of_use": {},         # {key: last access time}
    "data_size": {},              # {key: size}
    "importance_score": {},       # {key: score}
    "dependency_count": {},       # {key: count}
    "predicted_access_prob": {},  # {key: probability}
    "standardized_score": {},     # {key: standardized score}
    "global_history": []          # [key, ...]
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates a combined eviction score for each object using a weighted sum of the inverse access frequency, predicted access probability, standardized deviation from mean usage, data size, importance score, and dependency count. The object with the highest combined eviction score is selected for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    max_score = -np.inf

    for key, cached_obj in cache_snapshot.cache.items():
        freq_inv = 1 / metadata["access_frequency"].get(key, 1)
        pred_prob = metadata["predicted_access_prob"].get(key, 0.5)
        std_score = metadata["standardized_score"].get(key, 0)
        size = metadata["data_size"].get(key, 0)
        importance = metadata["importance_score"].get(key, 0.5)
        dep_count = metadata["dependency_count"].get(key, 0)
        
        eviction_score = (
            ALPHA * freq_inv +
            BETA * pred_prob +
            GAMMA * std_score +
            DELTA * size +
            EPSILON * importance +
            ZETA * dep_count
        )
        
        if eviction_score > max_score:
            max_score = eviction_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, recency of use, and importance score of the accessed object. It re-evaluates the predicted access probability using the machine learning model, updates the standardized score, and adjusts the global history to reflect the access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata["access_frequency"][key] = metadata["access_frequency"].get(key, 0) + 1
    metadata["recency_of_use"][key] = cache_snapshot.access_count
    metadata["importance_score"][key] += 1  # Hypothetical increment
    
    # Re-evaluate using machine learning model (pseudo code)
    metadata["predicted_access_prob"][key] = 0.5  # Update this with actual model prediction
    
    # Update standardized score
    mean_usage = np.mean([metadata["access_frequency"][k] for k in cache_snapshot.cache.keys()])
    std_usage = np.std([metadata["access_frequency"][k] for k in cache_snapshot.cache.keys()])
    metadata["standardized_score"][key] = (metadata["access_frequency"][key] - mean_usage) / (std_usage + 1e-6)
    
    metadata["global_history"].append(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency of use, data size, importance score, and dependency count. It calculates an initial standardized score, predicts its access probability using the machine learning model, and updates the global history to include the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata["access_frequency"][key] = 1
    metadata["recency_of_use"][key] = cache_snapshot.access_count
    metadata["data_size"][key] = obj.size
    metadata["importance_score"][key] = 0.5  # Initial importance score
    metadata["dependency_count"][key] = 0  # Initial dependency count
    
    # Predict access probability using machine learning model (pseudo code)
    metadata["predicted_access_prob"][key] = 0.5  # Replace with actual model prediction
    
    # Calculate an initial standardized score
    mean_usage = np.mean([metadata["access_frequency"][k] for k in cache_snapshot.cache.keys()])
    std_usage = np.std([metadata["access_frequency"][k] for k in cache_snapshot.cache.keys()])
    metadata["standardized_score"][key] = (metadata["access_frequency"][key] - mean_usage) / (std_usage + 1e-6)
    
    metadata["global_history"].append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata, updates the global history, recalculates the mean usage patterns to update standardized scores for remaining objects, and adjusts the importance scores and dependency counts if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    # Remove metadata of evicted object
    del metadata["access_frequency"][evicted_key]
    del metadata["recency_of_use"][evicted_key]
    del metadata["data_size"][evicted_key]
    del metadata["importance_score"][evicted_key]
    del metadata["dependency_count"][evicted_key]
    del metadata["predicted_access_prob"][evicted_key]
    del metadata["standardized_score"][evicted_key]
    
    metadata["global_history"].remove(evicted_key)
    
    # Recalculate mean usage patterns and update standardized scores
    mean_usage = np.mean([metadata["access_frequency"][k] for k in cache_snapshot.cache.keys()])
    std_usage = np.std([metadata["access_frequency"][k] for k in cache_snapshot.cache.keys()])
    for key in cache_snapshot.cache.keys():
        metadata["standardized_score"][key] = (metadata["access_frequency"][key] - mean_usage) / (std_usage + 1e-6)
    
    # Adjust importance scores and dependency counts if necessary
    for key in cache_snapshot.cache.keys():
        # Hypothetical adjustments (could be more sophisticated)
        metadata["importance_score"][key] = max(0, metadata["importance_score"][key] - 0.1)
        metadata["dependency_count"][key] = max(0, metadata["dependency_count"][key] - 1)