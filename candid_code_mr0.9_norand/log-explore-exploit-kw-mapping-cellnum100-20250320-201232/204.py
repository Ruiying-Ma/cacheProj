# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
PRIORITY_WEIGHT = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached object, including its size, access frequency, recency of access, dynamic priority score, and its position in a FIFO queue.
metadata = {
    'access_frequency': {},  # Dictionary to store access frequency of each object
    'recency_of_access': {},  # Dictionary to store recency of access of each object
    'dynamic_priority_score': {},  # Dictionary to store dynamic priority score of each object
    'fifo_queue': []  # List to maintain the FIFO queue
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first considering the largest items to maximize space, then adjusting based on the dynamic priority score. If multiple candidates have the same priority, the object at the front of the FIFO queue is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    max_size = -1
    max_priority = -1
    for key, cached_obj in cache_snapshot.cache.items():
        if cached_obj.size > max_size:
            max_size = cached_obj.size
            max_priority = metadata['dynamic_priority_score'][key]
            candid_obj_key = key
        elif cached_obj.size == max_size:
            if metadata['dynamic_priority_score'][key] > max_priority:
                max_priority = metadata['dynamic_priority_score'][key]
                candid_obj_key = key
            elif metadata['dynamic_priority_score'][key] == max_priority:
                if metadata['fifo_queue'][0] == key:
                    candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, recency of access, recalculates the dynamic priority score, and moves the object to the rear of the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency_of_access'][key] = cache_snapshot.access_count
    metadata['dynamic_priority_score'][key] = PRIORITY_WEIGHT * metadata['access_frequency'][key] / (cache_snapshot.access_count - metadata['recency_of_access'][key] + 1)
    metadata['fifo_queue'].remove(key)
    metadata['fifo_queue'].append(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata, including size, access frequency, recency of access, sets an initial dynamic priority score based on current system load and access patterns, and places the object at the rear of the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency_of_access'][key] = cache_snapshot.access_count
    metadata['dynamic_priority_score'][key] = PRIORITY_WEIGHT * metadata['access_frequency'][key] / (cache_snapshot.access_count - metadata['recency_of_access'][key] + 1)
    metadata['fifo_queue'].append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy recalculates the dynamic priority scores for the remaining objects and removes the evicted object from the front of the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['recency_of_access'][evicted_key]
    del metadata['dynamic_priority_score'][evicted_key]
    metadata['fifo_queue'].remove(evicted_key)
    
    for key in cache_snapshot.cache:
        metadata['dynamic_priority_score'][key] = PRIORITY_WEIGHT * metadata['access_frequency'][key] / (cache_snapshot.access_count - metadata['recency_of_access'][key] + 1)