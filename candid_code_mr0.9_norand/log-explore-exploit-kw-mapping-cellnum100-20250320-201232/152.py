# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for access frequency in eviction probability
BETA = 0.3   # Weight for recency in eviction probability
GAMMA = 0.2  # Weight for dynamic priority score in eviction probability

# Put the metadata specifically maintained by the policy below. The policy maintains a dependency graph, access frequency counter, recency timestamp, size, and dynamic priority score for each cached object.
dependency_graph = {}
access_frequency = {}
recency_timestamp = {}
dynamic_priority_score = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates an eviction probability for each object based on access frequency, recency, and dynamic priority score. Objects with fewer dependencies and larger sizes have higher probabilities. A random selection is made based on these probabilities to choose the eviction victim.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    max_eviction_score = -math.inf

    for key, cached_obj in cache_snapshot.cache.items():
        freq = access_frequency.get(key, 0)
        recency = recency_timestamp.get(key, 0)
        priority = dynamic_priority_score.get(key, 0)
        dependencies = len(dependency_graph.get(key, []))
        
        eviction_score = (ALPHA * freq) + (BETA * recency) + (GAMMA * priority) - dependencies - cached_obj.size
        
        if eviction_score > max_eviction_score:
            max_eviction_score = eviction_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency counter, updates the recency timestamp, and recalculates the dynamic priority score for the accessed object. Dependencies are checked and updated if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = access_frequency.get(key, 0) + 1
    recency_timestamp[key] = cache_snapshot.access_count
    dynamic_priority_score[key] = calculate_dynamic_priority(cache_snapshot, obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency counter to 1, sets its recency timestamp to the current time, and assigns an initial dynamic priority score based on current system load and access patterns. Dependencies are established based on the context of the insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 1
    recency_timestamp[key] = cache_snapshot.access_count
    dynamic_priority_score[key] = calculate_dynamic_priority(cache_snapshot, obj)
    dependency_graph[key] = []  # Initialize with no dependencies

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy updates the dependency graph to remove the evicted object and its edges. The access frequency counters, recency timestamps, and dynamic priority scores of remaining objects are adjusted if they were dependent on the evicted object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in dependency_graph:
        del dependency_graph[evicted_key]
    
    for key, dependencies in dependency_graph.items():
        if evicted_key in dependencies:
            dependencies.remove(evicted_key)
            # Adjust metadata for dependent objects
            access_frequency[key] = max(0, access_frequency[key] - 1)
            dynamic_priority_score[key] = calculate_dynamic_priority(cache_snapshot, cache_snapshot.cache[key])

def calculate_dynamic_priority(cache_snapshot, obj):
    '''
    Helper function to calculate the dynamic priority score for an object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object for which to calculate the dynamic priority score.
    - Return:
        - `priority_score`: The calculated dynamic priority score.
    '''
    # Example calculation based on current system load and access patterns
    load_factor = cache_snapshot.size / cache_snapshot.capacity
    access_pattern_factor = access_frequency.get(obj.key, 0) / (cache_snapshot.access_count + 1)
    priority_score = load_factor * access_pattern_factor
    return priority_score