# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict, deque

# Put tunable constant parameters below
DEFAULT_PRIORITY = 1
INITIAL_ACCESS_FREQUENCY = 1

# Put the metadata specifically maintained by the policy below. The policy maintains partitions based on access frequency, an ordered list of cached items within each partition, and priority levels assigned to each cached object.
partitions = defaultdict(lambda: {"items": deque(), "access_frequency": 0})
object_partition_map = {}
object_priority = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first selects the partition with the lowest access frequency, then evicts the item with the lowest priority within that partition, and if priorities are equal, the least recently discovered item is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_freq = float('inf')
    for partition in partitions.values():
        min_freq = min(min_freq, partition["access_frequency"])
        
    candidate_partition = [key for key, part in partitions.items() if part["access_frequency"] == min_freq][0]

    min_priority = float('inf')
    for item_key in partitions[candidate_partition]["items"]:
        if object_priority[item_key] < min_priority:
            min_priority = object_priority[item_key]
            candid_obj_key = item_key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency of the partition is updated, the accessed item is moved to the front of the ordered list, and its priority level is increased.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    obj_key = obj.key
    partition = object_partition_map[obj_key]
    
    partitions[partition]["items"].remove(obj_key)
    partitions[partition]["items"].appendleft(obj_key)
    
    object_priority[obj_key] += 1
    partitions[partition]["access_frequency"] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the object is placed in the appropriate partition based on its initial access frequency, added to the front of the ordered list, and assigned a default priority level.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    obj_key = obj.key
    partition = "partition_" + str(INITIAL_ACCESS_FREQUENCY)
    
    partitions[partition]["items"].appendleft(obj_key)
    object_partition_map[obj_key] = partition
    object_priority[obj_key] = DEFAULT_PRIORITY
    partitions[partition]["access_frequency"] = INITIAL_ACCESS_FREQUENCY

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy updates the partition's access frequency, removes the item from the ordered list, and adjusts the priority levels of remaining items if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    partition = object_partition_map[evicted_key]
    
    partitions[partition]["items"].remove(evicted_key)
    if not partitions[partition]["items"]:
        del partitions[partition]
    
    del object_partition_map[evicted_key]
    del object_priority[evicted_key]
    
    # adjust priorities of remaining items if necessary
    for item_key in cache_snapshot.cache:
        if item_key in object_priority:
            partition_of_item = object_partition_map[item_key]
            partitions[partition_of_item]["access_frequency"] -= 1