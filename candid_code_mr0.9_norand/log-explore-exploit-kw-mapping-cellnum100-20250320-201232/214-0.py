# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
PRIORITY_LEVELS = 10

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached item, including access frequency, recency of access, and a quantized priority level. Additionally, a dynamic probability score is calculated for each item based on its frequency and recency.

metadata = {}

def calculate_dynamic_probability(frequency, recency, priority_level, access_count):
    age = access_count - recency
    priority_score = (PRIORITY_LEVELS - priority_level + 1) * frequency
    return age / priority_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a dynamic probability score for each item. Items with lower quantized priority levels and lower access frequencies have higher probabilities of being evicted. A random selection process weighted by these probabilities determines the eviction victim.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    global metadata
    candid_obj_key = None
    min_prob = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        freq, rec, pri = metadata[key]
        prob = calculate_dynamic_probability(freq, rec, pri, cache_snapshot.access_count)
        if prob < min_prob:
            min_prob = prob
            candid_obj_key = key
            
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the accessed item are updated. The quantized priority level is recalculated based on the new frequency and recency values, and the dynamic probability score is adjusted accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    global metadata
    key = obj.key

    if key in metadata:
        frequency, _, priority_level = metadata[key]
        frequency += 1
        recency = cache_snapshot.access_count
        priority_level = min(PRIORITY_LEVELS - 1, (frequency * PRIORITY_LEVELS) // cache_snapshot.access_count)
        metadata[key] = (frequency, recency, priority_level)
    else:
        update_after_insert(cache_snapshot, obj)
    
def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its access frequency is initialized, its recency is set to the current time, and its quantized priority level is assigned based on initial values. The dynamic probability score is then calculated for the new item.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    global metadata
    key = obj.key
    frequency = 1
    recency = cache_snapshot.access_count
    priority_level = (frequency * PRIORITY_LEVELS) // recency if recency > 0 else 0
    metadata[key] = (frequency, recency, priority_level)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the metadata for the evicted item is removed from the cache. The remaining items' dynamic probability scores are recalculated to ensure the probabilities remain normalized.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    global metadata
    key_to_remove = evicted_obj.key
    
    if key_to_remove in metadata:
        del metadata[key_to_remove]
    
    # Optionally recompute priorities and dynamic probabilities if needed; 
    # for simplicity, assume no recomputation is necessary due to eviction.