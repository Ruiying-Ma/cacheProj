# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below
alpha = 0.5  # weight for access frequency
beta = 1.0  # weight for recency
gamma = 2.0  # weight for size
delta = 1.0  # weight for predictive score

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, size of each item, and a predictive score for future access likelihood. It also keeps a dynamic adjustment factor based on real-time access patterns.
cache_metadata = {
    'access_frequency': defaultdict(int),
    'recency': {},
    'predictive_score': defaultdict(lambda: 1.0),
    'dynamic_adjustment_factor': 1.0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by evaluating all cached items based on a weighted score derived from access frequency, recency, size, and predictive score. The item with the lowest combined score is selected for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (alpha * cache_metadata['access_frequency'][key] +
                 beta * (cache_snapshot.access_count - cache_metadata['recency'][key]) +
                 gamma * cached_obj.size +
                 delta * cache_metadata['predictive_score'][key])
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
            
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and recency of the accessed item. It also recalculates the predictive score based on the latest access patterns and adjusts the dynamic adjustment factor if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    cache_metadata['access_frequency'][key] += 1
    cache_metadata['recency'][key] = cache_snapshot.access_count
    
    # Update predictive score based on some heuristic
    cache_metadata['predictive_score'][key] = (
        cache_metadata['access_frequency'][key] / (cache_snapshot.access_count + 1)
    )
    
    # Adjust dynamic adjustment factor
    # Here we are just recalculating but sophisticated heuristics can be applied
    cache_metadata['dynamic_adjustment_factor'] = (
        sum(cache_metadata['predictive_score'].values()) / len(cache_metadata['predictive_score'])
    )

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata with default values for access frequency, recency, size, and predictive score. It also updates the dynamic adjustment factor to reflect the new cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    cache_metadata['access_frequency'][key] = 1
    cache_metadata['recency'][key] = cache_snapshot.access_count
    cache_metadata['predictive_score'][key] = 1.0
    
    # Adjust dynamic adjustment factor
    cache_metadata['dynamic_adjustment_factor'] = (
        sum(cache_metadata['predictive_score'].values()) / len(cache_metadata['predictive_score'])
    )

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy removes its metadata and recalculates the dynamic adjustment factor to optimize for the remaining items in the cache. It also updates the predictive model to improve future eviction decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    del cache_metadata['access_frequency'][key]
    del cache_metadata['recency'][key]
    del cache_metadata['predictive_score'][key]
    
    # Adjust dynamic adjustment factor
    if cache_metadata['predictive_score']:
        cache_metadata['dynamic_adjustment_factor'] = (
            sum(cache_metadata['predictive_score'].values()) / len(cache_metadata['predictive_score'])
        )
    else:
        cache_metadata['dynamic_adjustment_factor'] = 1.0