# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
SEGMENT_COUNT = 4

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache item, including access frequency, recency of access, and a dynamic priority score. It also tracks segment load to balance eviction decisions across segments.
metadata = {}
segment_load = {i: 0 for i in range(SEGMENT_COUNT)}

def calculate_priority_score(freq, recency):
    # An example priority score formula combining frequency and recency
    return freq / recency

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the item with the lowest priority score within the least loaded segment. Priority scores are calculated based on a combination of access frequency, recency, and coverage across contexts.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_priority_score = float('inf')
    least_loaded_segment = min(segment_load, key=segment_load.get)
    
    for key, value in cache_snapshot.cache.items():
        if metadata[key]['segment'] == least_loaded_segment:
            current_priority_score = metadata[key]['priority_score']
            if current_priority_score < lowest_priority_score:
                lowest_priority_score = current_priority_score
                candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the recency timestamp, and recalculates the priority score for the accessed item. It also adjusts the segment load if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta['freq'] += 1
    meta['recency'] = cache_snapshot.access_count
    meta['priority_score'] = calculate_priority_score(meta['freq'], meta['recency'])

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata with default values for access frequency, recency, and priority score. It updates the segment load to reflect the new insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    initial_freq = 1
    initial_recency = cache_snapshot.access_count
    initial_priority_score = calculate_priority_score(initial_freq, initial_recency)
    segment = min(segment_load, key=segment_load.get)
    
    metadata[obj.key] = {
        'freq': initial_freq,
        'recency': initial_recency,
        'priority_score': initial_priority_score,
        'segment': segment
    }
    segment_load[segment] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy removes its metadata and recalculates the segment load. It may also adjust the priority scores of remaining items to ensure balanced load and optimal cache performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    segment = metadata[evicted_obj.key]['segment']
    segment_load[segment] -= 1
    del metadata[evicted_obj.key]

    # Optional recalculation of priority scores if needed (not necessarily required for all algorithms)
    # for key, meta in metadata.items():
    #     meta['priority_score'] = calculate_priority_score(meta['freq'], meta['recency'])