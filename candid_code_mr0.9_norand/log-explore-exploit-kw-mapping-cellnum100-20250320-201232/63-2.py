# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for access frequency in the composite score
BETA = 0.3   # Weight for recency of access in the composite score
GAMMA = 0.2  # Weight for the contextual relevance in the composite score

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, contextual relevance scores, and adaptive thresholds for each cached object.
metadata = {
    "access_frequency": {},
    "recency_of_access": {},
    "contextual_relevance": {},
    "adaptive_thresholds": 0.5
}

def calculate_composite_score(obj_key, current_time):
    access_frequency = metadata['access_frequency'].get(obj_key, 0)
    recency_of_access = metadata['recency_of_access'].get(obj_key, float('inf'))
    contextual_relevance = metadata['contextual_relevance'].get(obj_key, 0)
    
    return (
        ALPHA * access_frequency +
        BETA * (current_time - recency_of_access) +
        GAMMA * contextual_relevance
    )

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score based on low access frequency, low recency of access, low contextual relevance, and comparison against adaptive thresholds, evicting the object with the lowest score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    current_time = cache_snapshot.access_count

    for key in cache_snapshot.cache:
        score = calculate_composite_score(key, current_time)
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, recency of access, and recalculates the contextual relevance score for the accessed object, adjusting adaptive thresholds if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    obj_key = obj.key
    current_time = cache_snapshot.access_count
    
    # Update access frequency
    if obj_key in metadata['access_frequency']:
        metadata['access_frequency'][obj_key] += 1
    else:
        metadata['access_frequency'][obj_key] = 1
    
    # Update recency of access
    metadata['recency_of_access'][obj_key] = current_time
    
    # Recalculate contextual relevance
    metadata['contextual_relevance'][obj_key] += 1  # Simple heuristic
    
    # Adjust adaptive thresholds if necessary
    metadata['adaptive_thresholds'] += 0.01  # Simplistic adjustment

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency of access, and contextual relevance score, and may adjust adaptive thresholds based on the current workload characteristics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    obj_key = obj.key
    current_time = cache_snapshot.access_count
    
    # Initialize access frequency
    metadata['access_frequency'][obj_key] = 1
    
    # Initialize recency of access
    metadata['recency_of_access'][obj_key] = current_time
    
    # Initialize contextual relevance score
    metadata['contextual_relevance'][obj_key] = 0
    
    # Adjust adaptive thresholds based on workload characteristics
    metadata['adaptive_thresholds'] += 0.01  # Simplistic adjustment

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy recalibrates the adaptive thresholds and may adjust the contextual relevance scores of remaining objects to reflect the updated cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    obj_key = evicted_obj.key
    
    # Clean up metadata for the evicted object
    if obj_key in metadata['access_frequency']:
        del metadata['access_frequency'][obj_key]
    if obj_key in metadata['recency_of_access']:
        del metadata['recency_of_access'][obj_key]
    if obj_key in metadata['contextual_relevance']:
        del metadata['contextual_relevance'][obj_key]

    # Adjust adaptive thresholds based on the updated state
    total_frequency = sum(metadata['access_frequency'].values())
    if total_frequency > 0:
        average_frequency = total_frequency / len(metadata['access_frequency'])
        metadata['adaptive_thresholds'] = average_frequency * 0.01  # Simplistic recalibration