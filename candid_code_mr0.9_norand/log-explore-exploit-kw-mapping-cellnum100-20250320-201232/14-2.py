# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below

# Alpha and Beta can control the weights given to the access frequency and age in the priority score calculation
ALPHA = 1
BETA = 1

# Put the metadata specifically maintained by the policy below. The policy maintains a multi-level structure where each level has its own eviction strategy. It tracks access frequency, age, and access sequence for each cached object. Each object has a priority score based on its access frequency and age.
metadata = {
    'access_frequency': {},  # Maps object key to its access frequency
    'age': {},  # Maps object key to its age
    'access_step': {},  # Maps object key to its last access step
    'priority_score': {},  # Maps object key to its priority score
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first checks the lowest level cache for eviction candidates based on the least recent access step. If no candidates are found, it moves to higher levels, considering both age and priority scores, evicting the object with the lowest combined score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_priority = math.inf
    least_recent_access = math.inf
    
    # First check for least recent access in the lowest level
    for key, cached_obj in cache_snapshot.cache.items():
        if metadata['access_step'][key] < least_recent_access:
            least_recent_access = metadata['access_step'][key]
            candid_obj_key = key
    
    # If no minimum access step found, check for lowest combined score in higher levels
    for key, cached_obj in cache_snapshot.cache.items():
        priority = metadata['priority_score'][key]
        if priority < min_priority:
            min_priority = priority
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency of the object is incremented, its age is reset, and its access step is updated to the current step. The priority score is recalculated based on the new frequency and age.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['age'][key] = 0
    metadata['access_step'][key] = cache_snapshot.access_count
    metadata['priority_score'][key] = ALPHA * metadata['access_frequency'][key] + BETA * metadata['age'][key]

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its access frequency is initialized, its age is set to zero, and its access step is recorded. The priority score is calculated based on the initial frequency and age.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['age'][key] = 0
    metadata['access_step'][key] = cache_snapshot.access_count
    metadata['priority_score'][key] = ALPHA * metadata['access_frequency'][key] + BETA * metadata['age'][key]

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy updates the metadata by removing the evicted object's records and recalculating the priority scores of remaining objects if necessary. The access sequence is adjusted to maintain consistency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['age'][evicted_key]
    del metadata['access_step'][evicted_key]
    del metadata['priority_score'][evicted_key]
    
    # Recalculate the age of the remaining objects
    for key in cache_snapshot.cache:
        metadata['age'][key] += 1
        metadata['priority_score'][key] = ALPHA * metadata['access_frequency'][key] + BETA * metadata['age'][key]