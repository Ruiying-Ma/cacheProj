# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_RELIABILITY_SCORE = 1
INITIAL_EVICTION_SCORE = 1
FREQUENCY_THRESHOLD = 5

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry, including access frequency, reliability score, and a randomized eviction score. It also keeps separate lists for frequently accessed and less frequently accessed data.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'reliability_score': {},  # {obj.key: reliability_score}
    'eviction_score': {},  # {obj.key: eviction_score}
    'frequent_list': set(),  # keys of frequently accessed objects
    'infrequent_list': set()  # keys of less frequently accessed objects
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates multiple eviction candidates from the less frequently accessed list, considering their access frequency, reliability score, and randomized eviction score. The candidate with the lowest combined score is chosen for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key in metadata['infrequent_list']:
        combined_score = (metadata['access_frequency'][key] + 
                          metadata['reliability_score'][key] + 
                          metadata['eviction_score'][key])
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and reliability score of the accessed entry are incremented. If the entry was in the less frequently accessed list and its frequency surpasses a threshold, it is moved to the frequently accessed list.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['reliability_score'][key] += 1
    
    if key in metadata['infrequent_list'] and metadata['access_frequency'][key] > FREQUENCY_THRESHOLD:
        metadata['infrequent_list'].remove(key)
        metadata['frequent_list'].add(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its access frequency is initialized to 1, its reliability score is set based on initial reliability assessment, and a randomized eviction score is assigned. The object is placed in the less frequently accessed list.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['reliability_score'][key] = INITIAL_RELIABILITY_SCORE
    metadata['eviction_score'][key] = INITIAL_EVICTION_SCORE
    metadata['infrequent_list'].add(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an entry, the metadata for the evicted entry is removed. The policy may also adjust the threshold for moving entries between the frequently and less frequently accessed lists based on current cache usage patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in metadata['access_frequency']:
        del metadata['access_frequency'][key]
    if key in metadata['reliability_score']:
        del metadata['reliability_score'][key]
    if key in metadata['eviction_score']:
        del metadata['eviction_score'][key]
    if key in metadata['frequent_list']:
        metadata['frequent_list'].remove(key)
    if key in metadata['infrequent_list']:
        metadata['infrequent_list'].remove(key)