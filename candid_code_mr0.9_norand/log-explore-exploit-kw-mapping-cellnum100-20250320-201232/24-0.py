# Put tunable constant parameters below
OVERFLOW_AREA_SIZE = 10  # Tunable parameter for the size of the overflow area

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, priority level, synchronization status, and an overflow area for recently evicted items.
metadata = {
    'access_frequency': {},  # Stores access frequency for each object
    'recency': {},           # Stores recency (last access time) for each object
    'priority': {},          # Stores priority level for each object
    'sync_status': {},       # Stores synchronization status for each object
    'overflow_area': []      # Stores recently evicted items' metadata
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on the lowest priority level, considering both access frequency and recency. If multiple items have the same priority, the least recently synchronized item is evicted first. Evicted items are moved to the overflow area.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_priority = float('inf')
    least_recent_sync = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        priority = metadata['priority'][key]
        sync_status = metadata['sync_status'][key]
        
        if priority < min_priority or (priority == min_priority and sync_status < least_recent_sync):
            min_priority = priority
            least_recent_sync = sync_status
            candid_obj_key = key
            
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the accessed item are updated. The priority level is recalculated based on the new frequency and recency values. The synchronization status is also updated if applicable.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = current_time

    frequency = metadata['access_frequency'][key]
    recency = metadata['recency'][key]
    
    metadata['priority'][key] = frequency / recency  # Example priority calculation
    metadata['sync_status'][key] = current_time  # Update sync status

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its access frequency is initialized, and its recency is set to the current time. The priority level is calculated based on these initial values. The synchronization status is set, and the overflow area is checked for any recent evictions of the same item.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = current_time
    
    frequency = metadata['access_frequency'][key]
    recency = metadata['recency'][key]
    
    metadata['priority'][key] = frequency / recency  # Example priority calculation
    metadata['sync_status'][key] = current_time  # Initialize sync status
    
    for evicted_obj in metadata['overflow_area']:
        if evicted_obj['key'] == key:
            metadata['access_frequency'][key] = evicted_obj['access_frequency']
            metadata['recency'][key] = evicted_obj['recency']
            metadata['priority'][key] = evicted_obj['priority']
            metadata['sync_status'][key] = evicted_obj['sync_status']
            break

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, its metadata is moved to the overflow area, including its access frequency, recency, priority level, and synchronization status. The overflow area is managed to ensure it does not exceed a predefined size, evicting the oldest items if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    evicted_metadata = {
        'key': evicted_key,
        'access_frequency': metadata['access_frequency'].pop(evicted_key, None),
        'recency': metadata['recency'].pop(evicted_key, None),
        'priority': metadata['priority'].pop(evicted_key, None),
        'sync_status': metadata['sync_status'].pop(evicted_key, None)
    }
    
    metadata['overflow_area'].append(evicted_metadata)
    
    if len(metadata['overflow_area']) > OVERFLOW_AREA_SIZE:
        metadata['overflow_area'].pop(0)  # Remove the oldest item to maintain size limit