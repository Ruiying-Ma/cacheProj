# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_THRESHOLD = 5
INITIAL_ACTIVATION_LEVEL = 1
INITIAL_PROBABILITY = 0.5
FREQUENCY_INCREMENT = 1
RECENCY_INCREMENT = 1
ACTIVATION_INCREMENT = 1
PROBABILITY_DECAY_FACTOR = 0.9

# Put the metadata specifically maintained by the policy below. Each cached item maintains a threshold value, an activation level, a probability of eviction, and counters for access frequency and recency. The policy also maintains global statistics on access patterns and workload characteristics.
cache_metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first identifying items with activation levels below their threshold values. Among these, it selects the item with the highest probability of eviction, which is dynamically adjusted based on access frequency and recency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    
    candidates = [
        (obj_key, cache_metadata[obj_key]["probability_of_eviction"])
        for obj_key, obj_val in cache_snapshot.cache.items()
        if cache_metadata[obj_key]["activation_level"] < cache_metadata[obj_key]["threshold"]
    ]
    
    if candidates:
        candid_obj_key = max(candidates, key=lambda x: x[1])[0]

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency counters for the item are incremented. The activation level is increased, and the probability of eviction is recalculated to reflect the increased likelihood of future access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata = cache_metadata[obj.key]
    metadata["frequency_count"] += FREQUENCY_INCREMENT
    metadata["recency_counter"] += RECENCY_INCREMENT
    metadata["activation_level"] += ACTIVATION_INCREMENT
    metadata["probability_of_eviction"] *= PROBABILITY_DECAY_FACTOR

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its initial threshold value and activation level are set based on global access patterns. The probability of eviction is initialized, and global statistics are updated to reflect the new insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    cache_metadata[obj.key] = {
        "threshold": INITIAL_THRESHOLD,
        "activation_level": INITIAL_ACTIVATION_LEVEL,
        "probability_of_eviction": INITIAL_PROBABILITY,
        "frequency_count": 0,
        "recency_counter": cache_snapshot.access_count
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the global statistics are updated to reflect the eviction. The thresholds and probabilities for remaining items may be adjusted based on the updated workload characteristics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del cache_metadata[evicted_obj.key]
    
    # Adjust thresholds and probabilities for remaining items if necessary.
    for obj_key in cache_snapshot.cache:
        metadata = cache_metadata[obj_key]
        metadata["threshold"] = max(metadata["threshold"] - 1, 1)
        metadata["probability_of_eviction"] = min(metadata["probability_of_eviction"] + 0.1, 1.0)