# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below

# Put the metadata specifically maintained by the policy below. Each cache entry maintains its own access frequency, last access timestamp, and a locality score based on nearby node access patterns. Additionally, each application or process has its own isolated cache space with its own metadata.
metadata = {
    'frequency': {},
    'last_access_timestamp': {},
    'locality_score': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by evaluating the locality score, access frequency, and last access timestamp of each entry within the isolated cache space. The entry with the lowest combined score is selected for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        combined_score = (
            metadata['locality_score'][key] + 
            1 / metadata['frequency'][key] + 
            cache_snapshot.access_count - metadata['last_access_timestamp'][key]
        )
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key
            
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and last access timestamp of the hit entry are updated. The locality score is recalculated based on recent access patterns of nearby nodes.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['frequency'][key] += 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    
    # This is a placeholder logic for recalculating the locality score.
    # In an actual system, this score will be based on some locality heuristic.
    metadata['locality_score'][key] = compute_locality_score(obj, cache_snapshot)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the access frequency is initialized to 1, the last access timestamp is set to the current time, and the locality score is computed based on the initial access context. The isolated cache space metadata is updated to reflect the new entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['frequency'][key] = 1
    metadata['last_access_timestamp'][key] = cache_snapshot.access_count
    
    # Calculate initial locality score
    metadata['locality_score'][key] = compute_locality_score(obj, cache_snapshot)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an entry, the isolated cache space metadata is updated to remove the evicted entry. The locality scores of remaining entries may be adjusted to reflect the change in the cache context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    del metadata['frequency'][key]
    del metadata['last_access_timestamp'][key]
    del metadata['locality_score'][key]

    # Adjust the locality score of remaining entries. (using the same function for simplicity)
    for remaining_key in cache_snapshot.cache:
        metadata['locality_score'][remaining_key] = compute_locality_score(cache_snapshot.cache[remaining_key], cache_snapshot)

def compute_locality_score(obj, cache_snapshot):
    # Placeholder for locality score calculation, actual logic will be more sophisticated.
    return 1