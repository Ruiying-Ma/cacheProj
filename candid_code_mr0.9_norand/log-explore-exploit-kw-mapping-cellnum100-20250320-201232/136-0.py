# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import hashlib

# Put tunable constant parameters below


# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached object, including access frequency, sensitivity level, and encryption status. A central controller aggregates usage patterns from all cached objects.
class CacheMetadata:
    def __init__(self):
        self.access_frequency = {}
        self.sensitivity_level = {}
        self.encryption_status = {}
        self.aggregate_usage_patterns = {}

metadata = CacheMetadata()

def assess_sensitivity(obj):
    '''Estimate sensitivity level of an object based on its key/hash value'''
    hash_value = int(hashlib.md5(obj.key.encode()).hexdigest(), 16)
    return hash_value % 10  # Sensitivity level is an integer between 0 and 9

def should_encrypt(sensitivity_level):
    '''Determine if an object should be encrypted based on its sensitivity level'''
    return sensitivity_level >= 5

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a combination of low access frequency and low sensitivity level. Objects with the lowest combined score are evicted first.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_score = float("inf")
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata.access_frequency.get(key, 0)
        sensitivity_level = metadata.sensitivity_level.get(key, 0)
        score = access_frequency + sensitivity_level
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the access frequency of the object is incremented, and the central controller is notified to update the collective usage patterns. The sensitivity level and encryption status remain unchanged.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata.access_frequency[key] = metadata.access_frequency.get(key, 0) + 1
    metadata.aggregate_usage_patterns[key] = {
        "access_frequency": metadata.access_frequency[key],
        "sensitivity_level": metadata.sensitivity_level[key],
        "encryption_status": metadata.encryption_status[key]
    }

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its access frequency is initialized, its sensitivity level is assessed, and it is encrypted if deemed sensitive. The central controller is updated with the new object's metadata.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    sensitivity_level = assess_sensitivity(obj)
    encryption_status = should_encrypt(sensitivity_level)

    metadata.access_frequency[key] = 1  # Initial access after insertion
    metadata.sensitivity_level[key] = sensitivity_level
    metadata.encryption_status[key] = encryption_status
    metadata.aggregate_usage_patterns[key] = {
        "access_frequency": metadata.access_frequency[key],
        "sensitivity_level": sensitivity_level,
        "encryption_status": encryption_status
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the central controller is notified to remove the object's metadata from the collective usage patterns. The cache space is freed, and the metadata of the evicted object is discarded.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    key = evicted_obj.key
    if key in metadata.access_frequency:
        del metadata.access_frequency[key]
    if key in metadata.sensitivity_level:
        del metadata.sensitivity_level[key]
    if key in metadata.encryption_status:
        del metadata.encryption_status[key]
    if key in metadata.aggregate_usage_patterns:
        del metadata.aggregate_usage_patterns[key]