# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
# Example weights
WEIGHT_FREQ = 0.5
WEIGHT_REC = 0.5
SELECTION_SIZE = 5  # Number of candidate objects to consider for eviction

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached object, including access frequency, recency (timestamp of last access), and a fitness score calculated as a weighted combination of frequency and recency.
metadata = {}

def calculate_fitness(frequency, recency, current_time):
    return WEIGHT_FREQ * frequency + WEIGHT_REC * (current_time - recency)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy periodically evaluates all cached objects and probabilistically selects a subset of candidates based on their fitness scores. The least fit object from this subset is chosen for eviction, allowing the system to explore different cache states.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    if not cache_snapshot.cache:
        return candid_obj_key

    # Select a subset of candidates based on fitness scores
    candidates = sorted(
        cache_snapshot.cache.values(),
        key=lambda o: metadata[o.key]['fitness']
    )[:SELECTION_SIZE]

    # Find the least fit object among the candidates
    least_fit_object = min(candidates, key=lambda o: metadata[o.key]['fitness'])

    candid_obj_key = least_fit_object.key
    
    return candid_obj_key

def update_metadata(obj_key, cache_snapshot):
    access_freq = metadata[obj_key]['frequency']
    access_rec = metadata[obj_key]['recency']
    metadata[obj_key]['fitness'] = calculate_fitness(access_freq, access_rec, cache_snapshot.access_count)

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency of the object is incremented, and the recency is updated to the current timestamp. The fitness score is recalculated based on the updated frequency and recency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    obj_key = obj.key
    metadata[obj_key]['frequency'] += 1
    metadata[obj_key]['recency'] = cache_snapshot.access_count
    update_metadata(obj_key, cache_snapshot)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its access frequency is initialized to 1, its recency is set to the current timestamp, and its fitness score is calculated based on these initial values.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    obj_key = obj.key
    metadata[obj_key] = {
        'frequency': 1,
        'recency': cache_snapshot.access_count,
        'fitness': calculate_fitness(1, cache_snapshot.access_count, cache_snapshot.access_count)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy recalculates the fitness scores of the remaining objects to ensure they reflect the current state of the cache, potentially adjusting the weights used in the fitness function to adapt to changing access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata[evicted_obj.key]
    for obj_key in cache_snapshot.cache:
        update_metadata(obj_key, cache_snapshot)