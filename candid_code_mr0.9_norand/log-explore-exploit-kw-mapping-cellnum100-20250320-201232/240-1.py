# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

from collections import defaultdict

# Put tunable constant parameters below
ALPHA = 1  # Weight for access frequency
BETA = 1   # Weight for recency
GAMMA = 1  # Weight for size
DELTA = 1  # Weight for hierarchical importance

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached object, including access frequency, recency, data size, and a hierarchical importance score. Additionally, each object has an autonomous priority score that it updates based on its access patterns and resource constraints.
metadata = {
    'access_frequency': defaultdict(int),
    'recency': {},
    'data_size': {},
    'hierarchical_importance': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates multiple eviction candidates simultaneously, considering their access frequency, recency, data size, and hierarchical importance. The object with the lowest combined score is chosen for eviction, ensuring an optimal balance of cache performance factors.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_frequency = metadata['access_frequency'][key]
        recency = metadata['recency'][key]
        data_size = metadata['data_size'][key]
        hierarchical_importance = metadata['hierarchical_importance'][key]
        
        combined_score = (ALPHA * access_frequency + 
                          BETA * (cache_snapshot.access_count - recency) + 
                          GAMMA * data_size + 
                          DELTA * hierarchical_importance)
                          
        if combined_score < lowest_score:
            lowest_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the object are updated. The object's autonomous priority score is recalculated based on the new access pattern, and its hierarchical importance score is adjusted if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its initial access frequency and recency are set. The object's data size and hierarchical importance score are recorded, and its autonomous priority score is initialized based on its expected access pattern and resource constraints.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['data_size'][key] = obj.size
    metadata['hierarchical_importance'][key] = 1  # Initial importance, can be adjusted based on heuristic

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the metadata of the evicted object is removed from the cache. The hierarchical importance scores of remaining objects are recalibrated if necessary, and the autonomous priority scores of other objects may be adjusted to reflect the new cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    key = evicted_obj.key
    del metadata['access_frequency'][key]
    del metadata['recency'][key]
    del metadata['data_size'][key]
    del metadata['hierarchical_importance'][key]
    
    # Optionally adjust scores based on heuristic
    # For example, reduce hierarchical_importance of all remaining objects
    for k in cache_snapshot.cache:
        metadata['hierarchical_importance'][k] = max(1, metadata['hierarchical_importance'][k] - 1)