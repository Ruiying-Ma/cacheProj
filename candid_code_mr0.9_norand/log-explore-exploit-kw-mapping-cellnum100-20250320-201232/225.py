# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for access frequency
BETA = 0.2   # Weight for recency
GAMMA = 0.1  # Weight for insertion time
DELTA = 0.1  # Weight for locality score
EPSILON = 0.1  # Weight for predictive access probability

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency, insertion time, locality score, predictive access probability, and group association for each cached object.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'recency': {},           # {obj.key: last_access_time}
    'insertion_time': {},    # {obj.key: insertion_time}
    'locality_score': {},    # {obj.key: locality_score}
    'predictive_access_prob': {},  # {obj.key: predicted_access_probability}
    'group_association': {}   # {obj.key: group_id}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy predicts access probabilities for all items, evaluates groups of related entries, and uses a weighted score derived from access frequency, recency, insertion time, locality score, and predicted access probability to select the eviction victim with the lowest combined score and least importance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (
            ALPHA * metadata['access_frequency'].get(key, 0) +
            BETA * (cache_snapshot.access_count - metadata['recency'].get(key, 0)) +
            GAMMA * (cache_snapshot.access_count - metadata['insertion_time'].get(key, 0)) +
            DELTA * metadata['locality_score'].get(key, 0) +
            EPSILON * metadata['predictive_access_prob'].get(key, 0)
        )
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    The policy increments the access frequency, updates the recency timestamp, adjusts the locality score based on the accessing node's proximity, updates the predictive model based on the new access pattern, and re-evaluates the grouping of related entries.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['recency'][key] = cache_snapshot.access_count
    # Adjust locality score based on accessing node's proximity (dummy implementation)
    metadata['locality_score'][key] = 1  # Placeholder for actual locality score calculation
    # Update predictive model (dummy implementation)
    metadata['predictive_access_prob'][key] = 0.5  # Placeholder for actual predictive model update
    # Re-evaluate group association (dummy implementation)
    metadata['group_association'][key] = 1  # Placeholder for actual group association

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    The policy sets the initial access frequency to 1, records the current time as the insertion time, sets the recency timestamp to the current time, calculates the initial locality score based on the inserting node's proximity, updates the predictive model to include the new item, and assigns it to a related group if applicable.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['insertion_time'][key] = cache_snapshot.access_count
    metadata['recency'][key] = cache_snapshot.access_count
    # Calculate initial locality score (dummy implementation)
    metadata['locality_score'][key] = 1  # Placeholder for actual locality score calculation
    # Update predictive model (dummy implementation)
    metadata['predictive_access_prob'][key] = 0.5  # Placeholder for actual predictive model update
    # Assign to a related group (dummy implementation)
    metadata['group_association'][key] = 1  # Placeholder for actual group association

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    The policy removes all associated metadata for the evicted object, updates the grouping of related entries to reflect the eviction, adjusts the decision matrix to account for the change in cache composition, and may adjust locality scores of remaining objects if the evicted object was frequently accessed by nearby nodes.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in metadata['access_frequency']:
        del metadata['access_frequency'][key]
    if key in metadata['recency']:
        del metadata['recency'][key]
    if key in metadata['insertion_time']:
        del metadata['insertion_time'][key]
    if key in metadata['locality_score']:
        del metadata['locality_score'][key]
    if key in metadata['predictive_access_prob']:
        del metadata['predictive_access_prob'][key]
    if key in metadata['group_association']:
        del metadata['group_association'][key]
    # Update group associations and locality scores (dummy implementation)
    # Placeholder for actual updates