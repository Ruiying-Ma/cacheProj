# Import any libraries or modules you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict, deque

# Put tunable constant parameters below
NUM_LRU_QUEUES = 3

# Put the metadata specifically maintained by the policy below.
lru_queues = [deque() for _ in range(NUM_LRU_QUEUES)]
frequency_map = defaultdict(int)
dependency_count = defaultdict(int)
object_dependencies = defaultdict(set)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy dynamically chooses the eviction victim based on the current workload, switching between LRU and LFU strategies. It prioritizes evicting items with the fewest dependencies, starting from the least-recently-used end of the non-empty LRU queue with the smallest subscript.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    for queue in lru_queues:
        if queue:
            least_dependent = min(queue, key=lambda x: dependency_count[x])
            if not candid_obj_key or dependency_count[least_dependent] < dependency_count[candid_obj_key]:
                candid_obj_key = least_dependent
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    The policy updates the recency information by moving the hit object to the most-recently-used end of the next LRU queue (or the same queue if it's the last one). It increments the frequency count and updates the dependency counts if the accessed object has dependencies.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_queue_num = None
    for i, queue in enumerate(lru_queues):
        if obj.key in queue:
            current_queue_num = i
            queue.remove(obj.key)
            break

    if current_queue_num is not None:
        next_queue_num = min(current_queue_num + 1, NUM_LRU_QUEUES - 1)
        lru_queues[next_queue_num].appendleft(obj.key)

    frequency_map[obj.key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    The policy initializes the recency by placing the new object at the most-recently-used end of the L1 queue. It initializes the frequency metadata and sets the dependency count based on the current state of the cache. The mapping table is updated to include the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    lru_queues[0].appendleft(obj.key)
    frequency_map[obj.key] = 1
    dependency_count[obj.key] = len(object_dependencies[obj.key])

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    The policy removes the evicted object's metadata from the mapping table and adjusts the dependency counts of any objects that depended on the evicted object. It recalculates the overall strategy based on the current workload and removes the object from its LRU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    for i, queue in enumerate(lru_queues):
        if evicted_obj.key in queue:
            queue.remove(evicted_obj.key)
            break

    del frequency_map[evicted_obj.key]
    del dependency_count[evicted_obj.key]

    for dependent in object_dependencies[evicted_obj.key]:
        dependency_count[dependent] -= 1

    del object_dependencies[evicted_obj.key]