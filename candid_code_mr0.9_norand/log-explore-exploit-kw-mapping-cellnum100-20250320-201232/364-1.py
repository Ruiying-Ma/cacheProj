# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below
CONSENSUS_IMPORTANCE_INITIAL = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each item including access frequency, last access time, group identifier, and a consensus score. It also keeps a global list of groups with their respective access patterns and scores.
metadata = {
    'items': {},
    'groups': defaultdict(dict),
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first identifies the least recently used group based on the group's last access time. Within this group, it uses a consensus score derived from multiple cache nodes to select the least important item for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Find the least recently used group based on the group's last access time
    lru_group = min(metadata['groups'], key=lambda g: metadata['groups'][g]['last_access_time'])
    # Within this group, find the item with the lowest consensus score
    lru_group_items = metadata['groups'][lru_group]['items']
    candid_obj_key = min(lru_group_items, key=lambda k: lru_group_items[k]['consensus_score'])
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the last access time and increases the access frequency of the item. It also updates the group's last access time and recalculates the consensus score for the item based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Update item's last access time and access frequency
    item_metadata = metadata['items'][obj.key]
    item_metadata['last_access_time'] = cache_snapshot.access_count
    item_metadata['access_frequency'] += 1
    
    # Update group's last access time
    group_id = item_metadata['group_id']
    metadata['groups'][group_id]['last_access_time'] = cache_snapshot.access_count
    
    # Update item's consensus score based on new access patterns
    item_metadata['consensus_score'] = calculate_consensus_score(item_metadata)
    
def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy assigns it to a group based on similarity, initializes its access frequency and last access time, and updates the group's metadata. The consensus score is initially set based on the object's predicted importance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Assign to a group based on similarity (for simplicity, we use one group 'default_group')
    group_id = 'default_group'
    item_metadata = {
        'access_frequency': 1,
        'last_access_time': cache_snapshot.access_count,
        'group_id': group_id,
        'consensus_score': CONSENSUS_IMPORTANCE_INITIAL
    }
    metadata['items'][obj.key] = item_metadata
    
    # Update group's metadata
    if group_id not in metadata['groups']:
        metadata['groups'][group_id] = {
            'items': {},
            'last_access_time': cache_snapshot.access_count,
        }
    metadata['groups'][group_id]['items'][obj.key] = item_metadata
    metadata['groups'][group_id]['last_access_time'] = cache_snapshot.access_count
    
def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After eviction, the policy removes the item's metadata and updates the group's access patterns and scores. If the group becomes empty, it is removed from the global list. The consensus scores of remaining items in the group are recalculated to reflect the change.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Remove item's metadata
    evicted_item_metadata = metadata['items'].pop(evicted_obj.key)
    group_id = evicted_item_metadata['group_id']
    
    # Update group's metadata
    group_items = metadata['groups'][group_id]['items']
    group_items.pop(evicted_obj.key)
    
    if not group_items:
        # Remove group if empty
        del metadata['groups'][group_id]
    else:
        # Recalculate consensus scores for remaining items in the group
        for item_key in group_items:
            item_metadata = group_items[item_key]
            item_metadata['consensus_score'] = calculate_consensus_score(item_metadata)

def calculate_consensus_score(item_metadata):
    '''
    Calculate the consensus score for an item based on its metadata.
    (This function is a placeholder and can be adjusted based on desired consensus logic)
    '''
    return item_metadata['access_frequency'] / (item_metadata['last_access_time'] + 1)