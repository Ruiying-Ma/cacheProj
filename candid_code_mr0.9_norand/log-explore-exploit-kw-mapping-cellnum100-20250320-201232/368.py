# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
FREQUENT_ACCESS_THRESHOLD = 5  # Number of accesses to consider an item frequently accessed
IMPORTANCE_DECAY = 0.9  # Decay factor for importance score

# Put the metadata specifically maintained by the policy below. The policy maintains multiple eviction candidates, an importance score for each cached item, a probabilistic model for access patterns, and separate lists for frequently and less frequently accessed data.
access_count = {}  # Dictionary to keep track of access counts for each object
importance_score = {}  # Dictionary to keep track of importance scores for each object
frequent_list = set()  # Set to keep track of frequently accessed objects
infrequent_list = set()  # Set to keep track of infrequently accessed objects

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates multiple eviction candidates based on real-time access patterns and importance scores, using a probabilistic model to obfuscate actual usage frequency, and prioritizes evicting less important and less frequently accessed data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    candidates = list(infrequent_list) + list(frequent_list)
    candidates.sort(key=lambda k: (importance_score[k], access_count[k]))

    for candidate in candidates:
        if cache_snapshot.cache[candidate].size >= obj.size:
            candid_obj_key = candidate
            break
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access pattern data, recalculates the importance score for the accessed item, and may adjust the item's position between the frequently and less frequently accessed lists.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    access_count[key] += 1
    importance_score[key] = IMPORTANCE_DECAY * importance_score[key] + 1

    if access_count[key] >= FREQUENT_ACCESS_THRESHOLD:
        if key in infrequent_list:
            infrequent_list.remove(key)
        frequent_list.add(key)
    else:
        if key in frequent_list:
            frequent_list.remove(key)
        infrequent_list.add(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its importance score, updates the access pattern data, and places the item in the appropriate list based on its initial access frequency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    access_count[key] = 1
    importance_score[key] = 1

    if access_count[key] >= FREQUENT_ACCESS_THRESHOLD:
        frequent_list.add(key)
    else:
        infrequent_list.add(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the evicted item from all metadata structures, updates the access pattern data to reflect the change, and recalculates the importance scores for remaining items if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    key = evicted_obj.key
    if key in access_count:
        del access_count[key]
    if key in importance_score:
        del importance_score[key]
    if key in frequent_list:
        frequent_list.remove(key)
    if key in infrequent_list:
        infrequent_list.remove(key)