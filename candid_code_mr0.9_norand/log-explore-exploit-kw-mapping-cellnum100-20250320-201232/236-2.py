# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time
from collections import defaultdict

# Put tunable constant parameters below
DEFAULT_PRIORITY = 1
DEFAULT_FITNESS = 1.0
DEFAULT_PREDICTIVE_PROBABILITY = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, priority level, synchronization status, predictive access probabilities, group associations, fitness score, and agent communication status for each cache item. It also includes an overflow area for recently evicted items.
class Metadata:
    def __init__(self):
        self.access_frequency = defaultdict(int)
        self.recency = defaultdict(int)
        self.priority_level = defaultdict(lambda: DEFAULT_PRIORITY)
        self.sync_status = defaultdict(bool)
        self.predictive_access_probability = defaultdict(lambda: DEFAULT_PREDICTIVE_PROBABILITY)
        self.group_associations = defaultdict(set)
        self.fitness_score = defaultdict(lambda: DEFAULT_FITNESS)
        self.agent_communication_status = defaultdict(lambda: False)
        self.overflow_area = {}

metadata = Metadata()

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates all cached objects based on a combined score derived from access frequency, recency, priority level, synchronization status, predictive access probabilities, and fitness score. It uses a decision matrix to select the least fit objects or groups with the lowest predicted access probability and least importance, with a preference for the least recently synchronized item if priorities are equal. Agents may probabilistically choose to evict less frequently accessed items to explore different cache states.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        combined_score = (metadata.access_frequency[key] + 
                          time.time() - metadata.recency[key] + 
                          metadata.priority_level[key] + 
                          (1 if metadata.sync_status[key] else 0) + 
                          metadata.predictive_access_probability[key] + 
                          metadata.fitness_score[key])
        
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key
            
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the recency timestamp, recalculates the priority level and fitness score, updates the synchronization status, adjusts the predictive model, re-evaluates the grouping of related entries, and communicates the update to neighboring agents.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata.access_frequency[obj.key] += 1
    metadata.recency[obj.key] = time.time()
    # Recalculate priority level and fitness score (using placeholder logic)
    metadata.priority_level[obj.key] = max(DEFAULT_PRIORITY, metadata.access_frequency[obj.key] // 10)
    metadata.fitness_score[obj.key] = 1.0 / (1 + metadata.access_frequency[obj.key])
    # Update sync status and predictive model (placeholders)
    metadata.sync_status[obj.key] = True
    metadata.predictive_access_probability[obj.key] = 0.5 + 0.5 * (metadata.access_frequency[obj.key] / (cache_snapshot.access_count + 1))
    metadata.group_associations[obj.key].add('group1')
    metadata.agent_communication_status[obj.key] = True

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and recency, calculates its priority level and fitness score, sets its synchronization status, updates the predictive model, assigns it to a related group if applicable, checks the overflow area for recent evictions of the same item, and informs neighboring agents of the new insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata.access_frequency[obj.key] = 1
    metadata.recency[obj.key] = time.time()
    metadata.priority_level[obj.key] = DEFAULT_PRIORITY
    metadata.fitness_score[obj.key] = DEFAULT_FITNESS
    metadata.sync_status[obj.key] = False
    metadata.predictive_access_probability[obj.key] = DEFAULT_PREDICTIVE_PROBABILITY
    metadata.group_associations[obj.key].add('group1')
    metadata.agent_communication_status[obj.key] = True

    # Check overflow area for recent evictions
    if obj.key in metadata.overflow_area:
        # Restore metadata from overflow_area (placeholder logic)
        del metadata.overflow_area[obj.key]

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy moves its metadata to the overflow area, updates the predictive model, adjusts the grouping of related entries, modifies the decision matrix to reflect the change in cache composition, resets the metadata for the evicted cache line, and communicates the eviction to neighboring agents to update their local information.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Move metadata to overflow area
    metadata.overflow_area[evicted_obj.key] = {
        'access_frequency': metadata.access_frequency[evicted_obj.key],
        'recency': metadata.recency[evicted_obj.key],
        'priority_level': metadata.priority_level[evicted_obj.key],
        'sync_status': metadata.sync_status[evicted_obj.key],
        'predictive_access_probability': metadata.predictive_access_probability[evicted_obj.key],
        'group_associations': metadata.group_associations[evicted_obj.key],
        'fitness_score': metadata.fitness_score[evicted_obj.key],
        'agent_communication_status': metadata.agent_communication_status[evicted_obj.key],
    }

    # Reset metadata for the evicted cache line
    del metadata.access_frequency[evicted_obj.key]
    del metadata.recency[evicted_obj.key]
    del metadata.priority_level[evicted_obj.key]
    del metadata.sync_status[evicted_obj.key]
    del metadata.predictive_access_probability[evicted_obj.key]
    del metadata.group_associations[evicted_obj.key]
    del metadata.fitness_score[evicted_obj.key]
    del metadata.agent_communication_status[evicted_obj.key]

    # Update decision matrix (placeholder logic)
    # Communicate eviction to neighboring agents (placeholder logic)
    metadata.agent_communication_status[obj.key] = True