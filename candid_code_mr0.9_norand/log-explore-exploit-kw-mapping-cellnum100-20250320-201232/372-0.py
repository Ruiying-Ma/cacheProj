# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
MAX_ACCESS_FREQUENCY = 1000

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, predicted future access patterns, and classification categories for each cached object.
metadata = {}
categories = ['high', 'medium', 'low']

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by combining access frequency, recency, predicted future access, and category-specific rules to identify the lowest priority object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    lowest_priority = None
    current_time = cache_snapshot.access_count
    
    for key, cached_obj in cache_snapshot.cache.items():
        obj_metadata = metadata[key]
        # Calculate priority using a combination of frequency, recency, and category
        priority = (
            obj_metadata['frequency'] +
            (current_time - obj_metadata['timestamp']) +
            categories.index(obj_metadata['category'])
        )
        
        if lowest_priority is None or priority < lowest_priority:
            lowest_priority = priority
            candid_obj_key = cached_obj.key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency, recency timestamp, and refines the predicted future access pattern for the accessed object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    current_time = cache_snapshot.access_count
    metadata[obj.key]['frequency'] = min(metadata[obj.key]['frequency'] + 1, MAX_ACCESS_FREQUENCY)
    metadata[obj.key]['timestamp'] = current_time
    # The future access pattern and category classification can be complex, placeholder logic here:
    metadata[obj.key]['category'] = 'medium'

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, sets the current timestamp as its recency, predicts its future access pattern, and classifies it into a category.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    current_time = cache_snapshot.access_count
    metadata[obj.key] = {
        'frequency': 1,
        'timestamp': current_time,
        # Initial prediction and classification
        'future_access': current_time + 50,
        'category': 'medium'
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata and may adjust the classification rules or predictive model based on the eviction outcome.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    if evicted_obj.key in metadata:
        del metadata[evicted_obj.key]
    # Adjust classification rules or predictive model if needed, placeholder logic here:
    categories.pop(-1)  # for illustration purposes, more complex logic would be used in practice
    categories.append('low')