# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below
RECENCY_WEIGHT = 1.0
FREQUENCY_WEIGHT = 1.0
ASSOCIATION_WEIGHT = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached object, including access frequency, recency, and association group. Each module or service also maintains its own independent cache metadata.
metadata = {
    'frequency': defaultdict(int),
    'recency': defaultdict(int),
    'association_group': defaultdict(int),
    'time': 0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim using a weighted strategy where weights are adjusted based on access frequency, recency, and association group. Each module or service makes independent eviction decisions based on its specific access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        frequency_score = metadata['frequency'][key] * FREQUENCY_WEIGHT
        recency_score = (cache_snapshot.access_count - metadata['recency'][key]) * RECENCY_WEIGHT
        association_score = metadata['association_group'][key] * ASSOCIATION_WEIGHT
        
        total_score = frequency_score + recency_score + association_score
        if total_score < min_score:
            min_score = total_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and recency metadata for the accessed object. It also updates the association group metadata if the object is part of a high-access cluster.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata['frequency'][obj.key] += 1
    metadata['recency'][obj.key] = cache_snapshot.access_count
    
    # If an object reaches a high frequency access, assume it is part of a high-access cluster.
    if metadata['frequency'][obj.key] > 10:
        metadata['association_group'][obj.key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency, and association group metadata. The independent cache metadata for the respective module or service is also updated to reflect the new insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata['frequency'][obj.key] = 1
    metadata['recency'][obj.key] = cache_snapshot.access_count
    metadata['association_group'][obj.key] = 0

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy updates the metadata to remove the evicted object. The independent cache metadata for the respective module or service is also updated to reflect the eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata['frequency'][evicted_obj.key]
    del metadata['recency'][evicted_obj.key]
    del metadata['association_group'][evicted_obj.key]