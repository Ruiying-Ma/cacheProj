# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
FREQ_WEIGHT = 0.4
RECENCY_WEIGHT = 0.4
PREDICT_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains a frequency count for each cache entry, a recency score, and a machine learning model that predicts future access patterns. It also keeps track of the current workload to adjust the weights of different strategies dynamically.
frequency_count = {}
recency_score = {}
machine_learning_model = {}  # This should be represented by a dictionary or any appropriate data structure

time_tracker = {}  # Dict to track the recency score (last access time)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by combining the frequency count, recency score, and the prediction from the machine learning model. It dynamically adjusts the weight of each factor based on the current workload and access patterns to select the least valuable entry for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_value = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        freq_score = frequency_count.get(key, 0)
        recency_value = cache_snapshot.access_count - time_tracker.get(key, cache_snapshot.access_count)
        pred_score = machine_learning_model.get(key, 0)
        
        combined_score = FREQ_WEIGHT * freq_score + RECENCY_WEIGHT * recency_value + PREDICT_WEIGHT * pred_score
        
        if combined_score < min_value:
            min_value = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the frequency count of the accessed entry, updates its recency score, and feeds the access information to the machine learning model to improve future predictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    frequency_count[obj.key] = frequency_count.get(obj.key, 0) + 1
    recency_score[obj.key] = cache_snapshot.access_count
    time_tracker[obj.key] = cache_snapshot.access_count
    
    # Update machine learning model with the new access information
    # Simple heuristic for demonstration: increment prediction value
    machine_learning_model[obj.key] = machine_learning_model.get(obj.key, 0) + 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its frequency count and recency score, and updates the machine learning model with the new access pattern. It also adjusts the weights of the strategies based on the current workload.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    frequency_count[obj.key] = 1
    recency_score[obj.key] = cache_snapshot.access_count
    time_tracker[obj.key] = cache_snapshot.access_count
    
    # Initialize machine learning model for the new entry
    machine_learning_model[obj.key] = 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an entry, the policy removes its metadata, updates the machine learning model with the eviction decision, and recalibrates the weights of the strategies to better align with the observed access patterns and workload.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in frequency_count:
        del frequency_count[evicted_obj.key]
    
    if evicted_obj.key in recency_score:
        del recency_score[evicted_obj.key]
        
    if evicted_obj.key in time_tracker:
        del time_tracker[evicted_obj.key]
    
    if evicted_obj.key in machine_learning_model:
        del machine_learning_model[evicted_obj.key]
    
    # Update machine learning model with the eviction information
    # Simple heuristic: decrement the prediction value
    for key in machine_learning_model:
        machine_learning_model[key] = max(0, machine_learning_model[key] - 1)