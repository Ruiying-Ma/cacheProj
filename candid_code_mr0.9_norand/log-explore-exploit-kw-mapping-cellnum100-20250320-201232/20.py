# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_PRIORITY_SCORE = 1
INITIAL_ACCESS_FREQUENCY = 1
INITIAL_RECENCY = 0
INITIAL_DISCOVERY_TIMESTAMP = 0

# Put the metadata specifically maintained by the policy below. The policy maintains a priority score, access frequency, recency, partition identifier, sequence of access steps, system load metrics, hierarchical structure for access paths, and discovery timestamps for each cached item.
metadata = {
    'priority_score': {},
    'access_frequency': {},
    'recency': {},
    'partition_id': {},
    'sequence_of_access_steps': {},
    'system_load_metrics': {},
    'hierarchical_structure': {},
    'discovery_timestamp': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the partition with the lowest overall priority and uses a pathfinding algorithm to locate the least recently used path within that partition. It then evicts the item with the lowest combination of access frequency and priority score along that path.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    partitions = {}
    for key, cached_obj in cache_snapshot.cache.items():
        partition_id = metadata['partition_id'][key]
        if partition_id not in partitions:
            partitions[partition_id] = []
        partitions[partition_id].append(key)
    
    lowest_priority_partition = min(partitions, key=lambda pid: sum(metadata['priority_score'][key] for key in partitions[pid]))
    
    lru_path = sorted(partitions[lowest_priority_partition], key=lambda key: metadata['recency'][key])
    
    candid_obj_key = min(lru_path, key=lambda key: (metadata['access_frequency'][key], metadata['priority_score'][key]))
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, recency, and priority score of the accessed item. It also updates the sequence of access steps, hierarchical structure to reflect the most recent access path, and adjusts the discovery timestamp and system load metrics if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['priority_score'][key] += 1
    metadata['sequence_of_access_steps'][key].append(cache_snapshot.access_count)
    metadata['hierarchical_structure'][key] = cache_snapshot.access_count
    metadata['discovery_timestamp'][key] = cache_snapshot.access_count
    metadata['system_load_metrics'][key] = cache_snapshot.size

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy assigns initial values for access frequency, recency, priority score, and discovery timestamp. It places the object in the appropriate partition, initializes its sequence of access steps, updates the hierarchical structure to include the new item, and adjusts system load metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['priority_score'][key] = INITIAL_PRIORITY_SCORE
    metadata['access_frequency'][key] = INITIAL_ACCESS_FREQUENCY
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['partition_id'][key] = hash(key) % 10  # Example partitioning
    metadata['sequence_of_access_steps'][key] = [cache_snapshot.access_count]
    metadata['hierarchical_structure'][key] = cache_snapshot.access_count
    metadata['discovery_timestamp'][key] = cache_snapshot.access_count
    metadata['system_load_metrics'][key] = cache_snapshot.size

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata of the evicted item from all tracking structures. It recalculates the priority scores of remaining items in the affected partition, updates the sequence of access steps, hierarchical structure, and system load metrics to reflect the removal.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    partition_id = metadata['partition_id'][evicted_key]
    
    del metadata['priority_score'][evicted_key]
    del metadata['access_frequency'][evicted_key]
    del metadata['recency'][evicted_key]
    del metadata['partition_id'][evicted_key]
    del metadata['sequence_of_access_steps'][evicted_key]
    del metadata['hierarchical_structure'][evicted_key]
    del metadata['discovery_timestamp'][evicted_key]
    del metadata['system_load_metrics'][evicted_key]
    
    for key in cache_snapshot.cache:
        if metadata['partition_id'][key] == partition_id:
            metadata['priority_score'][key] = max(metadata['priority_score'][key] - 1, 0)
            metadata['sequence_of_access_steps'][key].append(cache_snapshot.access_count)
            metadata['hierarchical_structure'][key] = cache_snapshot.access_count
            metadata['system_load_metrics'][key] = cache_snapshot.size