# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
DIMENSIONALITY_SCORE_MULTIPLIER = 1.0
PROBABILITY_SCORE_MULTIPLIER = 1.0
RECENCY_MULTIPLIER = 1.0
FREQUENCY_MULTIPLIER = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains a hierarchical structure of cached objects, access frequency, recency, and a probability score for each item. Each item is also associated with a dimensionality contribution score.
cache_hierarchy = {}
cache_metadata = {}

def calculate_probability_score(frequency, recency):
    return FREQUENCY_MULTIPLIER * frequency + RECENCY_MULTIPLIER * recency

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates multiple eviction candidates simultaneously, prioritizing items in lower hierarchy levels with higher eviction probabilities. It selects the item with the least dimensionality contribution among those with similar access frequency and recency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_dimensionality_score = float('inf')
    
    for key in cache_snapshot.cache.keys():
        metadata = cache_metadata.get(key, {})
        frequency = metadata.get('frequency', 0)
        recency = metadata.get('recency', 0)
        probability_score = calculate_probability_score(frequency, recency)
        dimensionality_score = metadata.get('dimensionality_score', 0)
        
        if (candid_obj_key is None or 
            probability_score > calculate_probability_score(
              cache_metadata[candid_obj_key]['frequency'], 
              cache_metadata[candid_obj_key]['recency']) or 
            (probability_score == calculate_probability_score(
              cache_metadata[candid_obj_key]['frequency'], 
              cache_metadata[candid_obj_key]['recency']) and 
             dimensionality_score < min_dimensionality_score)):
            candid_obj_key = key
            min_dimensionality_score = dimensionality_score
            
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the item are updated, and its probability score is recalculated. The item's position in the hierarchy may be adjusted based on the new frequency and recency data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata = cache_metadata.setdefault(key, {})
    metadata['frequency'] = metadata.get('frequency', 0) + 1
    metadata['recency'] = cache_snapshot.access_count
    metadata['probability_score'] = calculate_probability_score(metadata['frequency'], metadata['recency'])
    cache_hierarchy.setdefault(metadata['probability_score'], []).append(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy assigns initial values for access frequency, recency, probability score, and dimensionality contribution. The object is placed in the appropriate level of the hierarchy based on these initial values.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata = {
        'frequency': 1,
        'recency': cache_snapshot.access_count,
        'probability_score': calculate_probability_score(1, cache_snapshot.access_count),
        'dimensionality_score': obj.size * DIMENSIONALITY_SCORE_MULTIPLIER
    }
    cache_metadata[key] = metadata
    cache_hierarchy.setdefault(metadata['probability_score'], []).append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy recalculates the probability scores and dimensionality contributions for the remaining items. The hierarchical structure is adjusted to reflect the removal, and access frequency and recency data are updated accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in cache_metadata:
        evicted_metadata = cache_metadata.pop(evicted_key)
        probability_score = evicted_metadata['probability_score']
        if probability_score in cache_hierarchy:
            cache_hierarchy[probability_score].remove(evicted_key)
            if not cache_hierarchy[probability_score]:
                del cache_hierarchy[probability_score]
    
    # Recalculate probability scores and dimensionality contribution
    for key, metadata in cache_metadata.items():
        metadata['probability_score'] = calculate_probability_score(metadata['frequency'], metadata['recency'])
        cache_hierarchy.setdefault(metadata['probability_score'], []).append(key)