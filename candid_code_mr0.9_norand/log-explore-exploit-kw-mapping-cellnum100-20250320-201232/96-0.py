# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
AGE_FACTOR = 0.5
PHEROMONE_REINFORCE = 1.0
INITIAL_FITNESS = 1.0
INITIAL_PHEROMONE = 1.0
DECAY_FACTOR = 0.1

# Put the metadata specifically maintained by the policy below. Each cache line maintains a fitness score based on access frequency and recency, a virtual pheromone level indicating its likelihood of being retained, and a communication log with neighboring cache lines to share local information.
cache_metadata = {
    'fitness_scores': {},  # Format: {obj.key: fitness_score}
    'pheromone_levels': {}  # Format: {obj.key: pheromone_level}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by evaluating the fitness scores and pheromone levels of all cache lines. The cache line with the lowest combined score is selected for eviction, with occasional adjustments based on information from neighboring cache lines.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_combined_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        fitness_score = cache_metadata['fitness_scores'][key]
        pheromone_level = cache_metadata['pheromone_levels'][key]
        combined_score = fitness_score + (1 / (pheromone_level + 1))
        
        if combined_score < min_combined_score:
            min_combined_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the fitness score of the accessed cache line is increased, and its pheromone level is reinforced. Neighboring cache lines are informed of the access to adjust their local decisions accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    cache_metadata['fitness_scores'][key] += 1
    cache_metadata['pheromone_levels'][key] += PHEROMONE_REINFORCE

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the cache line's initial fitness score is set based on a default value, and its pheromone level is initialized. Neighboring cache lines are updated about the new insertion to maintain collective awareness.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    cache_metadata['fitness_scores'][key] = INITIAL_FITNESS
    cache_metadata['pheromone_levels'][key] = INITIAL_PHEROMONE

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the fitness scores and pheromone levels of all remaining cache lines are slightly adjusted to reflect the change in the cache environment. Neighboring cache lines are notified of the eviction to update their local information.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    if evicted_key in cache_metadata['fitness_scores']:
        del cache_metadata['fitness_scores'][evicted_key]
        del cache_metadata['pheromone_levels'][evicted_key]
    
    for key in cache_metadata['fitness_scores']:
        cache_metadata['fitness_scores'][key] *= (1 - DECAY_FACTOR)
        cache_metadata['pheromone_levels'][key] *= (1 - DECAY_FACTOR)