# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

from collections import defaultdict

# Put tunable constant parameters below
PRIORITY_FREQUENCY_WEIGHT = 0.4
PRIORITY_RECENCY_WEIGHT = 0.4
PRIORITY_SIZE_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached item, including its size, access frequency, recency of access, and a priority score. Additionally, it keeps a list of potential eviction candidates and tracks access patterns to recognize frequently accessed data.

cache_metadata = defaultdict(lambda: {
    'size': 0,
    'access_frequency': 0,
    'recency': 0,
    'priority_score': 0,
})

def calculate_priority_score(obj, access_count):
    '''
    Calculates the priority score using the tunable constant parameters.
    '''
    freq_score = PRIORITY_FREQUENCY_WEIGHT * cache_metadata[obj.key]['access_frequency']
    recency_score = PRIORITY_RECENCY_WEIGHT * (access_count - cache_metadata[obj.key]['recency'])
    size_score = PRIORITY_SIZE_WEIGHT * obj.size
    return freq_score + recency_score - size_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    '''
    candid_obj_key = None
    lowest_priority_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        priority_score = calculate_priority_score(cached_obj, cache_snapshot.access_count)
        if priority_score < lowest_priority_score:
            lowest_priority_score = priority_score
            candid_obj_key = key
            
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    '''
    cache_metadata[obj.key]['access_frequency'] += 1
    cache_metadata[obj.key]['recency'] = cache_snapshot.access_count
    cache_metadata[obj.key]['priority_score'] = calculate_priority_score(obj, cache_snapshot.access_count)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    '''
    cache_metadata[obj.key] = {
        'size': obj.size,
        'access_frequency': 1,
        'recency': cache_snapshot.access_count,
        'priority_score': calculate_priority_score(obj, cache_snapshot.access_count),
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    '''
    del cache_metadata[evicted_obj.key]