# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
LRU_WEIGHT = 1.0
LFU_WEIGHT = 1.0
MRU_WEIGHT = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for LRU, LFU, and MRU strategies, including access timestamps, access frequencies, and most recently used flags. It also keeps a dynamic weight vector for each strategy, a list of potential eviction candidates, and a feedback mechanism to track hit and miss rates.
access_times = {}
access_frequencies = {}
most_recently_used = {}
strategy_weights = {"LRU": LRU_WEIGHT, "LFU": LFU_WEIGHT, "MRU": MRU_WEIGHT}
eviction_candidates = set()

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects eviction candidates based on a weighted combination of LRU, LFU, and MRU scores. It dynamically adjusts the weights based on current workload and access patterns. The final eviction victim is chosen from the candidates by evaluating real-time access patterns and system state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    def get_score(key):
        lru_score = time.time() - access_times[key]
        lfu_score = access_frequencies[key]
        mru_score = -most_recently_used[key]
        
        score = (strategy_weights["LRU"] * lru_score +
                 strategy_weights["LFU"] * lfu_score +
                 strategy_weights["MRU"] * mru_score)
        return score
    
    min_score = float('inf')
    for key in cache_snapshot.cache:
        score = get_score(key)
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access timestamp for LRU, increments the access frequency for LFU, and sets the MRU flag. It also adjusts the weights of the strategies based on the hit rate feedback mechanism.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    access_times[obj.key] = time.time()
    access_frequencies[obj.key] += 1
    most_recently_used[obj.key] = cache_snapshot.access_count
    
    hit_rate = cache_snapshot.hit_count / cache_snapshot.access_count
    strategy_weights["LRU"] = 1.0 + 0.1 * hit_rate 
    strategy_weights["LFU"] = 1.0 + 0.1 * hit_rate 
    strategy_weights["MRU"] = 1.0 - 0.1 * hit_rate 

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access timestamp, access frequency, and MRU flag for the new entry. It also updates the list of potential eviction candidates and adjusts the strategy weights based on the current system state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    access_times[obj.key] = time.time()
    access_frequencies[obj.key] = 1
    most_recently_used[obj.key] = cache_snapshot.access_count
    eviction_candidates.add(obj.key)
    
    load_factor = cache_snapshot.size / cache_snapshot.capacity
    strategy_weights["LRU"] = 1.0 - 0.1 * load_factor
    strategy_weights["LFU"] = 1.0 + 0.1 * load_factor
    strategy_weights["MRU"] = 1.0 - 0.1 * load_factor

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata of the evicted object, updates the list of potential eviction candidates, and adjusts the strategy weights based on the miss rate feedback mechanism.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    if evicted_obj.key in access_times:
        del access_times[evicted_obj.key]
    if evicted_obj.key in access_frequencies:
        del access_frequencies[evicted_obj.key]
    if evicted_obj.key in most_recently_used:
        del most_recently_used[evicted_obj.key]
    eviction_candidates.remove(evicted_obj.key)
    
    miss_rate = cache_snapshot.miss_count / cache_snapshot.access_count
    strategy_weights["LRU"] = 1.0 - 0.1 * miss_rate
    strategy_weights["LFU"] = 1.0 + 0.1 * miss_rate
    strategy_weights["MRU"] = 1.0 + 0.1 * miss_rate