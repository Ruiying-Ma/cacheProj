from collections import deque, defaultdict

# Put tunable constant parameters below
GHOST_QUEUE_CAPACITY = 10

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, priority level, synchronization status, and ghost status. It also tracks two LRU queues (T1 and T2) and two FIFO ghost queues (B1 and B2).
access_frequency = defaultdict(int)
recency = defaultdict(int)
priority_level = defaultdict(float)
sync_status = defaultdict(bool)
T1 = deque()
T2 = deque()
B1 = deque()
B2 = deque()

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evicts the object with the lowest priority level, considering both access frequency and recency. If T1 is not empty, the least-recently-used object from T1 is evicted; otherwise, the least-recently-used object from T2 is evicted. Evicted objects are moved to the corresponding ghost queue (B1 or B2).
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    if T1:
        evict_key = T1.popleft()
        B1.append(evict_key)
    else:
        evict_key = T2.popleft()
        B2.append(evict_key)
    
    if len(B1) > GHOST_QUEUE_CAPACITY:
        B1.popleft()
    if len(B2) > GHOST_QUEUE_CAPACITY:
        B2.popleft()
    
    if cache_snapshot.size + obj.size - cache_snapshot.cache[evict_key].size > cache_snapshot.capacity:
        # Continue evicting till space is enough if just removing one item is not sufficient
        while cache_snapshot.size + obj.size > cache_snapshot.capacity:
            if T1:
                evict_key = T1.popleft()
                B1.append(evict_key)
            else:
                evict_key = T2.popleft()
                B2.append(evict_key)
            if len(B1) > GHOST_QUEUE_CAPACITY:
                B1.popleft()
            if len(B2) > GHOST_QUEUE_CAPACITY:
                B2.popleft()
                
    return evict_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the accessed item are updated. The priority level is recalculated based on the new frequency and recency values. The synchronization status is updated if applicable. The item is moved to the most-recently-used end of T2.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    access_frequency[obj.key] += 1
    recency[obj.key] = cache_snapshot.access_count
    priority_level[obj.key] = access_frequency[obj.key] / (cache_snapshot.access_count - recency[obj.key] + 1)
    
    if obj.key in T1:
        T1.remove(obj.key)
        T2.append(obj.key)
    else:
        T2.remove(obj.key)
        T2.append(obj.key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its access frequency is initialized, and its recency is set to the current time. The priority level is calculated based on these initial values. The synchronization status is set. If the object was in B1 or B2, it is moved to the most-recently-used end of T2; otherwise, it is placed in T1.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    access_frequency[obj.key] = 1
    recency[obj.key] = cache_snapshot.access_count
    priority_level[obj.key] = access_frequency[obj.key] / (cache_snapshot.access_count - recency[obj.key] + 1)
    sync_status[obj.key] = True
    
    if obj.key in B1:
        B1.remove(obj.key)
        T2.append(obj.key)
    elif obj.key in B2:
        B2.remove(obj.key)
        T2.append(obj.key)
    else:
        T1.append(obj.key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, its metadata, including access frequency, recency, priority level, and synchronization status, is moved to the corresponding ghost queue (B1 or B2). The ghost queue is managed to ensure it does not exceed a predefined size, evicting the oldest items if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evict_key = evicted_obj.key

    if evict_key in T1:
        T1.remove(evict_key)
        B1.append(evict_key)
        if len(B1) > GHOST_QUEUE_CAPACITY:
            B1.popleft()
    elif evict_key in T2:
        T2.remove(evict_key)
        B2.append(evict_key)
        if len(B2) > GHOST_QUEUE_CAPACITY:
            B2.popleft()

    # Remove metadata related to the evicted object
    del access_frequency[evict_key]
    del recency[evict_key]
    del priority_level[evict_key]
    del sync_status[evict_key]