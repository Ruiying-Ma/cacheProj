# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_SIZE = 1.0
WEIGHT_ACCESS_FREQ = 1.0
WEIGHT_LAST_ACCESS_TIME = 1.0
WEIGHT_PREDICTIVE_SCORE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, object size, and a predictive score for each cached item. It also tracks the current load and access patterns to dynamically adjust eviction priorities.
metadata = {
    # key: (access_freq, last_access_time, object_size, predictive_score)
}

def calculate_score(key, cache_snapshot):
    access_freq, last_access_time, object_size, predictive_score = metadata[key]
    current_time = cache_snapshot.access_count
    score = (
        WEIGHT_SIZE * object_size +
        WEIGHT_ACCESS_FREQ * (1 / (1 + access_freq)) +
        WEIGHT_LAST_ACCESS_TIME * (current_time - last_access_time) +
        WEIGHT_PREDICTIVE_SCORE * predictive_score
    )
    return score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by considering a weighted score that combines the object's size, access frequency, last access time, and predictive score. Items with lower scores are prioritized for eviction, with adjustments based on current load and access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for key in cache_snapshot.cache:
        score = calculate_score(key, cache_snapshot)
        if score < min_score:
            min_score = score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, last access time, and recalculates the predictive score for the accessed item. It also adjusts the overall load and access pattern metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_freq, _, object_size, predictive_score = metadata[key]
    metadata[key] = (
        access_freq + 1,
        cache_snapshot.access_count,
        object_size,
        predictive_score
    )

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata including access frequency, last access time, object size, and predictive score. It also updates the overall load and access pattern metrics to reflect the new state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = (
        1,  # initial access frequency
        cache_snapshot.access_count,  # last access time
        obj.size,  # object size
        0.0  # initial predictive score
    )

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata of the evicted item and recalculates the overall load and access pattern metrics to account for the change in the cache's state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Remove metadata of the evicted item
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]