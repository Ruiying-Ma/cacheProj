# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
FREQUENCY_WEIGHT = 0.7
RECENCY_WEIGHT = 0.3

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache item, including access frequency, last access timestamp, and a utilization score calculated as a weighted combination of frequency and recency. It also tracks the total cache utilization and a list of items stored in non-volatile memory.
metadata = {}
total_cache_utilization = 0
non_volatile_memory = []

def calculate_utilization_score(frequency, recency):
    return FREQUENCY_WEIGHT * frequency + RECENCY_WEIGHT * recency

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the item with the lowest utilization score. If the item is infrequently accessed but still potentially useful, it is moved to non-volatile memory instead of being discarded.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_utilization_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        freq = metadata[key]['frequency']
        recency = cache_snapshot.access_count - metadata[key]['last_access']
        utilization_score = calculate_utilization_score(freq, recency)
        
        if utilization_score < lowest_utilization_score:
            lowest_utilization_score = utilization_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and last access timestamp of the item. The utilization score is recalculated based on the updated frequency and recency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['frequency'] += 1
    metadata[key]['last_access'] = cache_snapshot.access_count
    freq = metadata[key]['frequency']
    recency = cache_snapshot.access_count - metadata[key]['last_access']
    metadata[key]['utilization_score'] = calculate_utilization_score(freq, recency)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and last access timestamp. The utilization score is set based on these initial values, and the total cache utilization is updated.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'frequency': 1,
        'last_access': cache_snapshot.access_count,
        'utilization_score': calculate_utilization_score(1, cache_snapshot.access_count)
    }
    global total_cache_utilization
    total_cache_utilization += obj.size

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy removes its metadata from the cache and updates the total cache utilization. If the item is moved to non-volatile memory, it is added to the list of items stored there.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    global total_cache_utilization
    total_cache_utilization -= evicted_obj.size
    
    if metadata[key]['frequency'] < 5:  # Arbitrary threshold for moving to non-volatile memory
        non_volatile_memory.append(evicted_obj)
    
    del metadata[key]