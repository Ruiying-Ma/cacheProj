# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

from collections import defaultdict, deque

# Put tunable constant parameters below
LATENCY_REDUCTION_CONST = 1.0
PRIORITY_CONST = 1.0
HIERARCHICAL_IMPORTANCE_CONST = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency counters, timestamps of last access, estimated future access patterns, latency reduction metrics, priority scores, data size, recency, and hierarchical importance scores for each cache line. It also uses a doubly linked list to track the order of access.
access_frequency = defaultdict(int)
timestamps_last_access = {}
latency_reduction = defaultdict(float)
priority_scores = defaultdict(float)
estimated_future_access = defaultdict(float)
data_size = {}
recency = {}
hierarchical_importance = defaultdict(float)
access_order = deque()

def calculate_combined_score(key):
    return (access_frequency[key] + 
            latency_reduction[key] * LATENCY_REDUCTION_CONST +
            priority_scores[key] * PRIORITY_CONST + 
            hierarchical_importance[key] * HIERARCHICAL_IMPORTANCE_CONST +
            recency[key])

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates multiple eviction candidates simultaneously, considering access frequency, recency, data size, latency reduction, and hierarchical importance. The object with the lowest combined score is chosen for eviction, ensuring an optimal balance of cache performance factors. If multiple objects have the same score, the least recently used object is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candidate_keys = list(cache_snapshot.cache.keys())
    lowest_score = float('inf')
    candid_obj_key = None

    for key in candidate_keys:
        combined_score = calculate_combined_score(key)
        if combined_score < lowest_score:
            lowest_score = combined_score
            candid_obj_key = key
        elif combined_score == lowest_score:
            if timestamps_last_access[key] < timestamps_last_access[candid_obj_key]:
                candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency counter, updates the latency reduction metric, refines the estimated future access pattern, updates the timestamp of last access, recalculates the autonomous priority score, adjusts the hierarchical importance score if necessary, and moves the object to the front of the doubly linked list to mark it as most recently used.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] += 1
    latency_reduction[key] = 1 / (cache_snapshot.access_count - access_frequency[key] + 1)
    estimated_future_access[key] = access_frequency[key] / (cache_snapshot.access_count - timestamps_last_access[key] + 1)
    timestamps_last_access[key] = cache_snapshot.access_count
    priority_scores[key] = access_frequency[key] * estimated_future_access[key]
    hierarchical_importance[key] = data_size[key] / obj.size
    access_order.remove(key)
    access_order.appendleft(key)
    recency[key] = cache_snapshot.access_count - timestamps_last_access[key]

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency counter, latency reduction metric, priority score, timestamp of last access, estimated future access pattern, data size, recency, and hierarchical importance score. It places the new object at the front of the doubly linked list.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    access_frequency[key] = 0
    latency_reduction[key] = 0.0
    priority_scores[key] = 0.0
    timestamps_last_access[key] = cache_snapshot.access_count
    estimated_future_access[key] = 0.0
    data_size[key] = obj.size
    recency[key] = 0
    hierarchical_importance[key] = 0.0
    access_order.appendleft(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the evicted object from the doubly linked list and resets its metadata. The hierarchical importance scores and autonomous priority scores of remaining objects are recalibrated if necessary to reflect the new cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    access_order.remove(key)
    del access_frequency[key]
    del latency_reduction[key]
    del priority_scores[key]
    del timestamps_last_access[key]
    del estimated_future_access[key]
    del data_size[key]
    del recency[key]
    del hierarchical_importance[key]
    
    # Recalibrate hierarchical importance and priority scores for remaining objects
    for existing_key in cache_snapshot.cache:
        hierarchical_importance[existing_key] = data_size[existing_key] / obj.size
        priority_scores[existing_key] = access_frequency[existing_key] * estimated_future_access[existing_key]