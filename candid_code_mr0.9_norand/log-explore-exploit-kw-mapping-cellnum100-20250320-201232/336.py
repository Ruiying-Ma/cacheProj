# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
LRU_WEIGHT = 0.5
LFU_WEIGHT = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains a hierarchical structure of data access patterns, a machine learning model for access prediction, and counters for access frequency and recency. It also tracks the current workload to adapt the eviction strategy dynamically.
access_frequency = collections.defaultdict(int)
access_recency = collections.defaultdict(int)
current_time = 0

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy uses the machine learning model to predict the least likely accessed items and considers the hierarchical structure to prioritize evictions. It dynamically adapts between LRU, LFU, and other strategies based on the current workload, giving higher priority to items with lower access frequency and recency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        lru_score = current_time - access_recency[key]
        lfu_score = access_frequency[key]
        score = LRU_WEIGHT * lru_score + LFU_WEIGHT * lfu_score
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and recency counters for the accessed item, adjusts the hierarchical structure to reflect the access, and retrains the machine learning model with the new access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    global current_time
    current_time += 1
    access_frequency[obj.key] += 1
    access_recency[obj.key] = current_time

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy updates the hierarchical structure to include the new item, initializes its access frequency and recency counters, and incorporates the new data into the machine learning model for future predictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    global current_time
    current_time += 1
    access_frequency[obj.key] = 1
    access_recency[obj.key] = current_time

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the evicted item from the hierarchical structure, updates the machine learning model to exclude the evicted item, and adjusts the workload tracking to reflect the change in cache contents.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in access_frequency:
        del access_frequency[evicted_obj.key]
    if evicted_obj.key in access_recency:
        del access_recency[evicted_obj.key]