# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
OVERFLOW_AREA_SIZE = 10

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, priority level, synchronization status, and an overflow area for recently evicted items.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'recency': {},           # {obj.key: last_access_time}
    'priority_level': {},    # {obj.key: priority}
    'synchronization_status': {},  # {obj.key: sync_status}
    'overflow_area': []      # [(obj.key, metadata)]
}

def calculate_priority(frequency, recency):
    # Example priority calculation: higher frequency and more recent access give higher priority
    return frequency / (recency + 1)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on the lowest priority level, considering both access frequency and recency. If multiple items have the same priority, the least recently synchronized item is evicted first. Evicted items are moved to the overflow area.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_priority = float('inf')
    least_sync_time = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        priority = metadata['priority_level'][key]
        sync_status = metadata['synchronization_status'][key]
        if priority < lowest_priority or (priority == lowest_priority and sync_status < least_sync_time):
            lowest_priority = priority
            least_sync_time = sync_status
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the accessed item are updated. The priority level is recalculated based on the new frequency and recency values. The synchronization status is also updated if applicable.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['priority_level'][key] = calculate_priority(metadata['access_frequency'][key], metadata['recency'][key])
    metadata['synchronization_status'][key] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its access frequency is initialized, and its recency is set to the current time. The priority level is calculated based on these initial values. The synchronization status is set, and the overflow area is checked for any recent evictions of the same item.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['priority_level'][key] = calculate_priority(metadata['access_frequency'][key], metadata['recency'][key])
    metadata['synchronization_status'][key] = cache_snapshot.access_count

    # Check overflow area for recent evictions of the same item
    for i, (evicted_key, evicted_metadata) in enumerate(metadata['overflow_area']):
        if evicted_key == key:
            metadata['overflow_area'].pop(i)
            break

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, its metadata is moved to the overflow area, including its access frequency, recency, priority level, and synchronization status. The overflow area is managed to ensure it does not exceed a predefined size, evicting the oldest items if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    evicted_metadata = {
        'access_frequency': metadata['access_frequency'].pop(evicted_key),
        'recency': metadata['recency'].pop(evicted_key),
        'priority_level': metadata['priority_level'].pop(evicted_key),
        'synchronization_status': metadata['synchronization_status'].pop(evicted_key)
    }
    metadata['overflow_area'].append((evicted_key, evicted_metadata))

    # Ensure overflow area does not exceed predefined size
    if len(metadata['overflow_area']) > OVERFLOW_AREA_SIZE:
        metadata['overflow_area'].pop(0)