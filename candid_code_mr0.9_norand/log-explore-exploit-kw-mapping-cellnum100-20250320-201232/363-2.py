# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
RELEVANCE_WEIGHT = 0.5
FREQUENCY_WEIGHT = 0.3
TIME_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, and a relevance score for each cached item. It also tracks overall access patterns and workload characteristics to dynamically adjust its strategy.
metadata = {}
overall_access_pattern = collections.defaultdict(int)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by evaluating a combination of low access frequency, older last access time, and low relevance score. Items that contribute the least to the overall data representation are prioritized for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        freq = metadata[key]['frequency']
        last_time = metadata[key]['last_time']
        relevance = metadata[key]['relevance']
        
        # Calculate the eviction score
        score = (FREQUENCY_WEIGHT * freq) + (TIME_WEIGHT * (cache_snapshot.access_count - last_time)) + (RELEVANCE_WEIGHT * relevance)
        
        # Find the object with the minimum score
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and last access time of the item. It also recalculates the relevance score based on the current access patterns and workload characteristics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['frequency'] += 1
    metadata[key]['last_time'] = cache_snapshot.access_count
    metadata[key]['relevance'] = calculate_relevance(metadata[key]['frequency'], metadata[key]['last_time'], key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, last access time, and relevance score. It also updates the overall access patterns and workload characteristics to reflect the new addition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'frequency': 1,
        'last_time': cache_snapshot.access_count,
        'relevance': 0  # Initialize relevance, will be calculated based on access patterns
    }
    metadata[key]['relevance'] = calculate_relevance(metadata[key]['frequency'], metadata[key]['last_time'], key)
    update_overall_access_pattern(obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata of the evicted item and recalculates the overall access patterns and workload characteristics to ensure they accurately represent the current state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    update_overall_access_pattern(evicted_obj, remove=True)

def calculate_relevance(frequency, last_time, key):
    '''
    Calculate relevance based on frequency, last_time, and overall access patterns.
    - Args:
        - `frequency`: Access frequency of the item.
        - `last_time`: Last access time of the item.
        - `key`: Key of the item.
    - Return: `relevance`: Calculated relevance score.
    '''
    # Example relevance calculation based on overall access patterns.
    overall_pattern_value = overall_access_pattern[key]
    relevance = (1 / (1 + frequency)) + overall_pattern_value
    return relevance

def update_overall_access_pattern(obj, remove=False):
    '''
    Update overall access patterns and workload characteristics.
    - Args:
        - `obj`: The object to update patterns with.
        - `remove`: Boolean flag whether to remove the object's pattern (default is False).
    - Return: `None`
    '''
    if remove:
        if overall_access_pattern[obj.key] > 0:
            overall_access_pattern[obj.key] -= 1
    else:
        overall_access_pattern[obj.key] += 1