# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
LRU_WEIGHT = 0.5
LFU_WEIGHT = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for access frequency, recency, and partition-specific data. It also tracks the current workload pattern to dynamically adjust the eviction strategy.
access_frequency = {}
access_recency = {}
workload_pattern = {"LRU": 0, "LFU": 0}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first determining the current workload pattern. It then selects the least recently used or least frequently used item from the appropriate partition, or evicts the least recently used copy if redundancy is in play.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_score = float('inf')
    for key, cached_obj in cache_snapshot.cache.items():
        lru_score = cache_snapshot.access_count - access_recency[key]
        lfu_score = access_frequency[key]
        score = LRU_WEIGHT * lru_score + LFU_WEIGHT * lfu_score
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and recency metadata for the accessed item. It also adjusts the workload pattern metadata to reflect the current access behavior.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    access_frequency[obj.key] += 1
    access_recency[obj.key] = cache_snapshot.access_count
    workload_pattern["LRU"] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy updates the access frequency and recency metadata for the new item. It also updates the partition-specific data to ensure balanced cache management.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    access_frequency[obj.key] = 1
    access_recency[obj.key] = cache_snapshot.access_count
    workload_pattern["LFU"] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy updates the access frequency and recency metadata to remove the evicted item. It also adjusts the workload pattern and partition-specific data to maintain optimal performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    del access_frequency[evicted_obj.key]
    del access_recency[evicted_obj.key]
    workload_pattern["LRU"] -= 1
    workload_pattern["LFU"] -= 1