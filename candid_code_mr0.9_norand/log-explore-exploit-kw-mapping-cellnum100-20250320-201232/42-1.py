# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
RECENCY_WEIGHT = 0.3
FREQUENCY_WEIGHT = 0.3
PREDICTIVE_WEIGHT = 0.2
CONTEXTUAL_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, a predictive score from a machine learning model, and contextual relevance scores. Additionally, it tracks the layer each item belongs to in a multi-layered cache structure.

metadata = {
    # key: {access_frequency, recency, predictive_score, contextual_score, layer}
    # Example: 'object_key': {'access_frequency': 10, 'recency': 100, 'predictive_score': 0.5, 'contextual_score': 0.7, 'layer': 1}
}

def get_composite_score(data):
    return (RECENCY_WEIGHT * data['recency'] + 
            FREQUENCY_WEIGHT * data['access_frequency'] + 
            PREDICTIVE_WEIGHT * data['predictive_score'] + 
            CONTEXTUAL_WEIGHT * data['contextual_score'])

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by evaluating a composite score derived from access frequency, recency, predictive score, and contextual relevance. Items in the lowest-priority layer are considered first, and within that layer, the item with the lowest composite score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_layer = float('inf')

    # Find the lowest priority layer
    for key in cache_snapshot.cache.keys():
        current_layer = metadata[key]['layer']
        if current_layer < lowest_layer:
            lowest_layer = current_layer
            
    # Find the item with the lowest composite score within the lowest priority layer
    lowest_score = float('inf')
    for key in cache_snapshot.cache.keys():
        if metadata[key]['layer'] == lowest_layer:
            composite_score = get_composite_score(metadata[key])
            if composite_score < lowest_score:
                lowest_score = composite_score
                candid_obj_key = key
                
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and recency of the accessed item, recalculates its predictive score using the machine learning model, and adjusts its contextual relevance score based on recent access patterns. The item's layer may also be adjusted if its composite score changes significantly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['access_frequency'] += 1
    metadata[key]['recency'] = cache_snapshot.access_count
    
    # Assume a machine learning model function called "predictive_model"
    metadata[key]['predictive_score'] = predictive_model(obj)

    # Adjust the contextual relevance score based on access patterns
    recency_difference = cache_snapshot.access_count - metadata[key]['recency']
    metadata[key]['contextual_score'] = 1 / recency_difference if recency_difference else 1

    # Adjust the layer based on composite score change
    current_composite_score = get_composite_score(metadata[key])
    sorted_keys = sorted(cache_snapshot.cache.keys(), key=lambda k: get_composite_score(metadata[k]), reverse=True)
    
    new_layer = sorted_keys.index(key) // (len(sorted_keys) // 3 + 1)
    metadata[key]['layer'] = new_layer

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency, predictive score, and contextual relevance score. The item is placed in the appropriate layer based on its initial composite score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'access_frequency': 1,
        'recency': cache_snapshot.access_count,
        'predictive_score': predictive_model(obj),
        'contextual_score': 1,
        'layer': 0
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy recalculates the composite scores of remaining items in the same layer to ensure accurate prioritization. It may also adjust the layers of other items if necessary to maintain optimal cache performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    evicted_layer = metadata[evicted_key]['layer']
    del metadata[evicted_key]
    
    for key, data in metadata.items():
        if data['layer'] == evicted_layer:
            data['contextual_score'] = max(0, data['contextual_score'] - 0.1)
            composite_score = get_composite_score(data)

            sorted_keys = sorted(
                (k for k, v in metadata.items() if v['layer'] == evicted_layer),
                key=lambda k: get_composite_score(metadata[k]),
                reverse=True
            )
            new_layer = sorted_keys.index(key) // (len(sorted_keys) // 3 + 1)
            metadata[key]['layer'] = new_layer

def predictive_model(obj):
    # Dummy predictive model for illustration purposes
    # Replace this with the real machine learning model implementation
    # Here, it returns a constant predictive score
    return 0.5