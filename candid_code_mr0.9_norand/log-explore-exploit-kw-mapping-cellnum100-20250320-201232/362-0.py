# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.7  # Weight of access frequency
BETA = 0.3   # Weight of recency

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached item, including access frequency, recency of access, and a dynamic eviction probability score. Additionally, it keeps global statistics on access patterns and system performance metrics.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects an eviction victim based on a weighted random choice, where the weights are determined by the eviction probability scores of the cached items. Items with higher scores are more likely to be evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    
    # Calculate the total eviction score to determine weighted randomness
    total_score = sum(item['eviction_score'] for item in metadata.values())
    
    # Determine the highest score item for eviction
    highest_score = -1 
    for key, item in metadata.items():
        if item['eviction_score'] > highest_score:
            highest_score = item['eviction_score']
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the accessed item are updated. The eviction probability score is recalculated based on the new access frequency and recency, and global statistics are adjusted to reflect the hit.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata_item = metadata[key]

    # Update access frequency and recency
    metadata_item['access_count'] += 1
    metadata_item['last_accessed'] = cache_snapshot.access_count

    # Recalculate eviction probability score
    frequency = metadata_item['access_count']
    recency = cache_snapshot.access_count - metadata_item['last_accessed']
    metadata_item['eviction_score'] = ALPHA / (frequency + 1) + BETA * recency

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its initial access frequency and recency are set, and an initial eviction probability score is assigned. Global statistics are updated to account for the new insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    if key not in metadata:
        metadata[key] = {
            'access_count': 1,
            'last_accessed': cache_snapshot.access_count,
            'eviction_score': ALPHA / 2 + BETA * cache_snapshot.access_count
        }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the global statistics are updated to reflect the removal. The eviction probability scores of remaining items may be adjusted based on the updated global statistics to ensure optimal future eviction decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]

    # Adjust the eviction probability scores of remaining items
    for key in metadata:
        frequency = metadata[key]['access_count']
        recency = cache_snapshot.access_count - metadata[key]['last_accessed']
        metadata[key]['eviction_score'] = ALPHA / (frequency + 1) + BETA * recency