# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict, deque

# Put tunable constant parameters below
EVICTION_CANDIDATES = 5

# Put the metadata specifically maintained by the policy below. The policy maintains a hierarchical structure of cached objects, access frequency, recency, and computational cost for each object. It also keeps a list of heuristics for voting on eviction candidates.
hierarchy = defaultdict(deque)
access_frequency = defaultdict(int)
recency = defaultdict(int)
computational_cost = defaultdict(int)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates multiple eviction candidates in parallel, considering access frequency, recency, and computational cost. It uses a hierarchical structure to prioritize lower levels for eviction and employs a consensus mechanism where multiple heuristics vote on the eviction victim.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    candidates = []
    for level in sorted(hierarchy.keys()):
        if len(hierarchy[level]) == 0:
            continue
        for candidate_key in hierarchy[level]:
            candidates.append(candidate_key)
            if len(candidates) >= EVICTION_CANDIDATES:
                break
        if len(candidates) >= EVICTION_CANDIDATES:
            break

    if not candidates:
        return list(cache_snapshot.cache.keys())[0]

    min_score = float('inf')
    for candidate_key in candidates:
        score = (access_frequency[candidate_key] + 
                 (cache_snapshot.access_count - recency[candidate_key]) +
                 computational_cost[candidate_key])
        if score < min_score:
            min_score = score
            candid_obj_key = candidate_key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency and recency of the accessed object. It also adjusts the object's position in the hierarchical structure based on the updated metadata.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    access_frequency[obj.key] += 1
    recency[obj.key] = cache_snapshot.access_count

    current_level = computational_cost[obj.key]
    hierarchy[current_level].remove(obj.key)
    new_level = access_frequency[obj.key] // 10
    computational_cost[obj.key] = new_level
    hierarchy[new_level].append(obj.key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency, and computational cost. It places the object in the appropriate level of the hierarchy and updates the list of heuristics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    access_frequency[obj.key] = 1
    recency[obj.key] = cache_snapshot.access_count
    computational_cost[obj.key] = 0
    hierarchy[0].append(obj.key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata from the hierarchical structure and updates the list of heuristics to reflect the change. It also recalculates the computational cost distribution among the remaining objects.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    key = evicted_obj.key
    level = computational_cost[key]
    if key in hierarchy[level]:
        hierarchy[level].remove(key)
    if key in access_frequency:
        del access_frequency[key]
    if key in recency:
        del recency[key]
    if key in computational_cost:
        del computational_cost[key]
        
    # After eviction, no need to adjust hierarchy or other lists