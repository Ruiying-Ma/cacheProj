# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
DIMENSIONS = 3  # Number of dimensions in the coordinate system

# Put the metadata specifically maintained by the policy below. The policy maintains a multi-dimensional coordinate system for each cached object based on access patterns, a frequency counter for each group of similar items, and a random eviction counter to ensure uniform distribution.
cache_metadata = {
    'coordinates': {},  # Stores coordinates of each object
    'frequency': {},    # Stores frequency of each object
    'eviction_counter': 0  # Counter to ensure uniform distribution
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates the distance of each object from the origin in the coordinate system and selects the object furthest from the origin within the least frequently accessed group. If a tie occurs, a random object from the tied set is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_frequency = float('inf')
    max_distance = -1

    for key, cached_obj in cache_snapshot.cache.items():
        frequency = cache_metadata['frequency'][key]
        coordinates = cache_metadata['coordinates'][key]
        distance = math.sqrt(sum(coord ** 2 for coord in coordinates))

        if frequency < min_frequency or (frequency == min_frequency and distance > max_distance):
            min_frequency = frequency
            max_distance = distance
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the object's coordinates are updated to reflect the latest access pattern, and the frequency counter for its group is incremented.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    cache_metadata['frequency'][key] += 1
    cache_metadata['coordinates'][key] = [cache_snapshot.access_count] * DIMENSIONS

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its initial coordinates are set based on the current access pattern, and it is added to the appropriate group with an initial frequency count.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    cache_metadata['frequency'][key] = 1
    cache_metadata['coordinates'][key] = [cache_snapshot.access_count] * DIMENSIONS

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After eviction, the policy updates the frequency counter of the group from which the object was evicted and adjusts the random eviction counter to maintain uniform distribution.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del cache_metadata['frequency'][evicted_key]
    del cache_metadata['coordinates'][evicted_key]
    cache_metadata['eviction_counter'] += 1