# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
INITIAL_REWARD = 1
HIT_REWARD_INCREMENT = 1

# Put the metadata specifically maintained by the policy below. The policy maintains a reward score for each cached item, a feedback log of past eviction decisions, and a predictive model for future access patterns.
reward_scores = collections.defaultdict(lambda: INITIAL_REWARD)
feedback_log = []
predictive_model = collections.defaultdict(lambda: 0)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the item with the lowest reward score, while also considering feedback from past evictions and predictions of future access patterns to refine the decision.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = reward_scores[key]
        # Predictive model adjustment
        predicted_access = predictive_model[key]
        if predicted_access > 0:
            score -= predicted_access
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increases the reward score of the accessed item and updates the predictive model to reflect the recent access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    reward_scores[obj.key] += HIT_REWARD_INCREMENT
    predictive_model[obj.key] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its reward score based on initial access frequency and recency, and updates the predictive model to include the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    reward_scores[obj.key] = INITIAL_REWARD
    predictive_model[obj.key] = cache_snapshot.access_count

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy logs the decision in the feedback log, adjusts the predictive model based on the outcome, and recalibrates the reward scores of remaining items if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    feedback_log.append((evicted_obj.key, cache_snapshot.access_count))
    predictive_model.pop(evicted_obj.key, None)
    reward_scores.pop(evicted_obj.key, None)