# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_FITNESS_SCORE = 1

# Put the metadata specifically maintained by the policy below. Each cache line maintains a fitness score, which is a combination of access frequency and recency. Additionally, a global score representing the collective behavior of all cache lines is maintained.
fitness_scores = {}
global_score = 0

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evicts the cache line with the lowest fitness score. If multiple lines have the same score, it probabilistically chooses among them, allowing for state transitions and exploration of different cache configurations.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_score = float('inf')
    candidates = []

    for key, cached_obj in cache_snapshot.cache.items():
        score = fitness_scores.get(key, 0)
        if score < min_score:
            min_score = score
            candidates = [key]
        elif score == min_score:
            candidates.append(key)
    
    # Select the candidate with the minimum key value for deterministic behavior
    if candidates:
        candid_obj_key = min(candidates)
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the fitness score of the accessed cache line is increased based on a predefined function that considers both frequency and recency. The global score is also updated to reflect the change in the collective behavior.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    
    # Update the fitness score based on access frequency and recency
    if key in fitness_scores:
        fitness_scores[key] += 1  # increase fitness
    else:
        fitness_scores[key] = INITIAL_FITNESS_SCORE
    
    # Update the global score
    global global_score
    global_score = sum(fitness_scores.values())

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    When a new object is inserted, it is assigned an initial fitness score based on its insertion time. The global score is recalculated to include the new cache line's contribution.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key

    # Assign initial fitness score
    fitness_scores[key] = INITIAL_FITNESS_SCORE

    # Update the global score
    global global_score
    global_score = sum(fitness_scores.values())

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a cache line, the global score is updated to remove the contribution of the evicted line. The fitness scores of remaining lines may be adjusted to reflect the new state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    
    if evicted_key in fitness_scores:
        del fitness_scores[evicted_key]
    
    # Update the global score
    global global_score
    global_score = sum(fitness_scores.values())