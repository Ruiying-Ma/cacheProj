# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

from collections import defaultdict, deque

# Put tunable constant parameters below
EVICTION_CANDIDATE_COUNT = 3
BASELINE_FREQUENCY = 1
BASELINE_PREDICTION_SCORE = 1
BASELINE_RECENCY = 0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, a probabilistic score for eviction candidacy, and a learned prediction score for future access likelihood.

frequency = defaultdict(int)
recency = defaultdict(int)
eviction_prob_score = defaultdict(float)
prediction_score = defaultdict(float)
time = 0  # We can use this as the global time for recency tracking

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy probabilistically selects multiple candidates for eviction based on their scores, then chooses the final victim by balancing recency, frequency, and prediction scores, prioritizing items with lower scores.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    global time
    
    # Your code below
    candidates = sorted(
        cache_snapshot.cache.values(),
        key=lambda x: eviction_prob_score[x.key] + frequency[x.key] - recency[x.key] + prediction_score[x.key]
    )[:EVICTION_CANDIDATE_COUNT]

    # Pick candidate with lowest eviction score
    candid_obj = min(candidates, key=lambda x: eviction_prob_score[x.key])
    
    candid_obj_key = candid_obj.key
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the recency and frequency metadata for the accessed item, and adjusts its prediction score based on the latest access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    global time
    
    # Your code below
    obj_key = obj.key
    frequency[obj_key] += 1
    recency[obj_key] = time
    prediction_score[obj_key] -= 1  # We make a simple assumption here that an accessed object is likely to be accessed again soon

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata with a baseline frequency, recency, and prediction score, and updates the probabilistic score for eviction candidacy.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    global time

    # Your code below
    obj_key = obj.key
    frequency[obj_key] = BASELINE_FREQUENCY
    recency[obj_key] = time
    prediction_score[obj_key] = BASELINE_PREDICTION_SCORE
    eviction_prob_score[obj_key] = 1.0 / cache_snapshot.capacity  # This is a simple initial score; might be adjusted for different heuristics

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy recalibrates the probabilistic scores for remaining items, and updates the prediction model to improve future eviction decisions based on the latest access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    global time

    # Your code below
    evicted_obj_key = evicted_obj.key

    # Remove the metadata for the evicted object
    if evicted_obj_key in frequency:
        del frequency[evicted_obj_key]
    if evicted_obj_key in recency:
        del recency[evicted_obj_key]
    if evicted_obj_key in eviction_prob_score:
        del eviction_prob_score[evicted_obj_key]
    if evicted_obj_key in prediction_score:
        del prediction_score[evicted_obj_key]

    # Update the probability scores of remaining items; we adjust agility based on new cache state
    current_size = cache_snapshot.size
    
    for key in cache_snapshot.cache:
        eviction_prob_score[key] = frequency[key] + recency[key] - prediction_score[key]