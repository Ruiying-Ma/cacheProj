# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below
LFU_WEIGHT = 1
LRU_WEIGHT = 1

# Put the metadata specifically maintained by the policy below. The policy maintains a mapping table that tracks the frequency (LFU) and recency (LRU) of access for each cached object, as well as dependency counts indicating how many other objects depend on each cached object.
recency_map = {}  # LRU: obj.key -> last accessed time
frequency_map = defaultdict(int)  # LFU: obj.key -> access count
dependency_map = defaultdict(int)  # obj.key -> dependency count

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy dynamically chooses the eviction victim based on the current workload. It can switch between LRU and LFU strategies, and it prioritizes evicting items with the fewest dependencies to ensure that critical items remain in the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    for key, cached_obj in cache_snapshot.cache.items():
        lru_score = cache_snapshot.access_count - recency_map[key]
        lfu_score = frequency_map[key]
        dep_score = dependency_map[key]
        total_score = LFU_WEIGHT * lfu_score + LRU_WEIGHT * lru_score + dep_score
        if total_score < min_score:
            min_score = total_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the recency information (LRU) and increments the frequency count (LFU) for the accessed object. It also updates the dependency counts if the accessed object has dependencies.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    frequency_map[obj.key] += 1
    recency_map[obj.key] = cache_snapshot.access_count
    # In this basic implementation, we do not manage dependencies

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its recency and frequency metadata, and sets its dependency count based on the current state of the cache. It also updates the mapping table to include the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    frequency_map[obj.key] = 1
    recency_map[obj.key] = cache_snapshot.access_count
    # Initialize dependencies based on the current cache state
    dependency_map[obj.key] = 0  # Initial dependency count set to 0

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata from the mapping table and adjusts the dependency counts of any objects that depended on the evicted object. It also recalculates the overall strategy based on the current workload.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in recency_map:
        del recency_map[evicted_obj.key]
    if evicted_obj.key in frequency_map:
        del frequency_map[evicted_obj.key]
    if evicted_obj.key in dependency_map:
        del dependency_map[evicted_obj.key]

    # In a more advanced implementation, we would reduce dependency counts on the evicted object's dependencies
    # This basic example does not manage dynamic dependencies beyond the initialization