# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import deque, defaultdict

# Put tunable constant parameters below

# Define coefficients for calculating dynamic priority score
LRU_WEIGHT = 1.0
LFU_WEIGHT = 1.0
FIFO_WEIGHT = 1.0
LIFO_WEIGHT = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains an LRU queue, a frequency count, a timestamp of the last access, a dynamic priority score, a miss ratio tracker, and a current strategy indicator (LRU, LFU, FIFO, LIFO).

lru_queue = deque()
frequency_count = defaultdict(int)
last_access_time = {}
dynamic_priority_score = {}
miss_ratio_tracker = []
strategy_indicator = 'LRU'

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy periodically scans the cache and evicts the object with the lowest dynamic priority score, which is calculated based on a combination of LRU, LFU, FIFO, and LIFO principles. The strategy is dynamically adjusted based on the miss ratio tracker.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    current_time = cache_snapshot.access_count
    
    for key, cached_obj in cache_snapshot.cache.items():
        lru_score = current_time - last_access_time[key]
        lfu_score = frequency_count[key]
        fifo_score = cache_snapshot.access_count - last_access_time[key]
        lifo_score = current_time
        
        score = (LRU_WEIGHT * lru_score) + (LFU_WEIGHT / (lfu_score + 1)) + (FIFO_WEIGHT * fifo_score) + (LIFO_WEIGHT / (lifo_score + 1))
        dynamic_priority_score[key] = score
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the frequency count of the accessed item is incremented, the last access timestamp is updated, the item's recency is set to the current timestamp, it is moved to the most-recently-used end of the LRU queue, and the priority score is recalculated. The miss ratio tracker is updated to determine if a strategy switch is needed.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    frequency_count[key] += 1
    last_access_time[key] = current_time
    
    if key in lru_queue:
        lru_queue.remove(key)
    lru_queue.append(key)
    
    # Update miss ratio tracker
    miss_ratio = (cache_snapshot.miss_count / (cache_snapshot.miss_count + cache_snapshot.hit_count)) if (cache_snapshot.hit_count + cache_snapshot.miss_count) > 0 else 0
    miss_ratio_tracker.append(miss_ratio)
    
    # To keep the tracker size manageable
    if len(miss_ratio_tracker) > 100:
        miss_ratio_tracker.pop(0)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the frequency count is initialized, the current timestamp is recorded as the last access and insertion time, the item's recency is set to the current timestamp, it is placed at the most-recently-used end of the LRU queue, a base priority score is assigned, and the miss ratio tracker is updated to reflect the new state of the cache. The strategy indicator may be adjusted based on the updated miss ratio.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    frequency_count[key] = 1
    last_access_time[key] = current_time
    
    if key in lru_queue:
        lru_queue.remove(key)
    lru_queue.append(key)
    
    dynamic_priority_score[key] = 0  # Initial base priority score
    
    # Update miss ratio tracker
    miss_ratio = (cache_snapshot.miss_count / (cache_snapshot.miss_count + cache_snapshot.hit_count)) if (cache_snapshot.hit_count + cache_snapshot.miss_count) > 0 else 0
    miss_ratio_tracker.append(miss_ratio)
    
    # To keep the tracker size manageable
    if len(miss_ratio_tracker) > 100:
        miss_ratio_tracker.pop(0)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the frequency count, timestamp, and priority score of the evicted item are removed, the item is removed from the LRU queue, and the miss ratio tracker is updated. The strategy indicator is reassessed to ensure optimal performance based on the current workload.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    
    if key in frequency_count:
        del frequency_count[key]
    if key in last_access_time:
        del last_access_time[key]
    if key in dynamic_priority_score:
        del dynamic_priority_score[key]
    if key in lru_queue:
        lru_queue.remove(key)
    
    # Update miss ratio tracker
    miss_ratio = (cache_snapshot.miss_count / (cache_snapshot.miss_count + cache_snapshot.hit_count)) if (cache_snapshot.hit_count + cache_snapshot.miss_count) > 0 else 0
    miss_ratio_tracker.append(miss_ratio)
    
    # To keep the tracker size manageable
    if len(miss_ratio_tracker) > 100:
        miss_ratio_tracker.pop(0)