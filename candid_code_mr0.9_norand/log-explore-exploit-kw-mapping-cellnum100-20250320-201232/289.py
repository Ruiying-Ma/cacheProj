# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict, deque

# Put tunable constant parameters below
TABU_LIST_SIZE = 100
NUM_LRU_QUEUES = 5

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, priority level, synchronization status, relationship strength score, an ordered list of items, k LRU queues, dynamic priority scores, partitions based on access frequency, an ordered list of access times, fitness scores, virtual pheromone levels, and a tabu list of recently evicted items.
metadata = {
    'access_frequency': defaultdict(int),
    'recency': {},
    'priority_level': defaultdict(int),
    'synchronization_status': defaultdict(bool),
    'relationship_strength_score': defaultdict(int),
    'ordered_list': deque(),
    'lru_queues': [deque() for _ in range(NUM_LRU_QUEUES)],
    'dynamic_priority_scores': defaultdict(int),
    'partitions': defaultdict(list),
    'access_times': {},
    'fitness_scores': defaultdict(int),
    'pheromone_levels': defaultdict(int),
    'tabu_list': deque()
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on the lowest combined score of priority level, access frequency, recency, and pheromone level. If there is a tie, it considers the relationship strength score. The tabu list is checked to avoid re-adding recently evicted items. If partitions are full, it evicts from the least frequently accessed partition first.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        if key in metadata['tabu_list']:
            continue
        
        score = (metadata['priority_level'][key] + 
                 metadata['access_frequency'][key] + 
                 cache_snapshot.access_count - metadata['recency'][key] + 
                 metadata['pheromone_levels'][key])
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
        elif score == min_score:
            if metadata['relationship_strength_score'][key] < metadata['relationship_strength_score'][candid_obj_key]:
                candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, recency, priority level, synchronization status, relationship strength score, and pheromone level of the accessed item. It recalculates the fitness score, moves the item to the front of the ordered list, updates the access time, and moves the item to the most-recently-used end of the appropriate LRU queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['priority_level'][key] += 1
    metadata['synchronization_status'][key] = True
    metadata['relationship_strength_score'][key] += 1
    metadata['pheromone_levels'][key] += 1
    metadata['fitness_scores'][key] = (metadata['priority_level'][key] + 
                                       metadata['access_frequency'][key] + 
                                       metadata['pheromone_levels'][key])
    
    if key in metadata['ordered_list']:
        metadata['ordered_list'].remove(key)
    metadata['ordered_list'].appendleft(key)
    
    metadata['access_times'][key] = cache_snapshot.access_count
    
    for queue in metadata['lru_queues']:
        if key in queue:
            queue.remove(key)
            break
    metadata['lru_queues'][0].appendleft(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency, priority level, synchronization status, relationship strength score, and pheromone level. It sets the initial fitness score, checks the tabu list, places the item at the front of the ordered list, inserts it into the appropriate LRU queue, and updates the ordered list with the current access time.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['priority_level'][key] = 1
    metadata['synchronization_status'][key] = True
    metadata['relationship_strength_score'][key] = 1
    metadata['pheromone_levels'][key] = 1
    metadata['fitness_scores'][key] = (metadata['priority_level'][key] + 
                                       metadata['access_frequency'][key] + 
                                       metadata['pheromone_levels'][key])
    
    if key in metadata['tabu_list']:
        metadata['tabu_list'].remove(key)
    
    metadata['ordered_list'].appendleft(key)
    metadata['lru_queues'][0].appendleft(key)
    metadata['access_times'][key] = cache_snapshot.access_count

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy moves its metadata to the overflow area, adjusts the relationship strength scores of remaining items, updates the ordered list, ensures the overflow area does not exceed a predefined size, adjusts partition sizes if necessary, redistributes remaining items, and adds the evicted item to the tabu list with a timestamp.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    metadata['tabu_list'].append((key, cache_snapshot.access_count))
    if len(metadata['tabu_list']) > TABU_LIST_SIZE:
        metadata['tabu_list'].popleft()
    
    if key in metadata['ordered_list']:
        metadata['ordered_list'].remove(key)
    
    for queue in metadata['lru_queues']:
        if key in queue:
            queue.remove(key)
            break
    
    for k, v in metadata.items():
        if isinstance(v, dict) and key in v:
            del v[key]
    
    for remaining_key in cache_snapshot.cache:
        metadata['relationship_strength_score'][remaining_key] -= 1