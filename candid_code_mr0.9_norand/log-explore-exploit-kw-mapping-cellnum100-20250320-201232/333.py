# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict, deque

# Put tunable constant parameters below
LRU_WEIGHT = 0.4
LFU_WEIGHT = 0.4
FIFO_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency, sensitivity level, validation score, insertion time, dynamic weights for LRU, LFU, and FIFO algorithms, timestamps of last access, and estimated future access patterns. It also tracks segment load metrics and the performance of each algorithm.
metadata = {
    'access_frequency': defaultdict(int),
    'recency': {},
    'sensitivity_level': defaultdict(lambda: 1),
    'validation_score': defaultdict(lambda: 1),
    'insertion_time': {},
    'last_access': {},
    'future_access_pattern': defaultdict(lambda: 1),
    'segment_load': defaultdict(int),
    'algorithm_performance': {'LRU': 0, 'LFU': 0, 'FIFO': 0},
    'dynamic_weights': {'LRU': LRU_WEIGHT, 'LFU': LFU_WEIGHT, 'FIFO': FIFO_WEIGHT},
    'fifo_queue': deque()
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy identifies the segment with the highest load and selects potential eviction candidates with the lowest validation scores. It then uses a combination of LRU, LFU, and FIFO with dynamic weights and estimated future access patterns to probabilistically choose the eviction victim, with the final decision made by majority agreement among the algorithms.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Identify the segment with the highest load
    highest_load_segment = max(metadata['segment_load'], key=metadata['segment_load'].get)
    
    # Select potential eviction candidates with the lowest validation scores
    candidates = [key for key, value in cache_snapshot.cache.items() if metadata['validation_score'][key] == min(metadata['validation_score'].values())]
    
    # Use a combination of LRU, LFU, and FIFO with dynamic weights to choose the eviction victim
    lru_candidate = min(candidates, key=lambda k: metadata['last_access'][k])
    lfu_candidate = min(candidates, key=lambda k: metadata['access_frequency'][k])
    fifo_candidate = metadata['fifo_queue'][0]
    
    # Majority agreement among the algorithms
    votes = defaultdict(int)
    votes[lru_candidate] += metadata['dynamic_weights']['LRU']
    votes[lfu_candidate] += metadata['dynamic_weights']['LFU']
    votes[fifo_candidate] += metadata['dynamic_weights']['FIFO']
    
    candid_obj_key = max(votes, key=votes.get)
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, recency, validation score, and timestamp of last access for the accessed item. It refines the estimated future access pattern, adjusts the load metrics for the segment, and updates the dynamic weights of the algorithms based on their contribution to the hit.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['last_access'][key] = cache_snapshot.access_count
    metadata['validation_score'][key] += 1
    metadata['future_access_pattern'][key] += 1
    # Adjust dynamic weights based on the hit
    metadata['algorithm_performance']['LRU'] += 1
    metadata['algorithm_performance']['LFU'] += 1
    metadata['algorithm_performance']['FIFO'] += 1
    total_performance = sum(metadata['algorithm_performance'].values())
    metadata['dynamic_weights']['LRU'] = metadata['algorithm_performance']['LRU'] / total_performance
    metadata['dynamic_weights']['LFU'] = metadata['algorithm_performance']['LFU'] / total_performance
    metadata['dynamic_weights']['FIFO'] = metadata['algorithm_performance']['FIFO'] / total_performance

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency, sensitivity level, validation score, insertion time, and timestamp of last access. It sets an initial estimated future access pattern based on historical data, updates the load metrics for the segment, and adjusts the dynamic weights of the algorithms to reflect the success of the insertion strategy.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['sensitivity_level'][key] = 1
    metadata['validation_score'][key] = 1
    metadata['insertion_time'][key] = cache_snapshot.access_count
    metadata['last_access'][key] = cache_snapshot.access_count
    metadata['future_access_pattern'][key] = 1
    metadata['fifo_queue'].append(key)
    # Update segment load metrics
    segment = obj.size
    metadata['segment_load'][segment] += obj.size
    # Adjust dynamic weights based on the insertion
    metadata['algorithm_performance']['LRU'] += 1
    metadata['algorithm_performance']['LFU'] += 1
    metadata['algorithm_performance']['FIFO'] += 1
    total_performance = sum(metadata['algorithm_performance'].values())
    metadata['dynamic_weights']['LRU'] = metadata['algorithm_performance']['LRU'] / total_performance
    metadata['dynamic_weights']['LFU'] = metadata['algorithm_performance']['LFU'] / total_performance
    metadata['dynamic_weights']['FIFO'] = metadata['algorithm_performance']['FIFO'] / total_performance

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy clears the metadata for the evicted entry, including access frequency, recency, sensitivity level, validation score, insertion time, timestamp of last access, and estimated future access pattern. It updates the load metrics for the affected segment, recalculates the validation scores for the remaining items, and adjusts the dynamic weights of the algorithms based on the performance of the eviction decision.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    # Clear metadata for the evicted entry
    del metadata['access_frequency'][key]
    del metadata['recency'][key]
    del metadata['sensitivity_level'][key]
    del metadata['validation_score'][key]
    del metadata['insertion_time'][key]
    del metadata['last_access'][key]
    del metadata['future_access_pattern'][key]
    metadata['fifo_queue'].remove(key)
    # Update segment load metrics
    segment = evicted_obj.size
    metadata['segment_load'][segment] -= evicted_obj.size
    # Recalculate validation scores for the remaining items
    for k in cache_snapshot.cache:
        metadata['validation_score'][k] = metadata['access_frequency'][k] + metadata['recency'][k] + metadata['future_access_pattern'][k]
    # Adjust dynamic weights based on the eviction
    metadata['algorithm_performance']['LRU'] += 1
    metadata['algorithm_performance']['LFU'] += 1
    metadata['algorithm_performance']['FIFO'] += 1
    total_performance = sum(metadata['algorithm_performance'].values())
    metadata['dynamic_weights']['LRU'] = metadata['algorithm_performance']['LRU'] / total_performance
    metadata['dynamic_weights']['LFU'] = metadata['algorithm_performance']['LFU'] / total_performance
    metadata['dynamic_weights']['FIFO'] = metadata['algorithm_performance']['FIFO'] / total_performance