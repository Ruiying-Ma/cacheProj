# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
FREQ_WEIGHT = 0.2
REC_WEIGHT = 0.2
SIZE_WEIGHT = 0.2
IMP_WEIGHT = 0.2
DEP_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached item, including access frequency, recency (last access time), data size, importance score, and dependency count. Additionally, it keeps a global history of access patterns to adaptively learn and predict future accesses.
metadata = {}
global_history = collections.defaultdict(int)

def calculate_importance(freq, rec, size, dep):
    return (FREQ_WEIGHT * freq + REC_WEIGHT * rec + SIZE_WEIGHT / size + DEP_WEIGHT * dep)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates an eviction score for each item based on a weighted combination of its access frequency, recency, data size, importance score, and dependency count. The item with the lowest eviction score is chosen as the victim.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_eviction_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[cached_obj.key]
        freq = meta['freq']
        rec = meta['rec']
        size = cached_obj.size
        imp = meta['imp']
        dep = meta['dep']
        eviction_score = (FREQ_WEIGHT * freq 
                          + REC_WEIGHT * (cache_snapshot.access_count - rec) 
                          + SIZE_WEIGHT * size 
                          + IMP_WEIGHT * imp 
                          + DEP_WEIGHT * dep)
        
        if eviction_score < min_eviction_score:
            min_eviction_score = eviction_score
            candid_obj_key = cached_obj.key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the item are updated. The importance score is recalculated based on the new access pattern, and the global history is updated to reflect the access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta['freq'] += 1
    meta['rec'] = cache_snapshot.access_count
    meta['imp'] = calculate_importance(meta['freq'], meta['rec'], obj.size, meta['dep'])
    global_history[obj.key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new item, its initial metadata (access frequency, recency, data size, importance score, and dependency count) is set. The global history is updated to include the new item, and the importance score is dynamically calculated based on initial access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    freq = 1
    rec = cache_snapshot.access_count
    dep = 0  # Initially, assume no dependencies
    imp = calculate_importance(freq, rec, obj.size, dep)
    metadata[obj.key] = {'freq': freq, 'rec': rec, 'imp': imp, 'dep': dep}
    global_history[obj.key] = 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the global history is updated to remove the evicted item. The importance scores of remaining items are recalculated if necessary, and dependency counts are adjusted to reflect the removal.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del global_history[evicted_obj.key]
    del metadata[evicted_obj.key]

    for key, value in metadata.items():
        value['imp'] = calculate_importance(value['freq'], value['rec'], cache_snapshot.cache[key].size, value['dep'])