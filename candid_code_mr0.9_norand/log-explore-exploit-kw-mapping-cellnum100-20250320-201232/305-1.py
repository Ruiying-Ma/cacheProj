# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import datetime

# Put tunable constant parameters below
ALPHA = 0.7  # Weight for frequency
BETA = 0.2   # Weight for recency
GAMMA = 0.1  # Weight for prediction score

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency, a machine learning model's prediction score for future access, and a log of eviction reasons.
cache_metadata = {
    "frequency": {},  # Track the access frequency of each object
    "recency": {},  # Track the recency (timestamp) of each object
    "pred_scores": {},  # Store prediction scores for future accesses (dummy values here, assume static)
    "eviction_log": [],  # Log with reasons for eviction
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim. 
    The policy evaluates multiple eviction candidates simultaneously, using a combination of access frequency, recency, and prediction scores to select the least likely to be accessed item. The reason for eviction is logged for clarity.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        frequency = cache_metadata["frequency"][key]
        recency = cache_snapshot.access_count - cache_metadata["recency"][key]
        pred_score = cache_metadata["pred_scores"].get(key, 0)
        
        score = ALPHA * frequency + BETA * recency + GAMMA * pred_score
        if score < lowest_score:
            lowest_score = score
            candid_obj_key = key
    
    cache_metadata["eviction_log"].append({
        "time": datetime.datetime.now(),
        "evicted_key": candid_obj_key,
        "reason": f"Least likely to be accessed: score={lowest_score}",
    })
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and recency of the accessed item, and adjusts the prediction model based on the new access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    
    cache_metadata["frequency"][key] += 1
    cache_metadata["recency"][key] = cache_snapshot.access_count
    
    # Update prediction model (e.g., to include access pattern change)
    cache_metadata["pred_scores"][key] = 0.5  # Example: new prediction score
    
def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and recency, and updates the prediction model to include the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    
    cache_metadata["frequency"][key] = 1
    cache_metadata["recency"][key] = cache_snapshot.access_count
    
    # Update prediction model to include new object
    cache_metadata["pred_scores"][key] = 0.1  # Example: initial prediction score
    
def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy logs the reason for eviction, updates the prediction model to remove the evicted item, and adjusts the access frequency and recency metadata accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    # Remove evicted object from metadata
    if evicted_key in cache_metadata["frequency"]:
        del cache_metadata["frequency"][evicted_key]
    if evicted_key in cache_metadata["recency"]:
        del cache_metadata["recency"][evicted_key]
    if evicted_key in cache_metadata["pred_scores"]:
        del cache_metadata["pred_scores"][evicted_key]
    
    # Log the eviction reason
    cache_metadata["eviction_log"].append({
        "time": datetime.datetime.now(),
        "evicted_key": evicted_key,
        "reason": "Evicted to make space for new object",
    })