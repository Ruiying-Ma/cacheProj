# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_FEEDBACK_SCORE = 0
INITIAL_PRIORITY_SCORE = 1
PRIORITY_INCREASE_ON_HIT = 1
PRIORITY_ADJUST_AFTER_EVICT = -1
FEEDBACK_INCREMENT_ON_HIT = 1
FEEDBACK_ADJUST_AFTER_EVICT = -1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry, including access timestamps, a feedback score based on past eviction success, and a priority score from competing algorithms. Additionally, it keeps a shared information table for collaborative caches.
metadata = {}
shared_information_table = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates multiple eviction candidates in parallel, considering their recency of access, feedback scores, and priority scores. It selects the candidate with the lowest combined score for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_combined_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        entry_metadata = metadata[key]
        combined_score = (cache_snapshot.access_count - entry_metadata['timestamp']) + entry_metadata['feedback'] + entry_metadata['priority']
        
        if combined_score < lowest_combined_score:
            lowest_combined_score = combined_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access timestamp is updated to the current time, the feedback score is incremented to reflect a successful retention, and the priority score of the predicting algorithm is adjusted upwards.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    if key in metadata:
        metadata[key]['timestamp'] = cache_snapshot.access_count
        metadata[key]['feedback'] += FEEDBACK_INCREMENT_ON_HIT
        metadata[key]['priority'] += PRIORITY_INCREASE_ON_HIT

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata with the current timestamp, a neutral feedback score, and priority scores based on initial predictions from competing algorithms. The shared information table is updated with the new entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'timestamp': cache_snapshot.access_count,
        'feedback': INITIAL_FEEDBACK_SCORE,
        'priority': INITIAL_PRIORITY_SCORE
    }
    shared_information_table[key] = metadata[key]

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the feedback score of the evicted entry is adjusted based on the subsequent hit/miss rate, and the priority score of the predicting algorithm is adjusted accordingly. The shared information table is updated to reflect the eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        metadata[evicted_key]['feedback'] += FEEDBACK_ADJUST_AFTER_EVICT
        metadata[evicted_key]['priority'] += PRIORITY_ADJUST_AFTER_EVICT
        shared_information_table[evicted_key] = metadata[evicted_key]
        del metadata[evicted_key]