# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
CANDIDATES_COUNT = 5  # Number of candidates to evaluate for eviction.
INITIAL_FITNESS_SCORE = 1  # Initial fitness score for new objects.
ADAPTATION_INCREMENT = 0.1  # Increment/decrement to adaptation factor during updates.

# Put the metadata specifically maintained by the policy below. Each cache line maintains a 'fitness score' based on a combination of access frequency and recency. Additionally, a global 'adaptation factor' is maintained to dynamically adjust the weight of frequency and recency based on observed access patterns.
fitness_scores = {}  # Dictionary to store fitness scores for each object.
adaptation_factor = 1.0  # Initial adaptation factor.

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates a subset of cache lines (candidates) and selects the one with the lowest fitness score for eviction. The selection mechanism ensures diversity by choosing candidates from different regions of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    global fitness_scores

    # Divide the cache into regions and select candidates from them
    candidate_keys = []
    num_regions = min(CANDIDATES_COUNT, len(cache_snapshot.cache))
    region_size = len(cache_snapshot.cache) // num_regions

    for i in range(num_regions):
        region_keys = list(cache_snapshot.cache.keys())[i * region_size: (i+1) * region_size]
        if region_keys:
            candidate_keys.append(region_keys[0])  # Pick the first item of the region.

    candid_obj_key = min(candidate_keys, key=lambda key: fitness_scores.get(key, float('inf')))
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the fitness score of the accessed cache line is increased based on the current adaptation factor, which gives more weight to either frequency or recency depending on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    global fitness_scores
    global adaptation_factor

    fitness_scores[obj.key] = fitness_scores.get(obj.key, 0) + adaptation_factor

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    When a new object is inserted, its initial fitness score is set based on the current adaptation factor. The adaptation factor is then adjusted slightly to reflect the new access pattern introduced by the insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    global fitness_scores
    global adaptation_factor

    fitness_scores[obj.key] = INITIAL_FITNESS_SCORE * adaptation_factor
    adaptation_factor += ADAPTATION_INCREMENT

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a cache line, the fitness scores of the remaining cache lines are slightly adjusted to reflect the new cache state. The adaptation factor is also updated to ensure the policy continues to evolve with changing access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    global fitness_scores
    global adaptation_factor

    # Adjust the adaptation factor based on the eviction
    adaptation_factor -= ADAPTATION_INCREMENT
    if adaptation_factor < ADAPTATION_INCREMENT:
        adaptation_factor = ADAPTATION_INCREMENT

    # Adjust fitness scores of remaining objects slightly
    for key in fitness_scores:
        fitness_scores[key] *= adaptation_factor