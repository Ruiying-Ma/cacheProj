# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
INITIAL_LRU_WEIGHT = 0.5
INITIAL_LFU_WEIGHT = 0.3
INITIAL_MRU_WEIGHT = 0.2
WEIGHT_ADJUSTMENT_FACTOR = 0.05

# Put the metadata specifically maintained by the policy below. The policy maintains a FIFO queue, access timestamps, access frequencies, MRU flags, and a dynamic weight vector for LRU, LFU, and MRU strategies. It also keeps a list of potential eviction candidates and a feedback mechanism to track hit and miss rates.

# FIFO Queue
fifo_queue = collections.deque()
# Maps object key to its access timestamp
access_timestamps = {}
# Maps object key to its access frequency
access_frequencies = collections.defaultdict(int)
# Maps object key to its MRU flag
mru_flags = {}
# Weight vector for eviction strategies
weights = {
    "LRU": INITIAL_LRU_WEIGHT,
    "LFU": INITIAL_LFU_WEIGHT,
    "MRU": INITIAL_MRU_WEIGHT
}
# Potential eviction candidates
potential_eviction_candidates = set()

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects eviction candidates based on a weighted combination of LRU, LFU, and MRU scores, with an additional consideration for the FIFO order. The final eviction victim is chosen from the candidates by evaluating real-time access patterns, system state, and FIFO position.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Total weight of all strategies
    total_weight = sum(weights.values())
    
    # Calculate scores for each object
    scores = {}
    current_time = cache_snapshot.access_count
    
    for key in cache_snapshot.cache:
        lru_score = (current_time - access_timestamps[key]) * weights["LRU"]
        lfu_score = access_frequencies[key] * weights["LFU"]
        mru_score = (1 if mru_flags[key] else 0) * weights["MRU"]
        
        # Weighted sum of scores
        scores[key] = (lru_score + lfu_score + mru_score) / total_weight
    
    # Identify the object with the highest score
    candid_obj_key = max(scores, key=scores.get)
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access timestamp for LRU, increments the access frequency for LFU, sets the MRU flag, and adjusts the strategy weights based on the hit rate feedback mechanism. No change is made to the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    access_timestamps[obj.key] = current_time
    access_frequencies[obj.key] += 1
    mru_flags[obj.key] = True
    
    # Adjust weights based on hit rate
    hit_rate = cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)
    weights["LRU"] += WEIGHT_ADJUSTMENT_FACTOR * hit_rate
    weights["LFU"] += WEIGHT_ADJUSTMENT_FACTOR * (1 - hit_rate)
    weights["MRU"] += WEIGHT_ADJUSTMENT_FACTOR * (0.5 - abs(0.5 - hit_rate))

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access timestamp, access frequency, and MRU flag for the new entry. It also updates the list of potential eviction candidates, adjusts the strategy weights based on the current system state, and places the new object at the rear of the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    access_timestamps[obj.key] = current_time
    access_frequencies[obj.key] = 1
    mru_flags[obj.key] = False
    fifo_queue.append(obj.key)
    potential_eviction_candidates.add(obj.key)
    
    # Adjust weights based on current hit rate
    hit_rate = cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)
    weights["LRU"] += WEIGHT_ADJUSTMENT_FACTOR * hit_rate
    weights["LFU"] += WEIGHT_ADJUSTMENT_FACTOR * (1 - hit_rate)
    weights["MRU"] += WEIGHT_ADJUSTMENT_FACTOR * (0.5 - abs(0.5 - hit_rate))

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata of the evicted object, updates the list of potential eviction candidates, adjusts the strategy weights based on the miss rate feedback mechanism, and removes the evicted object from the front of the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del access_timestamps[evicted_obj.key]
    del access_frequencies[evicted_obj.key]
    del mru_flags[evicted_obj.key]
    potential_eviction_candidates.remove(evicted_obj.key)
    fifo_queue.popleft()
    
    # Adjust weights based on miss rate
    miss_rate = cache_snapshot.miss_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)
    weights["LRU"] -= WEIGHT_ADJUSTMENT_FACTOR * miss_rate
    weights["LFU"] -= WEIGHT_ADJUSTMENT_FACTOR * (1 - miss_rate)
    weights["MRU"] -= WEIGHT_ADJUSTMENT_FACTOR * (0.5 - abs(0.5 - miss_rate))