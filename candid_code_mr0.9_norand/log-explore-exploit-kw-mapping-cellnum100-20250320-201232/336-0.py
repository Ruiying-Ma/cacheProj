# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

from collections import defaultdict, deque
import heapq

# Put tunable constant parameters below
# (Example parameters to adjust the relative weight of LRU vs. LFU strategies)

# Put the metadata specifically maintained by the policy below.
access_frequency = defaultdict(int)  # maps object key to frequency
access_recency = defaultdict(int)  # maps object key to recency timestamp
hierarchical_structure = dict()  # Example structure (use your appropriate hierarchical structure)
workload_tracking = defaultdict(int)  # tracks access patterns for workload adaptation
eviction_heap = []  # min-heap to track eviction candidates based on predicted access

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy uses the machine learning model to predict the least likely accessed items and considers the hierarchical structure to prioritize evictions. It dynamically adapts between LRU, LFU, and other strategies based on the current workload, giving higher priority to items with lower access frequency and recency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    # Example: Use a combined score of frequency and recency for eviction
    min_score = float('inf')
    current_time = cache_snapshot.access_count

    for cached_key in cache_snapshot.cache:
        freq = access_frequency[cached_key]
        recency = access_recency[cached_key]
        score = freq * 0.5 + (current_time - recency) * 0.5

        if score < min_score:
            min_score = score
            candid_obj_key = cached_key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and recency counters for the accessed item, adjusts the hierarchical structure to reflect the access, and retrains the machine learning model with the new access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    current_time = cache_snapshot.access_count
    
    # Update access frequency and recency
    access_frequency[obj.key] += 1
    access_recency[obj.key] = current_time

    # Adjust hierarchical structure (example: just using a dictionary for structure tracking)
    hierarchical_structure[obj.key] = (access_frequency[obj.key], access_recency[obj.key])
    
    # Example: Update workload based on access patterns
    workload_tracking[obj.key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy updates the hierarchical structure to include the new item, initializes its access frequency and recency counters, and incorporates the new data into the machine learning model for future predictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    current_time = cache_snapshot.access_count
    
    # Initialize access frequency and recency
    access_frequency[obj.key] = 1
    access_recency[obj.key] = current_time

    # Include the new item into hierarchical structure (example: just using a dictionary for structure tracking)
    hierarchical_structure[obj.key] = (access_frequency[obj.key], access_recency[obj.key])
    
    # Example: Incorporate new data into the workload tracking
    workload_tracking[obj.key] = 1
    
    # Add to eviction heap with initial predicted access time (example: LRU initialization)
    heapq.heappush(eviction_heap, (access_recency[obj.key], obj.key))

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the evicted item from the hierarchical structure, updates the machine learning model to exclude the evicted item, and adjusts the workload tracking to reflect the change in cache contents.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    # Remove evicted object from hierarchical structure
    if evicted_obj.key in hierarchical_structure:
        del hierarchical_structure[evicted_obj.key]
    
    # Update the model to exclude the evicted item
    if evicted_obj.key in access_frequency:
        del access_frequency[evicted_obj.key]
    
    if evicted_obj.key in access_recency:
        del access_recency[evicted_obj.key]
    
    # Adjust workload tracking to reflect the change in cache contents
    if evicted_obj.key in workload_tracking:
        del workload_tracking[evicted_obj.key]

    # Remove the evicted object from the eviction heap
    # (Rebuilding the heap as Python's heapq does not support item removal)
    global eviction_heap
    eviction_heap = [(recency, key) for recency, key in eviction_heap if key != evicted_obj.key]
    heapq.heapify(eviction_heap)