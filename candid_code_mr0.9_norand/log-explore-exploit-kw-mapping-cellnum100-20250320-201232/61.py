# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 1.0
WEIGHT_RECENCY = 1.0
WEIGHT_INSERTION_TIME = 1.0
WEIGHT_LOCALITY_SCORE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency, insertion time, and locality score for each cached object.
metadata = {
    'access_frequency': {},  # obj.key -> access frequency
    'recency': {},           # obj.key -> last access time
    'insertion_time': {},    # obj.key -> insertion time
    'locality_score': {}     # obj.key -> locality score
}

def calculate_score(key, current_time):
    access_frequency = metadata['access_frequency'].get(key, 0)
    recency = metadata['recency'].get(key, current_time)
    insertion_time = metadata['insertion_time'].get(key, current_time)
    locality_score = metadata['locality_score'].get(key, 0)
    
    score = (WEIGHT_ACCESS_FREQUENCY * access_frequency +
             WEIGHT_RECENCY * (current_time - recency) +
             WEIGHT_INSERTION_TIME * (current_time - insertion_time) +
             WEIGHT_LOCALITY_SCORE * locality_score)
    return score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim based on a weighted score derived from access frequency, recency, insertion time, and locality score, prioritizing objects with the lowest combined score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = math.inf
    current_time = cache_snapshot.access_count
    
    for key in cache_snapshot.cache:
        score = calculate_score(key, current_time)
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency, updates the recency timestamp, and adjusts the locality score based on the accessing node's proximity.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['recency'][key] = current_time
    # Assuming locality score adjustment based on some proximity function
    metadata['locality_score'][key] = calculate_locality_score(obj)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy sets the initial access frequency to 1, records the current time as the insertion time, sets the recency timestamp to the current time, and calculates the initial locality score based on the inserting node's proximity.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata['access_frequency'][key] = 1
    metadata['insertion_time'][key] = current_time
    metadata['recency'][key] = current_time
    metadata['locality_score'][key] = calculate_locality_score(obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes all associated metadata for the evicted object and may adjust locality scores of remaining objects if the evicted object was frequently accessed by nearby nodes.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    
    if key in metadata['access_frequency']:
        del metadata['access_frequency'][key]
    if key in metadata['recency']:
        del metadata['recency'][key]
    if key in metadata['insertion_time']:
        del metadata['insertion_time'][key]
    if key in metadata['locality_score']:
        del metadata['locality_score'][key]
    
    # Adjust locality scores of remaining objects if necessary
    adjust_locality_scores(evicted_obj)

def calculate_locality_score(obj):
    # Placeholder function for calculating locality score based on node proximity
    return 0

def adjust_locality_scores(evicted_obj):
    # Placeholder function for adjusting locality scores of remaining objects
    pass