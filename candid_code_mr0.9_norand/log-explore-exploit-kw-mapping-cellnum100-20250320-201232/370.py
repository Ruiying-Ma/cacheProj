# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for priority score
BETA = 0.5   # Weight for time-based access pattern score

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached object, including access frequency, recency of access, a priority score, and a time-based access pattern score. Additionally, it keeps a global access pattern history to identify recurring access patterns over time.
metadata = {}
global_access_pattern_history = {}

def calculate_priority_score(frequency, recency):
    return frequency / (recency + 1)

def calculate_composite_score(priority_score, time_based_score):
    return ALPHA * priority_score + BETA * time_based_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates a composite score for each object based on its priority score and time-based access pattern score. The object with the lowest composite score is chosen as the eviction victim.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_composite_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        priority_score = metadata[key]['priority_score']
        time_based_score = metadata[key]['time_based_score']
        composite_score = calculate_composite_score(priority_score, time_based_score)
        
        if composite_score < min_composite_score:
            min_composite_score = composite_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the accessed object are updated. The priority score is recalculated based on the new frequency and recency values. The time-based access pattern score is adjusted to reflect the recent access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['frequency'] += 1
    metadata[key]['recency'] = cache_snapshot.access_count
    metadata[key]['priority_score'] = calculate_priority_score(metadata[key]['frequency'], metadata[key]['recency'])
    metadata[key]['time_based_score'] = global_access_pattern_history.get(key, 0)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its initial access frequency is set to 1, and its recency is set to the current time. The priority score is initialized based on these values. The time-based access pattern score is set based on the global access pattern history.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'frequency': 1,
        'recency': cache_snapshot.access_count,
        'priority_score': calculate_priority_score(1, cache_snapshot.access_count),
        'time_based_score': global_access_pattern_history.get(key, 0)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the global access pattern history is updated to reflect the removal. The metadata for the evicted object is cleared, and the composite scores for remaining objects are recalculated if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    global_access_pattern_history[evicted_key] = global_access_pattern_history.get(evicted_key, 0) + 1
    
    for key in cache_snapshot.cache:
        metadata[key]['time_based_score'] = global_access_pattern_history.get(key, 0)