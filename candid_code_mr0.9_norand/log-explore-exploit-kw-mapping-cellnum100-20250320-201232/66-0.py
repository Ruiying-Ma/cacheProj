# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
ALPHA = 0.5  # weight for frequency in priority score
BETA = 0.5   # weight for recency in priority score

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached object, including access frequency, recency of access, and a dynamically adjusted priority score. It also tracks overall access patterns to adapt the eviction strategy over time.
cache_metadata = {
    'frequency': {},     # Tracks number of accesses for each object key
    'recency': {},       # Tracks the last access time for each object key
    'priority_score': {} # Tracks the calculated priority score for each object key
}

def calculate_priority_score(freq, recent, total_accesses):
    """
    Calculate the priority score based on frequency and recency.
    """
    normalized_freq = freq / total_accesses if total_accesses > 0 else 0
    normalized_recent = recent / total_accesses if total_accesses > 0 else 0
    return ALPHA * normalized_freq + BETA * normalized_recent

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates a priority score for each object based on its access frequency and recency. Objects with the lowest priority scores are considered for eviction first. The policy also adapts by analyzing access patterns to adjust the weight of frequency and recency in the priority score calculation.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_priority_score = math.inf

    for key, cached_obj in cache_snapshot.cache.items():
        if cache_metadata['priority_score'][key] < lowest_priority_score:
            lowest_priority_score = cache_metadata['priority_score'][key]
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the accessed object are updated. The priority score is recalculated based on the new frequency and recency values. The overall access pattern data is also updated to reflect the hit.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    cache_metadata['frequency'][key] += 1
    cache_metadata['recency'][key] = cache_snapshot.access_count
    cache_metadata['priority_score'][key] = calculate_priority_score(
        cache_metadata['frequency'][key], cache_metadata['recency'][key], cache_snapshot.access_count
    )

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache. 
    After inserting a new object, its initial access frequency and recency are set, and a priority score is calculated. The overall access pattern data is updated to include the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    cache_metadata['frequency'][key] = 1
    cache_metadata['recency'][key] = cache_snapshot.access_count
    cache_metadata['priority_score'][key] = calculate_priority_score(
        cache_metadata['frequency'][key], cache_metadata['recency'][key], cache_snapshot.access_count
    )

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the overall access pattern data is updated to remove the evicted object. The policy may also adjust the weight of frequency and recency in the priority score calculation based on the updated access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    
    del cache_metadata['frequency'][key]
    del cache_metadata['recency'][key]
    del cache_metadata['priority_score'][key]