# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
EVICTION_SET_SIZE = 5  # Number of entries to consider for eviction

# Put the metadata specifically maintained by the policy below. The policy maintains a fitness score, cost score, access frequency, recency of access, trend factor, combined access frequency for groups, dynamic threshold, and performance metrics of eviction strategies.
fitness_scores = {}
cost_scores = {}
access_frequency = {}
recency_of_access = {}
trend_factor = {}
group_access_frequency = {}
dynamic_threshold = 1  # Simple initial value
eviction_strategy_performance = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects a random subset of cache entries and evaluates their fitness and cost scores. It considers both scores and the combined access frequency of groups. The entry with the lowest combined score from the group with the lowest combined access frequency is evicted. If scores are similar, the dynamic threshold and best-performing eviction strategy are used.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None

    # Select the subset of cache entries
    entries = list(cache_snapshot.cache.items())
    subset = entries[:EVICTION_SET_SIZE] if len(entries) <= EVICTION_SET_SIZE else entries[-EVICTION_SET_SIZE:]

    # Calculate the combined scores and group frequencies
    combined_scores = {}
    group_freq = {}

    for key, entry in subset:
        combined_scores[key] = fitness_scores[key] + cost_scores[key]
        group_freq[key] = combined_scores[key] + access_frequency[key]

    # Find the minimum group access frequency
    min_group = min(group_freq, key=lambda k: group_freq[k])

    # Choose the candidate with the minimum combined score
    candid_obj_key = min(group_freq, key=lambda k: combined_scores[k])

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, recency of access, fitness score, cost score, and trend factor of the hit entry. It also updates the combined access frequency for the group and adjusts the dynamic threshold based on new access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    
    access_frequency[key] += 1
    recency_of_access[key] = cache_snapshot.access_count
    fitness_scores[key] += 1  # Example update, assume fitness increases with access
    cost_scores[key] = 1  # Example, assume a fixed cost
    trend_factor[key] = recency_of_access[key] - trend_factor.get(key, 0)

    group_access_frequency[key] = access_frequency[key] + cost_scores[key]
    dynamic_threshold = sum(group_access_frequency.values()) / len(group_access_frequency)  # Simple example

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its fitness score, cost score, access frequency, recency of access, and trend factor. It updates the combined access frequency for the group and recalibrates the dynamic threshold to reflect the new state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    
    fitness_scores[key] = 0  # Initial fitness
    cost_scores[key] = obj.size  # Cost proportional to size
    access_frequency[key] = 1  # Initial access
    recency_of_access[key] = cache_snapshot.access_count
    trend_factor[key] = recency_of_access[key]

    # Update group's combined access frequency
    group_access_frequency[key] = access_frequency[key] + cost_scores[key] 
    dynamic_threshold = sum(group_access_frequency.values()) / len(group_access_frequency)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the evicted entry's metadata, recalculates the combined access frequency for the group, and adjusts the fitness scores of remaining entries if necessary. It updates the performance metrics of the eviction strategy used and recalibrates the dynamic threshold.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    
    # Remove evicted entry metadata
    if key in fitness_scores:
        del fitness_scores[key]
    if key in cost_scores:
        del cost_scores[key]
    if key in access_frequency:
        del access_frequency[key]
    if key in recency_of_access:
        del recency_of_access[key]
    if key in trend_factor:
        del trend_factor[key]
    if key in group_access_frequency:
        del group_access_frequency[key]

    # Update the group's combined access frequency
    dynamic_threshold = sum(group_access_frequency.values()) / len(group_access_frequency) \
                        if group_access_frequency else dynamic_threshold