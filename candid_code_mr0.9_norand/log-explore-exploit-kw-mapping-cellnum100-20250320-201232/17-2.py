# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQ = 0.4
WEIGHT_RECENCY = 0.3
WEIGHT_IMPORTANCE = 0.3

# Put the metadata specifically maintained by the policy below. The policy maintains a multi-layered structure with metadata for each layer: access frequency, recency of access, and importance score. It also keeps track of workload characteristics and access patterns over time.
metadata = {
    'access_frequency': {},
    'recency': {},
    'importance_score': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by evaluating items across all layers, prioritizing eviction based on a weighted combination of low access frequency, low recency, and low importance score. It dynamically adjusts weights based on observed access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (WEIGHT_ACCESS_FREQ * metadata['access_frequency'][key] +
                 WEIGHT_RECENCY * (cache_snapshot.access_count - metadata['recency'][key]) +
                 WEIGHT_IMPORTANCE * metadata['importance_score'][key])
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the recency metadata to reflect the current time, increments the access frequency, and may adjust the importance score based on the context of the access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['access_frequency'][key] += 1
    metadata['importance_score'][key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata with a default recency value, sets the access frequency to one, and assigns an initial importance score based on the current workload characteristics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['access_frequency'][key] = 1
    metadata['importance_score'][key] = 0

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy re-evaluates the weights used for eviction criteria based on recent access patterns and workload characteristics, ensuring continuous adaptation and improvement of the eviction strategy.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    del metadata['recency'][key]
    del metadata['access_frequency'][key]
    del metadata['importance_score'][key]
    
    # Dynamically adjust weights based on workload characteristics
    total_accesses = cache_snapshot.access_count
    if total_accesses > 0:
        weight_sum = (sum(metadata['access_frequency'].values()) + 
                      sum(metadata['recency'].values()) + 
                      sum(metadata['importance_score'].values()))
        
        # Adjust weights
        global WEIGHT_ACCESS_FREQ
        global WEIGHT_RECENCY
        global WEIGHT_IMPORTANCE
        
        WEIGHT_ACCESS_FREQ = sum(metadata['access_frequency'].values()) / weight_sum
        WEIGHT_RECENCY = sum([cache_snapshot.access_count - re for re in metadata['recency'].values()]) / weight_sum
        WEIGHT_IMPORTANCE = sum(metadata['importance_score'].values()) / weight_sum