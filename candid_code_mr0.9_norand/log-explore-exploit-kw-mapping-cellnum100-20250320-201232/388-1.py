# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
DYNAMIC_THRESHOLD_SCORE = 10
MAX_ACCESS_FREQUENCY = 1000

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache item, including access frequency, recency, last update timestamp, dynamic threshold score, task priorities, partition-specific access patterns, inter-cache communication data, and load distribution metrics.
cache_metadata = {
    # `obj.key`: {access_frequency, recency, last_update, task_priority, load_metric, ...}
}
dynamic_threshold_score = DYNAMIC_THRESHOLD_SCORE

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first evaluating items below the dynamic threshold score. It then considers task completion status, task priority, partition-specific access patterns, and the least frequently accessed items across the system, ensuring balanced load distribution by considering the current load on each cache node.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        metadata = cache_metadata[key]
        
        # Check against the dynamic threshold score
        if metadata['score'] < dynamic_threshold_score:
            candidate_score = metadata['freq'] + (-metadata['recency']) + metadata['task_priority']
            
            if candidate_score < min_score:
                min_score = candidate_score
                min_score_key = key
    
    if min_score_key:
        candid_obj_key = min_score_key
    else:
        # If no candidate below threshold, evict least frequently recently used one
        min_freq = float('inf')
        oldest_time = float('inf')
        
        for key, cached_obj in cache_snapshot.cache.items():
            metadata = cache_metadata[key]
            if metadata['freq'] < min_freq or (metadata['freq'] == min_freq and metadata['recency'] < oldest_time):
                min_freq = metadata['freq']
                oldest_time = metadata['recency']
                candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the access frequency, recency, last update timestamp, and load distribution metrics for the relevant partition and task. It also adjusts the dynamic threshold score and updates the inter-cache communication data to reflect the current state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata = cache_metadata[obj.key]
    metadata['freq'] = min(metadata['freq'] + 1, MAX_ACCESS_FREQUENCY)
    metadata['recency'] = cache_snapshot.access_count
    metadata['last_update'] = cache_snapshot.access_count
    # Update other relevant metrics such as load_metric
    metadata['score'] = metadata['freq'] - metadata['recency']
    
    # Recalculate dynamic threshold score
    global dynamic_threshold_score
    dynamic_threshold_score = sum(meta['score'] for meta in cache_metadata.values()) / len(cache_metadata)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata (access frequency, recency, last update timestamp) and recalculates the dynamic threshold score. It updates the task allocation metadata to reflect the new task's priority and completion status, adjusts the partition-specific access patterns, and updates the load distribution metrics accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    cache_metadata[obj.key] = {
        'freq': 1,
        'recency': cache_snapshot.access_count,
        'last_update': cache_snapshot.access_count,
        'task_priority': 1,  # Assuming equal priority for new tasks
        'load_metric': 1,  # Initial metric example
        'score': 1 - cache_snapshot.access_count,  # Initial score
    }
    
    # Recalculate dynamic threshold score
    global dynamic_threshold_score
    dynamic_threshold_score = sum(meta['score'] for meta in cache_metadata.values()) / len(cache_metadata)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the metadata of the evicted item and recalculates the dynamic threshold score. It updates the task allocation metadata to reflect the removal of the task's data, adjusts the partition-specific access patterns, updates the inter-cache communication data, and load distribution metrics to ensure balanced and efficient cache utilization.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in cache_metadata:
        del cache_metadata[evicted_obj.key]
        
    # Recalculate dynamic threshold score
    global dynamic_threshold_score
    dynamic_threshold_score = sum(meta['score'] for meta in cache_metadata.values()) / len(cache_metadata)