# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
CRITICALITY_INIT = 1

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, insertion time, criticality levels, and shared information from other caches. It also tracks the decisions and dynamic weights of multiple algorithms (LRU, LFU, FIFO).
metadata = {
    'access_frequency': collections.defaultdict(int),
    'recency_of_access': collections.defaultdict(int),
    'insertion_time': collections.defaultdict(int),
    'criticality_levels': collections.defaultdict(lambda: CRITICALITY_INIT),
    'algorithm_weights': {'LRU': 1, 'LFU': 1, 'FIFO': 1},
    'cache_access_pattern': {},
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects eviction candidates by evaluating the least recently accessed data among multiple candidates, considering access patterns, criticality levels, and shared information from other caches. The final eviction decision is made based on a weighted majority agreement among LRU, LFU, and FIFO, with weights dynamically adjusted based on recent performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    # Calculate candidates' scores based on LRU, LFU, and FIFO policies
    lru_scores = {key: metadata['recency_of_access'][key] for key in cache_snapshot.cache}
    lfu_scores = {key: metadata['access_frequency'][key] for key in cache_snapshot.cache}
    fifo_scores = {key: metadata['insertion_time'][key] for key in cache_snapshot.cache}

    # Normalize the scores (smaller scores are better for eviction)
    min_lru = min(lru_scores.values())
    min_lfu = min(lfu_scores.values())
    min_fifo = min(fifo_scores.values())

    lru_scores = {k: v - min_lru for k, v in lru_scores.items()}
    lfu_scores = {k: v - min_lfu for k, v in lfu_scores.items()}
    fifo_scores = {k: v - min_fifo for k, v in fifo_scores.items()}

    # Weighted majority voting
    combined_scores = {}
    for key in cache_snapshot.cache:
        combined_scores[key] = (metadata['algorithm_weights']['LRU'] * lru_scores[key] +
                                metadata['algorithm_weights']['LFU'] * lfu_scores[key] +
                                metadata['algorithm_weights']['FIFO'] * fifo_scores[key])

    # Choose the candidate with the highest combined score (least desirable)
    candid_obj_key = max(combined_scores, key=combined_scores.get)

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the recency of access, increments the access frequency, and adjusts the criticality level if necessary. It also updates the weights of the algorithms based on their contribution to the hit and shares the updated access pattern with other caches.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata['recency_of_access'][obj.key] = cache_snapshot.access_count
    metadata['access_frequency'][obj.key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy records the insertion time, initializes the access frequency and recency of access, and sets the initial criticality level. It updates the weights of the algorithms to reflect the success of the insertion strategy and informs other caches about the new insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata['insertion_time'][obj.key] = cache_snapshot.access_count
    metadata['recency_of_access'][obj.key] = cache_snapshot.access_count
    metadata['access_frequency'][obj.key] = 1
    metadata['criticality_levels'][obj.key] = CRITICALITY_INIT

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the evicted data from the list of candidates, clears its metadata, and updates the access patterns and criticality levels of remaining data. It adjusts the weights of the algorithms based on the performance of the eviction decision and shares the eviction information with other caches.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    for key in ['recency_of_access', 'access_frequency', 'insertion_time', 'criticality_levels']:
        if evicted_obj.key in metadata[key]:
            del metadata[key][evicted_obj.key]