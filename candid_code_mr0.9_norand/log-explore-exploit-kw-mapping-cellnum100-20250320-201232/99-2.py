# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
LEVELS = 3  # Number of levels in the multi-level structure
PRIORITY_THRESHOLD = 10  # Threshold to promote items to a higher level

# Put the metadata specifically maintained by the policy below. The policy maintains a multi-level structure where each level has its own associative array tracking access frequency and recency. Each cached item has a priority score that is dynamically adjusted based on its access patterns.
access_frequency = {}
recency = {}
priority_score = {}
level = {}

def calculate_priority(freq, rec):
    # A function to calculate the priority score based on frequency and recency.
    return freq * 1000 - rec

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the item with the lowest priority score across all levels. If multiple items have the same priority, the least recently accessed item is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_priority = float('inf')

    for obj_key, cached_obj in cache_snapshot.cache.items():
        priority = priority_score[obj_key]
        if priority < lowest_priority or (priority == lowest_priority and recency[obj_key] < recency[candid_obj_key]):
            lowest_priority = priority
            candid_obj_key = obj_key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency metadata for the accessed item are updated. The item's priority score is recalculated, and it may be promoted to a higher level if its new priority exceeds a threshold.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    obj_key = obj.key
    access_frequency[obj_key] += 1
    recency[obj_key] = cache_snapshot.access_count
    new_priority = calculate_priority(access_frequency[obj_key], recency[obj_key])
    priority_score[obj_key] = new_priority
    
    # Check if the item should be promoted to a higher level
    if level[obj_key] < LEVELS - 1:  # if not already at the highest level
        if new_priority // PRIORITY_THRESHOLD > level[obj_key]:
            level[obj_key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and recency metadata. The item's priority score is set based on its initial access patterns, and it is placed in the appropriate level.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    obj_key = obj.key
    access_frequency[obj_key] = 1
    recency[obj_key] = cache_snapshot.access_count
    priority_score[obj_key] = calculate_priority(access_frequency[obj_key], recency[obj_key])
    level[obj_key] = 0

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy removes its metadata from the associative arrays. The priority scores of remaining items are recalculated to ensure a balanced eviction strategy.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in access_frequency:
        del access_frequency[evicted_key]
    if evicted_key in recency:
        del recency[evicted_key]
    if evicted_key in priority_score:
        del priority_score[evicted_key]
    if evicted_key in level:
        del level[evicted_key]
    
    # Recalculate priority scores for remaining items to maintain balanced eviction strategy
    for obj_key in cache_snapshot.cache.keys():
        priority_score[obj_key] = calculate_priority(access_frequency[obj_key], recency[obj_key])