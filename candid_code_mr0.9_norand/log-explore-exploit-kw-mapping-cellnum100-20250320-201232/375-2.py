# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
FREQUENCY_WEIGHT = 0.5
RECENCY_WEIGHT = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency, access patterns, and group associations for each cache entry. It also tracks the diversity of eviction strategies used and the historical success of each strategy.
metadata = {
    'access_frequency': {},
    'recency': {},
    'access_pattern': {},
    'group_associations': {},
    'insertion_events': [],
    'eviction_records': [],
    'strategy_success': {}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by analyzing access patterns to predict future accesses, prioritizing the retention of frequently accessed and recently used items. It also considers group associations to evict entire groups if their collective access pattern indicates low future use. The policy dynamically selects the most appropriate eviction strategy based on current workload characteristics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    candidate_score = float('inf')
    for key, cached_obj in cache_snapshot.cache.items():
        frequency = metadata['access_frequency'].get(key, 0)
        recency = cache_snapshot.access_count - metadata['recency'].get(key, 0)
        score = FREQUENCY_WEIGHT * frequency + RECENCY_WEIGHT * recency

        if score < candidate_score:
            candidate_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and recency metadata for the accessed entry. It also refines the access pattern predictions and adjusts group associations if necessary. The success rate of the current eviction strategy is also updated.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['recency'][key] = cache_snapshot.access_count
    # Adjust access patterns and group associations if necessary


def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency, and access pattern metadata. It also evaluates and updates group associations and records the insertion event to adjust the diversity of eviction strategies.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['insertion_events'].append((cache_snapshot.access_count, key))
    # Evaluate and update group associations

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy updates the metadata to reflect the removal of the evicted entry, including its group associations. It also records the eviction event to refine access pattern predictions and adjusts the success metrics of the eviction strategy used.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['recency']:
        del metadata['recency'][evicted_key]
    # Update metadata to reflect changes in group associations and access patterns
    metadata['eviction_records'].append((cache_snapshot.access_count, evicted_key))
    # Adjust success metrics of the eviction strategy used