# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
INITIAL_ACCESS_FREQUENCY = 1
INITIAL_RECENCY = 0
INITIAL_IMPORTANCE = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, data importance score, and a dynamic fitness score for each cache entry. It also tracks overall access patterns and workload characteristics to adapt its strategy over time.
metadata = {
    'access_frequency': collections.defaultdict(lambda: INITIAL_ACCESS_FREQUENCY),
    'recency': collections.defaultdict(lambda: INITIAL_RECENCY),
    'importance': collections.defaultdict(lambda: INITIAL_IMPORTANCE),
    'fitness': collections.defaultdict(lambda: 0.0)
}

def calculate_fitness(key, access_frequency, recency, importance):
    # Define a formula to calculate the fitness score. For this example, let's use a weighted sum.
    # Fitness Score = Importance / (Access Frequency * Recency + 1)
    return importance / (access_frequency * (recency + 1))

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy uses a multi-criteria decision-making process where it evaluates each cache entry based on its fitness score, which is a composite measure of access frequency, recency, and data importance. The entry with the lowest fitness score is chosen for eviction. The policy also adapts by learning from past eviction decisions to improve future choices.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_fitness_score = float('inf')

    for key, cache_obj in cache_snapshot.cache.items():
        fitness_score = metadata['fitness'][key]
        if fitness_score < min_fitness_score:
            min_fitness_score = fitness_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and recency metadata for the accessed entry. It also recalculates the fitness score based on the updated access patterns and adjusts the data importance score if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_access_frequency = metadata['access_frequency'][key]
    current_recency = cache_snapshot.access_count
    current_importance = metadata['importance'][key]  # Change if necessary based on policy

    # Update access frequency and recency
    metadata['access_frequency'][key] = current_access_frequency + 1
    metadata['recency'][key] = current_recency

    # Recalculate fitness score
    metadata['fitness'][key] = calculate_fitness(key, metadata['access_frequency'][key], metadata['recency'][key], current_importance)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata with default values for access frequency, recency, and data importance. It then calculates an initial fitness score and updates the overall access pattern and workload characteristics to reflect the new entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key

    # Initialize metadata
    metadata['access_frequency'][key] = INITIAL_ACCESS_FREQUENCY
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['importance'][key] = INITIAL_IMPORTANCE

    # Initial fitness score calculation
    metadata['fitness'][key] = calculate_fitness(key, INITIAL_ACCESS_FREQUENCY, INITIAL_RECENCY, INITIAL_IMPORTANCE)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata of the evicted entry and updates the overall access patterns and workload characteristics. It also adjusts the fitness scores of remaining entries if the eviction provides new insights into access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key

    # Remove metadata for evicted object
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['recency']:
        del metadata['recency'][evicted_key]
    if evicted_key in metadata['importance']:
        del metadata['importance'][evicted_key]
    if evicted_key in metadata['fitness']:
        del metadata['fitness'][evicted_key]

    # Optionally, adjust fitness scores of remaining entries if the eviction provides new insights.
    # Based on some criteria, update the metadata of remaining objects if needed.
    for key in cache_snapshot.cache.keys():
        current_access_frequency = metadata['access_frequency'][key]
        current_recency = metadata['recency'][key]
        current_importance = metadata['importance'][key]
        metadata['fitness'][key] = calculate_fitness(key, current_access_frequency, current_recency, current_importance)