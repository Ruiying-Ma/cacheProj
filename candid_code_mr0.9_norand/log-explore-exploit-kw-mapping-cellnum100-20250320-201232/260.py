# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections

# Put tunable constant parameters below
WEIGHT_ACCESS_FREQUENCY = 0.4
WEIGHT_RECENCY = 0.3
WEIGHT_WAITING_TIME = 0.2
WEIGHT_PARTITION = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached object, including access frequency, recency of access, waiting time, and a dynamic priority score. It also keeps an ordered list of access times and partitions based on access frequency.
metadata = {
    'access_frequency': collections.defaultdict(int),
    'recency': {},
    'waiting_time': {},
    'priority_score': {},
    'access_times': collections.OrderedDict(),
    'partitions': collections.defaultdict(list)
}

def calculate_priority_score(key, current_time):
    access_frequency = metadata['access_frequency'][key]
    recency = metadata['recency'][key]
    waiting_time = current_time - metadata['waiting_time'][key]
    partition = len(metadata['partitions'][access_frequency])
    
    priority_score = (WEIGHT_ACCESS_FREQUENCY * access_frequency +
                      WEIGHT_RECENCY * recency +
                      WEIGHT_WAITING_TIME * waiting_time +
                      WEIGHT_PARTITION * partition)
    return priority_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a priority score for each object based on a weighted combination of its access frequency, recency, waiting time, and partition. The object with the lowest priority score within the least frequently accessed partition is evicted first.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_priority_score = float('inf')
    current_time = cache_snapshot.access_count
    
    for partition in sorted(metadata['partitions'].keys()):
        for key in metadata['partitions'][partition]:
            priority_score = calculate_priority_score(key, current_time)
            if priority_score < min_priority_score:
                min_priority_score = priority_score
                candid_obj_key = key
        if candid_obj_key:
            break
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the recency timestamp to the current time, resets the waiting time, updates the access time in the ordered list, and recalculates the priority score for the accessed object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = current_time
    metadata['waiting_time'][key] = current_time
    metadata['access_times'][key] = current_time
    metadata['priority_score'][key] = calculate_priority_score(key, current_time)
    
    # Update partitions
    access_frequency = metadata['access_frequency'][key]
    metadata['partitions'][access_frequency - 1].remove(key)
    metadata['partitions'][access_frequency].append(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency to 1, sets the recency timestamp to the current time, starts the waiting time counter, assigns an initial priority score, places the item in the appropriate partition based on expected access frequency, and updates the ordered list with the current access time.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = current_time
    metadata['waiting_time'][key] = current_time
    metadata['priority_score'][key] = calculate_priority_score(key, current_time)
    metadata['access_times'][key] = current_time
    metadata['partitions'][1].append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes all associated metadata for the evicted object, adjusts the partition sizes if necessary, redistributes the remaining items to ensure fairness in cache space allocation, and recalculates the priority scores for the remaining objects in the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    
    # Remove metadata for the evicted object
    access_frequency = metadata['access_frequency'].pop(key, None)
    metadata['recency'].pop(key, None)
    metadata['waiting_time'].pop(key, None)
    metadata['priority_score'].pop(key, None)
    metadata['access_times'].pop(key, None)
    
    if access_frequency is not None:
        metadata['partitions'][access_frequency].remove(key)
        if not metadata['partitions'][access_frequency]:
            del metadata['partitions'][access_frequency]
    
    # Recalculate priority scores for remaining objects
    current_time = cache_snapshot.access_count
    for key in cache_snapshot.cache.keys():
        metadata['priority_score'][key] = calculate_priority_score(key, current_time)