# Put tunable constant parameters below
DYNAMIC_ADJUSTMENT_FACTOR = 0.1

# Put the metadata specifically maintained by the policy below.
metadata = {
    'access_frequency': {}, # Access frequency of each object
    'last_access_time': {}, # Last access time of each object
    'redundancy_score': {}, # Redundancy score of each object
    'dynamic_adjustment_factor': DYNAMIC_ADJUSTMENT_FACTOR # Dynamic adjustment factor
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by evaluating a combined score derived from access frequency, redundancy score, and last access time, prioritizing items with high redundancy and low access frequency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        access_freq = metadata['access_frequency'].get(key, 0)
        last_access = metadata['last_access_time'].get(key, 0)
        redundancy_score = metadata['redundancy_score'].get(key, 0)
        
        # Calculate combined score
        score = (redundancy_score + (1 / (1 + access_freq)) +
                 (cache_snapshot.access_count - last_access) *
                 metadata['dynamic_adjustment_factor'])
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and last access time of the accessed item, and adjusts the dynamic adjustment factor based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    
    # Adjust dynamic adjustment factor based on recent access patterns
    total_accesses = sum(metadata['access_frequency'].values())
    unique_items = len(metadata['access_frequency'])
    metadata['dynamic_adjustment_factor'] = DYNAMIC_ADJUSTMENT_FACTOR * (total_accesses / unique_items)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata with default values and recalculates redundancy scores for all items to ensure diversity in the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['redundancy_score'][key] = 1.0
    
    # Recalculate redundancy scores for all items
    total_size = sum(o.size for o in cache_snapshot.cache.values())
    for k, cached_obj in cache_snapshot.cache.items():
        metadata['redundancy_score'][k] = cached_obj.size / total_size

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy updates the redundancy scores of the remaining items and adjusts the dynamic adjustment factor to optimize future eviction decisions based on recent performance metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['last_access_time']:
        del metadata['last_access_time'][evicted_key]
    if evicted_key in metadata['redundancy_score']:
        del metadata['redundancy_score'][evicted_key]

    # Update redundancy scores of remaining items
    total_size = sum(o.size for o in cache_snapshot.cache.values())
    for k, cached_obj in cache_snapshot.cache.items():
        metadata['redundancy_score'][k] = cached_obj.size / total_size
    
    # Adjust the dynamic adjustment factor
    total_accesses = sum(metadata['access_frequency'].values())
    unique_items = len(metadata['access_frequency'])
    metadata['dynamic_adjustment_factor'] = DYNAMIC_ADJUSTMENT_FACTOR * (total_accesses / unique_items)