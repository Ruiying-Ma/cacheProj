# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below
RECENCY_WEIGHT = 0.7
FREQUENCY_WEIGHT = 0.3

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each sub-cache, including access frequency, recency, and a cost score for each item. It also tracks the type of data access patterns for adaptive strategy selection.
metadata = {
    'access_frequency': defaultdict(int),
    'recency': {},
    'cost_score': {},
    'access_pattern': defaultdict(int)
}

def calculate_cost_score(key, time, frequency):
    return RECENCY_WEIGHT * time + FREQUENCY_WEIGHT / (1 + frequency)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first selecting the sub-cache with the least impactful data based on current workload characteristics. Within that sub-cache, it evicts the item with the highest cost score, which is a combination of low access frequency and recency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    max_cost = -1
    
    for key in cache_snapshot.cache:
        if metadata['cost_score'][key] > max_cost:
            max_cost = metadata['cost_score'][key]
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and recency for the accessed item, recalculates its cost score, and adjusts the data access pattern tracking for the corresponding sub-cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['cost_score'][key] = calculate_cost_score(metadata['recency'][key], metadata['recency'][key], metadata['access_frequency'][key])

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency, and cost score. It also updates the data access pattern tracking for the sub-cache where the item was inserted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['cost_score'][key] = calculate_cost_score(metadata['recency'][key], metadata['recency'][key], metadata['access_frequency'][key])

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy removes its metadata and recalculates the overall cost distribution and data access pattern tracking for the affected sub-cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in metadata['access_frequency']:
        del metadata['access_frequency'][key]
    if key in metadata['recency']:
        del metadata['recency'][key]
    if key in metadata['cost_score']:
        del metadata['cost_score'][key]