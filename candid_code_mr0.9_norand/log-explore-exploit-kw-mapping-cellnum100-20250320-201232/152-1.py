import math

# Put tunable constant parameters below
ALPHA = 0.5  # constant to weight the recency score in dynamic priority calculation
BETA = 0.2   # constant to weight the frequency score in dynamic priority calculation
GAMMA = 0.3  # constant to weight the size in eviction probability calculation

# Put the metadata specifically maintained by the policy below. 
# The policy maintains a dependency graph, access frequency counter, recency timestamp, size, and dynamic priority score for each cached object.
metadata = {
    'frequency_counter': {},
    'recency_timestamp': {},
    'dynamic_priority_score': {},
    'dependency_graph': {},
}

def calculate_dynamic_priority_score(frequency, recency, size):
    return ALPHA * recency + BETA * frequency / math.sqrt(size)

def get_probabilities_for_eviction(cache_snapshot):
    total_priority = sum(metadata['dynamic_priority_score'][obj_key] for obj_key in cache_snapshot.cache.keys())
    eviction_probabilities = {}
    
    for obj_key in cache_snapshot.cache.keys():
        priority_score = metadata['dynamic_priority_score'][obj_key]
        dependencies = len(metadata['dependency_graph'].get(obj_key, []))
        eviction_score = priority_score * (1 + GAMMA * dependencies)
        eviction_probabilities[obj_key] = eviction_score / total_priority

    return eviction_probabilities

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates an eviction probability for each object based on access frequency, recency, and dynamic priority score. 
    Objects with fewer dependencies and larger sizes have higher probabilities. A random selection is made based on these probabilities to choose the eviction victim.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    probabilities = get_probabilities_for_eviction(cache_snapshot)
    candid_obj_key = max(probabilities, key=probabilities.get)
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy increments the access frequency counter, updates the recency timestamp, and recalculates the dynamic priority score for the accessed object. Dependencies are checked and updated if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    obj_key = obj.key
    metadata['frequency_counter'][obj_key] += 1
    metadata['recency_timestamp'][obj_key] = cache_snapshot.access_count
    frequency = metadata['frequency_counter'][obj_key]
    recency = metadata['recency_timestamp'][obj_key]
    size = obj.size
    metadata['dynamic_priority_score'][obj_key] = calculate_dynamic_priority_score(frequency, recency, size)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency counter to 1, sets its recency timestamp to the current time, and assigns an initial dynamic priority score based on current system load and access patterns. Dependencies are established based on the context of the insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    obj_key = obj.key
    metadata['frequency_counter'][obj_key] = 1
    metadata['recency_timestamp'][obj_key] = cache_snapshot.access_count
    metadata['dynamic_priority_score'][obj_key] = calculate_dynamic_priority_score(1, cache_snapshot.access_count, obj.size)
    
    # For simplicity, we assume no context-based dependency establishment in this example.

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy updates the dependency graph to remove the evicted object and its edges. The access frequency counters, recency timestamps, and dynamic priority scores of remaining objects are adjusted if they were dependent on the evicted object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    
    # Removing evicted object and its dependency from the graph
    if evicted_key in metadata['dependency_graph']:
        del metadata['dependency_graph'][evicted_key]
    
    for key, dependencies in metadata['dependency_graph'].items():
        if evicted_key in dependencies:
            dependencies.remove(evicted_key)

            # Adjust metadata based on dependency removal
            metadata['frequency_counter'][key] = max(1, metadata['frequency_counter'][key] - 1)
            metadata['dynamic_priority_score'][key] = calculate_dynamic_priority_score(
                metadata['frequency_counter'][key],
                metadata['recency_timestamp'][key],
                cache_snapshot.cache[key].size
            )