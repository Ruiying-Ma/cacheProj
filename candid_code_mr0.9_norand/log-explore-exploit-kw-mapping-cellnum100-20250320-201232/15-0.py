# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
DEFAULT_PRIORITY = 1
DEFAULT_ACCESS_FREQUENCY = 1

# Put the metadata specifically maintained by the policy below. The policy maintains partitions based on access frequency, an ordered list of cached items within each partition, and priority levels assigned to each cached object.
# Metadata: A dictionary where keys are access frequencies, and values are lists of objects (ordered by priority and then by insertion order)
# Priority levels are maintained in a separate dictionary.

metadata = {
    'partitions': {}, # {access_frequency: [obj1, obj2, ...]}
    'priorities': {} # {obj.key: priority_level}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first selects the partition with the lowest access frequency, then evicts the item with the lowest priority within that partition, and if priorities are equal, the least recently discovered item is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    # Step 1: Find the partition with the lowest access frequency
    if not metadata['partitions']:
        return None
        
    min_access_freq = min(metadata['partitions'])
    candidates = metadata['partitions'][min_access_freq]
    
    # Step 2: Find the item with the lowest priority within that partition
    candidates.sort(key=lambda x: (metadata['priorities'][x.key], cache_snapshot.cache[x.key].size))
    
    # Selecting the victim object as first object from the sorted list
    victim_obj = candidates.pop(0)
    candid_obj_key = victim_obj.key
    
    # Return the selected object key
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency of the partition is updated, the accessed item is moved to the front of the ordered list, and its priority level is increased.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    for access_freq, objects in metadata['partitions'].items():
        if obj in objects:
            objects.remove(obj)
            break
    
    new_access_freq = access_freq + 1
    if new_access_freq not in metadata['partitions']:
        metadata['partitions'][new_access_freq] = []
    
    metadata['partitions'][new_access_freq].insert(0, obj)
    if obj.key not in metadata['priorities']:
        metadata['priorities'][obj.key] = DEFAULT_PRIORITY
    metadata['priorities'][obj.key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the object is placed in the appropriate partition based on its initial access frequency, added to the front of the ordered list, and assigned a default priority level.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    if DEFAULT_ACCESS_FREQUENCY not in metadata['partitions']:
        metadata['partitions'][DEFAULT_ACCESS_FREQUENCY] = []
    
    metadata['partitions'][DEFAULT_ACCESS_FREQUENCY].insert(0, obj)
    metadata['priorities'][obj.key] = DEFAULT_PRIORITY

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy updates the partition's access frequency, removes the item from the ordered list, and adjusts the priority levels of remaining items if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    for access_freq, objects in metadata['partitions'].items():
        if evicted_obj in objects:
            objects.remove(evicted_obj)
            if not objects:
                del metadata['partitions'][access_freq]
            break
    
    del metadata['priorities'][evicted_obj.key]