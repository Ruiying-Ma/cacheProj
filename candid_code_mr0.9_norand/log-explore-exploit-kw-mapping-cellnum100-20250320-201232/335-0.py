# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
EVICITON_CANDIDATES = 5   # Number of candidates to evaluate during eviction 
RECENCY_WEIGHT = 0.5       # Initial weight for recency in fitness score
FREQUENCY_WEIGHT = 0.5     # Initial weight for frequency in fitness score
ADAPTATION_STEP = 0.01     # Step size for adaptation factor adjustments

# Put the metadata specifically maintained by the policy below. Each cache line maintains a 'fitness score' based on a combination of access frequency and recency. Additionally, a global 'adaptation factor' is maintained to dynamically adjust the weight of frequency and recency based on observed access patterns.

# Dictionary to maintain metadata like access count and fitness score for each cached object
cache_metadata = {}
# Dictionary to hold key-value with adaptation factors
adaptation_factors = {
    "recency_weight": RECENCY_WEIGHT,
    "frequency_weight": FREQUENCY_WEIGHT
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates a subset of cache lines (candidates) and selects the one with the lowest fitness score for eviction. The selection mechanism ensures diversity by randomly choosing candidates from different regions of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Select a subset of eviction candidates
    cache_keys = list(cache_snapshot.cache.keys())
    total_keys = len(cache_keys)
    step = max(1, total_keys // EVICITON_CANDIDATES)
    candidates = [cache_keys[i] for i in range(0, total_keys, step)][:EVICITON_CANDIDATES]

    # Evaluate candidates and select the one with the lowest fitness score
    lowest_fitness_score = float('inf')
    for candidate in candidates:
        fitness = cache_metadata[candidate]['fitness_score']
        if fitness < lowest_fitness_score:
            lowest_fitness_score = fitness
            candid_obj_key = candidate

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the fitness score of the accessed cache line is increased based on the current adaptation factor, which gives more weight to either frequency or recency depending on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Increase access count
    cache_metadata[obj.key]['access_count'] += 1
    # Increase fitness score based on current adaptation factors
    adaptation = adaptation_factors['recency_weight']
    cache_metadata[obj.key]['fitness_score'] += adaptation

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    When a new object is inserted, its initial fitness score is set based on the current adaptation factor. The adaptation factor is then adjusted slightly to reflect the new access pattern introduced by the insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Initialize metadata
    cache_metadata[obj.key] = {
        'access_count': 1,
        'fitness_score': obj.size * adaptation_factors['recency_weight']
    }
    # Adjust adaptation factors
    adaptation_factors['recency_weight'] = min(1.0, adaptation_factors['recency_weight'] + ADAPTATION_STEP)
    adaptation_factors['frequency_weight'] = max(0.0, 1.0 - adaptation_factors['recency_weight'])

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a cache line, the fitness scores of the remaining cache lines are slightly adjusted to reflect the new cache state. The adaptation factor is also updated to ensure the policy continues to evolve with changing access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Remove evicted object's metadata
    if evicted_obj.key in cache_metadata:
        del cache_metadata[evicted_obj.key]
    # Adjust fitness scores of remaining cached objects
    adjust_factor = ADAPTATION_STEP / len(cache_snapshot.cache) if cache_snapshot.cache else 0
    for key in cache_snapshot.cache:
        cache_metadata[key]['fitness_score'] *= (1 + adjust_factor)
    # Update adaptation factors
    adaptation_step = ADAPTATION_STEP / 2
    adaptation_factors['recency_weight'] = max(0.0, adaptation_factors['recency_weight'] - adaptation_step)
    adaptation_factors['frequency_weight'] = min(1.0, adaptation_factors['recency_weight'] + adaptation_step)