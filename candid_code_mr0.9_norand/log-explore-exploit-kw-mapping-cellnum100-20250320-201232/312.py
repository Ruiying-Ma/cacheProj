# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
RARELY_ACCESSED = 'rarely_accessed'
RECENTLY_ACCESSED = 'recently_accessed'
FREQUENTLY_ACCESSED = 'frequently_accessed'

# Put the metadata specifically maintained by the policy below. Each cache line maintains a state (frequently accessed, recently accessed, rarely accessed) and a neighbor influence score based on the states of adjacent cache lines.
cache_metadata = {
    'states': {},  # key -> state
    'neighbor_scores': {},  # key -> neighbor influence score
    'insertion_order': []  # list to maintain insertion order for LIFO
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the cache line in the 'rarely accessed' state with the lowest neighbor influence score. If no such line exists, it evicts the most recently added cache line (LIFO).
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    rarely_accessed_keys = [key for key, state in cache_metadata['states'].items() if state == RARELY_ACCESSED]
    
    if rarely_accessed_keys:
        # Find the rarely accessed key with the lowest neighbor influence score
        candid_obj_key = min(rarely_accessed_keys, key=lambda k: cache_metadata['neighbor_scores'][k])
    else:
        # Evict the most recently added cache line (LIFO)
        candid_obj_key = cache_metadata['insertion_order'][-1]
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the accessed cache line transitions to a 'recently accessed' state if it was 'rarely accessed', or to 'frequently accessed' if it was 'recently accessed'. Neighbor influence scores of adjacent lines are updated to reflect the new state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    current_state = cache_metadata['states'][key]
    
    if current_state == RARELY_ACCESSED:
        new_state = RECENTLY_ACCESSED
    elif current_state == RECENTLY_ACCESSED:
        new_state = FREQUENTLY_ACCESSED
    else:
        new_state = current_state
    
    cache_metadata['states'][key] = new_state
    
    # Update neighbor influence scores
    for neighbor_key in cache_snapshot.cache:
        if neighbor_key != key:
            cache_metadata['neighbor_scores'][neighbor_key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the new cache line is set to 'recently accessed' state. Neighbor influence scores of adjacent lines are incremented to account for the new line.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    cache_metadata['states'][key] = RECENTLY_ACCESSED
    cache_metadata['neighbor_scores'][key] = 0
    cache_metadata['insertion_order'].append(key)
    
    # Increment neighbor influence scores
    for neighbor_key in cache_snapshot.cache:
        if neighbor_key != key:
            cache_metadata['neighbor_scores'][neighbor_key] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a cache line, the neighbor influence scores of adjacent lines are decremented. The states of remaining lines are re-evaluated to ensure they reflect the current access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    
    # Decrement neighbor influence scores
    for neighbor_key in cache_snapshot.cache:
        if neighbor_key != evicted_key:
            cache_metadata['neighbor_scores'][neighbor_key] -= 1
    
    # Remove evicted object metadata
    del cache_metadata['states'][evicted_key]
    del cache_metadata['neighbor_scores'][evicted_key]
    cache_metadata['insertion_order'].remove(evicted_key)
    
    # Re-evaluate states of remaining lines
    for key in cache_snapshot.cache:
        if cache_metadata['states'][key] == FREQUENTLY_ACCESSED:
            cache_metadata['states'][key] = RECENTLY_ACCESSED
        elif cache_metadata['states'][key] == RECENTLY_ACCESSED:
            cache_metadata['states'][key] = RARELY_ACCESSED