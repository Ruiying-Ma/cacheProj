# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

from collections import defaultdict, deque

# Put tunable constant parameters below
BASE_RECENCY = 0
BASE_FREQUENCY = 0
BASE_PREDICTION_SCORE = 0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, a probabilistic score for eviction candidacy, and a learned prediction score for future access likelihood.
recency = {}  # {obj_key: last accessed timestep}
frequency = defaultdict(int)  # {obj_key: access frequency}
prediction_score = defaultdict(lambda: BASE_PREDICTION_SCORE)  # {obj_key: prediction score}
probabilistic_eviction_score = defaultdict(float)  # {obj_key: eviction probabilistic score}

def initialize_metadata(obj_key):
    recency[obj_key] = 0
    frequency[obj_key] = BASE_FREQUENCY
    prediction_score[obj_key] = BASE_PREDICTION_SCORE
    probabilistic_eviction_score[obj_key] = 0

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy probabilistically selects multiple candidates for eviction based on their scores, then chooses the final victim by balancing recency, frequency, and prediction scores, prioritizing items with lower scores.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below

    # Calculate scores for all cached objects and select the eviction candidate
    eviction_candidates = []
    for obj_key in cache_snapshot.cache:
        score = (recency[obj_key] + frequency[obj_key] + prediction_score[obj_key] + probabilistic_eviction_score[obj_key])
        eviction_candidates.append((score, obj_key))
    
    # Sort candidate by their scores, ascending order, lower score is prioritized for eviction
    eviction_candidates.sort()

    # Pick the key with the lowest score
    candid_obj_key = eviction_candidates[0][1]
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the recency and frequency metadata for the accessed item, and adjusts its prediction score based on the latest access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    obj_key = obj.key
    recency[obj_key] = cache_snapshot.access_count
    frequency[obj_key] += 1
    
    # Adjust prediction score based on latest access pattern, here we use a simplistic model
    prediction_score[obj_key] = recency[obj_key] / (frequency[obj_key] + 1)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata with a baseline frequency, recency, and prediction score, and updates the probabilistic score for eviction candidacy.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    obj_key = obj.key
    initialize_metadata(obj_key)

    # Update the probabilistic score for eviction candidacy
    probabilistic_eviction_score[obj_key] = BASE_RECENCY

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy recalibrates the probabilistic scores for remaining items, and updates the prediction model to improve future eviction decisions based on the latest access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key

    # Remove evicted_obj from metadata
    if evicted_key in recency:
        del recency[evicted_key]
    if evicted_key in frequency:
        del frequency[evicted_key]
    if evicted_key in prediction_score:
        del prediction_score[evicted_key]
    if evicted_key in probabilistic_eviction_score:
        del probabilistic_eviction_score[evicted_key]

    # Recalibrate the probabilistic scores for remaining items
    for key in cache_snapshot.cache:
        probabilistic_eviction_score[key] = (cache_snapshot.access_count - recency[key]) / (frequency[key] + 1)