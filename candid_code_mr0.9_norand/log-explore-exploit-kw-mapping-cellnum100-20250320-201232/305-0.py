# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Import libraries
import heapq

# Put tunable constant parameters below
FREQUENCY_WEIGHT = 0.4
RECENCY_WEIGHT = 0.4
PREDICTION_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency, a machine learning model's prediction score for future access, and a log of eviction reasons.
metadata = {
    'access_frequency': {},  # key: obj.key, value: count
    'recency': {},           # key: obj.key, value: last access time (cache_snapshot.access_count)
    'prediction_scores': {}, # key: obj.key, value: prediction score
    'eviction_log': []       # list of eviction reasons
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates multiple eviction candidates simultaneously, using a combination of access frequency, recency, and prediction scores to select the least likely to be accessed item. The reason for eviction is logged for clarity.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    
    # Calculate a score for each object in the cache as a weighted sum of access frequency, recency, and prediction scores.
    victim_heap = []
    for key, cached_obj in cache_snapshot.cache.items():
        frequency = metadata['access_frequency'].get(key, 0)
        recency = metadata['recency'].get(key, 0)
        prediction_score = metadata['prediction_scores'].get(key, 0)
        
        score = (FREQUENCY_WEIGHT * frequency +
                 RECENCY_WEIGHT * (cache_snapshot.access_count - recency) + 
                 PREDICTION_WEIGHT * prediction_score)
                 
        # Use a heap to find the object with the least score
        heapq.heappush(victim_heap, (score, key))
    
    if victim_heap:
        _, candid_obj_key = heapq.heappop(victim_heap)
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and recency of the accessed item, and adjusts the prediction model based on the new access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    
    # Update access frequency
    if key in metadata['access_frequency']:
        metadata['access_frequency'][key] += 1
    else:
        metadata['access_frequency'][key] = 1
    
    # Update recency
    metadata['recency'][key] = cache_snapshot.access_count
    
    # Update prediction model (hypothetically)
    # Assuming prediction model is simulated by the following simple update for demo purposes
    metadata['prediction_scores'][key] = 0.5 # Updated to a static value for demonstration

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and recency, and updates the prediction model to include the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    
    # Initialize access frequency
    metadata['access_frequency'][key] = 1
    
    # Initialize recency
    metadata['recency'][key] = cache_snapshot.access_count
    
    # Initialize prediction model (hypothetically)
    metadata['prediction_scores'][key] = 0.5 # Static score for newly inserted object

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy logs the reason for eviction, updates the prediction model to remove the evicted item, and adjusts the access frequency and recency metadata accordingly.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    # Log the reason for eviction
    metadata['eviction_log'].append(f'Evicted object {evicted_key} for inserting {obj.key}')
    
    # Remove metadata for evicted object
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['recency']:
        del metadata['recency'][evicted_key]
    if evicted_key in metadata['prediction_scores']:
        del metadata['prediction_scores'][evicted_key]

    # Update prediction model (hypothetically)
    # No actual model to update, demonstration purposes only