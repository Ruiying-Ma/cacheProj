# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below

# Put the metadata specifically maintained by the policy below. The policy maintains partitions based on access frequency, an ordered list of cached items within each partition, and metadata for each cached object including access frequency, recency (timestamp of last access), size, and a dynamic priority score calculated from these metrics.
partitions = {}

def calculate_priority(access_freq, recency, size):
    # Example priority score calculation (could be tuned as needed)
    return access_freq / (1 + recency) * size

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first selects the partition with the lowest access frequency, then calculates a weighted score for each cached object within that partition based on access frequency, recency, and size. The object with the lowest score is chosen as the eviction victim.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_freq = min(partitions.keys())
    partition = partitions[min_freq]
    min_priority = float('inf')
    for obj_key in partition:
        cache_obj = cache_snapshot.cache[obj_key]
        priority = calculate_priority(partition[obj_key]['freq'], partition[obj_key]['recency'], cache_obj.size)
        if priority < min_priority:
            min_priority = priority
            candid_obj_key = obj_key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency of the partition is updated, the accessed item is moved to the front of the ordered list, its access frequency is incremented, the recency timestamp is updated to the current time, and the priority score is recalculated based on the updated metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    current_time = cache_snapshot.access_count
    key = obj.key
    for freq in partitions:
        if key in partitions[freq]:
            partitions[freq].pop(key)
            new_freq = freq + 1
            if new_freq not in partitions:
                partitions[new_freq] = {}
            partitions[new_freq][key] = {
                'freq': new_freq,
                'recency': current_time,
                'priority': calculate_priority(new_freq, current_time, obj.size)
            }
            break

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the object is placed in the appropriate partition based on its initial access frequency, added to the front of the ordered list, its access frequency is set to 1, the recency timestamp is set to the current time, and the initial priority score is calculated based on its size and the initial metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    current_time = cache_snapshot.access_count
    frequency = 1
    if frequency not in partitions:
        partitions[frequency] = {}
    partitions[frequency][key] = {
        'freq': frequency,
        'recency': current_time,
        'priority': calculate_priority(frequency, current_time, obj.size)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy updates the partition's access frequency, removes the item from the ordered list, adjusts the priority levels of remaining items if necessary, and recalculates the priority scores of the remaining objects to ensure they reflect the current state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    for freq in list(partitions.keys()):
        if evicted_key in partitions[freq]:
            partitions[freq].pop(evicted_key)
            if not partitions[freq]:  # Remove partition if empty
                del partitions[freq]
            break

    for freq, items in partitions.items():
        for key, data in items.items():
            data['priority'] = calculate_priority(data['freq'], data['recency'], cache_snapshot.cache[key].size)