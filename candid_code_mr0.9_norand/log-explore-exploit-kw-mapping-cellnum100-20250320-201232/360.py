# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
ALPHA = 0.7  # Weight for access frequency
BETA = 0.3   # Weight for recency

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached object, including access frequency, recency of access, and a probabilistic eviction score. It also tracks overall access patterns and workload characteristics to adapt its strategy dynamically.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy probabilistically selects an eviction candidate from a set of potential candidates based on their eviction scores, which are influenced by access frequency, recency, and predicted future access. More connected nodes with higher access frequency and recency are less likely to be evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = math.inf
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = metadata[key]['eviction_score']
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and recency for the accessed object, recalculates its eviction score, and adjusts the overall access pattern model to reflect the latest user behavior.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['access_frequency'] += 1
    metadata[key]['last_access_time'] = cache_snapshot.access_count
    metadata[key]['eviction_score'] = calculate_eviction_score(metadata[key])

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata with default values, updates the overall access pattern model, and recalculates eviction scores for all objects to ensure the new object is appropriately integrated into the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'access_frequency': 1,
        'last_access_time': cache_snapshot.access_count,
        'eviction_score': 0
    }
    metadata[key]['eviction_score'] = calculate_eviction_score(metadata[key])
    for key in cache_snapshot.cache:
        metadata[key]['eviction_score'] = calculate_eviction_score(metadata[key])

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata of the evicted object, updates the overall access pattern model to reflect the change, and recalculates eviction scores for the remaining objects to maintain an accurate representation of their likelihood of future access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    for key in cache_snapshot.cache:
        metadata[key]['eviction_score'] = calculate_eviction_score(metadata[key])

def calculate_eviction_score(meta):
    '''
    This function calculates the eviction score based on the metadata.
    - Args:
        - `meta`: The metadata of the object.
    - Return:
        - `score`: The calculated eviction score.
    '''
    frequency_score = ALPHA * meta['access_frequency']
    recency_score = BETA * (1 / (1 + meta['last_access_time']))
    score = frequency_score + recency_score
    return score