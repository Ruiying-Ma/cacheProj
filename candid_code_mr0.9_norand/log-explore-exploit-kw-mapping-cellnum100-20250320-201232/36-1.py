# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
# For simplicity, we can define some constants to represent the cost of LRU and LFU strategies
LRU_COST = 1
LFU_COST = 1

# Put the metadata specifically maintained by the policy below. The policy maintains a mapping table that tracks the frequency (LFU) and recency (LRU) of access for each cached object, as well as dependency counts indicating how many other objects depend on each cached object.
metadata = {
    'recency': {}, # key -> timestamp of last access
    'frequency': {}, # key -> access count
    'dependencies': {} # key -> number of other objects that depend on it
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy dynamically chooses the eviction victim based on the current workload. It can switch between LRU and LFU strategies, and it prioritizes evicting items with the fewest dependencies to ensure that critical items remain in the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_recency = float('inf')
    min_frequency = float('inf')
    min_dependencies = float('inf')

    for key in cache_snapshot.cache:
        if metadata['dependencies'][key] < min_dependencies:
            min_dependencies = metadata['dependencies'][key]
            candid_obj_key = key
        elif metadata['dependencies'][key] == min_dependencies:
            if metadata['frequency'][key] < min_frequency:
                min_frequency = metadata['frequency'][key]
                candid_obj_key = key
            elif metadata['frequency'][key] == min_frequency:
                if metadata['recency'][key] < min_recency:
                    min_recency = metadata['recency'][key]
                    candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the recency information (LRU) and increments the frequency count (LFU) for the accessed object. It also updates the dependency counts if the accessed object has dependencies.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    current_time = cache_snapshot.access_count
    obj_key = obj.key
    metadata['recency'][obj_key] = current_time
    metadata['frequency'][obj_key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its recency and frequency metadata, and sets its dependency count based on the current state of the cache. It also updates the mapping table to include the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    current_time = cache_snapshot.access_count
    obj_key = obj.key
    metadata['recency'][obj_key] = current_time
    metadata['frequency'][obj_key] = 1
    metadata['dependencies'][obj_key] = 0

    # Simulate dependency setting; actual way of determining dependencies would vary
    for key in cache_snapshot.cache:
        if obj_key != key:
            metadata['dependencies'][key] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes its metadata from the mapping table and adjusts the dependency counts of any objects that depended on the evicted object. It also recalculates the overall strategy based on the current workload.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    del metadata['recency'][evicted_key]
    del metadata['frequency'][evicted_key]
    del metadata['dependencies'][evicted_key]

    # Adjust dependency counts for other objects
    for key in metadata['dependencies']:
        if metadata['dependencies'][key] > 0:
            metadata['dependencies'][key] -= 1