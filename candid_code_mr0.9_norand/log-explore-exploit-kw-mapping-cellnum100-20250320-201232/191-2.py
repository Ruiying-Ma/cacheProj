# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
MAX_DEPTH_LEVEL = 5  # Example: for simplicity, we assume a maximum depth level in the cache hierarchy.

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, last access time, depth level in the cache hierarchy, and performance improvement metrics for each cached item.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by simulating multiple strategies (LRU, LFU, MRU) in parallel and selecting the one that minimizes performance degradation, prioritizing items from deeper levels of the cache hierarchy.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    
    min_penalty = float('inf')
    candid_obj_key = None

    for key, cached_obj in cache_snapshot.cache.items():
        last_access = metadata[key]['last_access']
        access_frequency = metadata[key]['access_frequency']
        depth_level = metadata[key]['depth_level']
        perf_metric = metadata[key]['perf_metric']
        
        # Calculate penalty (example heuristic: higher frequency & recently accessed items have lower penalty)
        penalty = (cache_snapshot.access_count - last_access) * (MAX_DEPTH_LEVEL - depth_level) * (1 / (access_frequency + 1)) * (1 + perf_metric)
        
        if penalty < min_penalty:
            min_penalty = penalty
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the last access time and increments the access frequency for the hit item. It also recalculates the performance improvement metric based on the latest access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['last_access'] = cache_snapshot.access_count
    metadata[key]['access_frequency'] += 1
    # Update the performance improvement metric.
    metadata[key]['perf_metric'] = calculate_perf_metric(metadata[key])

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata with the current time as the last access time, sets the access frequency to one, assigns it a depth level, and estimates its initial performance improvement metric.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'last_access': cache_snapshot.access_count,
        'access_frequency': 1,
        'depth_level': MAX_DEPTH_LEVEL,  # initialize with max depth for simplicity here.
        'perf_metric': calculate_perf_metric({'access_frequency': 1, 'last_access': cache_snapshot.access_count, 'depth_level': MAX_DEPTH_LEVEL})
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes its metadata and adjusts the depth levels of remaining items if necessary. It also updates the simulation models to reflect the change and recalculates the overall performance metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key

    if evicted_key in metadata:
        del metadata[evicted_key]
    
    # Adjust depth levels of remaining items, if necessary. Example: we can simply reduce all depth levels for now.
    for key in metadata:
        metadata[key]['depth_level'] = max(0, metadata[key]['depth_level'] - 1)
    
    # In a more complex scenario, simulation models could be updated here.

def calculate_perf_metric(obj_metadata):
    '''
    Helper function to calculate performance improvement metric based on access patterns.
    '''
    access_frequency = obj_metadata['access_frequency']
    last_access = obj_metadata['last_access']
    depth_level = obj_metadata['depth_level']
    # Example calculation, you can modify it according to the cache policy's actual requirements.
    perf_metric = access_frequency / (1 + last_access + depth_level)
    return perf_metric