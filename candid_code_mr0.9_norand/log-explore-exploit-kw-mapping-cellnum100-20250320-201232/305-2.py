# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import heapq
from collections import defaultdict, deque

# Put tunable constant parameters below
FREQUENCY_WEIGHT = 0.4
RECENCY_WEIGHT = 0.4
PREDICTION_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency, a machine learning model's prediction score for future access, and a log of eviction reasons.
access_frequency = defaultdict(int)
recency = {}
prediction_scores = defaultdict(float)
eviction_reasons = deque(maxlen=1000)  # Log of eviction reasons

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    '''
    # Calculate the eviction score for each candidate in the cache
    eviction_candidates = []
    for key, cached_obj in cache_snapshot.cache.items():
        freq = access_frequency[key]
        rec = cache_snapshot.access_count - recency[key]
        pred_score = prediction_scores[key]
        
        eviction_score = (FREQUENCY_WEIGHT * freq + 
                          RECENCY_WEIGHT * rec + 
                          PREDICTION_WEIGHT * pred_score)
        
        eviction_candidates.append((eviction_score, key))
    
    eviction_candidates.sort(reverse=True)  # Sort by eviction score
    candid_obj_key = eviction_candidates[-1][1]  # Choose the candidate with the lowest eviction score

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    '''
    key = obj.key
    access_frequency[key] += 1
    recency[key] = cache_snapshot.access_count
    
    # Update prediction model (simplified with basic rules)
    prediction_scores[key] = 1.0 / access_frequency[key]  # Simple inverse of frequency for demo

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    '''
    key = obj.key
    access_frequency[key] = 1
    recency[key] = cache_snapshot.access_count
    
    # Update prediction model to include new object (simplified)
    prediction_scores[key] = 1.0  # Start with a neutral prediction score

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    '''
    key = evicted_obj.key
    eviction_reasons.append((key, 'Evicted to make room for another object'))
    
    # Remove evicted object metadata
    if key in access_frequency:
        del access_frequency[key]
    if key in recency:
        del recency[key]
    if key in prediction_scores:
        del prediction_scores[key]
        # No need to update prediction model for removed item