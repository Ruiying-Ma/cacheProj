# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_FREQUENCY = 1.0
WEIGHT_RECENCY = 1.0
WEIGHT_WAITING_TIME = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached object, including access frequency, recency of access, and the time the object has been in the cache.
metadata = {
    'access_frequency': {},  # Dictionary to store access frequency of each object
    'recency': {},           # Dictionary to store recency timestamp of each object
    'waiting_time': {}       # Dictionary to store waiting time of each object
}

def calculate_priority_score(key, current_time):
    '''
    Calculate the priority score for an object based on its metadata.
    - Args:
        - `key`: The key of the object.
        - `current_time`: The current time (cache_snapshot.access_count).
    - Return:
        - `priority_score`: The calculated priority score.
    '''
    access_frequency = metadata['access_frequency'].get(key, 0)
    recency = metadata['recency'].get(key, 0)
    waiting_time = metadata['waiting_time'].get(key, 0)
    
    priority_score = (WEIGHT_FREQUENCY * access_frequency +
                      WEIGHT_RECENCY * (current_time - recency) +
                      WEIGHT_WAITING_TIME * waiting_time)
    return priority_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a priority score for each object based on a weighted combination of its access frequency, recency, and waiting time. The object with the lowest priority score is evicted first.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_priority_score = float('inf')
    current_time = cache_snapshot.access_count
    
    for key in cache_snapshot.cache:
        priority_score = calculate_priority_score(key, current_time)
        if priority_score < lowest_priority_score:
            lowest_priority_score = priority_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the access frequency, updates the recency timestamp to the current time, and resets the waiting time for the accessed object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['recency'][key] = current_time
    metadata['waiting_time'][key] = 0

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency to 1, sets the recency timestamp to the current time, and starts the waiting time counter.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count
    
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = current_time
    metadata['waiting_time'][key] = 0

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy removes all associated metadata for the evicted object and recalculates the priority scores for the remaining objects in the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    # Remove metadata for the evicted object
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['recency']:
        del metadata['recency'][evicted_key]
    if evicted_key in metadata['waiting_time']:
        del metadata['waiting_time'][evicted_key]
    
    # Recalculate waiting times for remaining objects
    current_time = cache_snapshot.access_count
    for key in cache_snapshot.cache:
        metadata['waiting_time'][key] = current_time - metadata['recency'][key]