# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import deque, defaultdict

# Put tunable constant parameters below
INITIAL_PRIORITY_SCORE = 1.0
FREQ_WEIGHT = 0.5
RECENCY_WEIGHT = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached object, including its size, access frequency, recency of access, dynamic priority score, and its position in a FIFO queue.
cache_metadata = {
    'access_freq': defaultdict(int),
    'recency': {},
    'priority_score': {},
    'fifo_queue': deque()
}

def calculate_priority(size, access_freq, recency):
    # Simple weighted sum of frequency and recency
    return (FREQ_WEIGHT * access_freq) + (RECENCY_WEIGHT * recency)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first considering the largest items to maximize space, then adjusting based on the dynamic priority score. If multiple candidates have the same priority, the object at the front of the FIFO queue is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    max_size = -1
    candidate_objs = []

    for key in cache_snapshot.cache:
        curr_object = cache_snapshot.cache[key]
        curr_priority = cache_metadata['priority_score'][key]
        if curr_object.size > max_size:
            max_size = curr_object.size
            candidate_objs = [(key, curr_priority)]
        elif curr_object.size == max_size:
            candidate_objs.append((key, curr_priority))

    # Sort by smallest priority and use FIFO as a tie-breaker
    candidate_objs.sort(key=lambda x: (x[1], cache_metadata['fifo_queue'].index(x[0])))
    if candidate_objs:
        candid_obj_key = candidate_objs[0][0]

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, recency of access, recalculates the dynamic priority score, and moves the object to the rear of the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    cache_metadata['access_freq'][obj.key] += 1
    cache_metadata['recency'][obj.key] = cache_snapshot.access_count
    cache_metadata['priority_score'][obj.key] = calculate_priority(obj.size, cache_metadata['access_freq'][obj.key], cache_metadata['recency'][obj.key])
    
    # Move to the rear of the FIFO queue
    cache_metadata['fifo_queue'].remove(obj.key)
    cache_metadata['fifo_queue'].append(obj.key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata, including size, access frequency, recency of access, sets an initial dynamic priority score based on current system load and access patterns, and places the object at the rear of the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    cache_metadata['access_freq'][obj.key] = 1
    cache_metadata['recency'][obj.key] = cache_snapshot.access_count
    cache_metadata['priority_score'][obj.key] = INITIAL_PRIORITY_SCORE
    
    # Place at the rear of the FIFO queue
    cache_metadata['fifo_queue'].append(obj.key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy recalculates the dynamic priority scores for the remaining objects and removes the evicted object from the front of the FIFO queue.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    del cache_metadata['access_freq'][evicted_obj.key]
    del cache_metadata['recency'][evicted_obj.key]
    del cache_metadata['priority_score'][evicted_obj.key]
    cache_metadata['fifo_queue'].remove(evicted_obj.key)
    
    # Recalculate the priority scores for remaining objects in cache
    for key in cache_snapshot.cache:
        cache_metadata['priority_score'][key] = calculate_priority(
            cache_snapshot.cache[key].size,
            cache_metadata['access_freq'][key],
            cache_metadata['recency'][key]
        )