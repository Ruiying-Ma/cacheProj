# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import collections
import time

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for access frequency in priority score
BETA = 0.3   # Weight for recency in priority score
GAMMA = 0.2  # Weight for size in priority score

# Put the metadata specifically maintained by the policy below. The policy maintains partitions based on access frequency, an ordered list of cached items within each partition, and metadata for each cached object including access frequency, recency (timestamp of last access), size, and a dynamic priority score calculated from these metrics.
partitions = collections.defaultdict(lambda: collections.OrderedDict())
metadata = {}

def calculate_priority(obj_meta):
    # Calculate priority score = ALPHA * access_freq - BETA * recency + GAMMA * size
    return ALPHA * obj_meta['access_freq'] - BETA * obj_meta['recency'] + GAMMA * obj_meta['size']

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy first selects the partition with the lowest access frequency, then calculates a weighted score for each cached object within that partition based on access frequency, recency, and size. The object with the lowest score is chosen as the eviction victim.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Step 1: Identify the partition with the lowest access frequency
    min_freq = min(metadata.values(), key=lambda x: x['access_freq'])['access_freq']
    target_partition = partitions[min_freq]

    # Step 2: Calculate weighted score for each object in that partition and select the one with the lowest score
    min_score = float('inf')
    for key, item in target_partition.items():
        score = calculate_priority(metadata[key])
        if score < min_score:
            min_score = score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency of the partition is updated, the accessed item is moved to the front of the ordered list, its access frequency is incremented, the recency timestamp is updated to the current time, and the priority score is recalculated based on the updated metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key

    obj_meta = metadata[key]
    freq = obj_meta['access_freq']
    partitions[freq].pop(key)

    # Increment access frequency and update recency
    obj_meta['access_freq'] += 1
    obj_meta['recency'] = current_time

    # Move object to a new partition based on incremented frequency
    new_freq = obj_meta['access_freq']
    partitions[new_freq][key] = obj
    metadata[key] = obj_meta

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the object is placed in the appropriate partition based on its initial access frequency, added to the front of the ordered list, its access frequency is set to 1, the recency timestamp is set to the current time, and the initial priority score is calculated based on its size and the initial metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key

    metadata[key] = {
        'access_freq': 1,
        'recency': current_time,
        'size': obj.size
    }

    partitions[1][key] = obj

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy updates the partition's access frequency, removes the item from the ordered list, adjusts the priority levels of remaining items if necessary, and recalculates the priority scores of the remaining objects to ensure they reflect the current state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    freq = metadata[evicted_key]['access_freq']

    # Remove the evicted object from its partition
    partitions[freq].pop(evicted_key)
    metadata.pop(evicted_key)

    # Adjust remaining metadata if necessary and recalculate priority scores of remaining objects
    for partition_freq, partition_objs in partitions.items():
        for obj_key, cached_obj in partition_objs.items():
            obj_meta = metadata[obj_key]
            metadata[obj_key]['priority'] = calculate_priority(obj_meta)