# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for recency in eviction probability score
BETA = 0.5   # Weight for frequency in eviction probability score

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached item, including access frequency, recency of access, and a dynamic eviction probability score. Additionally, it keeps global statistics on access patterns and system performance metrics.
metadata = {
    'access_frequency': {},  # Dictionary to store access frequency of each object
    'recency': {},           # Dictionary to store recency of each object
    'eviction_score': {}     # Dictionary to store eviction probability score of each object
}

def calculate_eviction_score(key):
    '''
    Calculate the eviction probability score for a given key.
    '''
    freq = metadata['access_frequency'].get(key, 0)
    recency = metadata['recency'].get(key, 0)
    score = ALPHA * recency + BETA * (1 / (freq + 1))
    return score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects an eviction victim based on a weighted random choice, where the weights are determined by the eviction probability scores of the cached items. Items with higher scores are more likely to be evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    max_score = -1

    for key in cache_snapshot.cache:
        score = calculate_eviction_score(key)
        if score > max_score:
            max_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the accessed item are updated. The eviction probability score is recalculated based on the new access frequency and recency, and global statistics are adjusted to reflect the hit.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['eviction_score'][key] = calculate_eviction_score(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its initial access frequency and recency are set, and an initial eviction probability score is assigned. Global statistics are updated to account for the new insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['eviction_score'][key] = calculate_eviction_score(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the global statistics are updated to reflect the removal. The eviction probability scores of remaining items may be adjusted based on the updated global statistics to ensure optimal future eviction decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata['access_frequency']:
        del metadata['access_frequency'][evicted_key]
    if evicted_key in metadata['recency']:
        del metadata['recency'][evicted_key]
    if evicted_key in metadata['eviction_score']:
        del metadata['eviction_score'][evicted_key]

    # Adjust eviction scores of remaining items if necessary
    for key in cache_snapshot.cache:
        metadata['eviction_score'][key] = calculate_eviction_score(key)