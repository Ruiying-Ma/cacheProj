# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for access frequency in priority score calculation
BETA = 0.5   # Weight for recency in priority score calculation

# Put the metadata specifically maintained by the policy below. Each cached item maintains a priority score, access frequency, and last access timestamp. Additionally, a global adjustment factor is maintained to dynamically adjust priority scores based on overall access patterns.
metadata = {}
global_adjustment_factor = 1.0

def calculate_priority(frequency, recency, adjustment_factor):
    return ALPHA * frequency + BETA * recency * adjustment_factor

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the item with the lowest priority score, which is calculated using a combination of access frequency and recency, adjusted by the global adjustment factor.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_priority = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        freq = metadata[key]['frequency']
        last_access = metadata[key]['last_access']
        priority = calculate_priority(freq, cache_snapshot.access_count - last_access, global_adjustment_factor)
        
        if priority < min_priority:
            min_priority = priority
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency of the item is incremented, the last access timestamp is updated to the current time, and the priority score is recalculated using the updated metadata and the global adjustment factor.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['frequency'] += 1
    metadata[key]['last_access'] = cache_snapshot.access_count
    metadata[key]['priority'] = calculate_priority(metadata[key]['frequency'], cache_snapshot.access_count - metadata[key]['last_access'], global_adjustment_factor)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its access frequency is initialized to 1, the last access timestamp is set to the current time, and its priority score is calculated. The global adjustment factor may be updated based on the overall access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'frequency': 1,
        'last_access': cache_snapshot.access_count,
        'priority': calculate_priority(1, 0, global_adjustment_factor)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the global adjustment factor is recalibrated if necessary to ensure that the priority scores of remaining items accurately reflect their access patterns. The metadata of the evicted item is removed from the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]
    
    # Optionally, recalibrate the global adjustment factor based on the remaining items
    # This is a placeholder for any recalibration logic if needed
    # global_adjustment_factor = some_recalibration_function(cache_snapshot)