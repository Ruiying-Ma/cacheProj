# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
REGION_COUNT = 3
FREQUENCY_WEIGHT = 0.4
RECENCY_WEIGHT = 0.4
PROBABILITY_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for access frequency, recency, and a region identifier for each cache line. Additionally, it keeps a probabilistic score for each line based on a combination of these factors.
metadata = {
    'access_frequency': {},  # key -> frequency
    'recency': {},           # key -> last access time
    'region': {},            # key -> region id
    'probability_score': {}  # key -> probabilistic score
}

def calculate_probabilistic_score(frequency, recency, current_time):
    return FREQUENCY_WEIGHT * frequency + RECENCY_WEIGHT * (current_time - recency) + PROBABILITY_WEIGHT * math.exp(-frequency)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evaluates multiple eviction candidates from different regions simultaneously, using a combination of access frequency, recency, and probabilistic scores. It then selects the final victim based on a weighted balance of these criteria.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        region = metadata['region'][key]
        frequency = metadata['access_frequency'][key]
        recency = metadata['recency'][key]
        score = calculate_probabilistic_score(frequency, recency, cache_snapshot.access_count)
        
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and recency metadata for the accessed line, and recalculates its probabilistic score to reflect the increased likelihood of future accesses.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['probability_score'][key] = calculate_probabilistic_score(
        metadata['access_frequency'][key],
        metadata['recency'][key],
        cache_snapshot.access_count
    )

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and recency metadata, assigns it to a region based on the type of data, and calculates an initial probabilistic score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['region'][key] = hash(key) % REGION_COUNT
    metadata['probability_score'][key] = calculate_probabilistic_score(
        metadata['access_frequency'][key],
        metadata['recency'][key],
        cache_snapshot.access_count
    )

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy updates the metadata of the remaining lines in the affected region to reflect the removal, and recalculates probabilistic scores to ensure a balanced distribution of future evictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    evicted_region = metadata['region'][evicted_key]
    
    # Remove metadata of evicted object
    del metadata['access_frequency'][evicted_key]
    del metadata['recency'][evicted_key]
    del metadata['region'][evicted_key]
    del metadata['probability_score'][evicted_key]
    
    # Recalculate probabilistic scores for remaining objects in the same region
    for key, region in metadata['region'].items():
        if region == evicted_region:
            metadata['probability_score'][key] = calculate_probabilistic_score(
                metadata['access_frequency'][key],
                metadata['recency'][key],
                cache_snapshot.access_count
            )