# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below
FREQUENCY_WEIGHT = 0.5
RECENCY_WEIGHT = 0.3
SIZE_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains a multi-level hierarchy of metadata including access frequency, recency (timestamp of last access), data size, and a probabilistic eviction score. It also tracks access patterns and the number of copies for frequently accessed data.
access_frequency = defaultdict(int)
recency_metadata = {}
data_size_metadata = {}
eviction_probability = {}
pattern_recognition = defaultdict(list)
copies_count = defaultdict(int)

def calculate_eviction_probability(freq, recency, size):
    freq_score = FREQUENCY_WEIGHT / (freq + 1)
    recency_score = RECENCY_WEIGHT / (recency + 1)
    size_score = SIZE_WEIGHT * size
    return freq_score + recency_score + size_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates an eviction probability for each item based on access frequency, recency, and data size. It uses pattern recognition to avoid evicting data that fits frequent access patterns. The item with the highest eviction probability is chosen for eviction, ensuring that multiple copies of frequently accessed data are maintained until necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    max_eviction_prob = -1

    for key, cached_obj in cache_snapshot.cache.items():
        if key in pattern_recognition[obj.key]:
            continue
        prob = calculate_eviction_probability(
            access_frequency[key], 
            cache_snapshot.access_count - recency_metadata[key], 
            cached_obj.size
        )
        if prob > max_eviction_prob:
            max_eviction_prob = prob
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the recency metadata at the top level, increments the access frequency at the middle level, and recalculates the probabilistic eviction score. It also adjusts the pattern recognition model to reinforce the access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    access_frequency[obj.key] += 1
    recency_metadata[obj.key] = cache_snapshot.access_count
    eviction_probability[obj.key] = calculate_eviction_probability(
        access_frequency[obj.key],
        cache_snapshot.access_count - recency_metadata[obj.key],
        obj.size
    )
    pattern_recognition[obj.key].append(cache_snapshot.access_count)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the recency and frequency metadata, updates the data size information, calculates an initial probabilistic eviction score, and adjusts the pattern recognition model to include the new access pattern. It also checks if multiple copies are needed based on access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    access_frequency[obj.key] = 1
    recency_metadata[obj.key] = cache_snapshot.access_count
    data_size_metadata[obj.key] = obj.size
    eviction_probability[obj.key] = calculate_eviction_probability(
        access_frequency[obj.key], 0, obj.size
    )
    pattern_recognition[obj.key].append(cache_snapshot.access_count)
    copies_count[obj.key] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the corresponding metadata from all levels, updates the pattern recognition model to deprioritize the evicted pattern, adjusts the overall cache size metadata, and recalculates eviction probabilities for the remaining items. If the evicted item had multiple copies, it adjusts the count of remaining copies.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del access_frequency[evicted_obj.key]
    del recency_metadata[evicted_obj.key]
    del data_size_metadata[evicted_obj.key]
    del eviction_probability[evicted_obj.key]
    pattern_recognition[evicted_obj.key] = [
        ts for ts in pattern_recognition[evicted_obj.key]
        if ts != cache_snapshot.access_count
    ]
    copies_count[evicted_obj.key] -= 1
    if copies_count[evicted_obj.key] == 0:
        del copies_count[evicted_obj.key]

    for key in cache_snapshot.cache:
        eviction_probability[key] = calculate_eviction_probability(
            access_frequency[key],
            cache_snapshot.access_count - recency_metadata[key],
            cache_snapshot.cache[key].size
        )