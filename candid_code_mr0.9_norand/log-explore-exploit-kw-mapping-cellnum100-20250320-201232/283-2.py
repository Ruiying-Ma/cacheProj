# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_FREQUENCY = 1
INITIAL_FITNESS = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cached object, including access frequency, recency of access, a fitness score derived from these factors, and a predicted access probability based on historical data.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by evaluating the fitness score and predicted access probability of each cached object, evicting the one with the lowest combined score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_combined_score = float('inf')
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        fitness_score = meta['fitness_score']
        predicted_access_prob = meta['predicted_access_prob']
        combined_score = fitness_score * predicted_access_prob
        if combined_score < min_combined_score:
            min_combined_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and recency of the accessed object, recalculates its fitness score, and updates its predicted access probability based on the latest access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    meta = metadata[obj.key]
    meta['frequency'] += 1
    meta['recency'] = cache_snapshot.access_count
    meta['fitness_score'] = (meta['frequency'] * 0.7 + meta['recency'] * 0.3) / (cache_snapshot.access_count + 1)
    meta['predicted_access_prob'] = meta['frequency'] / (cache_snapshot.hit_count + cache_snapshot.miss_count)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and recency, assigns an initial fitness score, and estimates its predicted access probability using historical data of similar objects.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    metadata[obj.key] = {
        'frequency': INITIAL_FREQUENCY,
        'recency': cache_snapshot.access_count,
        'fitness_score': INITIAL_FITNESS,
        'predicted_access_prob': INITIAL_FREQUENCY / (cache_snapshot.hit_count + cache_snapshot.miss_count + 1)
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy records the eviction decision and its context, adjusting its predictive model and eviction strategy based on the success or failure of past decisions to improve future hit rates.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    del metadata[evicted_obj.key]