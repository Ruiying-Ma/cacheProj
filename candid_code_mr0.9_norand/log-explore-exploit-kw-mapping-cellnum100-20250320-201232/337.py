# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import numpy as np
from collections import defaultdict, deque

# Put tunable constant parameters below
MODEL_RETRAIN_INTERVAL = 100  # Retrain the model every 100 accesses

# Put the metadata specifically maintained by the policy below. The policy maintains a multi-tiered structure with access frequency, recency, and proximity logs. It also includes a machine learning model trained on access patterns to predict future usage.
access_frequency = defaultdict(int)
recency_log = {}
proximity_log = defaultdict(int)
access_history = deque(maxlen=1000)  # Store the last 1000 accesses for model training
model = None  # Placeholder for the machine learning model

def train_model():
    global model
    # Dummy model training function
    # In a real scenario, this would involve training a machine learning model on access_history
    model = np.mean([access_frequency[key] for key in access_frequency])

def predict_least_likely_used():
    # Dummy prediction function
    # In a real scenario, this would involve using the trained model to predict future usage
    return min(access_frequency, key=access_frequency.get)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first consulting the machine learning model to predict the least likely to be used entries. It then considers the tier level, access frequency, recency, and proximity to nearby nodes to make the final decision.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    if model is None or cache_snapshot.access_count % MODEL_RETRAIN_INTERVAL == 0:
        train_model()
    
    # Predict the least likely to be used entry
    least_likely_used_key = predict_least_likely_used()
    
    # Consider tier level, access frequency, recency, and proximity
    # For simplicity, we will use a weighted sum of these factors
    min_score = float('inf')
    for key, cached_obj in cache_snapshot.cache.items():
        score = (access_frequency[key] * 0.4 +
                 (cache_snapshot.access_count - recency_log[key]) * 0.3 +
                 proximity_log[key] * 0.3)
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and recency logs for the accessed item. It also adjusts the proximity log if the access is from a nearby node and retrains the machine learning model periodically based on new access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    access_frequency[obj.key] += 1
    recency_log[obj.key] = cache_snapshot.access_count
    # Assuming proximity is determined by some external factor, here we just increment it
    proximity_log[obj.key] += 1
    access_history.append(obj.key)
    
    if cache_snapshot.access_count % MODEL_RETRAIN_INTERVAL == 0:
        train_model()

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency, and proximity logs. It also updates the machine learning model with the new access pattern data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    access_frequency[obj.key] = 1
    recency_log[obj.key] = cache_snapshot.access_count
    proximity_log[obj.key] = 1
    access_history.append(obj.key)
    
    if cache_snapshot.access_count % MODEL_RETRAIN_INTERVAL == 0:
        train_model()

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy removes its metadata from the access frequency, recency, and proximity logs. It also retrains the machine learning model to improve future predictions based on the updated cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    del access_frequency[evicted_obj.key]
    del recency_log[evicted_obj.key]
    del proximity_log[evicted_obj.key]
    access_history.remove(evicted_obj.key)
    
    if cache_snapshot.access_count % MODEL_RETRAIN_INTERVAL == 0:
        train_model()