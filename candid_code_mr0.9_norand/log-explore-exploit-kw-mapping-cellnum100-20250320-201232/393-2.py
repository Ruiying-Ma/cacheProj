# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

import time
from collections import defaultdict, deque

# Put tunable constant parameters below
INITIAL_SCORE = 1.0
ACTIVATION_THRESHOLD = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access,
# importance score, predicted future access score, activation level, probability of eviction, and a dependency graph.
# It also tracks global statistics on access patterns and workload characteristics.

class Metadata:
    def __init__(self):
        self.freq = 0
        self.recency = time.time()
        self.importance_score = INITIAL_SCORE
        self.pred_future_access = 0.0
        self.activation_level = 0.0
        self.prob_eviction = 1.0
        self.dependencies = set()

cache_metadata = defaultdict(Metadata)
dependency_graph = defaultdict(set)
access_pattern_data = []

def calculate_composite_score(meta):
    return meta.importance_score + meta.freq + (time.time() - meta.recency) - meta.pred_future_access + meta.activation_level + meta.prob_eviction

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates a composite score for each cached object, combining importance score, access frequency, recency of access, predicted future access score, activation level, and probability of eviction. It identifies items with activation levels below their threshold values and the least number of dependencies, then probabilistically selects an eviction candidate from these, prioritizing objects with the lowest composite scores.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    # Identify all candidates
    candidates = [key for key, meta in cache_metadata.items() if meta.activation_level < ACTIVATION_THRESHOLD]

    # Find the candidate with the lowest composite score
    for key in candidates:
        score = calculate_composite_score(cache_metadata[key])
        if score < min_score:
            min_score = score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy moves the accessed node to the front of the doubly linked list, increments its access frequency, updates its recency timestamp, increases its activation level, recalculates its importance score and probability of eviction, and updates the machine learning model with the new access pattern data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata = cache_metadata[obj.key]
    metadata.freq += 1
    metadata.recency = cache_snapshot.access_count
    metadata.activation_level = min(1.0, metadata.activation_level + 0.1)
    metadata.importance_score = metadata.freq + metadata.activation_level
    metadata.prob_eviction = 1.0 / (metadata.freq + 1)
    
    access_pattern_data.append((obj.key, time.time()))

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy places the new node at the front of the doubly linked list, initializes its access frequency, recency timestamp, predicted future access score, activation level, and probability of eviction, assigns an initial importance score, updates the dependency graph to include the new object and its dependencies, and updates the machine learning model with the new object information.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    cache_metadata[obj.key] = Metadata()
    metadata = cache_metadata[obj.key]
    metadata.recency = cache_snapshot.access_count

    # Assuming some dependency calculation is done here
    # meta.dependencies = detect_dependencies(obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the evicted node from the doubly linked list and the dependency graph, updates the dependencies of remaining objects, adjusts the access frequency and recency metadata, recalculates the importance scores and probability of eviction for remaining objects, updates global statistics to reflect the eviction, and retrains the machine learning model with the updated cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in cache_metadata:
        del cache_metadata[evicted_obj.key]

    # Remove evicted object from dependency graph
    if evicted_obj.key in dependency_graph:
        dependencies = dependency_graph[evicted_obj.key]
        del dependency_graph[evicted_obj.key]

        for dep in dependencies:
            dependency_graph[dep].remove(evicted_obj.key)
    
    # Update global statistics
    access_pattern_data.append((evicted_obj.key, time.time(), "evicted"))