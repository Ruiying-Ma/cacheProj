# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Tunable parameter for weighting access frequency vs recency

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache line, including access frequency, recency of access, a cost value derived from these factors, and a region identifier mapping access patterns to specific regions of the cache.
cache_metadata = {
    'access_frequency': {},  # Maps obj key to its access frequency
    'recency': {},           # Maps obj key to its last access time (recency)
    'cost': {},              # Maps obj key to its cost value
    'region': {},            # Maps obj key to its region identifier
    'region_access_freq': {} # Maps region to combined access frequency of items in that region
}

def calculate_cost(access_frequency, recency):
    '''
    Computes the cost value based on access frequency and recency.
    '''
    return ALPHA * (1 / access_frequency) + (1 - ALPHA) * recency

def get_least_frequent_region():
    '''
    Determines the region with the least combined access frequency.
    '''
    if not cache_metadata['region_access_freq']:
        return None
    return min(cache_metadata['region_access_freq'], key=cache_metadata['region_access_freq'].get)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects a cache line for eviction by first identifying the region with the least combined access frequency, then within that region, it evicts the item with the highest cost value.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    least_frequent_region = get_least_frequent_region()
    
    if least_frequent_region is None:
        return None

    highest_cost = -1
    for key in cache_snapshot.cache:
        if cache_metadata['region'][key] == least_frequent_region:
            if cache_metadata['cost'][key] > highest_cost:
                highest_cost = cache_metadata['cost'][key]
                candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and recency of the accessed cache line, recalculates its cost, and adjusts the region mapping if necessary based on the updated access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    cache_metadata['access_frequency'][key] += 1
    cache_metadata['recency'][key] = cache_snapshot.access_count
    cache_metadata['cost'][key] = calculate_cost(
        cache_metadata['access_frequency'][key],
        cache_metadata['recency'][key]
    )

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and recency, calculates its initial cost, and assigns it to a region based on its access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    cache_metadata['access_frequency'][key] = 1
    cache_metadata['recency'][key] = cache_snapshot.access_count
    cache_metadata['cost'][key] = calculate_cost(
        cache_metadata['access_frequency'][key],
        cache_metadata['recency'][key]
    )
    # Directly assigning region for simplicity; consider access pattern for dynamic allocation
    cache_metadata['region'][key] = 'default'
    if 'default' not in cache_metadata['region_access_freq']:
        cache_metadata['region_access_freq']['default'] = 0
    cache_metadata['region_access_freq']['default'] += 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy updates the combined access frequency of the affected region, recalculates the cost values for the remaining items in that region, and adjusts the region mapping if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    evicted_region = cache_metadata['region'][evicted_key]

    cache_metadata['region_access_freq'][evicted_region] -= cache_metadata['access_frequency'][evicted_key]
    del cache_metadata['access_frequency'][evicted_key]
    del cache_metadata['recency'][evicted_key]
    del cache_metadata['cost'][evicted_key]
    del cache_metadata['region'][evicted_key]

    # Recalculate the region's combined access frequency
    region_access_freq = 0
    for key in cache_metadata['region']:
        if cache_metadata['region'][key] == evicted_region:
            region_access_freq += cache_metadata['access_frequency'][key]
    cache_metadata['region_access_freq'][evicted_region] = region_access_freq