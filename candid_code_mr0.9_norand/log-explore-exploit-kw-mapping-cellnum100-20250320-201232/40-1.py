# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
# Parameters for the LRU and LFU policies, for example:
LFU_PRIORITY = 0.7  # Weight of LFU in the eviction decision.
LRU_PRIORITY = 1 - LFU_PRIORITY  # Weight of LRU in the eviction decision.

# Put the metadata specifically maintained by the policy below.
cache_metadata = {}  # Metadata for each cache line in the format:
# cache_metadata[obj.key] = {
#     'last_access_time': timestamp,
#     'access_count': count,
#     'future_access_pattern': estimate
# }

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy traverses the cache hierarchy starting from the lowest level, using a combination of least recently used (LRU) and least frequently used (LFU) policies to identify potential eviction candidates. It then uses estimated future access patterns to select the final eviction victim.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for cached_obj_key, cached_obj in cache_snapshot.cache.items():
        metadata = cache_metadata.get(cached_obj_key, None)
        if metadata is None:
            continue  # Should not happen, but just in case

        # Calculate the LFU score and LRU score
        lru_score = cache_snapshot.access_count - metadata['last_access_time']
        lfu_score = metadata['access_count']

        # Combine the LRU score and LFU score using the predefined weights
        combined_score = (LRU_PRIORITY * lru_score) + (LFU_PRIORITY / (lfu_score + 1))

        # Compare and determine the potential eviction candidate
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = cached_obj_key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency counter and the timestamp of last access for the corresponding cache line. It also refines the estimated future access pattern based on the new access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata = cache_metadata.get(obj.key, None)
    if metadata:
        metadata['last_access_time'] = cache_snapshot.access_count
        metadata['access_count'] += 1
        # Refine future access pattern - this segment is policy-based; 
        # Here you can add any heuristic to refine the future access pattern
        # For example, we can modestly increase the estimate:
        metadata['future_access_pattern'] = (metadata['future_access_pattern'] + cache_snapshot.access_count) / 2

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the access frequency counter and the timestamp of last access for the new cache line. It also sets an initial estimated future access pattern based on historical data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    cache_metadata[obj.key] = {
        'last_access_time': cache_snapshot.access_count,
        'access_count': 1,
        'future_access_pattern': cache_snapshot.access_count  # Initial value based on historic data can be more complex
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy resets the metadata for the evicted cache line, including clearing the access frequency counter, timestamp of last access, and estimated future access pattern. It may also adjust the hierarchical structure to reflect the change.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj and evicted_obj.key in cache_metadata:
        del cache_metadata[evicted_obj.key]

# Example on how to use this framework:
# You would normally have another part of the code that interacts with these functions to handle cache hits, insertions, and evictions.