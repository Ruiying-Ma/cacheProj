# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import deque, defaultdict

# Put tunable constant parameters below
SQ_CAPACITY = 100  # Example capacity for SQ
MQ_CAPACITY = 100  # Example capacity for MQ
PRIORITY_THRESHOLD = 10  # Example threshold for priority promotion

# Put the metadata specifically maintained by the policy below. The policy maintains two FIFO queues (SQ and MQ), two LRU queues (T1 and T2), two ghost FIFO queues (GQ and B1/B2), and a multi-level associative array tracking access frequency, recency, and priority scores for each cached object.
SQ = deque()
MQ = deque()
T1 = deque()
T2 = deque()
GQ = deque()
B1 = deque()
B2 = deque()

frequency = defaultdict(int)
recency = defaultdict(int)
priority = defaultdict(int)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the eviction victim by first checking if SQ exceeds its capacity, then moving objects to MQ. If MQ is full, it reduces frequencies in MQ until an object with zero frequency is found and evicts it. If SQ is not full, it evicts from T1 or T2 based on LRU. The item with the lowest priority score across all levels is chosen if multiple candidates exist.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    if len(SQ) > SQ_CAPACITY:
        while len(SQ) > SQ_CAPACITY:
            moved_obj = SQ.popleft()
            MQ.append(moved_obj)
    
    if len(MQ) > MQ_CAPACITY:
        while len(MQ) > MQ_CAPACITY:
            for mq_obj in MQ:
                if frequency[mq_obj.key] == 0:
                    candid_obj_key = mq_obj.key
                    MQ.remove(mq_obj)
                    break
            if candid_obj_key:
                break
            for mq_obj in MQ:
                frequency[mq_obj.key] -= 1
    
    if not candid_obj_key:
        if T1:
            candid_obj_key = T1.popleft().key
        elif T2:
            candid_obj_key = T2.popleft().key
    
    if not candid_obj_key:
        all_candidates = list(SQ) + list(MQ) + list(T1) + list(T2)
        candid_obj_key = min(all_candidates, key=lambda x: priority[x.key]).key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the accessed object's frequency is increased by 1 if less than 3, its recency is updated to the current timestamp, and its priority score is recalculated. The object is moved to the most-recently-used end of T2 and may be promoted to a higher level if its priority exceeds a threshold.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    if frequency[obj.key] < 3:
        frequency[obj.key] += 1
    recency[obj.key] = cache_snapshot.access_count
    priority[obj.key] = frequency[obj.key] + recency[obj.key]
    
    if obj in T1:
        T1.remove(obj)
    elif obj in T2:
        T2.remove(obj)
    
    T2.append(obj)
    
    if priority[obj.key] > PRIORITY_THRESHOLD:
        # Promote to higher level if needed
        pass

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its frequency is set to 1, recency to the current timestamp, and its priority score is initialized based on initial access patterns. The object is placed at the rear of SQ or the most-recently-used end of T1, and at the current pointer location.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    frequency[obj.key] = 1
    recency[obj.key] = cache_snapshot.access_count
    priority[obj.key] = frequency[obj.key] + recency[obj.key]
    
    if len(SQ) < SQ_CAPACITY:
        SQ.append(obj)
    else:
        T1.append(obj)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After eviction, if evicted from SQ, the object is moved to the rear of GQ. If evicted from T1, it is moved to the rear of B1. If evicted from T2, it is moved to the rear of B2. The evicted object's metadata is removed from the associative arrays, and the priority scores of remaining items are recalculated.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    if evicted_obj in SQ:
        SQ.remove(evicted_obj)
        GQ.append(evicted_obj)
    elif evicted_obj in T1:
        T1.remove(evicted_obj)
        B1.append(evicted_obj)
    elif evicted_obj in T2:
        T2.remove(evicted_obj)
        B2.append(evicted_obj)
    
    del frequency[evicted_obj.key]
    del recency[evicted_obj.key]
    del priority[evicted_obj.key]
    
    for obj in list(SQ) + list(MQ) + list(T1) + list(T2):
        priority[obj.key] = frequency[obj.key] + recency[obj.key]