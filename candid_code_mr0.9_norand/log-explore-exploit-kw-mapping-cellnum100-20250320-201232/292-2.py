# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below

ALPHA = 0.5  # Tunable parameter for adjusting score calculation between recency and frequency
BETA = 0.3   # Tunable parameter for adjusting score calculation considering data size

# Put the metadata specifically maintained by the policy below. The policy maintains a multi-level hierarchy of metadata including access frequency, recency, data size, and a likelihood score. It also keeps track of global access patterns to predict future accesses.

metadata = {
    'recency': {},        # Stores the access recency of each object
    'frequency': {},      # Stores the access frequency of each object
    'data_size': {},      # Stores the size of each object
    'likelihood_score': {},  # Stores the likelihood score for each object
    'global_pattern': {}  # Tracks the global access pattern model
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the item with the lowest combined score, which is calculated using the item's likelihood score, its level-specific metadata, and the global access pattern model.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        recency = metadata['recency'].get(key, 0)
        frequency = metadata['frequency'].get(key, 0)
        size = cached_obj.size
        likelihood_score = metadata['likelihood_score'].get(key, 0)
        
        # Calculating combined score
        combined_score = ALPHA * (cache_snapshot.access_count - recency) + frequency + BETA * size + (1 - BETA) * likelihood_score
        
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the recency metadata at the top level, increments the access frequency at the middle level, adjusts the data size information if necessary, increases the likelihood score based on recency and frequency, and updates the global access pattern model to reinforce the access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['frequency'][key] = metadata['frequency'].get(key, 0) + 1
    metadata['data_size'][key] = obj.size
    metadata['likelihood_score'][key] = metadata['recency'][key] + metadata['frequency'][key]

    if key in metadata['global_pattern']:
        metadata['global_pattern'][key] += 1
    else:
        metadata['global_pattern'][key] = 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes the recency and frequency metadata, updates the data size information, sets the initial likelihood score based on the global access pattern model, and updates the global access pattern model to include the new object and its initial access probability.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['frequency'][key] = 1  # initial frequency is 1
    metadata['data_size'][key] = obj.size
    
    # Initial likelihood score based on access pattern model
    metadata['likelihood_score'][key] = metadata['recency'][key] + metadata['frequency'][key]

    if key in metadata['global_pattern']:
        metadata['global_pattern'][key] += 1
    else:
        metadata['global_pattern'][key] = 1

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes the corresponding metadata from all levels, updates the global access pattern model to deprioritize the evicted pattern, and adjusts the overall cache size metadata.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key

    if key in metadata['recency']:
        del metadata['recency'][key]
    if key in metadata['frequency']:
        del metadata['frequency'][key]
    if key in metadata['data_size']:
        del metadata['data_size'][key]
    if key in metadata['likelihood_score']:
        del metadata['likelihood_score'][key]
    if key in metadata['global_pattern']:
        del metadata['global_pattern'][key]