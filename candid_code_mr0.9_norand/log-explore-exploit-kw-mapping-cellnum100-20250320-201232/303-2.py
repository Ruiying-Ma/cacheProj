# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import time

# Put tunable constant parameters below
FREQUENCY_WEIGHT = 1.0
RECENCY_WEIGHT = 1.0
FUTURE_ACCESSES_WEIGHT = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency (timestamp of last access), and a predicted future access score for each cache entry. It also keeps a list of eviction candidates evaluated in parallel.
cache_metadata = dict()
eviction_candidates = []

def combined_score(freq, recency, future_accesses):
    return FREQUENCY_WEIGHT * freq + RECENCY_WEIGHT * recency + FUTURE_ACCESSES_WEIGHT * future_accesses

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects eviction candidates by evaluating multiple entries simultaneously, considering access frequency, recency, and predicted future access. The entry with the lowest combined score is chosen for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_score = float('inf')
    
    for key in cache_snapshot.cache:
        metadata = cache_metadata.get(key, {})
        freq = metadata.get('frequency', 0)
        recency = cache_snapshot.access_count - metadata.get('last_accessed', 0)
        future_accesses = metadata.get('future_access_score', 0)
        
        score = combined_score(freq, recency, future_accesses)
        
        if score < lowest_score:
            lowest_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency is incremented, the recency timestamp is updated to the current time, and the predicted future access score is recalculated based on recent access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata = cache_metadata.setdefault(obj.key, {})
    metadata['frequency'] = metadata.get('frequency', 0) + 1
    metadata['last_accessed'] = cache_snapshot.access_count
    metadata['future_access_score'] = calculate_predicted_future_access_score(metadata)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency to 1, sets the recency timestamp to the current time, and calculates an initial predicted future access score based on similar objects' patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata = cache_metadata.setdefault(obj.key, {})
    metadata['frequency'] = 1
    metadata['last_accessed'] = cache_snapshot.access_count
    metadata['future_access_score'] = calculate_predicted_future_access_score(metadata)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an entry, the policy removes its metadata and updates the list of eviction candidates by re-evaluating the remaining entries' combined scores to ensure optimal future evictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    if evicted_obj.key in cache_metadata:
        del cache_metadata[evicted_obj.key]

    # Re-evaluate eviction candidates
    eviction_candidates.clear()
    for key in cache_snapshot.cache:
        metadata = cache_metadata.get(key, {})
        freq = metadata.get('frequency', 0)
        recency = cache_snapshot.access_count - metadata.get('last_accessed', 0)
        future_accesses = metadata.get('future_access_score', 0)
        
        score = combined_score(freq, recency, future_accesses)
        eviction_candidates.append((score, key))
    
    eviction_candidates.sort()  # Keep candidates sorted by their combined score

def calculate_predicted_future_access_score(metadata):
    '''
    This function calculates a predicted future access score based on the provided metadata.
    '''
    # For this example, we will assume a static prediction function
    # that could be more sophisticated in a real application.
    frequency = metadata.get('frequency', 1)
    return max(1, frequency - 1)