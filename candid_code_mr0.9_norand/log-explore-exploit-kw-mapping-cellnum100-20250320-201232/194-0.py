# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

from collections import defaultdict, OrderedDict
import time

# Put tunable constant parameters below
# Example: weights for eviction priority formula
ALPHA_RECENCY = 1
BETA_FREQUENCY = 1
GAMMA_CONNECTIVITY = 1
DELTA_EVENT_RELEVANCE = 1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including access frequency, recency of access, node connectivity, and system event states. It also tracks global access patterns shared among nodes.
access_frequency = defaultdict(int)
access_recency = OrderedDict()
node_connectivity = defaultdict(int)
event_states = defaultdict(int)

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by considering the least recently accessed and least frequently accessed nodes, deprioritizing nodes with high connectivity and relevance to current system events.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_priority = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        priority = (
            ALPHA_RECENCY * (cache_snapshot.access_count - access_recency[key]) +
            BETA_FREQUENCY * access_frequency[key] -
            GAMMA_CONNECTIVITY * node_connectivity[key] -
            DELTA_EVENT_RELEVANCE * event_states[key]
        )
        
        if priority < min_priority:
            min_priority = priority
            candid_obj_key = key
            
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency and recency for the accessed node, and synchronizes this information with nearby nodes to adjust their local priorities.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    access_frequency[obj.key] += 1
    access_recency[obj.key] = cache_snapshot.access_count
    # Here we assume adjustment to nearby nodes' priorities would involve similar steps, so we keep it simple.
    # In real deployment, it may involve communicating this update.

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency and recency, updates node connectivity, and shares this information with other nodes to ensure global access patterns are updated.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    access_frequency[obj.key] = 1
    access_recency[obj.key] = cache_snapshot.access_count
    node_connectivity[obj.key] = 0  # Initializing as 0
    event_states[obj.key] = 0  # Initializing as 0 (assuming no immediate relevance)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy removes its metadata, adjusts the connectivity information of remaining nodes, and synchronizes this change with other nodes to maintain a consistent global state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    del access_frequency[evicted_obj.key]
    del access_recency[evicted_obj.key]
    del node_connectivity[evicted_obj.key]
    del event_states[evicted_obj.key]

    # Adjust connectivity information for remaining nodes
    # This is a placeholder for adjustments, assuming no immediate change in the initial implementation