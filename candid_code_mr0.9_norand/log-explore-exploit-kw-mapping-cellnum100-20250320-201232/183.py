# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
TIER_THRESHOLD = [10, 20, 30]  # Example thresholds for tier promotion

# Put the metadata specifically maintained by the policy below. The policy maintains a multi-tiered structure with each layer having its own metadata: access frequency, recency, and a weighted score for time-based patterns. Each item also has a priority score calculated from these factors.
metadata = {
    'access_frequency': {},  # {obj.key: frequency}
    'recency': {},           # {obj.key: last_access_time}
    'weighted_score': {},    # {obj.key: weighted_score}
    'priority_score': {},    # {obj.key: priority_score}
    'tier': {}               # {obj.key: tier}
}

def calculate_priority_score(key):
    # Example priority score calculation
    freq = metadata['access_frequency'].get(key, 0)
    recency = metadata['recency'].get(key, 0)
    weighted_score = metadata['weighted_score'].get(key, 0)
    return freq + recency + weighted_score

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evicts items by first checking the lowest tier. Within that tier, it selects the item with the lowest priority score, which is a combination of infrequent access, low recency, and low weighted score for time-based patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    lowest_tier = min(metadata['tier'].values())
    lowest_priority = float('inf')
    
    for key, tier in metadata['tier'].items():
        if tier == lowest_tier:
            priority = metadata['priority_score'][key]
            if priority < lowest_priority:
                lowest_priority = priority
                candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the item's access frequency and recency are updated. The weighted score for time-based patterns is recalculated, and the priority score is adjusted accordingly. The item may be promoted to a higher tier if its new priority score surpasses a threshold.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] += 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['weighted_score'][key] = metadata['access_frequency'][key] * 0.5 + metadata['recency'][key] * 0.5
    metadata['priority_score'][key] = calculate_priority_score(key)
    
    # Check for promotion
    current_tier = metadata['tier'][key]
    if metadata['priority_score'][key] > TIER_THRESHOLD[current_tier]:
        metadata['tier'][key] = min(current_tier + 1, len(TIER_THRESHOLD) - 1)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, recency, and weighted score for time-based patterns. The priority score is calculated, and the item is placed in the appropriate tier based on this score.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['recency'][key] = cache_snapshot.access_count
    metadata['weighted_score'][key] = metadata['access_frequency'][key] * 0.5 + metadata['recency'][key] * 0.5
    metadata['priority_score'][key] = calculate_priority_score(key)
    metadata['tier'][key] = 0  # Start at the lowest tier

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an item, the policy updates the metadata of the remaining items in the affected tier to reflect the change in the cache's state. This may involve recalculating priority scores and potentially promoting or demoting items between tiers.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    del metadata['access_frequency'][evicted_key]
    del metadata['recency'][evicted_key]
    del metadata['weighted_score'][evicted_key]
    del metadata['priority_score'][evicted_key]
    del metadata['tier'][evicted_key]
    
    # Recalculate priority scores and potentially promote/demote items
    for key in cache_snapshot.cache.keys():
        metadata['priority_score'][key] = calculate_priority_score(key)
        current_tier = metadata['tier'][key]
        if metadata['priority_score'][key] > TIER_THRESHOLD[current_tier]:
            metadata['tier'][key] = min(current_tier + 1, len(TIER_THRESHOLD) - 1)
        elif metadata['priority_score'][key] < TIER_THRESHOLD[max(current_tier - 1, 0)]:
            metadata['tier'][key] = max(current_tier - 1, 0)