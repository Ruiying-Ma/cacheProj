# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
WEIGHT_SIZE = 1.0
WEIGHT_INV_FREQ = 1.0
WEIGHT_LAST_ACCESS = 1.0
WEIGHT_PRED_SCORE = 1.0
WEIGHT_PRED_PROB = 1.0
WEIGHT_STD_DEV = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, last access time, object size, predictive score, recency of use, predicted access probability, and standardized deviation from mean usage for each cached item. It also tracks overall load and access patterns.
metadata = {
    'access_frequency': {},
    'last_access_time': {},
    'object_size': {},
    'predictive_score': {},
    'recency_of_use': {},
    'predicted_access_probability': {},
    'standardized_deviation': {},
    'overall_load': 0,
    'access_patterns': []
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates a combined score for each object using a weighted sum of object size, inverse access frequency, last access time, predictive score, predicted access probability, and standardized deviation from mean usage. The object with the highest combined score is selected for eviction, with adjustments based on current load and access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    max_score = -math.inf
    
    for key, cached_obj in cache_snapshot.cache.items():
        size = cached_obj.size
        inv_freq = 1 / metadata['access_frequency'].get(key, 1)
        last_access = metadata['last_access_time'].get(key, 0)
        pred_score = metadata['predictive_score'].get(key, 0)
        pred_prob = metadata['predicted_access_probability'].get(key, 0)
        std_dev = metadata['standardized_deviation'].get(key, 0)
        
        combined_score = (WEIGHT_SIZE * size +
                          WEIGHT_INV_FREQ * inv_freq +
                          WEIGHT_LAST_ACCESS * last_access +
                          WEIGHT_PRED_SCORE * pred_score +
                          WEIGHT_PRED_PROB * pred_prob +
                          WEIGHT_STD_DEV * std_dev)
        
        if combined_score > max_score:
            max_score = combined_score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the access frequency, last access time, recency of use, and recalculates the predictive score and predicted access probability using the machine learning model. It also updates the standardized score and adjusts the overall load and access pattern metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = metadata['access_frequency'].get(key, 0) + 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['recency_of_use'][key] = cache_snapshot.access_count
    
    # Placeholder for predictive score and probability update
    metadata['predictive_score'][key] = 0
    metadata['predicted_access_probability'][key] = 0
    
    # Placeholder for standardized deviation update
    metadata['standardized_deviation'][key] = 0
    
    # Update overall load and access patterns
    metadata['overall_load'] = cache_snapshot.size
    metadata['access_patterns'].append(cache_snapshot.access_count)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its access frequency, last access time, object size, recency of use, predictive score, and predicted access probability. It calculates an initial standardized score and updates the overall load and access pattern metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata['access_frequency'][key] = 1
    metadata['last_access_time'][key] = cache_snapshot.access_count
    metadata['object_size'][key] = obj.size
    metadata['recency_of_use'][key] = cache_snapshot.access_count
    
    # Placeholder for predictive score and probability initialization
    metadata['predictive_score'][key] = 0
    metadata['predicted_access_probability'][key] = 0
    
    # Placeholder for standardized deviation initialization
    metadata['standardized_deviation'][key] = 0
    
    # Update overall load and access patterns
    metadata['overall_load'] = cache_snapshot.size
    metadata['access_patterns'].append(cache_snapshot.access_count)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the metadata of the evicted item and recalculates the overall load and access pattern metrics. It also updates the mean usage patterns to adjust the standardized scores for the remaining objects.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    key = evicted_obj.key
    if key in metadata['access_frequency']:
        del metadata['access_frequency'][key]
    if key in metadata['last_access_time']:
        del metadata['last_access_time'][key]
    if key in metadata['object_size']:
        del metadata['object_size'][key]
    if key in metadata['predictive_score']:
        del metadata['predictive_score'][key]
    if key in metadata['recency_of_use']:
        del metadata['recency_of_use'][key]
    if key in metadata['predicted_access_probability']:
        del metadata['predicted_access_probability'][key]
    if key in metadata['standardized_deviation']:
        del metadata['standardized_deviation'][key]
    
    # Update overall load and access patterns
    metadata['overall_load'] = cache_snapshot.size
    metadata['access_patterns'].append(cache_snapshot.access_count)