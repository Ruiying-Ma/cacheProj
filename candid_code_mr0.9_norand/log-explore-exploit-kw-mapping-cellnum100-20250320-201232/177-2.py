# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict, deque

# Put tunable constant parameters below
CRITICALITY_INITIAL = 1
LRU_WEIGHT = 1
LFU_WEIGHT = 1
FIFO_WEIGHT = 1
CRITICALITY_THRESHOLD = 10

# Put the metadata specifically maintained by the policy below. The policy maintains access frequency, recency of access, insertion time, criticality levels, and shared information from other caches. It also tracks the decisions and dynamic weights of multiple algorithms (LRU, LFU, FIFO).
access_frequency = defaultdict(int)
recency_of_access = {}
insertion_times = {}
criticality_levels = defaultdict(lambda: CRITICALITY_INITIAL)
fifo_queue = deque()
algorithm_weights = {"LRU": LRU_WEIGHT, "LFU": LFU_WEIGHT, "FIFO": FIFO_WEIGHT}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects eviction candidates by evaluating the least recently accessed data among multiple candidates, considering access patterns, criticality levels, and shared information from other caches. The final eviction decision is made based on a weighted majority agreement among LRU, LFU, and FIFO, with weights dynamically adjusted based on recent performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below

    candidates = list(cache_snapshot.cache.keys())
    
    if not candidates:
        return None
    
    # Scores for eviction candidates
    candidate_scores = defaultdict(int)

    # Evaluate LRU
    for candidate in candidates:
        candidate_scores[candidate] += algorithm_weights["LRU"] * recency_of_access[candidate]
    
    # Evaluate LFU
    for candidate in candidates:
        candidate_scores[candidate] += algorithm_weights["LFU"] * (1 / access_frequency[candidate])

    # Evaluate FIFO
    fifo_order = list(fifo_queue)
    for candidate in candidates:
        candidate_scores[candidate] += algorithm_weights["FIFO"] * fifo_order.index(candidate)
    
    # Select candidate with the highest score
    candid_obj_key = max(candidate_scores, key=candidate_scores.get)

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the recency of access, increments the access frequency, and adjusts the criticality level if necessary. It also updates the weights of the algorithms based on their contribution to the hit and shares the updated access pattern with other caches.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    access_frequency[key] += 1
    recency_of_access[key] = cache_snapshot.access_count

    # Adjust criticality if necessary
    if access_frequency[key] > CRITICALITY_THRESHOLD:
        criticality_levels[key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy records the insertion time, initializes the access frequency and recency of access, and sets the initial criticality level. It updates the weights of the algorithms to reflect the success of the insertion strategy and informs other caches about the new insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    insertion_times[key] = cache_snapshot.access_count
    access_frequency[key] = 1
    recency_of_access[key] = cache_snapshot.access_count
    criticality_levels[key] = CRITICALITY_INITIAL
    fifo_queue.append(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    Following an eviction, the policy removes the evicted data from the list of candidates, clears its metadata, and updates the access patterns and criticality levels of remaining data. It adjusts the weights of the algorithms based on the performance of the eviction decision and shares the eviction information with other caches.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    key = evicted_obj.key
    del access_frequency[key]
    del recency_of_access[key]
    del insertion_times[key]
    del criticality_levels[key]
    fifo_queue.remove(key)
    
    # Adjust weights based on eviction performance (example logic)
    if criticality_levels[key] > 1:
        # If we evicted a high criticality item, reduce the weight slightly
        algorithm_weights["LRU"] += 1
        algorithm_weights["LFU"] += 1
        algorithm_weights["FIFO"] -= 1
    else:
        algorithm_weights["FIFO"] += 1