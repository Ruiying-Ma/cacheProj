# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.5  # Weight for relevance score adjustment

# Put the metadata specifically maintained by the policy below. The policy maintains a hierarchical structure of data access frequencies, a feedback score for each eviction decision, a pattern detection matrix for frequently accessed data, and a relevance score based on recent access patterns and usage context.
frequency = {}
feedback_score = {}
pattern_matrix = {}
relevance_score = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by first considering the relevance score, then the feedback score, and finally the hierarchical structure and pattern detection matrix to ensure the least contextually relevant and least frequently accessed data is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_relevance_score = float('inf')
    min_feedback_score = float('inf')
    min_frequency = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        rel_score = relevance_score[key]
        feed_score = feedback_score[key]
        freq = frequency[key]
        
        if (rel_score < min_relevance_score) or (
            rel_score == min_relevance_score and feed_score < min_feedback_score) or (
            rel_score == min_relevance_score and feed_score == min_feedback_score and freq < min_frequency):
            candid_obj_key = key
            min_relevance_score = rel_score
            min_feedback_score = feed_score
            min_frequency = freq
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the hierarchical structure to increase the frequency count of the accessed data, adjusts the pattern detection matrix to reflect the access, and recalculates the relevance score based on the current context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    frequency[key] += 1
    update_pattern_matrix(cache_snapshot, key)
    update_relevance_score(cache_snapshot, key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its frequency count in the hierarchical structure, updates the pattern detection matrix to include the new data, and assigns an initial relevance score based on the current context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    frequency[key] = 1
    feedback_score[key] = 0
    relevance_score[key] = ALPHA  # Initial relevance score can be tuned
    update_pattern_matrix(cache_snapshot, key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the policy updates the feedback score based on the subsequent hit or miss rate, removes the data from the hierarchical structure and pattern detection matrix, and adjusts the relevance scores of remaining data to reflect the new context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    feedback_score[evicted_key] *= 0.9  # Example decay, adjustable
    del frequency[evicted_key]
    del feedback_score[evicted_key]
    del pattern_matrix[evicted_key]
    del relevance_score[evicted_key]
    
    for key in cache_snapshot.cache:
        update_relevance_score(cache_snapshot, key)

def update_pattern_matrix(cache_snapshot, key):
    '''
    Updates the pattern detection matrix to reflect access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `key`: The key of the object being accessed.
    - Return: `None`
    '''
    if key not in pattern_matrix:
        pattern_matrix[key] = 0
    pattern_matrix[key] += 1

def update_relevance_score(cache_snapshot, key):
    '''
    Updates the relevance score of a given key based on recent access patterns and usage context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `key`: The key of the object being accessed.
    - Return: `None`
    '''
    relevance_score[key] = ALPHA * frequency[key] + (1 - ALPHA) * pattern_matrix.get(key, 0)