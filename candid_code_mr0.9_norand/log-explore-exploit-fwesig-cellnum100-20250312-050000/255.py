# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below
GRADIENT_DECAY = 0.9  # Decay factor for gradient score updates
DIVERGENCE_WEIGHT = 1.0  # Weight for contextual divergence in composite score
ENTANGLEMENT_WEIGHT = 1.0  # Weight for predictive entanglement in composite score
TEMPORAL_WEIGHT = 1.0  # Weight for temporal fusion in composite score

# Put the metadata specifically maintained by the policy below. The policy maintains a gradient score for each object (indicating its access pattern slope), a contextual divergence score (measuring deviation from typical access patterns), a predictive entanglement score (indicating interdependencies between objects), and a temporal fusion timestamp (capturing recency and frequency in a fused manner).
gradient_scores = defaultdict(lambda: 0.0)  # Gradient score for each object
contextual_divergence = defaultdict(lambda: 0.0)  # Contextual divergence for each object
predictive_entanglement = defaultdict(lambda: defaultdict(lambda: 0.0))  # Entanglement between objects
temporal_fusion = defaultdict(lambda: 0)  # Temporal fusion timestamp for each object

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by combining the gradient score, contextual divergence, and predictive entanglement into a composite score, prioritizing objects with low gradient slopes, high contextual divergence, and weak predictive entanglement. Temporal fusion is used as a tiebreaker, favoring older objects.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        # Compute composite score
        gradient = gradient_scores[key]
        divergence = contextual_divergence[key]
        entanglement = sum(predictive_entanglement[key].values())
        temporal = temporal_fusion[key]
        composite_score = (GRADIENT_DECAY * gradient +
                           DIVERGENCE_WEIGHT * divergence +
                           ENTANGLEMENT_WEIGHT * entanglement +
                           TEMPORAL_WEIGHT * temporal)

        # Choose the object with the lowest composite score
        if composite_score < min_score or (composite_score == min_score and temporal < temporal_fusion[candid_obj_key]):
            min_score = composite_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    On a cache hit, the gradient score is updated to reflect the change in access frequency slope, contextual divergence is recalculated based on the deviation from expected patterns, predictive entanglement is adjusted to strengthen links with recently accessed objects, and the temporal fusion timestamp is refreshed.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    # Update gradient score
    gradient_scores[key] = GRADIENT_DECAY * gradient_scores[key] + 1

    # Recalculate contextual divergence
    contextual_divergence[key] = abs(gradient_scores[key] - cache_snapshot.access_count / len(cache_snapshot.cache))

    # Adjust predictive entanglement
    for other_key in cache_snapshot.cache:
        if other_key != key:
            predictive_entanglement[key][other_key] += 1
            predictive_entanglement[other_key][key] += 1

    # Refresh temporal fusion timestamp
    temporal_fusion[key] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the gradient score is initialized to a neutral value, contextual divergence is set based on initial access context, predictive entanglement is seeded with weak links to related objects, and the temporal fusion timestamp is set to the current time.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    # Initialize gradient score
    gradient_scores[key] = 0.0

    # Set contextual divergence
    contextual_divergence[key] = 0.0

    # Seed predictive entanglement
    for other_key in cache_snapshot.cache:
        if other_key != key:
            predictive_entanglement[key][other_key] = 0.1
            predictive_entanglement[other_key][key] = 0.1

    # Set temporal fusion timestamp
    temporal_fusion[key] = cache_snapshot.access_count

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy recalibrates the predictive entanglement scores of remaining objects to remove dependencies on the evicted object, and adjusts contextual divergence scores to account for the reduced cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    # Remove dependencies on the evicted object
    if evicted_key in predictive_entanglement:
        del predictive_entanglement[evicted_key]
    for key in predictive_entanglement:
        if evicted_key in predictive_entanglement[key]:
            del predictive_entanglement[key][evicted_key]

    # Adjust contextual divergence scores
    for key in cache_snapshot.cache:
        contextual_divergence[key] = abs(gradient_scores[key] - cache_snapshot.access_count / len(cache_snapshot.cache))