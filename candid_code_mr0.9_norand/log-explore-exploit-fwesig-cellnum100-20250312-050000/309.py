# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below
INITIAL_ARS = 10
INITIAL_DQHL = 5
INITIAL_PEV = 3
INITIAL_SGFC = 2
DQHL_ADJUSTMENT_FACTOR = 1.1
PEV_DECAY_FACTOR = 0.9
SGFC_ADJUSTMENT_FACTOR = 0.95

# Put the metadata specifically maintained by the policy below. The policy maintains a multi-dimensional metadata structure consisting of Algorithmic Resonance Scores (ARS), Dynamic Quantum Harmony Levels (DQHL), Predictive Entropy Values (PEV), and Semantic Gradient Flux Coefficients (SGFC) for each cached object. These values are dynamically updated to reflect temporal access patterns, semantic relevance, and predictive likelihood of future access.
metadata = {
    "ARS": defaultdict(int),
    "DQHL": defaultdict(float),
    "PEV": defaultdict(float),
    "SGFC": defaultdict(float),
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the eviction victim by identifying the object with the lowest combined score derived from a weighted formula: ARS * DQHL - PEV + SGFC. This ensures a balance between temporal locality, predictive access probability, and semantic importance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        score = (
            metadata["ARS"][key] * metadata["DQHL"][key]
            - metadata["PEV"][key]
            + metadata["SGFC"][key]
        )
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the ARS is incremented to reflect increased temporal relevance, the DQHL is adjusted based on recent access harmony patterns, the PEV is recalculated using a predictive model, and the SGFC is updated to reflect semantic shifts in the workload.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata["ARS"][key] += 1
    metadata["DQHL"][key] *= DQHL_ADJUSTMENT_FACTOR
    metadata["PEV"][key] *= PEV_DECAY_FACTOR
    metadata["SGFC"][key] *= SGFC_ADJUSTMENT_FACTOR

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its ARS is initialized to a moderate value, the DQHL is set based on initial access harmony predictions, the PEV is seeded using a lightweight entropy estimator, and the SGFC is derived from the semantic context of the insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata["ARS"][key] = INITIAL_ARS
    metadata["DQHL"][key] = INITIAL_DQHL
    metadata["PEV"][key] = INITIAL_PEV
    metadata["SGFC"][key] = INITIAL_SGFC

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy recalibrates the DQHL and SGFC of remaining objects to account for the removal's impact on overall cache harmony and semantic balance, while also updating global entropy metrics to refine future PEV calculations.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata["ARS"]:
        del metadata["ARS"][evicted_key]
        del metadata["DQHL"][evicted_key]
        del metadata["PEV"][evicted_key]
        del metadata["SGFC"][evicted_key]
    
    for key in cache_snapshot.cache.keys():
        metadata["DQHL"][key] *= DQHL_ADJUSTMENT_FACTOR
        metadata["SGFC"][key] *= SGFC_ADJUSTMENT_FACTOR