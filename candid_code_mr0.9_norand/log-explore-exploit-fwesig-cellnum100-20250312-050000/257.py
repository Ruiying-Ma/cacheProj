# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math
from collections import defaultdict

# Put tunable constant parameters below
DECAY_FACTOR = 0.9  # Decay factor for recursive weight updates
BASELINE_WEIGHT = 1.0  # Initial weight for new objects
NEUTRAL_ENTROPY = 0.5  # Neutral entropy value for new objects
CONTEXTUAL_FLOW_INIT = 0.1  # Initial contextual flow vector value

# Put the metadata specifically maintained by the policy below. The policy maintains a recursive weight score for each object, a temporal gradient cluster ID based on access patterns, a predictive entropy score for future access likelihood, and a contextual flow vector representing object relationships in the workload.
metadata = {
    "recursive_weight": defaultdict(lambda: BASELINE_WEIGHT),
    "temporal_cluster": defaultdict(int),
    "predictive_entropy": defaultdict(lambda: NEUTRAL_ENTROPY),
    "contextual_flow": defaultdict(lambda: CONTEXTUAL_FLOW_INIT),
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the eviction victim by identifying the object with the lowest combined score derived from its recursive weight, temporal gradient cluster stability, predictive entropy, and contextual flow relevance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        # Calculate the combined score for each object
        weight = metadata["recursive_weight"][key]
        cluster_stability = metadata["temporal_cluster"][key]
        entropy = metadata["predictive_entropy"][key]
        flow_relevance = metadata["contextual_flow"][key]

        combined_score = weight + cluster_stability + entropy + flow_relevance

        # Select the object with the lowest combined score
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the recursive weight of the object is increased using a decaying factor, its temporal gradient cluster is recalculated if access patterns shift, its predictive entropy is adjusted based on recent access predictability, and its contextual flow vector is updated to reflect the latest workload relationships.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key

    # Update recursive weight with decay
    metadata["recursive_weight"][key] *= DECAY_FACTOR

    # Recalculate temporal gradient cluster (e.g., based on access count)
    metadata["temporal_cluster"][key] = cache_snapshot.access_count % 10  # Example clustering logic

    # Adjust predictive entropy (e.g., based on hit/miss ratio)
    metadata["predictive_entropy"][key] = 1 - (cache_snapshot.hit_count / max(1, cache_snapshot.access_count))

    # Update contextual flow vector (e.g., based on relationships with other objects)
    metadata["contextual_flow"][key] += CONTEXTUAL_FLOW_INIT

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its recursive weight is initialized to a baseline value, it is assigned to a temporal gradient cluster based on initial access patterns, its predictive entropy is set to a neutral value, and its contextual flow vector is seeded with relationships inferred from nearby objects in the workload.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key

    # Initialize recursive weight
    metadata["recursive_weight"][key] = BASELINE_WEIGHT

    # Assign to a temporal gradient cluster
    metadata["temporal_cluster"][key] = cache_snapshot.access_count % 10  # Example clustering logic

    # Set predictive entropy to a neutral value
    metadata["predictive_entropy"][key] = NEUTRAL_ENTROPY

    # Seed contextual flow vector
    metadata["contextual_flow"][key] = CONTEXTUAL_FLOW_INIT

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy recalibrates the temporal gradient clusters to account for the removed object, adjusts predictive entropy scores for remaining objects to reflect the updated cache state, and rebalances contextual flow vectors to maintain workload coherence.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key

    # Remove metadata for the evicted object
    if evicted_key in metadata["recursive_weight"]:
        del metadata["recursive_weight"][evicted_key]
    if evicted_key in metadata["temporal_cluster"]:
        del metadata["temporal_cluster"][evicted_key]
    if evicted_key in metadata["predictive_entropy"]:
        del metadata["predictive_entropy"][evicted_key]
    if evicted_key in metadata["contextual_flow"]:
        del metadata["contextual_flow"][evicted_key]

    # Recalibrate temporal gradient clusters
    for key in metadata["temporal_cluster"]:
        metadata["temporal_cluster"][key] = cache_snapshot.access_count % 10  # Example recalibration logic

    # Adjust predictive entropy scores
    for key in metadata["predictive_entropy"]:
        metadata["predictive_entropy"][key] = 1 - (cache_snapshot.hit_count / max(1, cache_snapshot.access_count))

    # Rebalance contextual flow vectors
    for key in metadata["contextual_flow"]:
        metadata["contextual_flow"][key] += CONTEXTUAL_FLOW_INIT