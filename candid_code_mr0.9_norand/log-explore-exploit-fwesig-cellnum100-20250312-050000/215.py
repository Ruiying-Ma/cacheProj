# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
DEFAULT_LOCALITY_SCORE = 50
DEFAULT_PREFETCH_CONFIDENCE = 0.5
DEFAULT_WRITE_BACK_URGENCY = 0.1
DEFAULT_TE = 0.5
DEFAULT_CSM_TIER = 1
DEFAULT_AV_WEIGHTS = {
    "locality": 0.3,
    "write_back_urgency": 0.2,
    "prefetch_confidence": 0.2,
    "pgv": 0.1,
    "te": 0.1,
    "csm_tier": 0.1
}

# Put the metadata specifically maintained by the policy below. The policy maintains a composite metadata set for each cache line, including a locality score, write-back urgency score, prefetch confidence score, memory interleaving index, Predictive Gradient Vector (PGV), Temporal Entropy (TE), Cognitive State Map (CSM) tier, and an Adaptive Vector (AV) for dynamic weight adjustment.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates a unified eviction score by combining the weighted contributions of the inverse locality score, write-back urgency score, prefetch confidence score, PGV, TE, and CSM tier. The Adaptive Vector dynamically adjusts these weights based on recent eviction outcomes, and memory interleaving ensures balanced distribution across memory banks. The cache line with the lowest unified score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = math.inf

    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        score = (
            DEFAULT_AV_WEIGHTS["locality"] * (1 / meta["locality_score"]) +
            DEFAULT_AV_WEIGHTS["write_back_urgency"] * meta["write_back_urgency_score"] +
            DEFAULT_AV_WEIGHTS["prefetch_confidence"] * (1 - meta["prefetch_confidence_score"]) +
            DEFAULT_AV_WEIGHTS["pgv"] * meta["pgv"] +
            DEFAULT_AV_WEIGHTS["te"] * meta["te"] +
            DEFAULT_AV_WEIGHTS["csm_tier"] * meta["csm_tier"]
        )
        if score < min_score:
            min_score = score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    On a cache hit, the locality score is increased, the prefetch confidence score is updated based on the access pattern, the write-back urgency score is slightly decreased, the PGV is updated using a gradient synthesis algorithm, the TE is recalculated, and the CSM tier is adjusted if necessary. The AV is fine-tuned based on the cache's performance metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta["locality_score"] += 1
    meta["prefetch_confidence_score"] = min(1.0, meta["prefetch_confidence_score"] + 0.05)
    meta["write_back_urgency_score"] = max(0.0, meta["write_back_urgency_score"] - 0.01)
    meta["pgv"] += 0.1  # Simplified gradient synthesis
    meta["te"] = (meta["te"] + 0.5) / 2  # Recalculated TE
    if meta["locality_score"] > 100:
        meta["csm_tier"] = min(meta["csm_tier"] + 1, 3)  # Adjust CSM tier

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the locality score is initialized to a medium value, the prefetch confidence score is set based on the prefetch algorithm's prediction, the write-back urgency score is set to a default low value, the memory interleaving index is assigned based on the object's memory bank, the PGV is initialized based on recent access trends, the TE is set to a neutral value, and the object is placed in a default CSM tier. The AV is updated to account for the new object's impact on cache dynamics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        "locality_score": DEFAULT_LOCALITY_SCORE,
        "write_back_urgency_score": DEFAULT_WRITE_BACK_URGENCY,
        "prefetch_confidence_score": DEFAULT_PREFETCH_CONFIDENCE,
        "memory_interleaving_index": obj.size % cache_snapshot.capacity,  # Simplified memory bank assignment
        "pgv": 0.0,
        "te": DEFAULT_TE,
        "csm_tier": DEFAULT_CSM_TIER
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After eviction, the memory interleaving distribution is recalculated, the weights in the composite score calculation are adjusted based on recent eviction patterns, and global statistics are updated to refine prefetch confidence predictions. The PGVs of remaining objects are recalibrated, the TE of neighboring objects is adjusted, the CSM tiers are rebalanced if necessary, and the AV is updated to learn from the eviction decision.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata[evicted_obj.key]
    for key, meta in metadata.items():
        meta["pgv"] = max(0.0, meta["pgv"] - 0.05)  # Recalibrate PGVs
        meta["te"] = (meta["te"] + 0.5) / 2  # Adjust TE
        if meta["csm_tier"] > 1:
            meta["csm_tier"] -= 1  # Rebalance CSM tiers