# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import numpy as np
from collections import defaultdict

# Put tunable constant parameters below
TEMPORAL_VECTOR_LENGTH = 10  # Length of the temporal encoding vector
CLUSTER_COUNT = 5  # Number of clusters for vector quantization

# Put the metadata specifically maintained by the policy below. The policy maintains a temporal encoding vector for each cached object, representing its access patterns over time. It also stores a quantized vector cluster ID for grouping similar access patterns, a hierarchical compression tree for summarizing access trends, and a predictive alignment score to estimate future access likelihood.
temporal_vectors = {}  # Maps obj.key to its temporal encoding vector
cluster_ids = {}  # Maps obj.key to its cluster ID
predictive_scores = {}  # Maps obj.key to its predictive alignment score
hierarchical_tree = defaultdict(list)  # A simple representation of the hierarchical compression tree

def calculate_predictive_score(temporal_vector, cluster_id):
    """
    Calculate the predictive alignment score for an object based on its temporal vector and cluster ID.
    """
    dominant_cluster = max(hierarchical_tree, key=lambda cid: len(hierarchical_tree[cid]), default=None)
    if dominant_cluster is None:
        return np.linalg.norm(temporal_vector)  # Default score if no dominant cluster exists
    dominant_vector = np.mean([temporal_vectors[key] for key in hierarchical_tree[dominant_cluster]], axis=0)
    return np.linalg.norm(temporal_vector - dominant_vector)

def vector_quantization(temporal_vector):
    """
    Assign a cluster ID to a temporal vector using vector quantization.
    """
    if not hierarchical_tree:
        return 0  # Default cluster ID if no clusters exist
    cluster_centroids = {cid: np.mean([temporal_vectors[key] for key in keys], axis=0)
                         for cid, keys in hierarchical_tree.items()}
    return min(cluster_centroids, key=lambda cid: np.linalg.norm(temporal_vector - cluster_centroids[cid]))

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the eviction victim by identifying the object with the lowest predictive alignment score, prioritizing objects whose temporal encoding vectors deviate most from the dominant cluster in the hierarchical compression tree.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_score = float('inf')
    for key, cached_obj in cache_snapshot.cache.items():
        score = predictive_scores[key]
        if score < min_score:
            min_score = score
            candid_obj_key = key
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the temporal encoding vector of the accessed object is updated to reflect the new access time, its cluster ID is recalculated using vector quantization, and the hierarchical compression tree is adjusted to incorporate the updated access pattern. The predictive alignment score is recalculated based on the updated metadata.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    temporal_vector = temporal_vectors[obj.key]
    temporal_vector = np.roll(temporal_vector, -1)
    temporal_vector[-1] = cache_snapshot.access_count
    temporal_vectors[obj.key] = temporal_vector

    old_cluster_id = cluster_ids[obj.key]
    new_cluster_id = vector_quantization(temporal_vector)
    cluster_ids[obj.key] = new_cluster_id

    if obj.key in hierarchical_tree[old_cluster_id]:
        hierarchical_tree[old_cluster_id].remove(obj.key)
    hierarchical_tree[new_cluster_id].append(obj.key)

    predictive_scores[obj.key] = calculate_predictive_score(temporal_vector, new_cluster_id)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its temporal encoding vector is initialized, its cluster ID is determined using vector quantization, and the hierarchical compression tree is updated to include the new object. The predictive alignment score is computed based on its initial metadata.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    temporal_vector = np.zeros(TEMPORAL_VECTOR_LENGTH)
    temporal_vector[-1] = cache_snapshot.access_count
    temporal_vectors[obj.key] = temporal_vector

    cluster_id = vector_quantization(temporal_vector)
    cluster_ids[obj.key] = cluster_id
    hierarchical_tree[cluster_id].append(obj.key)

    predictive_scores[obj.key] = calculate_predictive_score(temporal_vector, cluster_id)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, its temporal encoding vector and cluster ID are removed from the metadata, and the hierarchical compression tree is rebalanced to reflect the removal. The predictive alignment scores of remaining objects are recalculated if necessary.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    cluster_id = cluster_ids[evicted_key]

    if evicted_key in hierarchical_tree[cluster_id]:
        hierarchical_tree[cluster_id].remove(evicted_key)
    if not hierarchical_tree[cluster_id]:
        del hierarchical_tree[cluster_id]

    del temporal_vectors[evicted_key]
    del cluster_ids[evicted_key]
    del predictive_scores[evicted_key]

    for key in cache_snapshot.cache:
        predictive_scores[key] = calculate_predictive_score(temporal_vectors[key], cluster_ids[key])