# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
CONTEXT_SCORE_BOOST = 10
LATENCY_ADJUSTMENT_FACTOR = 0.9
INITIAL_CONTEXT_SCORE = 1
INITIAL_LATENCY_FACTOR = 1
INITIAL_RECURSIVE_WEIGHT = 1
PREDICTIVE_DECAY = 0.95
RECURSIVE_WEIGHT_ADJUSTMENT = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains a dynamic context score for each cache object, a predictive access frequency model, a latency bridging factor for each object, and a recursive allocation weight that adjusts based on historical eviction patterns.
metadata = {
    "context_scores": {},  # Maps obj.key -> context score
    "predictive_model": {},  # Maps obj.key -> predicted access frequency
    "latency_factors": {},  # Maps obj.key -> latency bridging factor
    "recursive_weights": {},  # Maps obj.key -> recursive allocation weight
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by combining the context score, predicted access frequency, and latency bridging factor into a composite score. The object with the lowest composite score is evicted, with recursive allocation weights influencing tie-breaking decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_composite_score = float('inf')

    for cached_key, cached_obj in cache_snapshot.cache.items():
        context_score = metadata["context_scores"].get(cached_key, INITIAL_CONTEXT_SCORE)
        predicted_frequency = metadata["predictive_model"].get(cached_key, 0)
        latency_factor = metadata["latency_factors"].get(cached_key, INITIAL_LATENCY_FACTOR)
        recursive_weight = metadata["recursive_weights"].get(cached_key, INITIAL_RECURSIVE_WEIGHT)

        # Compute composite score
        composite_score = (context_score + predicted_frequency + latency_factor) * recursive_weight

        # Choose the object with the lowest composite score
        if composite_score < min_composite_score:
            min_composite_score = composite_score
            candid_obj_key = cached_key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the context score of the accessed object is boosted based on the current workload dynamics, the predictive model is updated to increase the likelihood of future access, and the latency bridging factor is adjusted to reflect the reduced latency gap.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key

    # Boost context score
    metadata["context_scores"][key] = metadata["context_scores"].get(key, INITIAL_CONTEXT_SCORE) + CONTEXT_SCORE_BOOST

    # Update predictive model
    metadata["predictive_model"][key] = metadata["predictive_model"].get(key, 0) + 1

    # Adjust latency factor
    metadata["latency_factors"][key] = metadata["latency_factors"].get(key, INITIAL_LATENCY_FACTOR) * LATENCY_ADJUSTMENT_FACTOR

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the context score is initialized based on the insertion context, the predictive model is updated to account for the new object, and the recursive allocation weight is recalibrated to balance the cache's overall dynamics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key

    # Initialize context score
    metadata["context_scores"][key] = INITIAL_CONTEXT_SCORE

    # Update predictive model
    metadata["predictive_model"][key] = 1

    # Initialize latency factor
    metadata["latency_factors"][key] = INITIAL_LATENCY_FACTOR

    # Initialize recursive allocation weight
    metadata["recursive_weights"][key] = INITIAL_RECURSIVE_WEIGHT

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the recursive allocation weight for similar objects is adjusted to reduce the likelihood of future evictions in similar scenarios, and the predictive model is updated to deprioritize the evicted object's access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key

    # Adjust recursive allocation weight for similar objects
    for key in metadata["recursive_weights"]:
        if key != evicted_key:
            metadata["recursive_weights"][key] += RECURSIVE_WEIGHT_ADJUSTMENT

    # Deprioritize evicted object's access patterns
    if evicted_key in metadata["predictive_model"]:
        metadata["predictive_model"][evicted_key] *= PREDICTIVE_DECAY