# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below
INITIAL_TEMPORAL_INTEGRATION_SCORE = 1
GRADIENT_PROPAGATION_INCREMENT = 1
GRADIENT_PROPAGATION_DECREMENT = 1
TEMPORAL_INTEGRATION_INCREMENT = 1

# Put the metadata specifically maintained by the policy below. The policy maintains clusters of cache objects based on access patterns using Adaptive Clustering. Each cluster has a Gradient Propagation score that reflects the temporal importance of the cluster. Individual objects within clusters are indexed by a Correlation Index that measures their relationship to other objects in the cluster. A Temporal Integration score is maintained for each object to track its recency and frequency of access over time.
clusters = defaultdict(lambda: {"objects": set(), "gradient_score": 0})
temporal_integration_scores = {}
correlation_indexes = {}
object_to_cluster = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the eviction victim by first identifying the cluster with the lowest Gradient Propagation score. Within that cluster, the object with the lowest combined Correlation Index and Temporal Integration score is chosen for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Identify the cluster with the lowest Gradient Propagation score
    min_gradient_score = float('inf')
    target_cluster = None
    for cluster_id, cluster_data in clusters.items():
        if cluster_data["gradient_score"] < min_gradient_score:
            min_gradient_score = cluster_data["gradient_score"]
            target_cluster = cluster_id

    # Within the target cluster, find the object with the lowest combined score
    if target_cluster is not None:
        min_combined_score = float('inf')
        for obj_key in clusters[target_cluster]["objects"]:
            combined_score = (temporal_integration_scores[obj_key] +
                              correlation_indexes[obj_key])
            if combined_score < min_combined_score:
                min_combined_score = combined_score
                candid_obj_key = obj_key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the Temporal Integration score of the accessed object is incremented to reflect its recent use. The Correlation Index of the object is updated based on its relationship to other recently accessed objects in the same cluster. The Gradient Propagation score of the cluster is adjusted to reflect the increased importance of the cluster.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    obj_key = obj.key
    cluster_id = object_to_cluster[obj_key]

    # Increment Temporal Integration score
    temporal_integration_scores[obj_key] += TEMPORAL_INTEGRATION_INCREMENT

    # Update Correlation Index based on other objects in the same cluster
    for other_obj_key in clusters[cluster_id]["objects"]:
        if other_obj_key != obj_key:
            correlation_indexes[obj_key] += 1  # Example: Increment by 1 for simplicity

    # Adjust Gradient Propagation score of the cluster
    clusters[cluster_id]["gradient_score"] += GRADIENT_PROPAGATION_INCREMENT

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy assigns it an initial Temporal Integration score based on the recency of the insertion. The object is added to a cluster using Adaptive Clustering, and its Correlation Index is initialized based on its similarity to other objects in the cluster. The Gradient Propagation score of the cluster is updated to account for the new addition.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    obj_key = obj.key

    # Assign initial Temporal Integration score
    temporal_integration_scores[obj_key] = INITIAL_TEMPORAL_INTEGRATION_SCORE

    # Add object to a cluster using Adaptive Clustering
    # For simplicity, assign all objects to a single cluster (cluster_id = 0)
    cluster_id = 0
    clusters[cluster_id]["objects"].add(obj_key)
    object_to_cluster[obj_key] = cluster_id

    # Initialize Correlation Index
    correlation_indexes[obj_key] = 0
    for other_obj_key in clusters[cluster_id]["objects"]:
        if other_obj_key != obj_key:
            correlation_indexes[obj_key] += 1  # Example: Increment by 1 for similarity

    # Update Gradient Propagation score of the cluster
    clusters[cluster_id]["gradient_score"] += GRADIENT_PROPAGATION_INCREMENT

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the Temporal Integration score of the evicted object is discarded. The Correlation Indexes of remaining objects in the cluster are recalculated to reflect the removal. The Gradient Propagation score of the cluster is adjusted downward to account for the reduced size and importance of the cluster.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_obj_key = evicted_obj.key
    cluster_id = object_to_cluster[evicted_obj_key]

    # Discard Temporal Integration score of the evicted object
    del temporal_integration_scores[evicted_obj_key]

    # Remove the evicted object from the cluster
    clusters[cluster_id]["objects"].remove(evicted_obj_key)
    del object_to_cluster[evicted_obj_key]

    # Recalculate Correlation Indexes of remaining objects in the cluster
    for obj_key in clusters[cluster_id]["objects"]:
        correlation_indexes[obj_key] = 0
        for other_obj_key in clusters[cluster_id]["objects"]:
            if other_obj_key != obj_key:
                correlation_indexes[obj_key] += 1  # Example: Increment by 1 for similarity

    # Adjust Gradient Propagation score of the cluster
    clusters[cluster_id]["gradient_score"] -= GRADIENT_PROPAGATION_DECREMENT