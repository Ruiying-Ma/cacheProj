# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
TEMPORAL_SCORE_WEIGHT = 0.4
PRIORITY_INVERSION_WEIGHT = 0.3
ACCESS_GRANULARITY_WEIGHT = 0.2
PREDICTIVE_EVICTION_WEIGHT = 0.1
INITIAL_TEMPORAL_SCORE = 50
PREDICTIVE_MODEL_DECAY = 0.9

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache entry: a temporal score (based on recent access patterns), a priority inversion flag (indicating if the entry has been deprioritized to prevent starvation), an access granularity counter (tracking the size and frequency of accesses), and a predictive eviction score (calculated using a lightweight machine learning model to estimate future access likelihood).
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by combining the temporal score, priority inversion flag, access granularity, and predictive eviction score into a weighted formula. Entries with low temporal scores, high priority inversion flags, low access granularity, and low predictive eviction scores are prioritized for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        eviction_score = (
            TEMPORAL_SCORE_WEIGHT * (1 / (1 + meta['temporal_score'])) +
            PRIORITY_INVERSION_WEIGHT * (1 if meta['priority_inversion'] else 0) +
            ACCESS_GRANULARITY_WEIGHT * (1 / (1 + meta['access_granularity'])) +
            PREDICTIVE_EVICTION_WEIGHT * (1 / (1 + meta['predictive_eviction_score']))
        )
        if eviction_score < min_score:
            min_score = eviction_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    On a cache hit, the temporal score is increased to reflect recent access, the priority inversion flag is reset to prevent unnecessary deprioritization, the access granularity counter is updated based on the size of the access, and the predictive eviction score is recalculated using the updated access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta['temporal_score'] += 1
    meta['priority_inversion'] = False
    meta['access_granularity'] += obj.size
    meta['predictive_eviction_score'] = PREDICTIVE_MODEL_DECAY * meta['predictive_eviction_score'] + (1 - PREDICTIVE_MODEL_DECAY) * meta['temporal_score']

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the temporal score is initialized to a medium value, the priority inversion flag is set to false, the access granularity counter is initialized based on the size of the object, and the predictive eviction score is calculated using the object's initial access context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'temporal_score': INITIAL_TEMPORAL_SCORE,
        'priority_inversion': False,
        'access_granularity': obj.size,
        'predictive_eviction_score': INITIAL_TEMPORAL_SCORE / obj.size
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the priority inversion flags of remaining entries are adjusted to ensure fairness, and the predictive eviction model is updated with the evicted object's metadata to improve future predictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata[evicted_obj.key]

    for key, meta in metadata.items():
        meta['priority_inversion'] = True

    # Update predictive model (lightweight simulation)
    for key, meta in metadata.items():
        meta['predictive_eviction_score'] = PREDICTIVE_MODEL_DECAY * meta['predictive_eviction_score']