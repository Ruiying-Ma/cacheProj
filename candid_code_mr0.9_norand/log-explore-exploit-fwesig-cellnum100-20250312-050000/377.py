# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below
BASELINE_ENTROPY = 1.0
TSF_BOOST = 1.5
ENTROPY_REDUCTION = 0.1
SIMILARITY_WEIGHT = 0.5
TEMPORAL_DECAY = 0.9

# Put the metadata specifically maintained by the policy below. The policy maintains a vector of harmonized access patterns (VHAP) for each cache object, a predictive filter score (PFS) indicating future access likelihood, a recursive entropy map (REM) to track the uncertainty of access patterns, and a temporal-semantic fusion score (TSF) that combines time-based and semantic relevance of the object.
VHAP = defaultdict(list)  # Maps object keys to their harmonized access patterns
PFS = defaultdict(float)  # Maps object keys to their predictive filter scores
REM = defaultdict(float)  # Maps object keys to their recursive entropy values
TSF = defaultdict(float)  # Maps object keys to their temporal-semantic fusion scores

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by identifying the object with the lowest combined score derived from PFS, REM, and TSF, prioritizing objects with high entropy and low temporal-semantic relevance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        combined_score = PFS[key] - REM[key] + TSF[key]
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the VHAP is updated to reflect the latest access pattern, the PFS is recalculated using recent access trends, the REM is adjusted to reduce entropy for the object, and the TSF is boosted to reflect its increased temporal and semantic importance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    VHAP[key].append(cache_snapshot.access_count)
    PFS[key] = sum(VHAP[key]) / len(VHAP[key])  # Example: average of access times
    REM[key] = max(REM[key] - ENTROPY_REDUCTION, 0)  # Reduce entropy
    TSF[key] *= TSF_BOOST  # Boost temporal-semantic fusion score

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the VHAP is initialized based on the observed access pattern, the PFS is set using predictive filtering of similar objects, the REM is seeded with a baseline entropy value, and the TSF is initialized using temporal and semantic context of the insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    VHAP[key] = [cache_snapshot.access_count]  # Initialize with current access time
    PFS[key] = SIMILARITY_WEIGHT * sum(PFS.values()) / (len(PFS) or 1)  # Predictive filtering
    REM[key] = BASELINE_ENTROPY  # Seed with baseline entropy
    TSF[key] = 1.0  # Initialize TSF with a default value

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the REM is updated to redistribute entropy across remaining objects, the VHAPs of neighboring objects are harmonized to reflect the removal, and the TSF of related objects is adjusted to account for the semantic gap left by the eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in VHAP:
        del VHAP[evicted_key]
    if evicted_key in PFS:
        del PFS[evicted_key]
    if evicted_key in REM:
        del REM[evicted_key]
    if evicted_key in TSF:
        del TSF[evicted_key]

    # Redistribute entropy across remaining objects
    for key in cache_snapshot.cache:
        REM[key] *= TEMPORAL_DECAY

    # Harmonize VHAPs of neighboring objects
    for key in cache_snapshot.cache:
        VHAP[key].append(cache_snapshot.access_count)

    # Adjust TSF of related objects
    for key in cache_snapshot.cache:
        TSF[key] *= TEMPORAL_DECAY