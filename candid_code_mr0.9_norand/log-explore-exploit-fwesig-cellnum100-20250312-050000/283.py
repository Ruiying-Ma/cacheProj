# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below
TEMPORAL_DECAY_RATE = 0.9  # Decay factor for temporal information
GRADIENT_INCREMENT = 1.0  # Increment for gradient score on hit
BALANCE_ADJUSTMENT = 0.1  # Adjustment for dynamic balance score

# Put the metadata specifically maintained by the policy below. The policy maintains clusters of cached objects based on access patterns using Predictive Clustering, a gradient score for each object to track its likelihood of future access, a temporal decay factor to refine recency information, and a dynamic balance score to adaptively prioritize between recency and frequency.
metadata = {
    "clusters": defaultdict(set),  # Maps cluster IDs to sets of object keys
    "gradient_scores": {},  # Maps object keys to gradient scores
    "temporal_decay": {},  # Maps object keys to temporal decay values
    "balance_scores": {},  # Maps cluster IDs to dynamic balance scores
    "object_to_cluster": {},  # Maps object keys to their cluster IDs
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the eviction victim by identifying the cluster with the lowest predicted future access probability, then within that cluster, chooses the object with the lowest combined gradient score and temporal decay value, ensuring dynamic balance is maintained.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Identify the cluster with the lowest balance score
    cluster_to_evict = min(metadata["balance_scores"], key=metadata["balance_scores"].get)
    
    # Within the cluster, find the object with the lowest combined gradient score and temporal decay
    min_score = float('inf')
    for obj_key in metadata["clusters"][cluster_to_evict]:
        combined_score = metadata["gradient_scores"][obj_key] + metadata["temporal_decay"][obj_key]
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = obj_key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the gradient score of the accessed object is increased based on its cluster's predictive model, the temporal decay factor is reset to reflect recent access, and the dynamic balance score is adjusted to slightly favor recency for the cluster.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    obj_key = obj.key
    cluster_id = metadata["object_to_cluster"][obj_key]
    
    # Increase the gradient score
    metadata["gradient_scores"][obj_key] += GRADIENT_INCREMENT
    
    # Reset the temporal decay factor
    metadata["temporal_decay"][obj_key] = 0
    
    # Adjust the dynamic balance score to slightly favor recency
    metadata["balance_scores"][cluster_id] += BALANCE_ADJUSTMENT

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy assigns it to a cluster based on its predicted access pattern, initializes its gradient score and temporal decay factor, and recalibrates the dynamic balance score to ensure the new object does not disproportionately affect prioritization.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    obj_key = obj.key
    
    # Assign the object to a cluster (for simplicity, use a single cluster for now)
    cluster_id = 0  # Example: All objects belong to cluster 0
    metadata["clusters"][cluster_id].add(obj_key)
    metadata["object_to_cluster"][obj_key] = cluster_id
    
    # Initialize gradient score and temporal decay factor
    metadata["gradient_scores"][obj_key] = 0
    metadata["temporal_decay"][obj_key] = 0
    
    # Recalibrate the dynamic balance score
    metadata["balance_scores"][cluster_id] = max(0, metadata["balance_scores"].get(cluster_id, 0) - BALANCE_ADJUSTMENT)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy updates the cluster's predictive model to account for the removal, adjusts the gradient scores of remaining objects in the cluster to reflect the change, and recalibrates the dynamic balance score to maintain equilibrium between recency and frequency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    cluster_id = metadata["object_to_cluster"].pop(evicted_key)
    
    # Remove the evicted object from the cluster
    metadata["clusters"][cluster_id].remove(evicted_key)
    
    # Adjust gradient scores of remaining objects in the cluster
    for obj_key in metadata["clusters"][cluster_id]:
        metadata["gradient_scores"][obj_key] *= TEMPORAL_DECAY_RATE
    
    # Recalibrate the dynamic balance score
    metadata["balance_scores"][cluster_id] = max(0, metadata["balance_scores"].get(cluster_id, 0) - BALANCE_ADJUSTMENT)