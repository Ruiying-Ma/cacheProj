# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
CR_INITIAL = 1.0  # Initial Contextual Resonance score
GC_INITIAL = 0.0  # Initial Gradient Cascade factor
PD_NEUTRAL = 0.0  # Neutral Predictive Drift vector value
CR_HIT_INCREMENT = 1.0  # Increment to CR on a cache hit
GC_DECAY_FACTOR = 0.9  # Decay factor for GC recalibration
PD_ADJUSTMENT_FACTOR = 0.1  # Adjustment factor for PD recalibration
TS_PENALTY_FACTOR = 0.01  # Penalty factor for TS in eviction scoring

# Put the metadata specifically maintained by the policy below. The policy maintains a Contextual Resonance score (CR) for each object, a Predictive Drift vector (PD) to estimate future access patterns, a Temporal Synchronization timestamp (TS) to track recency, and a Gradient Cascade factor (GC) to measure the rate of change in access frequency over time.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by identifying the object with the lowest combined score of CR and GC, adjusted by the PD vector to account for predicted future importance, and penalized further if its TS indicates it has not been accessed recently.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = math.inf

    for key, cached_obj in cache_snapshot.cache.items():
        obj_metadata = metadata[key]
        CR = obj_metadata['CR']
        GC = obj_metadata['GC']
        PD = obj_metadata['PD']
        TS = obj_metadata['TS']

        # Calculate eviction score
        time_penalty = TS_PENALTY_FACTOR * (cache_snapshot.access_count - TS)
        score = CR + GC - PD + time_penalty

        # Find the object with the lowest score
        if score < min_score:
            min_score = score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    On a cache hit, the CR score is increased to reflect stronger contextual relevance, the PD vector is updated using a lightweight predictive model based on recent access patterns, the TS is reset to the current time, and the GC factor is adjusted to reflect the acceleration or deceleration of access frequency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    obj_metadata = metadata[obj.key]
    obj_metadata['CR'] += CR_HIT_INCREMENT
    obj_metadata['PD'] += PD_ADJUSTMENT_FACTOR * (cache_snapshot.access_count - obj_metadata['TS'])
    obj_metadata['TS'] = cache_snapshot.access_count
    obj_metadata['GC'] = (obj_metadata['GC'] + 1) * GC_DECAY_FACTOR

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    On insertion, the CR score is initialized based on contextual factors (e.g., workload type or object metadata), the PD vector is seeded with a neutral prediction, the TS is set to the current time, and the GC factor is initialized to a baseline value indicating no prior trend.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'CR': CR_INITIAL,
        'PD': PD_NEUTRAL,
        'TS': cache_snapshot.access_count,
        'GC': GC_INITIAL
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After eviction, the metadata of the evicted object is logged for potential future reuse in predictive modeling, and the remaining objects' PD vectors and GC factors are recalibrated to account for the removal of the evicted object from the cache ecosystem.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Log metadata of evicted object (for future reuse, if needed)
    evicted_metadata = metadata.pop(evicted_obj.key, None)

    # Recalibrate remaining objects' metadata
    for key, cached_obj in cache_snapshot.cache.items():
        obj_metadata = metadata[key]
        obj_metadata['PD'] *= GC_DECAY_FACTOR
        obj_metadata['GC'] *= GC_DECAY_FACTOR