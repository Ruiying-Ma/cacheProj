# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below
SEMANTIC_PRIORITY_WEIGHT = 0.4
PROBABILISTIC_FUSION_WEIGHT = 0.3
DYNAMIC_LATENCY_WEIGHT = 0.2
ADAPTIVE_ROUTING_WEIGHT = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache object, including a semantic priority score (based on object importance and usage context), a probabilistic fusion score (combining historical access patterns and predicted future accesses), a dynamic latency estimate (time to fetch from the source if evicted), and an adaptive routing score (indicating the object's role in optimizing data flow).
metadata = defaultdict(lambda: {
    "semantic_priority": 0,
    "probabilistic_fusion": 0,
    "dynamic_latency": 0,
    "adaptive_routing": 0
})

global_statistics = {
    "total_accesses": 0,
    "total_evictions": 0
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score for each object using a weighted combination of the semantic priority, probabilistic fusion, dynamic latency, and adaptive routing scores. The object with the lowest composite score is evicted, ensuring a balance between immediate utility and long-term efficiency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_composite_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        scores = metadata[key]
        composite_score = (
            SEMANTIC_PRIORITY_WEIGHT * scores["semantic_priority"] +
            PROBABILISTIC_FUSION_WEIGHT * scores["probabilistic_fusion"] +
            DYNAMIC_LATENCY_WEIGHT * scores["dynamic_latency"] +
            ADAPTIVE_ROUTING_WEIGHT * scores["adaptive_routing"]
        )
        if composite_score < min_composite_score:
            min_composite_score = composite_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a cache hit, the semantic priority score is increased based on the context of the access, the probabilistic fusion score is updated using recent access patterns, the dynamic latency estimate is refined based on observed system performance, and the adaptive routing score is adjusted to reflect the object's contribution to current data flow optimization.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]["semantic_priority"] += 1
    metadata[key]["probabilistic_fusion"] += 1 / (cache_snapshot.access_count + 1)
    metadata[key]["dynamic_latency"] = max(1, metadata[key]["dynamic_latency"] - 1)
    metadata[key]["adaptive_routing"] += 0.1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, initial values for semantic priority, probabilistic fusion, dynamic latency, and adaptive routing scores are assigned based on the object's metadata, predicted usage patterns, and system state at the time of insertion.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]["semantic_priority"] = 1
    metadata[key]["probabilistic_fusion"] = 1 / (cache_snapshot.access_count + 1)
    metadata[key]["dynamic_latency"] = obj.size
    metadata[key]["adaptive_routing"] = 0.5

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy recalibrates the weights used in the composite score calculation to adapt to changing workload characteristics and updates global statistics to improve future predictions for probabilistic fusion and dynamic latency estimates.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    global_statistics["total_evictions"] += 1
    del metadata[evicted_obj.key]

    # Recalibrate weights (example: normalize based on total accesses and evictions)
    total_accesses = cache_snapshot.access_count
    total_evictions = global_statistics["total_evictions"]
    if total_accesses > 0:
        SEMANTIC_PRIORITY_WEIGHT = 0.4 * (total_accesses / (total_accesses + total_evictions))
        PROBABILISTIC_FUSION_WEIGHT = 0.3 * (total_accesses / (total_accesses + total_evictions))
        DYNAMIC_LATENCY_WEIGHT = 0.2 * (total_evictions / (total_accesses + total_evictions))
        ADAPTIVE_ROUTING_WEIGHT = 0.1 * (total_evictions / (total_accesses + total_evictions))