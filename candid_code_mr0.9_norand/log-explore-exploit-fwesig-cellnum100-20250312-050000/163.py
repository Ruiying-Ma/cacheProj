# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
GRADIENT_ENCODING_WEIGHT = 0.5
TEMPORAL_DIVERGENCE_WEIGHT = 0.3
PREDICTIVE_SYNCHRONY_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains a Gradient Encoding score for each cache object, representing its likelihood of future access based on recent access patterns. It also tracks Temporal Divergence, which measures the time since the object's last access relative to the average access interval. Predictive Synchrony is used to estimate the alignment of an object's access pattern with other frequently accessed objects. Probabilistic Allocation assigns a dynamic probability of retention to each object based on these factors.
metadata = {
    "gradient_encoding": {},  # {obj.key: float}
    "temporal_divergence": {},  # {obj.key: float}
    "predictive_synchrony": {},  # {obj.key: float}
    "probabilistic_allocation": {},  # {obj.key: float}
    "last_access_time": {},  # {obj.key: int}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by selecting the object with the lowest combined score derived from Gradient Encoding, Temporal Divergence, and Predictive Synchrony. If multiple objects have similar scores, Probabilistic Allocation introduces randomness to break ties, favoring diversity in retention.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        gradient_encoding = metadata["gradient_encoding"].get(key, 0)
        temporal_divergence = metadata["temporal_divergence"].get(key, 0)
        predictive_synchrony = metadata["predictive_synchrony"].get(key, 0)

        # Calculate combined score
        combined_score = (
            GRADIENT_ENCODING_WEIGHT * gradient_encoding +
            TEMPORAL_DIVERGENCE_WEIGHT * temporal_divergence +
            PREDICTIVE_SYNCHRONY_WEIGHT * predictive_synchrony
        )

        # Break ties deterministically by comparing keys lexicographically
        if combined_score < min_score or (combined_score == min_score and key < candid_obj_key):
            min_score = combined_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the Gradient Encoding score of the accessed object is increased to reflect its higher likelihood of future access. Temporal Divergence is reset to zero for the object, and Predictive Synchrony is recalculated to strengthen its alignment with other frequently accessed objects. Probabilistic Allocation is adjusted to increase the retention probability of the object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count

    # Update Gradient Encoding
    metadata["gradient_encoding"][key] = metadata["gradient_encoding"].get(key, 0) + 1

    # Reset Temporal Divergence
    metadata["temporal_divergence"][key] = 0

    # Update Predictive Synchrony
    metadata["predictive_synchrony"][key] = sum(
        metadata["gradient_encoding"].get(other_key, 0)
        for other_key in cache_snapshot.cache
        if other_key != key
    ) / max(len(cache_snapshot.cache) - 1, 1)

    # Update Probabilistic Allocation
    metadata["probabilistic_allocation"][key] = 1 / (1 + math.exp(-metadata["gradient_encoding"][key]))

    # Update last access time
    metadata["last_access_time"][key] = current_time

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its Gradient Encoding score is initialized based on its initial access context. Temporal Divergence is set to zero, Predictive Synchrony is estimated using patterns of similar objects, and Probabilistic Allocation is initialized with a moderate retention probability to allow adaptation.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count

    # Initialize Gradient Encoding
    metadata["gradient_encoding"][key] = 1

    # Initialize Temporal Divergence
    metadata["temporal_divergence"][key] = 0

    # Estimate Predictive Synchrony
    metadata["predictive_synchrony"][key] = sum(
        metadata["gradient_encoding"].get(other_key, 0)
        for other_key in cache_snapshot.cache
        if other_key != key
    ) / max(len(cache_snapshot.cache) - 1, 1)

    # Initialize Probabilistic Allocation
    metadata["probabilistic_allocation"][key] = 0.5

    # Set last access time
    metadata["last_access_time"][key] = current_time

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy recalibrates the Gradient Encoding scores of remaining objects to account for the removal. Temporal Divergence averages are updated to reflect the new cache state, and Predictive Synchrony is recalculated to adjust for the loss of the evicted object's influence. Probabilistic Allocation is redistributed slightly to maintain balance in retention probabilities.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key

    # Remove metadata for evicted object
    metadata["gradient_encoding"].pop(evicted_key, None)
    metadata["temporal_divergence"].pop(evicted_key, None)
    metadata["predictive_synchrony"].pop(evicted_key, None)
    metadata["probabilistic_allocation"].pop(evicted_key, None)
    metadata["last_access_time"].pop(evicted_key, None)

    # Recalibrate Gradient Encoding and Predictive Synchrony
    for key in cache_snapshot.cache:
        metadata["predictive_synchrony"][key] = sum(
            metadata["gradient_encoding"].get(other_key, 0)
            for other_key in cache_snapshot.cache
            if other_key != key
        ) / max(len(cache_snapshot.cache) - 1, 1)

    # Update Temporal Divergence
    current_time = cache_snapshot.access_count
    for key in cache_snapshot.cache:
        last_access = metadata["last_access_time"].get(key, current_time)
        metadata["temporal_divergence"][key] = current_time - last_access