# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict
import math

# Put tunable constant parameters below
ALPHA = 0.7  # Weight for recency in dynamic fusion score
BETA = 0.2   # Weight for frequency in dynamic fusion score
GAMMA = 0.1  # Weight for predicted utility in dynamic fusion score

# Put the metadata specifically maintained by the policy below. The policy maintains a recursive probability tree for each cache object, representing the likelihood of future accesses based on temporal patterns. It also tracks a dynamic fusion score that combines recent access frequency, recency, and predicted future utility using a weighted synthesis of historical and probabilistic data.
metadata = {
    "probability_trees": defaultdict(lambda: defaultdict(float)),  # Nested dict for probability trees
    "fusion_scores": {},  # Dynamic fusion scores for each object
    "access_times": {},  # Last access time for each object
    "access_frequencies": defaultdict(int),  # Access frequency for each object
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the eviction victim by identifying the object with the lowest dynamic fusion score, while also considering a probability cascade to recursively evaluate the impact of evicting that object on the overall cache performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_fusion_score = math.inf

    # Iterate over all cached objects to find the one with the lowest fusion score
    for key, cached_obj in cache_snapshot.cache.items():
        fusion_score = metadata["fusion_scores"].get(key, math.inf)
        if fusion_score < min_fusion_score:
            min_fusion_score = fusion_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the probability tree for the accessed object by reinforcing the likelihood of similar temporal patterns recurring. The dynamic fusion score is recalculated to reflect the increased recency and adjusted future utility.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key

    # Update access frequency and last access time
    metadata["access_frequencies"][key] += 1
    metadata["access_times"][key] = current_time

    # Update probability tree (reinforce temporal patterns)
    probability_tree = metadata["probability_trees"][key]
    for time_diff in probability_tree:
        probability_tree[time_diff] *= 0.9  # Decay old probabilities
    time_since_last_access = current_time - metadata["access_times"].get(key, 0)
    if time_since_last_access > 0:
        probability_tree[time_since_last_access] += 1.0

    # Recalculate dynamic fusion score
    recency = 1 / (1 + current_time - metadata["access_times"][key])
    frequency = metadata["access_frequencies"][key]
    predicted_utility = sum(probability_tree.values())
    metadata["fusion_scores"][key] = (
        ALPHA * recency + BETA * frequency + GAMMA * predicted_utility
    )

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its probability tree based on observed temporal patterns of similar objects and assigns an initial dynamic fusion score derived from its predicted utility and recency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    key = obj.key

    # Initialize metadata for the new object
    metadata["access_frequencies"][key] = 1
    metadata["access_times"][key] = current_time
    metadata["probability_trees"][key] = defaultdict(float)

    # Assign initial dynamic fusion score
    recency = 1 / (1 + current_time)
    frequency = metadata["access_frequencies"][key]
    predicted_utility = sum(metadata["probability_trees"][key].values())
    metadata["fusion_scores"][key] = (
        ALPHA * recency + BETA * frequency + GAMMA * predicted_utility
    )

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy adjusts the probability trees of remaining objects to account for the removal's impact on temporal synthesis and recalibrates their dynamic fusion scores to reflect the updated cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key

    # Remove metadata for the evicted object
    if evicted_key in metadata["probability_trees"]:
        del metadata["probability_trees"][evicted_key]
    if evicted_key in metadata["fusion_scores"]:
        del metadata["fusion_scores"][evicted_key]
    if evicted_key in metadata["access_times"]:
        del metadata["access_times"][evicted_key]
    if evicted_key in metadata["access_frequencies"]:
        del metadata["access_frequencies"][evicted_key]

    # Recalculate fusion scores for remaining objects
    for key in cache_snapshot.cache:
        recency = 1 / (1 + cache_snapshot.access_count - metadata["access_times"][key])
        frequency = metadata["access_frequencies"][key]
        predicted_utility = sum(metadata["probability_trees"][key].values())
        metadata["fusion_scores"][key] = (
            ALPHA * recency + BETA * frequency + GAMMA * predicted_utility
        )