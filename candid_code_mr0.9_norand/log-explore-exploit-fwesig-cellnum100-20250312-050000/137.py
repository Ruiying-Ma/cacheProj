# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
BASELINE_ADAPTIVE_OVERLAP_SCORE = 1
DEFAULT_TEMPORAL_BRIDGE_COUNTER = 10
PROJECTION_HEURISTIC_WEIGHT = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains a recursive enumeration tree to track access patterns, an adaptive overlap score for each object to measure shared temporal locality, a temporal bridge counter to capture long-term reuse potential, and a projection heuristic score to predict future access likelihood based on recent trends.
metadata = {
    "enumeration_tree": {},  # Tracks access patterns as a tree structure
    "adaptive_overlap_scores": {},  # Maps obj.key to its adaptive overlap score
    "temporal_bridge_counters": {},  # Maps obj.key to its temporal bridge counter
    "projection_heuristic_scores": {},  # Maps obj.key to its projection heuristic score
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the eviction victim by recursively traversing the enumeration tree to identify objects with low adaptive overlap scores, minimal temporal bridge counters, and the lowest projection heuristic scores, ensuring a balance between short-term and long-term reuse potential.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        overlap_score = metadata["adaptive_overlap_scores"].get(key, BASELINE_ADAPTIVE_OVERLAP_SCORE)
        bridge_counter = metadata["temporal_bridge_counters"].get(key, DEFAULT_TEMPORAL_BRIDGE_COUNTER)
        projection_score = metadata["projection_heuristic_scores"].get(key, 0)

        # Calculate a combined score for eviction decision
        combined_score = (
            overlap_score +
            bridge_counter +
            PROJECTION_HEURISTIC_WEIGHT * projection_score
        )

        # Select the object with the lowest combined score
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    On a cache hit, the recursive enumeration tree is updated to reflect the new access path, the adaptive overlap score of the object is incremented, the temporal bridge counter is reset to zero, and the projection heuristic score is recalculated based on the updated access pattern.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key

    # Update the recursive enumeration tree
    if key not in metadata["enumeration_tree"]:
        metadata["enumeration_tree"][key] = {}
    # Reflect the new access path (simplified as incrementing access count)
    metadata["enumeration_tree"][key]["access_count"] = cache_snapshot.access_count

    # Increment the adaptive overlap score
    metadata["adaptive_overlap_scores"][key] = metadata["adaptive_overlap_scores"].get(key, BASELINE_ADAPTIVE_OVERLAP_SCORE) + 1

    # Reset the temporal bridge counter
    metadata["temporal_bridge_counters"][key] = 0

    # Recalculate the projection heuristic score
    metadata["projection_heuristic_scores"][key] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the recursive enumeration tree is expanded to include the new object, its adaptive overlap score is initialized to a baseline value, its temporal bridge counter is set to a default threshold, and its projection heuristic score is computed based on the insertion context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key

    # Expand the recursive enumeration tree
    metadata["enumeration_tree"][key] = {"access_count": cache_snapshot.access_count}

    # Initialize the adaptive overlap score
    metadata["adaptive_overlap_scores"][key] = BASELINE_ADAPTIVE_OVERLAP_SCORE

    # Set the temporal bridge counter to the default threshold
    metadata["temporal_bridge_counters"][key] = DEFAULT_TEMPORAL_BRIDGE_COUNTER

    # Compute the projection heuristic score
    metadata["projection_heuristic_scores"][key] = cache_snapshot.access_count

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the recursive enumeration tree is pruned to remove the object's path, the adaptive overlap scores of related objects are adjusted to reflect reduced competition, temporal bridge counters of remaining objects are incremented, and projection heuristic scores are recalibrated to account for the eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key

    # Prune the recursive enumeration tree
    if evicted_key in metadata["enumeration_tree"]:
        del metadata["enumeration_tree"][evicted_key]

    # Adjust the adaptive overlap scores of related objects
    for key in metadata["adaptive_overlap_scores"]:
        if key != evicted_key:
            metadata["adaptive_overlap_scores"][key] = max(
                metadata["adaptive_overlap_scores"][key] - 1, BASELINE_ADAPTIVE_OVERLAP_SCORE
            )

    # Increment temporal bridge counters of remaining objects
    for key in metadata["temporal_bridge_counters"]:
        if key != evicted_key:
            metadata["temporal_bridge_counters"][key] += 1

    # Recalibrate projection heuristic scores
    for key in metadata["projection_heuristic_scores"]:
        if key != evicted_key:
            metadata["projection_heuristic_scores"][key] = cache_snapshot.access_count