# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below
LATENCY_WEIGHT = 0.5
FREQUENCY_WEIGHT = 0.3
RECENCY_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains a contextual index for each cached object, which includes its access frequency, recency, and a probabilistic score derived from usage patterns. It also tracks latency harmonization metrics to balance retrieval times across objects and an adaptive synthesis score that predicts future access likelihood based on historical trends.
metadata = {
    "access_frequency": defaultdict(int),  # Tracks how many times each object is accessed
    "recency": {},  # Tracks the last access time of each object
    "probabilistic_score": {},  # Tracks the probabilistic score of each object
    "latency_harmonization": {},  # Tracks latency harmonization metrics for each object
    "adaptive_synthesis_score": {},  # Tracks the adaptive synthesis score for each object
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the eviction victim by combining the probabilistic score and latency harmonization metrics to identify objects with low future access likelihood and high retrieval latency impact. It prioritizes evicting objects with the lowest adaptive synthesis score while ensuring overall latency balance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        # Calculate the combined score for eviction
        latency = metadata["latency_harmonization"].get(key, 0)
        prob_score = metadata["probabilistic_score"].get(key, 0)
        adaptive_score = metadata["adaptive_synthesis_score"].get(key, 0)

        combined_score = LATENCY_WEIGHT * latency + FREQUENCY_WEIGHT * prob_score + RECENCY_WEIGHT * adaptive_score

        # Select the object with the lowest combined score
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the access frequency and recency of the object are updated. The probabilistic score is recalculated using Bayesian inference based on the new access pattern, and the adaptive synthesis score is adjusted to reflect the increased likelihood of future access.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count

    # Update access frequency
    metadata["access_frequency"][key] += 1

    # Update recency
    metadata["recency"][key] = current_time

    # Recalculate probabilistic score (simplified Bayesian update)
    freq = metadata["access_frequency"][key]
    metadata["probabilistic_score"][key] = freq / (freq + 1)

    # Adjust adaptive synthesis score
    metadata["adaptive_synthesis_score"][key] = 1 / (1 + freq)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the contextual index is initialized with default values for access frequency and recency. The probabilistic score is seeded using initial usage context, and the latency harmonization metrics are updated to account for the new object's retrieval characteristics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    current_time = cache_snapshot.access_count

    # Initialize access frequency and recency
    metadata["access_frequency"][key] = 1
    metadata["recency"][key] = current_time

    # Seed probabilistic score
    metadata["probabilistic_score"][key] = 0.5  # Default initial score

    # Update latency harmonization metrics
    metadata["latency_harmonization"][key] = obj.size / cache_snapshot.capacity

    # Initialize adaptive synthesis score
    metadata["adaptive_synthesis_score"][key] = 1.0  # Default initial score

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the latency harmonization metrics are recalibrated to redistribute the impact of the removed object. The contextual index is updated to remove the evicted object's metadata, and the adaptive synthesis model is refined to improve future eviction predictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key

    # Remove metadata for the evicted object
    metadata["access_frequency"].pop(evicted_key, None)
    metadata["recency"].pop(evicted_key, None)
    metadata["probabilistic_score"].pop(evicted_key, None)
    metadata["latency_harmonization"].pop(evicted_key, None)
    metadata["adaptive_synthesis_score"].pop(evicted_key, None)

    # Recalibrate latency harmonization metrics
    total_size = sum(obj.size for obj in cache_snapshot.cache.values())
    for key in cache_snapshot.cache:
        metadata["latency_harmonization"][key] = cache_snapshot.cache[key].size / total_size