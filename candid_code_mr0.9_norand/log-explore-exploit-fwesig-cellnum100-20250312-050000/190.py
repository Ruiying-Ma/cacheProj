# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below
ALPHA = 0.7  # Weight for recency in RS calculation
BETA = 0.3   # Weight for frequency in RS calculation
GAMMA = 0.5  # Weight for Predictive Cascade adjustment
DELTA = 0.2  # Weight for Semantic Equilibrium adjustment

# Put the metadata specifically maintained by the policy below. The policy maintains a Resonance Score (RS) for each object, which is a composite metric derived from access frequency, recency, and contextual relevance. It also tracks a Flux Vector (FV) that captures the dynamic behavior of access patterns over time, and a Predictive Cascade (PC) that forecasts future access probabilities based on historical trends. Lastly, a Semantic Equilibrium (SE) metric ensures fairness by balancing the cache's content diversity.
RS = defaultdict(float)  # Resonance Score for each object
FV = defaultdict(float)  # Flux Vector for each object
PC = defaultdict(float)  # Predictive Cascade for each object
SE = defaultdict(float)  # Semantic Equilibrium for each object
access_frequency = defaultdict(int)  # Tracks access frequency for each object
last_access_time = defaultdict(int)  # Tracks the last access time for each object

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by identifying the object with the lowest Resonance Score (RS), adjusted by the Predictive Cascade (PC) to account for future access likelihood. If multiple candidates have similar scores, the Semantic Equilibrium (SE) metric is used to prioritize eviction of objects that contribute less to cache diversity.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        # Calculate the adjusted score
        adjusted_score = RS[key] - GAMMA * PC[key] + DELTA * SE[key]
        if adjusted_score < min_score:
            min_score = adjusted_score
            candid_obj_key = key
        elif adjusted_score == min_score:
            # Break ties using Semantic Equilibrium (SE)
            if SE[key] < SE[candid_obj_key]:
                candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the Resonance Score (RS) of the accessed object is incremented based on its recency and frequency of access. The Flux Vector (FV) is updated to reflect the changing access pattern, and the Predictive Cascade (PC) is recalibrated to refine future access predictions. The Semantic Equilibrium (SE) is adjusted to ensure the cache remains balanced in terms of content diversity.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    access_frequency[obj.key] += 1
    last_access_time[obj.key] = current_time

    # Update RS
    recency = 1 / (current_time - last_access_time[obj.key] + 1)
    frequency = access_frequency[obj.key]
    RS[obj.key] = ALPHA * recency + BETA * frequency

    # Update FV
    FV[obj.key] += 1

    # Update PC
    PC[obj.key] = FV[obj.key] / sum(FV.values())

    # Update SE
    SE[obj.key] = 1 / len(cache_snapshot.cache)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its initial Resonance Score (RS) is calculated based on its contextual relevance and predicted access probability. The Flux Vector (FV) is updated to incorporate the new object's impact on access patterns, and the Predictive Cascade (PC) is adjusted to include the new object in future forecasts. The Semantic Equilibrium (SE) is recalibrated to maintain diversity in the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    current_time = cache_snapshot.access_count
    access_frequency[obj.key] = 1
    last_access_time[obj.key] = current_time

    # Initialize RS
    RS[obj.key] = ALPHA + BETA  # Initial recency and frequency

    # Update FV
    FV[obj.key] = 1

    # Update PC
    PC[obj.key] = FV[obj.key] / sum(FV.values())

    # Update SE
    SE[obj.key] = 1 / len(cache_snapshot.cache)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the Flux Vector (FV) is updated to remove the influence of the evicted object on access patterns. The Predictive Cascade (PC) is recalibrated to account for the absence of the evicted object in future predictions. The Semantic Equilibrium (SE) is adjusted to ensure the cache remains balanced and diverse after the eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Remove evicted object from metadata
    if evicted_obj.key in FV:
        del FV[evicted_obj.key]
    if evicted_obj.key in PC:
        del PC[evicted_obj.key]
    if evicted_obj.key in SE:
        del SE[evicted_obj.key]
    if evicted_obj.key in RS:
        del RS[evicted_obj.key]
    if evicted_obj.key in access_frequency:
        del access_frequency[evicted_obj.key]
    if evicted_obj.key in last_access_time:
        del last_access_time[evicted_obj.key]

    # Recalculate PC
    total_flux = sum(FV.values())
    for key in FV:
        PC[key] = FV[key] / total_flux

    # Recalculate SE
    for key in cache_snapshot.cache:
        SE[key] = 1 / len(cache_snapshot.cache)