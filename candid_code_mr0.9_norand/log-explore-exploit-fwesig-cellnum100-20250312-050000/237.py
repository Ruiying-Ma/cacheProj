# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
DEFAULT_PROBABILISTIC_SCORE = 1.0
DEFAULT_LATENCY_BUFFER = 10.0
DEFAULT_DYNAMIC_SCALING_FACTOR = 1.0
ENTROPY_WEIGHT = 0.5
TEMPORAL_ALIGNMENT_WEIGHT = 0.3
PREDICTIVE_INDEX_WEIGHT = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains a temporal vector, a probabilistic score, a hierarchical entropy value, a predictive index, a latency buffer, and a dynamic scaling factor for each cached object. These metadata elements collectively capture access patterns, future access likelihood, unpredictability, workflow context, latency sensitivity, and system load priorities.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the eviction victim by combining the probabilistic score, temporal vector alignment, hierarchical entropy, predictive index, latency buffer, and dynamic scaling factor. Objects with low probabilistic scores, low temporal alignment, high entropy, low predictive index, low latency sensitivity, and low workflow priority are prioritized for eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        obj_metadata = metadata[key]
        score = (
            ENTROPY_WEIGHT * obj_metadata['hierarchical_entropy'] -
            TEMPORAL_ALIGNMENT_WEIGHT * obj_metadata['temporal_vector'] +
            PREDICTIVE_INDEX_WEIGHT * obj_metadata['predictive_index'] +
            obj_metadata['latency_buffer'] +
            obj_metadata['dynamic_scaling_factor'] -
            obj_metadata['probabilistic_score']
        )
        if score < min_score:
            min_score = score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the temporal vector is updated with the current access time, the probabilistic score is increased based on recent trends, the hierarchical entropy is recalculated, the predictive index is boosted based on observed patterns, the latency buffer is recalibrated to reflect current latency, and the dynamic scaling factor is adjusted to align with workflow priorities.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    obj_metadata = metadata[obj.key]
    obj_metadata['temporal_vector'] = cache_snapshot.access_count
    obj_metadata['probabilistic_score'] += 1.0
    obj_metadata['hierarchical_entropy'] = calculate_entropy(cache_snapshot)
    obj_metadata['predictive_index'] += 0.1
    obj_metadata['latency_buffer'] = calculate_average_latency(cache_snapshot)
    obj_metadata['dynamic_scaling_factor'] = calculate_scaling_factor(cache_snapshot)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the temporal vector is initialized with the current time, the probabilistic score is set based on predicted access likelihood, the hierarchical entropy is calculated relative to existing objects, the predictive index is initialized using workflow context, the latency buffer is set to average system latency, and the dynamic scaling factor is tuned to match system load and workflow priorities.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        'temporal_vector': cache_snapshot.access_count,
        'probabilistic_score': DEFAULT_PROBABILISTIC_SCORE,
        'hierarchical_entropy': calculate_entropy(cache_snapshot),
        'predictive_index': 0.5,
        'latency_buffer': calculate_average_latency(cache_snapshot),
        'dynamic_scaling_factor': calculate_scaling_factor(cache_snapshot),
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After eviction, the hierarchical entropy values of remaining objects are rebalanced, the probabilistic scores are adjusted to account for the removed object, the predictive index is recalculated to redistribute priorities, the latency buffer is updated to reflect the reduced cache size, and the dynamic scaling factor is recalibrated to optimize alignment with the new system state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    del metadata[evicted_obj.key]
    for key, obj_metadata in metadata.items():
        obj_metadata['hierarchical_entropy'] = calculate_entropy(cache_snapshot)
        obj_metadata['probabilistic_score'] -= 0.1
        obj_metadata['predictive_index'] = recalculate_predictive_index(cache_snapshot)
        obj_metadata['latency_buffer'] = calculate_average_latency(cache_snapshot)
        obj_metadata['dynamic_scaling_factor'] = calculate_scaling_factor(cache_snapshot)

def calculate_entropy(cache_snapshot):
    '''
    Helper function to calculate hierarchical entropy.
    '''
    if not cache_snapshot.cache:
        return 0
    total_size = sum(obj.size for obj in cache_snapshot.cache.values())
    entropy = -sum(
        (obj.size / total_size) * math.log(obj.size / total_size)
        for obj in cache_snapshot.cache.values()
    )
    return entropy

def calculate_average_latency(cache_snapshot):
    '''
    Helper function to calculate average latency.
    '''
    return DEFAULT_LATENCY_BUFFER

def calculate_scaling_factor(cache_snapshot):
    '''
    Helper function to calculate dynamic scaling factor.
    '''
    return DEFAULT_DYNAMIC_SCALING_FACTOR

def recalculate_predictive_index(cache_snapshot):
    '''
    Helper function to recalculate predictive index.
    '''
    return 0.5