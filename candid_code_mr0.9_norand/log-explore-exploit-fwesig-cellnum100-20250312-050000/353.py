# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
DEFAULT_RELEVANCE_SCORE = 1.0
DEFAULT_RANDOMNESS_PRIORITY = 10.0
TEMPORAL_DECAY_FACTOR = 0.9
RELATIONSHIP_STRENGTH_INCREMENT = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains a Unified Relevance Score (combining Cohesion Score, Semantic Resonance, and Predictive Synchronicity), a Temporal Dynamics Index (merging Temporal Index and Temporal Cascade), a Predictive Relationship Map (integrating Predictive Morphology and Parallel Scoring Matrix), a Randomness-Adjusted Priority (blending Entropic Priority Index and Dynamic Latency Weight), and a Contextual Ontology Graph (fusing Recursive Ontology graph and Global Orchestration Table).
metadata = {
    "relevance_scores": {},  # Maps obj.key to its Unified Relevance Score
    "temporal_indices": {},  # Maps obj.key to its Temporal Dynamics Index
    "relationship_map": {},  # Maps obj.key to a dict of related obj.key and their strengths
    "randomness_priorities": {},  # Maps obj.key to its Randomness-Adjusted Priority
    "ontology_graph": {},  # Maps obj.key to a set of semantically/contextually related obj.key
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy calculates a composite score for each object by combining the Unified Relevance Score, Temporal Dynamics Index, Predictive Relationship Map strength, and Randomness-Adjusted Priority, while ensuring critical connections in the Contextual Ontology Graph are preserved. The object with the lowest composite score is evicted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_composite_score = math.inf

    for key, cached_obj in cache_snapshot.cache.items():
        relevance_score = metadata["relevance_scores"].get(key, DEFAULT_RELEVANCE_SCORE)
        temporal_index = metadata["temporal_indices"].get(key, 0)
        relationship_strength = sum(metadata["relationship_map"].get(key, {}).values())
        randomness_priority = metadata["randomness_priorities"].get(key, DEFAULT_RANDOMNESS_PRIORITY)

        composite_score = (
            relevance_score +
            temporal_index +
            relationship_strength +
            randomness_priority
        )

        # Ensure critical connections in the Contextual Ontology Graph are preserved
        if key in metadata["ontology_graph"] and len(metadata["ontology_graph"][key]) > 0:
            composite_score += len(metadata["ontology_graph"][key])

        if composite_score < min_composite_score:
            min_composite_score = composite_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    After a hit, the Unified Relevance Score is increased based on observed access patterns, the Temporal Dynamics Index is refreshed to reflect recency, the Predictive Relationship Map is updated to strengthen links with related objects, the Randomness-Adjusted Priority is recalibrated to reflect reduced uncertainty, and the Contextual Ontology Graph is adjusted to reinforce connections with accessed objects.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata["relevance_scores"][key] = metadata["relevance_scores"].get(key, DEFAULT_RELEVANCE_SCORE) + 1
    metadata["temporal_indices"][key] = cache_snapshot.access_count
    metadata["randomness_priorities"][key] = max(0, metadata["randomness_priorities"].get(key, DEFAULT_RANDOMNESS_PRIORITY) - 1)

    # Strengthen links in the Predictive Relationship Map
    for related_key in metadata["relationship_map"].get(key, {}):
        metadata["relationship_map"][key][related_key] += RELATIONSHIP_STRENGTH_INCREMENT

    # Reinforce connections in the Contextual Ontology Graph
    if key not in metadata["ontology_graph"]:
        metadata["ontology_graph"][key] = set()
    metadata["ontology_graph"][key].add(key)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After insertion, the Unified Relevance Score is initialized using immediate relevance and co-access patterns, the Temporal Dynamics Index is set to the current time, the Predictive Relationship Map is seeded with weak links to related objects, the Randomness-Adjusted Priority is set to a high default to account for uncertainty, and the Contextual Ontology Graph establishes initial semantic and contextual connections.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata["relevance_scores"][key] = DEFAULT_RELEVANCE_SCORE
    metadata["temporal_indices"][key] = cache_snapshot.access_count
    metadata["randomness_priorities"][key] = DEFAULT_RANDOMNESS_PRIORITY
    metadata["relationship_map"][key] = {}
    metadata["ontology_graph"][key] = set()

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After eviction, the Unified Relevance Scores of remaining objects are recalculated to reflect the removal, the Temporal Dynamics Index is normalized across the cache, the Predictive Relationship Map is updated to redistribute relationships, the Randomness-Adjusted Priority is adjusted to account for increased randomness, and the Contextual Ontology Graph is restructured to preserve critical relationships.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key

    # Recalculate Unified Relevance Scores
    for key in cache_snapshot.cache:
        metadata["relevance_scores"][key] *= TEMPORAL_DECAY_FACTOR

    # Normalize Temporal Dynamics Index
    max_time = max(metadata["temporal_indices"].values(), default=1)
    for key in metadata["temporal_indices"]:
        metadata["temporal_indices"][key] /= max_time

    # Update Predictive Relationship Map
    for key, relationships in metadata["relationship_map"].items():
        if evicted_key in relationships:
            del relationships[evicted_key]

    # Adjust Randomness-Adjusted Priority
    for key in metadata["randomness_priorities"]:
        metadata["randomness_priorities"][key] += 1

    # Restructure Contextual Ontology Graph
    for key, connections in metadata["ontology_graph"].items():
        if evicted_key in connections:
            connections.remove(evicted_key)