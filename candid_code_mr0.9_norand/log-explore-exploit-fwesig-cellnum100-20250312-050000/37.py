# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
HOT_TIER_THRESHOLD = 10  # Minimum access frequency to promote to hot tier
WARM_TIER_THRESHOLD = 5  # Minimum access frequency to promote to warm tier
DEFAULT_LATENCY = 1000   # Default latency for new objects
SEQUENTIAL_ALIGNMENT_WINDOW = 5  # Number of sequential accesses to track

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for cache alignment (tracking data block boundaries), access latency (historical latency for each block), storage stratification (categorizing data into hot, warm, and cold tiers), and data pipelining (tracking sequential access patterns).
metadata = {
    "access_frequency": {},  # Tracks access frequency for each object key
    "access_latency": {},    # Tracks historical latency for each object key
    "tier": {},              # Tracks the tier (hot, warm, cold) for each object key
    "sequential_pattern": [],  # Tracks the sequence of recently accessed keys
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by prioritizing blocks in the cold tier with the highest access latency and least alignment to ongoing sequential access patterns, ensuring minimal disruption to pipelined data flows.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Filter objects in the cold tier
    cold_tier_objects = [
        key for key, tier in metadata["tier"].items() if tier == "cold"
    ]
    
    # Sort cold tier objects by access latency (descending) and alignment (ascending)
    cold_tier_objects.sort(
        key=lambda key: (
            -metadata["access_latency"].get(key, DEFAULT_LATENCY),
            metadata["sequential_pattern"].count(key)
        )
    )
    
    # Select the first object in the sorted list as the eviction candidate
    if cold_tier_objects:
        candid_obj_key = cold_tier_objects[0]
    else:
        # If no cold tier objects, fallback to evict the least recently used object
        candid_obj_key = min(
            cache_snapshot.cache.keys(),
            key=lambda key: metadata["access_latency"].get(key, DEFAULT_LATENCY)
        )
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    On a cache hit, the policy updates the access latency for the block, promotes it to a hotter tier if its access frequency increases, and adjusts alignment metadata to reflect its contribution to ongoing sequential patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    
    # Update access frequency
    metadata["access_frequency"][key] = metadata["access_frequency"].get(key, 0) + 1
    
    # Update access latency
    metadata["access_latency"][key] = cache_snapshot.access_count
    
    # Promote to a hotter tier if access frequency increases
    freq = metadata["access_frequency"][key]
    if freq >= HOT_TIER_THRESHOLD:
        metadata["tier"][key] = "hot"
    elif freq >= WARM_TIER_THRESHOLD:
        metadata["tier"][key] = "warm"
    else:
        metadata["tier"][key] = "cold"
    
    # Update sequential alignment metadata
    metadata["sequential_pattern"].append(key)
    if len(metadata["sequential_pattern"]) > SEQUENTIAL_ALIGNMENT_WINDOW:
        metadata["sequential_pattern"].pop(0)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the policy initializes its metadata with default latency, assigns it to the cold tier, and evaluates its alignment with current sequential patterns to determine if it should be preemptively promoted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    
    # Initialize metadata for the new object
    metadata["access_frequency"][key] = 1
    metadata["access_latency"][key] = cache_snapshot.access_count
    metadata["tier"][key] = "cold"
    
    # Evaluate alignment with current sequential patterns
    if metadata["sequential_pattern"].count(key) > 1:
        metadata["tier"][key] = "warm"

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a block, the policy recalibrates the stratification thresholds for hot, warm, and cold tiers and adjusts alignment metadata to ensure remaining blocks are optimally aligned with ongoing data pipelines.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    
    # Remove metadata for the evicted object
    metadata["access_frequency"].pop(evicted_key, None)
    metadata["access_latency"].pop(evicted_key, None)
    metadata["tier"].pop(evicted_key, None)
    
    # Recalibrate stratification thresholds (optional, based on policy tuning)
    # For simplicity, this implementation does not dynamically adjust thresholds.
    
    # Adjust alignment metadata
    if evicted_key in metadata["sequential_pattern"]:
        metadata["sequential_pattern"].remove(evicted_key)