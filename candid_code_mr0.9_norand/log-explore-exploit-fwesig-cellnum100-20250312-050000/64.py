# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
CCS_WEIGHT = 0.5  # Weight for Contextual Coherence Score
PIV_WEIGHT = 0.3  # Weight for Predictive Interpolation Value
TDF_WEIGHT = 0.2  # Weight for Temporal Decay Factor

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache object, including a Contextual Coherence Score (CCS) derived from the object's relationship to recently accessed objects, a Predictive Interpolation Value (PIV) estimating future access likelihood based on temporal patterns, and a Temporal Decay Factor (TDF) that tracks the time since the last access.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score for each object using a weighted combination of CCS, PIV, and TDF. The object with the lowest composite score is evicted, prioritizing those with weak contextual relevance, low predicted future access, and long inactivity.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_composite_score = math.inf

    for key, cached_obj in cache_snapshot.cache.items():
        ccs = metadata[key]['CCS']
        piv = metadata[key]['PIV']
        tdf = cache_snapshot.access_count - metadata[key]['TDF']
        composite_score = CCS_WEIGHT * ccs + PIV_WEIGHT * piv + TDF_WEIGHT * tdf

        if composite_score < min_composite_score:
            min_composite_score = composite_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the CCS of the accessed object is recalculated based on its coherence with the most recent access patterns, the PIV is updated using predictive analytics to refine future access likelihood, and the TDF is reset to reflect the current time.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    # Recalculate CCS based on recent access patterns
    metadata[key]['CCS'] = calculate_ccs(cache_snapshot, obj)
    # Update PIV using predictive analytics
    metadata[key]['PIV'] = calculate_piv(cache_snapshot, obj)
    # Reset TDF to the current time
    metadata[key]['TDF'] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its CCS is initialized based on its contextual relationship to the most recent access, its PIV is set using an initial predictive model, and its TDF is initialized to the current time.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'CCS': calculate_ccs(cache_snapshot, obj),  # Initialize CCS
        'PIV': calculate_piv(cache_snapshot, obj),  # Initialize PIV
        'TDF': cache_snapshot.access_count          # Initialize TDF
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the CCS and PIV of remaining objects are recalibrated to account for the removal's impact on contextual coherence and predictive patterns, while the TDF of all objects remains unchanged.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]

    for key, cached_obj in cache_snapshot.cache.items():
        # Recalibrate CCS and PIV for remaining objects
        metadata[key]['CCS'] = calculate_ccs(cache_snapshot, cached_obj)
        metadata[key]['PIV'] = calculate_piv(cache_snapshot, cached_obj)

def calculate_ccs(cache_snapshot, obj):
    '''
    Helper function to calculate the Contextual Coherence Score (CCS) for an object.
    '''
    # Example: CCS could be based on the size of the object and its relationship to other objects
    return sum(o.size for o in cache_snapshot.cache.values()) / (obj.size + 1)

def calculate_piv(cache_snapshot, obj):
    '''
    Helper function to calculate the Predictive Interpolation Value (PIV) for an object.
    '''
    # Example: PIV could be based on the object's size and its temporal access patterns
    return 1 / (1 + obj.size)