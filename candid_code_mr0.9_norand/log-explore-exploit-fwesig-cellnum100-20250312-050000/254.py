# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import math

# Put tunable constant parameters below
ALPHA = 0.7  # Weight for recent access patterns in TFS calculation
BETA = 0.3   # Weight for predicted future access likelihood in TFS calculation
THRESHOLD_ADJUSTMENT = 0.05  # Adjustment factor for the adaptive threshold
LATENCY_DRIFT_ADJUSTMENT = 0.1  # Adjustment factor for latency drift recalibration

# Put the metadata specifically maintained by the policy below. The policy maintains a temporal fusion score (TFS) for each object, which combines recent access patterns and predicted future access gradients. It also tracks an adaptive threshold for eviction decisions and a latency drift metric to account for varying access latencies.
metadata = {
    "tfs": {},  # Temporal Fusion Score for each object (keyed by obj.key)
    "adaptive_threshold": 0.0,  # Adaptive threshold for eviction decisions
    "latency_drift": 0.0  # Latency drift metric
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evicts the object with the lowest TFS, but only if its score falls below the adaptive threshold. If no object meets this condition, the policy temporarily increases the threshold to allow eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_tfs = math.inf

    # Find the object with the lowest TFS below the adaptive threshold
    for key, cached_obj in cache_snapshot.cache.items():
        tfs = metadata["tfs"].get(key, 0)
        if tfs < metadata["adaptive_threshold"] and tfs < min_tfs:
            min_tfs = tfs
            candid_obj_key = key

    # If no object meets the condition, temporarily increase the threshold
    if candid_obj_key is None:
        metadata["adaptive_threshold"] += THRESHOLD_ADJUSTMENT
        for key, cached_obj in cache_snapshot.cache.items():
            tfs = metadata["tfs"].get(key, 0)
            if tfs < metadata["adaptive_threshold"] and tfs < min_tfs:
                min_tfs = tfs
                candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    On a cache hit, the TFS of the accessed object is updated using a gradient prediction model that adjusts based on recent access patterns. The latency drift metric is recalibrated to reflect the current access latency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Update TFS using a gradient prediction model
    current_tfs = metadata["tfs"].get(obj.key, 0)
    new_tfs = ALPHA * current_tfs + BETA * (1 / (cache_snapshot.access_count + 1))
    metadata["tfs"][obj.key] = new_tfs

    # Recalibrate latency drift metric
    metadata["latency_drift"] += LATENCY_DRIFT_ADJUSTMENT

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its initial TFS is computed using a weighted combination of temporal fusion and predicted future access likelihood. The adaptive threshold is adjusted slightly to reflect the new cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Compute initial TFS for the new object
    initial_tfs = ALPHA * (1 / (cache_snapshot.access_count + 1)) + BETA * (1 / obj.size)
    metadata["tfs"][obj.key] = initial_tfs

    # Adjust the adaptive threshold
    metadata["adaptive_threshold"] += THRESHOLD_ADJUSTMENT

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After eviction, the adaptive threshold is recalibrated to prevent over-eviction, and the latency drift metric is updated to account for the impact of the eviction on overall cache performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Recalibrate the adaptive threshold to prevent over-eviction
    metadata["adaptive_threshold"] -= THRESHOLD_ADJUSTMENT

    # Update the latency drift metric
    metadata["latency_drift"] -= LATENCY_DRIFT_ADJUSTMENT