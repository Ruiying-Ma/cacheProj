# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict
import math

# Put tunable constant parameters below
DEFAULT_FILTER_SCORE = 1.0
DEFAULT_CONTEXT_VECTOR = [0.0]  # Example: A single-dimensional context vector
FILTER_SCORE_DECAY = 0.9  # Decay factor for filter scores during rebalancing
CONTEXT_VECTOR_DECAY = 0.9  # Decay factor for context vector updates

# Put the metadata specifically maintained by the policy below. The policy maintains a recursive index tree where each node represents a temporal access pattern, a stochastic filter score for each cache object, and a predictive context vector that captures the likelihood of future accesses based on historical patterns.
metadata = {
    "temporal_access": {},  # Maps obj.key to the last access time
    "filter_scores": {},  # Maps obj.key to its stochastic filter score
    "context_vectors": {},  # Maps obj.key to its predictive context vector
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the eviction victim by traversing the recursive index tree to identify objects with low stochastic filter scores and weak predictive context alignment, prioritizing those with the least recent temporal access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = math.inf

    for key, cached_obj in cache_snapshot.cache.items():
        # Calculate a combined score based on filter score and temporal access
        filter_score = metadata["filter_scores"].get(key, DEFAULT_FILTER_SCORE)
        last_access_time = metadata["temporal_access"].get(key, 0)
        temporal_score = cache_snapshot.access_count - last_access_time

        # Combine scores (lower is worse)
        combined_score = filter_score + temporal_score

        # Select the object with the lowest combined score
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the temporal access pattern in the recursive index tree is updated to reflect the current time, the stochastic filter score is incrementally adjusted to reinforce the object's relevance, and the predictive context vector is refined using the new access data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Update temporal access pattern
    metadata["temporal_access"][obj.key] = cache_snapshot.access_count

    # Incrementally adjust the filter score
    metadata["filter_scores"][obj.key] = metadata["filter_scores"].get(obj.key, DEFAULT_FILTER_SCORE) + 1.0

    # Refine the predictive context vector
    context_vector = metadata["context_vectors"].get(obj.key, DEFAULT_CONTEXT_VECTOR)
    metadata["context_vectors"][obj.key] = [v * CONTEXT_VECTOR_DECAY + 1.0 for v in context_vector]

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the recursive index tree is expanded or updated to include the new temporal pattern, the stochastic filter score is initialized based on the object's initial access frequency, and the predictive context vector is seeded with default or inferred values.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Initialize temporal access pattern
    metadata["temporal_access"][obj.key] = cache_snapshot.access_count

    # Initialize filter score
    metadata["filter_scores"][obj.key] = DEFAULT_FILTER_SCORE

    # Seed the predictive context vector
    metadata["context_vectors"][obj.key] = DEFAULT_CONTEXT_VECTOR[:]

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After eviction, the recursive index tree is pruned to remove the evicted object's temporal pattern, the stochastic filter scores of remaining objects are rebalanced, and the predictive context vector is recalibrated to account for the removal's impact on future predictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Prune the evicted object's metadata
    if evicted_obj.key in metadata["temporal_access"]:
        del metadata["temporal_access"][evicted_obj.key]
    if evicted_obj.key in metadata["filter_scores"]:
        del metadata["filter_scores"][evicted_obj.key]
    if evicted_obj.key in metadata["context_vectors"]:
        del metadata["context_vectors"][evicted_obj.key]

    # Rebalance filter scores for remaining objects
    for key in metadata["filter_scores"]:
        metadata["filter_scores"][key] *= FILTER_SCORE_DECAY

    # Recalibrate predictive context vectors
    for key in metadata["context_vectors"]:
        metadata["context_vectors"][key] = [v * CONTEXT_VECTOR_DECAY for v in metadata["context_vectors"][key]]