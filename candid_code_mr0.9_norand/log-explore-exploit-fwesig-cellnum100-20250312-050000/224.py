# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
DEFAULT_PI = 1.0  # Default Predictive Index for new objects
DEFAULT_DRF = 1.0  # Default Dynamic Rescaling Factor
DEFAULT_LRS = 1.0  # Default Latency Rebalancing Score
CONTEXTUAL_WEIGHT = 0.5  # Weight for contextual relevance in eviction decision
LATENCY_WEIGHT = 0.5  # Weight for latency impact in eviction decision

# Put the metadata specifically maintained by the policy below. The policy maintains a Predictive Index (PI) for each object, which estimates future access probability based on historical patterns and contextual factors. It also tracks a Dynamic Rescaling Factor (DRF) to adjust the weight of recent access patterns, a Contextual Inference Map (CIM) to correlate object usage with external context signals, and a Latency Rebalancing Score (LRS) to prioritize objects based on their retrieval latency impact.
metadata = {
    "PI": {},  # Predictive Index for each object (key -> PI value)
    "DRF": DEFAULT_DRF,  # Dynamic Rescaling Factor
    "CIM": {},  # Contextual Inference Map (key -> contextual relevance score)
    "LRS": {},  # Latency Rebalancing Score (key -> LRS value)
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the eviction victim by combining the Predictive Index (lower values are less likely to be accessed), the Contextual Inference Map (objects with weak contextual relevance are deprioritized), and the Latency Rebalancing Score (objects with lower latency impact are preferred for eviction). The Dynamic Rescaling Factor ensures recent trends are weighted appropriately in the decision.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    # Your code below
    min_score = float('inf')
    for key, cached_obj in cache_snapshot.cache.items():
        pi = metadata["PI"].get(key, DEFAULT_PI)
        cim = metadata["CIM"].get(key, 0)
        lrs = metadata["LRS"].get(key, DEFAULT_LRS)
        score = (pi * metadata["DRF"]) + (CONTEXTUAL_WEIGHT * cim) + (LATENCY_WEIGHT * lrs)
        if score < min_score:
            min_score = score
            candid_obj_key = key
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the Predictive Index of the accessed object is increased to reflect higher future access probability. The Dynamic Rescaling Factor is adjusted to amplify the weight of this hit in recent trends. The Contextual Inference Map is updated to strengthen the correlation between the object and the current context. The Latency Rebalancing Score is recalculated to reflect the reduced urgency of this object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata["PI"][key] = metadata["PI"].get(key, DEFAULT_PI) + 1
    metadata["DRF"] *= 1.1  # Amplify recent trends
    metadata["CIM"][key] = metadata["CIM"].get(key, 0) + 1  # Strengthen context correlation
    metadata["LRS"][key] = max(metadata["LRS"].get(key, DEFAULT_LRS) - 0.1, 0)  # Reduce urgency

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its Predictive Index is initialized based on historical and contextual data. The Dynamic Rescaling Factor is adjusted to account for the new addition's impact on recent trends. The Contextual Inference Map is updated to include the new object and its initial context correlations. The Latency Rebalancing Score is set based on the expected retrieval latency of the object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    # Your code below
    key = obj.key
    metadata["PI"][key] = DEFAULT_PI
    metadata["DRF"] *= 0.9  # Adjust for new addition
    metadata["CIM"][key] = 1  # Initialize context correlation
    metadata["LRS"][key] = DEFAULT_LRS  # Set initial latency score

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the Predictive Index of remaining objects is recalibrated to redistribute probabilities. The Dynamic Rescaling Factor is adjusted to reflect the reduced cache size. The Contextual Inference Map is pruned to remove correlations involving the evicted object. The Latency Rebalancing Scores of remaining objects are updated to account for the eviction's impact on overall latency balance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Your code below
    evicted_key = evicted_obj.key
    if evicted_key in metadata["PI"]:
        del metadata["PI"][evicted_key]
    if evicted_key in metadata["CIM"]:
        del metadata["CIM"][evicted_key]
    if evicted_key in metadata["LRS"]:
        del metadata["LRS"][evicted_key]
    metadata["DRF"] *= 0.95  # Adjust for reduced cache size
    for key in metadata["LRS"]:
        metadata["LRS"][key] += 0.1  # Rebalance latency scores