# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
PREDICTIVE_WEIGHT = 0.4
LATENCY_WEIGHT = 0.3
SEMANTIC_WEIGHT = 0.2
ENTROPY_WEIGHT = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains a predictive score for each object based on access patterns (Predictive Inference), a latency calibration factor to prioritize low-latency retrievals, a semantic relevance score derived from object relationships (Semantic Diffusion), and an entropy-based measure of access unpredictability (Entropic Prioritization).
metadata = {
    # Example structure:
    # obj_key: {
    #     "predictive_score": float,
    #     "latency_factor": float,
    #     "semantic_relevance": float,
    #     "entropy": float
    # }
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy evicts the object with the lowest combined score, calculated as a weighted sum of predictive score, latency calibration factor, semantic relevance, and entropy. Objects with low semantic relevance and high entropy are deprioritized for retention.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for obj_key, cached_obj in cache_snapshot.cache.items():
        obj_metadata = metadata[obj_key]
        combined_score = (
            PREDICTIVE_WEIGHT * obj_metadata["predictive_score"] +
            LATENCY_WEIGHT * obj_metadata["latency_factor"] +
            SEMANTIC_WEIGHT * obj_metadata["semantic_relevance"] +
            ENTROPY_WEIGHT * obj_metadata["entropy"]
        )
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = obj_key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    On a cache hit, the predictive score of the object is increased based on recent access patterns, the latency calibration factor is adjusted to reflect the observed retrieval time, the semantic relevance score is diffused to related objects, and the entropy measure is recalculated to reflect reduced unpredictability.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    obj_metadata = metadata[obj.key]
    obj_metadata["predictive_score"] += 1  # Increase predictive score
    obj_metadata["latency_factor"] *= 0.9  # Adjust latency factor (example: reduce by 10%)
    obj_metadata["entropy"] *= 0.8  # Reduce entropy to reflect reduced unpredictability

    # Diffuse semantic relevance to related objects
    for related_key, related_obj in cache_snapshot.cache.items():
        if related_key != obj.key:
            metadata[related_key]["semantic_relevance"] += 0.1 * obj_metadata["semantic_relevance"]

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its predictive score is initialized based on historical patterns, its latency calibration factor is set using initial retrieval latency, its semantic relevance is computed based on relationships with existing objects, and its entropy is set to a high value to reflect initial uncertainty.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        "predictive_score": 1.0,  # Initialize predictive score
        "latency_factor": 1.0,  # Initial latency factor
        "semantic_relevance": 0.0,  # Compute semantic relevance
        "entropy": 1.0  # High initial entropy
    }

    # Compute semantic relevance based on relationships with existing objects
    for related_key, related_obj in cache_snapshot.cache.items():
        metadata[obj.key]["semantic_relevance"] += 0.1  # Example: Add a small relevance score
        metadata[related_key]["semantic_relevance"] += 0.1  # Update related objects' relevance

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After eviction, the policy recalibrates the weights of the remaining objects' metadata to ensure balance, reduces the semantic relevance of the evicted objectâ€™s related items, and adjusts the entropy of the remaining objects to reflect the reduced cache diversity.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    for obj_key, obj_metadata in metadata.items():
        if obj_key in cache_snapshot.cache:
            obj_metadata["predictive_score"] *= 0.95  # Recalibrate predictive score
            obj_metadata["entropy"] *= 1.1  # Adjust entropy to reflect reduced diversity

    # Reduce semantic relevance of evicted object's related items
    if evicted_obj.key in metadata:
        evicted_relevance = metadata[evicted_obj.key]["semantic_relevance"]
        for obj_key in cache_snapshot.cache:
            metadata[obj_key]["semantic_relevance"] -= 0.1 * evicted_relevance

    # Remove metadata for evicted object
    if evicted_obj.key in metadata:
        del metadata[evicted_obj.key]