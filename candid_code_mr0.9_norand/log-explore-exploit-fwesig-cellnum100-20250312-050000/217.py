# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
CS_INCREMENT_ON_HIT = 1.0
EW_DECREMENT_ON_HIT = 0.1
EW_INCREMENT_ON_EVICT = 0.05
TS_RECENCY_WEIGHT = 0.7
TS_FREQUENCY_WEIGHT = 0.3
INITIAL_EW = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains a Contextual Score (CS) for each object, derived from its access patterns and contextual relevance, an Entropic Weight (EW) that measures the uncertainty of future accesses, a Predictive Drift (PD) that tracks deviation from predicted access patterns, and a Temporal Synthesis (TS) value that combines recency and frequency into a unified temporal metric.
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the object with the lowest combined score of (CS * EW) - PD + TS for eviction, prioritizing objects with low contextual relevance, high uncertainty, and low temporal importance while accounting for predictive deviations.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        cs = metadata[key]['CS']
        ew = metadata[key]['EW']
        pd = metadata[key]['PD']
        ts = metadata[key]['TS']
        score = (cs * ew) - pd + ts
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    On a cache hit, the CS is increased based on the contextual relevance of the access, the EW is adjusted to reduce uncertainty, the PD is recalibrated to reflect the accuracy of the prediction, and the TS is updated to emphasize the recency of the hit.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata[key]['CS'] += CS_INCREMENT_ON_HIT
    metadata[key]['EW'] = max(0, metadata[key]['EW'] - EW_DECREMENT_ON_HIT)
    metadata[key]['PD'] = 0  # Reset PD as the prediction was accurate
    metadata[key]['TS'] = (TS_RECENCY_WEIGHT * cache_snapshot.access_count +
                           TS_FREQUENCY_WEIGHT * (metadata[key].get('frequency', 0) + 1))
    metadata[key]['frequency'] = metadata[key].get('frequency', 0) + 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After insertion, the CS is initialized based on the context of the insertion, the EW is set to a high uncertainty value, the PD is initialized to zero to indicate no drift yet, and the TS is set to prioritize the new object's recency and potential frequency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata[key] = {
        'CS': 1.0,  # Initial contextual score
        'EW': INITIAL_EW,  # High uncertainty
        'PD': 0.0,  # No drift yet
        'TS': TS_RECENCY_WEIGHT * cache_snapshot.access_count,  # Emphasize recency
        'frequency': 1  # Initial frequency
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After eviction, the metadata of the evicted object is logged for future learning, and the EW of remaining objects is slightly increased to reflect the increased uncertainty in the cache's predictive model due to the eviction.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in metadata:
        del metadata[evicted_key]  # Log and remove metadata of evicted object
    
    for key in cache_snapshot.cache.keys():
        metadata[key]['EW'] += EW_INCREMENT_ON_EVICT  # Increase uncertainty for remaining objects