# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below
INITIAL_UAS = 50
BASELINE_SATD = 10
BALANCED_RPI = 0.5
UAS_INCREMENT = 10
SATD_INCREMENT_GLOBAL = 5
RPI_RECALIBRATION_FACTOR = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains a Unified Access Score (UAS) that combines Temporal Fusion Score (TFS) and Gradient Encoding, a Dynamic Contextual Synchrony (DCS) that merges Contextual Profile and Predictive Synchrony, a Shift-Aware Temporal Divergence (SATD) that integrates Adaptive Drift Counter and Temporal Divergence, and a Retention Probability Index (RPI) that blends Cognitive Resonance Index (CRI) and Probabilistic Allocation.
metadata = {
    "UAS": defaultdict(lambda: INITIAL_UAS),  # Unified Access Score
    "DCS": defaultdict(lambda: 1.0),         # Dynamic Contextual Synchrony
    "SATD": defaultdict(lambda: BASELINE_SATD),  # Shift-Aware Temporal Divergence
    "RPI": defaultdict(lambda: BALANCED_RPI)    # Retention Probability Index
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the eviction victim by identifying the object with the lowest Unified Access Score (UAS), adjusted by Shift-Aware Temporal Divergence (SATD) to deprioritize stale or misaligned patterns, and further weighted by Dynamic Contextual Synchrony (DCS) to account for alignment with workload patterns. Retention Probability Index (RPI) introduces a probabilistic element to break ties and promote diversity.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        uas = metadata["UAS"][key]
        satd = metadata["SATD"][key]
        dcs = metadata["DCS"][key]
        rpi = metadata["RPI"][key]

        # Calculate the eviction score
        eviction_score = (uas + satd) / dcs * (1 - rpi)

        # Select the object with the lowest eviction score
        if eviction_score < min_score:
            min_score = eviction_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, Unified Access Score (UAS) is incremented to reflect increased recency and frequency, Dynamic Contextual Synchrony (DCS) is updated to refine alignment with workload patterns, Shift-Aware Temporal Divergence (SATD) is reset to zero for the accessed object, and Retention Probability Index (RPI) is recalculated to increase retention likelihood.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    metadata["UAS"][key] += UAS_INCREMENT
    metadata["DCS"][key] *= 1.1  # Refine alignment with workload patterns
    metadata["SATD"][key] = 0  # Reset SATD
    metadata["RPI"][key] = min(1.0, metadata["RPI"][key] + RPI_RECALIBRATION_FACTOR)  # Increase retention likelihood

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, Unified Access Score (UAS) is initialized to a moderate value, Dynamic Contextual Synchrony (DCS) is updated to include the new objectâ€™s context, Shift-Aware Temporal Divergence (SATD) is set to a baseline value, and Retention Probability Index (RPI) is initialized with a balanced retention probability.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    metadata["UAS"][key] = INITIAL_UAS
    metadata["DCS"][key] = 1.0  # Initialize DCS
    metadata["SATD"][key] = BASELINE_SATD
    metadata["RPI"][key] = BALANCED_RPI

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, Unified Access Score (UAS) of remaining objects is recalibrated to account for the updated cache state, Dynamic Contextual Synchrony (DCS) is adjusted to deprioritize patterns associated with the evicted object, Shift-Aware Temporal Divergence (SATD) is incremented globally to reflect potential shifts in workload, and Retention Probability Index (RPI) is redistributed to maintain balance in retention probabilities.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key

    # Recalibrate UAS for remaining objects
    for key in cache_snapshot.cache:
        metadata["UAS"][key] = max(1, metadata["UAS"][key] - 1)

    # Adjust DCS to deprioritize patterns associated with the evicted object
    for key in cache_snapshot.cache:
        metadata["DCS"][key] *= 0.9

    # Increment SATD globally
    for key in cache_snapshot.cache:
        metadata["SATD"][key] += SATD_INCREMENT_GLOBAL

    # Redistribute RPI
    total_rpi = sum(metadata["RPI"][key] for key in cache_snapshot.cache)
    for key in cache_snapshot.cache:
        metadata["RPI"][key] = metadata["RPI"][key] / total_rpi