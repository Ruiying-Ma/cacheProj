# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import deque

# Put tunable constant parameters below
BASE_RECURSIVE_ALLOCATION_COUNTER = 1
PREDICTIVE_GRADIENT_SCORE_INIT = 1.0
ENTROPY_SYNC_BASE = 1.0
GRADIENT_SCORE_INCREMENT = 0.5
NORMALIZATION_FACTOR = 1.0

# Put the metadata specifically maintained by the policy below. The policy maintains a predictive gradient score for each cache entry, a dynamic pipeline of access patterns, an entropy synchronization value to measure randomness in access patterns, and a recursive allocation counter to track hierarchical usage trends.
metadata = {
    "predictive_gradient_scores": {},  # Maps obj.key -> predictive gradient score
    "dynamic_pipeline": deque(),  # Maintains the order of access patterns
    "entropy_sync_value": ENTROPY_SYNC_BASE,  # Entropy synchronization value
    "recursive_allocation_counters": {},  # Maps obj.key -> recursive allocation counter
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by identifying the entry with the lowest predictive gradient score, adjusted by the entropy synchronization value to account for randomness, and prioritizes entries with low recursive allocation counters to preserve hierarchical usage trends.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        # Calculate the adjusted score
        score = metadata["predictive_gradient_scores"][key] - metadata["entropy_sync_value"]
        # Prioritize low recursive allocation counters
        score -= metadata["recursive_allocation_counters"][key]
        # Find the object with the lowest score
        if score < min_score:
            min_score = score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the predictive gradient score of the accessed entry is increased based on its position in the dynamic pipeline, the entropy synchronization value is recalculated to reflect the updated access pattern, and the recursive allocation counter is incremented to reinforce its hierarchical importance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key

    # Increase the predictive gradient score
    metadata["predictive_gradient_scores"][key] += GRADIENT_SCORE_INCREMENT

    # Update the dynamic pipeline
    if key in metadata["dynamic_pipeline"]:
        metadata["dynamic_pipeline"].remove(key)
    metadata["dynamic_pipeline"].append(key)

    # Recalculate the entropy synchronization value
    metadata["entropy_sync_value"] = ENTROPY_SYNC_BASE + len(metadata["dynamic_pipeline"])

    # Increment the recursive allocation counter
    metadata["recursive_allocation_counters"][key] += 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the predictive gradient score is initialized based on the object's predicted future access frequency, the dynamic pipeline is updated to include the new access pattern, the entropy synchronization value is recalibrated, and the recursive allocation counter is set to a baseline value.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key

    # Initialize the predictive gradient score
    metadata["predictive_gradient_scores"][key] = PREDICTIVE_GRADIENT_SCORE_INIT

    # Update the dynamic pipeline
    metadata["dynamic_pipeline"].append(key)

    # Recalculate the entropy synchronization value
    metadata["entropy_sync_value"] = ENTROPY_SYNC_BASE + len(metadata["dynamic_pipeline"])

    # Set the recursive allocation counter to a baseline value
    metadata["recursive_allocation_counters"][key] = BASE_RECURSIVE_ALLOCATION_COUNTER

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a victim, the predictive gradient scores of remaining entries are normalized, the dynamic pipeline is adjusted to remove the evicted entry's influence, the entropy synchronization value is recalculated to reflect the new state, and the recursive allocation counters are decremented for entries that were indirectly dependent on the evicted entry.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key

    # Normalize the predictive gradient scores
    total_score = sum(metadata["predictive_gradient_scores"].values())
    if total_score > 0:
        for key in metadata["predictive_gradient_scores"]:
            metadata["predictive_gradient_scores"][key] /= total_score

    # Adjust the dynamic pipeline
    if evicted_key in metadata["dynamic_pipeline"]:
        metadata["dynamic_pipeline"].remove(evicted_key)

    # Recalculate the entropy synchronization value
    metadata["entropy_sync_value"] = ENTROPY_SYNC_BASE + len(metadata["dynamic_pipeline"])

    # Decrement the recursive allocation counters
    for key in metadata["recursive_allocation_counters"]:
        metadata["recursive_allocation_counters"][key] = max(
            0, metadata["recursive_allocation_counters"][key] - 1
        )