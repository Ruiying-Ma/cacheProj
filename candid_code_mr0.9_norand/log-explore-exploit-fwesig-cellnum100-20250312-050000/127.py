# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict, deque

# Put tunable constant parameters below
BASELINE_TFC = 1
INITIAL_PRS = 1
PRS_INCREMENT = 1
TFC_INCREMENT = 1

# Put the metadata specifically maintained by the policy below. The policy maintains a Semantic Fusion Map (SFM) that clusters cached objects based on semantic similarity, a Predictive Resonance Score (PRS) for each object indicating its likelihood of future access, a Temporal Flux Counter (TFC) to track dynamic access patterns over time, and a Hierarchical Encoding Tree (HET) to organize objects by their contextual importance and relationships.
SFM = defaultdict(set)  # Semantic Fusion Map: cluster_id -> set of object keys
PRS = {}  # Predictive Resonance Score: obj.key -> score
TFC = {}  # Temporal Flux Counter: obj.key -> counter
HET = {}  # Hierarchical Encoding Tree: obj.key -> contextual importance

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by identifying the object with the lowest combined score of PRS and TFC within its cluster in the SFM, while also considering the object's position in the HET to preserve higher-contextual-importance objects.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    # Iterate through all objects in the cache
    for cluster_id, obj_keys in SFM.items():
        for obj_key in obj_keys:
            if obj_key in cache_snapshot.cache:
                combined_score = PRS[obj_key] + TFC[obj_key]
                # Consider HET importance (lower importance is prioritized for eviction)
                if combined_score < min_score or (combined_score == min_score and HET[obj_key] < HET.get(candid_obj_key, float('inf'))):
                    min_score = combined_score
                    candid_obj_key = obj_key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the PRS of the accessed object is increased based on its recent access frequency and temporal proximity to related objects in the SFM, the TFC is incremented to reflect temporal relevance, and the HET is adjusted to elevate the object's position if its contextual importance has increased.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    obj_key = obj.key

    # Increase PRS based on recent access
    PRS[obj_key] += PRS_INCREMENT

    # Increment TFC to reflect temporal relevance
    TFC[obj_key] += TFC_INCREMENT

    # Adjust HET to elevate the object's position
    HET[obj_key] = HET.get(obj_key, 0) + 1

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the SFM is updated to integrate the object into the appropriate semantic cluster, the PRS is initialized based on predictive modeling of its expected access patterns, the TFC is set to a baseline value, and the HET is updated to position the object according to its initial contextual importance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    obj_key = obj.key

    # Integrate the object into the appropriate semantic cluster
    cluster_id = hash(obj_key) % 10  # Example clustering logic
    SFM[cluster_id].add(obj_key)

    # Initialize PRS
    PRS[obj_key] = INITIAL_PRS

    # Set TFC to a baseline value
    TFC[obj_key] = BASELINE_TFC

    # Update HET to position the object
    HET[obj_key] = 0  # Initial contextual importance

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the SFM is rebalanced to account for the removed object, the PRS and TFC of related objects are slightly adjusted to reflect the change in cluster dynamics, and the HET is pruned or reorganized to maintain its hierarchical structure.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key

    # Remove the evicted object from the SFM
    for cluster_id, obj_keys in SFM.items():
        if evicted_key in obj_keys:
            obj_keys.remove(evicted_key)
            break

    # Adjust PRS and TFC of related objects
    for cluster_id, obj_keys in SFM.items():
        for obj_key in obj_keys:
            PRS[obj_key] = max(PRS[obj_key] - 1, 0)  # Decrease PRS slightly
            TFC[obj_key] = max(TFC[obj_key] - 1, 0)  # Decrease TFC slightly

    # Prune or reorganize the HET
    if evicted_key in HET:
        del HET[evicted_key]