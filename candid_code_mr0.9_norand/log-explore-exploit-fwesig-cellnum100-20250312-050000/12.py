# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
DEFAULT_LOCALITY_SCORE = 50
DEFAULT_WRITE_BACK_URGENCY = 10
DEFAULT_PREFETCH_CONFIDENCE = 30
MEMORY_BANK_COUNT = 4
WEIGHT_INVERSE_LOCALITY = 0.5
WEIGHT_WRITE_BACK_URGENCY = 0.3
WEIGHT_PREFETCH_CONFIDENCE = 0.2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each cache line, including a locality score (based on recent access patterns), a write-back urgency score (indicating how critical it is to write the data back to memory), a prefetch confidence score (indicating how likely the data will be reused soon), and a memory interleaving index (to track which memory bank the data belongs to).
metadata = {}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy chooses the eviction victim by calculating a composite score for each cache line, which is a weighted sum of the inverse locality score, write-back urgency score, and prefetch confidence score. Cache lines with low locality, low prefetch confidence, and low write-back urgency are prioritized for eviction. Memory interleaving is used to ensure even distribution of evictions across memory banks.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    memory_bank_usage = {i: 0 for i in range(MEMORY_BANK_COUNT)}

    # Calculate memory bank usage
    for cached_obj in cache_snapshot.cache.values():
        memory_bank_usage[metadata[cached_obj.key]['memory_interleaving_index']] += 1

    # Find the object with the lowest composite score
    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        composite_score = (
            WEIGHT_INVERSE_LOCALITY * (1 / (meta['locality_score'] + 1)) +
            WEIGHT_WRITE_BACK_URGENCY * meta['write_back_urgency'] +
            WEIGHT_PREFETCH_CONFIDENCE * (1 / (meta['prefetch_confidence'] + 1))
        )
        # Penalize objects in overused memory banks
        composite_score += memory_bank_usage[meta['memory_interleaving_index']]

        if composite_score < min_score:
            min_score = composite_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    On a cache hit, the locality score of the accessed cache line is increased, the prefetch confidence score is updated based on the access pattern, and the write-back urgency score is slightly decreased to reflect reduced criticality. The memory interleaving index remains unchanged.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta['locality_score'] += 10  # Increase locality score
    meta['prefetch_confidence'] += 5  # Update prefetch confidence
    meta['write_back_urgency'] = max(0, meta['write_back_urgency'] - 1)  # Decrease write-back urgency

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the locality score is initialized to a medium value, the prefetch confidence score is set based on the prefetch algorithm's prediction, the write-back urgency score is set to a default low value, and the memory interleaving index is assigned based on the object's memory bank.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    memory_interleaving_index = hash(obj.key) % MEMORY_BANK_COUNT
    metadata[obj.key] = {
        'locality_score': DEFAULT_LOCALITY_SCORE,
        'write_back_urgency': DEFAULT_WRITE_BACK_URGENCY,
        'prefetch_confidence': DEFAULT_PREFETCH_CONFIDENCE,
        'memory_interleaving_index': memory_interleaving_index
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting a cache line, the policy recalculates the memory interleaving distribution to ensure balance, adjusts the weights used in the composite score calculation based on recent eviction patterns, and updates global statistics to refine future prefetch confidence predictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    # Remove metadata for the evicted object
    if evicted_obj.key in metadata:
        del metadata[evicted_obj.key]

    # Recalculate memory interleaving distribution (optional: adjust weights if needed)
    memory_bank_usage = {i: 0 for i in range(MEMORY_BANK_COUNT)}
    for cached_obj in cache_snapshot.cache.values():
        memory_bank_usage[metadata[cached_obj.key]['memory_interleaving_index']] += 1

    # Adjust weights based on memory bank usage (optional, not implemented here)