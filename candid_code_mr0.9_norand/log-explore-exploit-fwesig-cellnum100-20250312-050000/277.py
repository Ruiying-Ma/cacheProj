# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
import numpy as np

# Put tunable constant parameters below
TPS_WEIGHT = 0.5
PBS_WEIGHT = 0.3
GOW_WEIGHT = 0.2
INITIAL_GOW = 1.0  # Neutral value for GOW
INITIAL_PBS = 0.5  # Default predictive bias score
ENTANGLEMENT_PENALTY = 0.1  # Penalty for strong connections to frequently accessed nodes

# Put the metadata specifically maintained by the policy below. The policy maintains a recursive entanglement graph (REG) where each cached object is a node connected to other nodes based on access patterns. Each node stores a temporal priority score (TPS) based on recent access timestamps, a predictive bias score (PBS) derived from machine learning predictions of future accesses, and a gradient optimization weight (GOW) that adjusts eviction likelihood dynamically based on past decisions.
REG = {}  # Recursive Entanglement Graph: {key: {"TPS": float, "PBS": float, "GOW": float, "connections": set}}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the eviction victim by identifying the node with the lowest combined score, calculated as a weighted sum of TPS, PBS, and GOW. Recursive entanglement is used to penalize nodes that are strongly connected to frequently accessed nodes, ensuring the eviction decision considers the broader access context.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for key, node in REG.items():
        # Calculate the combined score
        combined_score = (
            TPS_WEIGHT * node["TPS"] +
            PBS_WEIGHT * node["PBS"] +
            GOW_WEIGHT * node["GOW"]
        )
        
        # Apply entanglement penalty
        for connected_key in node["connections"]:
            if connected_key in cache_snapshot.cache:
                combined_score += ENTANGLEMENT_PENALTY * REG[connected_key]["TPS"]

        # Find the node with the lowest score
        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the TPS of the accessed node is updated to reflect the current timestamp, the PBS is adjusted using a predictive model trained on recent access patterns, and the GOW is fine-tuned using gradient optimization to reduce the likelihood of future mispredictions for similar access scenarios.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    if key in REG:
        # Update TPS to the current timestamp
        REG[key]["TPS"] = cache_snapshot.access_count

        # Adjust PBS (simplified as a decay model for demonstration purposes)
        REG[key]["PBS"] = min(1.0, REG[key]["PBS"] + 0.1)

        # Fine-tune GOW (simplified gradient adjustment)
        REG[key]["GOW"] = max(0.0, REG[key]["GOW"] - 0.05)

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, a new node is added to the REG with initial TPS set to the current timestamp, PBS initialized using the predictive model, and GOW set to a neutral value. Connections to other nodes are established based on observed access correlations.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    if key not in REG:
        # Add a new node to the REG
        REG[key] = {
            "TPS": cache_snapshot.access_count,
            "PBS": INITIAL_PBS,
            "GOW": INITIAL_GOW,
            "connections": set()
        }

    # Establish connections based on observed access correlations
    for other_key in cache_snapshot.cache:
        if other_key != key:
            REG[key]["connections"].add(other_key)
            REG[other_key]["connections"].add(key)

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After eviction, the REG is updated to remove the evicted node and its connections. The GOW of remaining nodes is adjusted using gradient optimization to minimize the impact of the eviction on future cache performance, and the predictive model is retrained to incorporate the eviction decision.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in REG:
        # Remove the evicted node and its connections
        for connected_key in REG[evicted_key]["connections"]:
            if connected_key in REG:
                REG[connected_key]["connections"].discard(evicted_key)
        del REG[evicted_key]

    # Adjust GOW of remaining nodes (simplified gradient adjustment)
    for key, node in REG.items():
        node["GOW"] = max(0.0, node["GOW"] + 0.05)