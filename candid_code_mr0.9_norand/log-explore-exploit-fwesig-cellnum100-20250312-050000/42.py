# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.
from collections import defaultdict

# Put tunable constant parameters below
DEFAULT_AGING_FACTOR = 1.0  # Default aging factor for new objects
AGING_DECAY_RATE = 0.9  # Rate at which aging factors decay over time

# Put the metadata specifically maintained by the policy below. The policy maintains a histogram of access frequencies for all cache objects, an aging factor for each object to decay its priority over time, and a priority score that combines locality, frequency, and aging. Additionally, it tracks a global histogram balance metric to ensure fair distribution of cache resources.
frequency_histogram = defaultdict(int)  # Tracks access frequencies of objects
aging_factors = defaultdict(lambda: DEFAULT_AGING_FACTOR)  # Tracks aging factors for objects
priority_scores = {}  # Tracks priority scores for objects
global_histogram_balance = 0  # Tracks the global histogram balance metric
last_access_time = {}  # Tracks the last access time for objects

def calculate_priority_score(key):
    '''
    Helper function to calculate the priority score for a given object key.
    Priority score = frequency * aging factor / global histogram balance
    '''
    frequency = frequency_histogram[key]
    aging_factor = aging_factors[key]
    if global_histogram_balance == 0:
        return float('inf')  # Avoid division by zero
    return (frequency * aging_factor) / global_histogram_balance

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the eviction victim by identifying the object with the lowest priority score, factoring in its decayed frequency and histogram balance. If multiple candidates exist, it chooses the one least recently used to preserve locality.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_priority_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        priority_score = priority_scores[key]
        if priority_score < min_priority_score or (priority_score == min_priority_score and last_access_time[key] < last_access_time.get(candid_obj_key, float('inf'))):
            min_priority_score = priority_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    On a cache hit, the object's frequency in the histogram is incremented, its aging factor is reset to prevent immediate decay, and its priority score is recalculated. The global histogram balance is updated to reflect the new frequency distribution.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    frequency_histogram[key] += 1
    aging_factors[key] = DEFAULT_AGING_FACTOR  # Reset aging factor
    priority_scores[key] = calculate_priority_score(key)
    global global_histogram_balance
    global_histogram_balance = sum(frequency_histogram.values())
    last_access_time[key] = cache_snapshot.access_count

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, its frequency is initialized to 1, its aging factor is set to a default value, and its priority score is calculated. The global histogram balance is updated to account for the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    frequency_histogram[key] = 1
    aging_factors[key] = DEFAULT_AGING_FACTOR
    priority_scores[key] = calculate_priority_score(key)
    global global_histogram_balance
    global_histogram_balance = sum(frequency_histogram.values())
    last_access_time[key] = cache_snapshot.access_count

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After eviction, the evicted object's frequency is removed from the histogram, its contribution to the global histogram balance is subtracted, and the balance metric is recalculated to reflect the updated cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    if evicted_key in frequency_histogram:
        del frequency_histogram[evicted_key]
    if evicted_key in aging_factors:
        del aging_factors[evicted_key]
    if evicted_key in priority_scores:
        del priority_scores[evicted_key]
    if evicted_key in last_access_time:
        del last_access_time[evicted_key]
    global global_histogram_balance
    global_histogram_balance = sum(frequency_histogram.values())