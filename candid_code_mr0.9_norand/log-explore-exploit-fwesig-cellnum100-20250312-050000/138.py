# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
BASELINE_RECURSIVE_HEURISTIC = 1.0
HIGH_ENTROPY = 100.0
NEUTRAL_GRADIENT = 0.0
WEIGHT_RECURSIVE_HEURISTIC = 0.5
WEIGHT_ENTROPY = 0.3
WEIGHT_GRADIENT = 0.2
PREDICTIVE_SYNC_ADJUSTMENT = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains a recursive heuristic score for each object, an entropy score representing access unpredictability, a predictive synchronization timestamp for future access estimation, and a gradient threshold value to track recent access trends.
metadata = {
    # Stores metadata for each object in the cache
    # Format: {obj.key: {"recursive_heuristic": float, "entropy": float, "predictive_sync": float, "gradient": float}}
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the eviction victim by identifying the object with the lowest combined score derived from a weighted sum of the recursive heuristic, entropy score, and gradient threshold, adjusted by the predictive synchronization timestamp to account for imminent access likelihood.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')

    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        combined_score = (
            WEIGHT_RECURSIVE_HEURISTIC * meta["recursive_heuristic"] +
            WEIGHT_ENTROPY * meta["entropy"] +
            WEIGHT_GRADIENT * meta["gradient"]
        ) - PREDICTIVE_SYNC_ADJUSTMENT * meta["predictive_sync"]

        if combined_score < min_score:
            min_score = combined_score
            candid_obj_key = key

    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the recursive heuristic score is incrementally adjusted based on the object's current score and recent access patterns, the entropy score is recalculated to reflect reduced unpredictability, the predictive synchronization timestamp is updated to anticipate the next access, and the gradient threshold is recalibrated to reflect the steepness of recent access frequency changes.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    meta = metadata[obj.key]
    meta["recursive_heuristic"] += 1  # Increment heuristic score
    meta["entropy"] *= 0.9  # Reduce entropy to reflect reduced unpredictability
    meta["predictive_sync"] = cache_snapshot.access_count + obj.size  # Update predictive sync
    meta["gradient"] = (meta["gradient"] + 1) / 2  # Recalibrate gradient

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the recursive heuristic score is initialized to a baseline value, the entropy score is set to a high value to reflect initial uncertainty, the predictive synchronization timestamp is estimated based on historical patterns of similar objects, and the gradient threshold is initialized to a neutral value to allow rapid adaptation.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    metadata[obj.key] = {
        "recursive_heuristic": BASELINE_RECURSIVE_HEURISTIC,
        "entropy": HIGH_ENTROPY,
        "predictive_sync": cache_snapshot.access_count + obj.size,
        "gradient": NEUTRAL_GRADIENT
    }

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the policy recalibrates the gradient threshold for remaining objects to account for the removal's impact on access trends, adjusts entropy scores to reflect the reduced cache diversity, and updates predictive synchronization timestamps to deprioritize objects with similar access patterns to the evicted one.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_meta = metadata.pop(evicted_obj.key, None)

    for key, cached_obj in cache_snapshot.cache.items():
        meta = metadata[key]
        meta["gradient"] *= 0.9  # Recalibrate gradient
        meta["entropy"] *= 1.1  # Adjust entropy to reflect reduced diversity
        if evicted_meta:
            meta["predictive_sync"] -= PREDICTIVE_SYNC_ADJUSTMENT  # Deprioritize similar patterns