# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ALPHA = 0.1  # Weight for temporal gradient in eviction decision
BETA = 0.2   # Weight for contextual synchronization vector in eviction decision
GAMMA = 0.7  # Weight for stochastic priority score in eviction decision
DELTA = 0.05 # Increment for adaptive heuristic scaling factor after a hit
EPSILON = 0.01 # Adjustment factor for recalibration after eviction

# Put the metadata specifically maintained by the policy below. The policy maintains a stochastic priority score for each cache object, a contextual synchronization vector that tracks object access patterns relative to workload phases, an adaptive heuristic scaling factor that adjusts eviction sensitivity, and a temporal gradient value that captures recent access trends over time.
metadata = {
    "priority_score": {},  # Maps obj.key to its stochastic priority score
    "sync_vector": {},     # Maps obj.key to its contextual synchronization vector
    "temporal_gradient": {},  # Maps obj.key to its temporal gradient value
    "heuristic_scaling": 1.0  # Adaptive heuristic scaling factor
}

def evict(cache_snapshot, obj):
    '''
    This function defines how the policy chooses the eviction victim.
    The policy selects the eviction victim by combining the stochastic priority score, contextual synchronization vector, and temporal gradient value into a weighted decision function, dynamically adjusted by the adaptive heuristic scaling factor to balance recency and frequency under current workload conditions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The new object that needs to be inserted into the cache.
    - Return:
        - `candid_obj_key`: The key of the cached object that will be evicted to make room for `obj`.
    '''
    candid_obj_key = None
    min_score = float('inf')
    
    for key, cached_obj in cache_snapshot.cache.items():
        # Calculate the weighted decision function
        score = (
            GAMMA * metadata["priority_score"].get(key, 0) +
            BETA * metadata["sync_vector"].get(key, 0) +
            ALPHA * metadata["temporal_gradient"].get(key, 0)
        ) * metadata["heuristic_scaling"]
        
        # Select the object with the minimum score for eviction
        if score < min_score:
            min_score = score
            candid_obj_key = key
    
    return candid_obj_key

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy update the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the stochastic priority score is refined using a probabilistic adjustment based on the temporal gradient, the contextual synchronization vector is updated to reflect the current workload phase, and the adaptive heuristic scaling factor is slightly increased to favor recency in future decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    key = obj.key
    # Refine the stochastic priority score
    metadata["priority_score"][key] = metadata["priority_score"].get(key, 0) + metadata["temporal_gradient"].get(key, 0)
    
    # Update the contextual synchronization vector
    metadata["sync_vector"][key] = cache_snapshot.access_count
    
    # Slightly increase the adaptive heuristic scaling factor
    metadata["heuristic_scaling"] += DELTA

def update_after_insert(cache_snapshot, obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after inserting a new object into the cache.
    After inserting a new object, the stochastic priority score is initialized with a random value within a bounded range, the contextual synchronization vector is updated to align with the current workload phase, and the temporal gradient is reset to reflect the most recent access time.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just inserted into the cache.
    - Return: `None`
    '''
    key = obj.key
    # Initialize the stochastic priority score deterministically (e.g., based on object size)
    metadata["priority_score"][key] = obj.size % 100  # Deterministic bounded value
    
    # Update the contextual synchronization vector
    metadata["sync_vector"][key] = cache_snapshot.access_count
    
    # Reset the temporal gradient
    metadata["temporal_gradient"][key] = cache_snapshot.access_count

def update_after_evict(cache_snapshot, obj, evicted_obj):
    '''
    This function defines how the policy updates the metadata it maintains immediately after evicting the victim.
    After evicting an object, the adaptive heuristic scaling factor is recalibrated to reduce sensitivity to the evicted object's metadata, and the contextual synchronization vector is adjusted to deprioritize patterns associated with the evicted object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object to be inserted into the cache.
        - `evicted_obj`: The object that was just evicted from the cache.
    - Return: `None`
    '''
    evicted_key = evicted_obj.key
    # Recalibrate the adaptive heuristic scaling factor
    metadata["heuristic_scaling"] -= EPSILON
    
    # Adjust the contextual synchronization vector
    if evicted_key in metadata["sync_vector"]:
        del metadata["sync_vector"][evicted_key]
    
    # Remove metadata for the evicted object
    if evicted_key in metadata["priority_score"]:
        del metadata["priority_score"][evicted_key]
    if evicted_key in metadata["temporal_gradient"]:
        del metadata["temporal_gradient"][evicted_key]