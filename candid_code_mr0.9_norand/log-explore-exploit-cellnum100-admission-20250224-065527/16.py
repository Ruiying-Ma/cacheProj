# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
REPLICATION_FACTOR_THRESHOLD = 3
CONSISTENCY_SCORE_THRESHOLD = 0.8
FAILURE_DETECTION_THRESHOLD = 2
RESOURCE_ALLOCATION_PRIORITY_THRESHOLD = 0.7

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each object including replication factor, consistency score, failure detection count, and resource allocation priority.
metadata = {}

def admit(cache_snapshot, obj, key_to_be_evicted):
    '''
    This function defines how the policy determines whether an object should be admitted into the cache.
    An object is admitted if its replication factor is below a threshold, its consistency score is high, its failure detection count is low, and it has a high resource allocation priority.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object being requested.
        - `key_to_be_evicted`: The key of the object in the cache that may be evicted if the currently requested object is admitted and triggers an eviction. If no admission occurs or if admission does not cause an eviction, this is set to `None`.
    - Return:
        - `should_admit`: A boolean value indicating whether the requested object should be admitted into the cache. If `True`, the object is admitted; if `False`, it is not.
    '''
    should_admit = False
    
    # Initialize metadata if not already present
    if obj.key not in metadata:
        metadata[obj.key] = {
            'replication_factor': 0,
            'consistency_score': 1.0,
            'failure_detection_count': 0,
            'resource_allocation_priority': 1.0
        }
    
    obj_metadata = metadata[obj.key]
    
    if (obj_metadata['replication_factor'] < REPLICATION_FACTOR_THRESHOLD and
        obj_metadata['consistency_score'] >= CONSISTENCY_SCORE_THRESHOLD and
        obj_metadata['failure_detection_count'] <= FAILURE_DETECTION_THRESHOLD and
        obj_metadata['resource_allocation_priority'] >= RESOURCE_ALLOCATION_PRIORITY_THRESHOLD):
        should_admit = True
    
    return should_admit

def update_after_admit(cache_snapshot, obj):
    '''
    This function defines how the policy update **each** of the metadata it maintains immediately after it decides to admit an object into the cache.
    Upon admission, the replication factor is incremented, the consistency score is recalculated, the failure detection count is reset, and the resource allocation priority is adjusted based on current cache load.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just admitted into the cache.
    - Return: `None`
    '''
    obj_metadata = metadata[obj.key]
    obj_metadata['replication_factor'] += 1
    obj_metadata['consistency_score'] = min(1.0, obj_metadata['consistency_score'] + 0.1)
    obj_metadata['failure_detection_count'] = 0
    obj_metadata['resource_allocation_priority'] = max(0.0, 1.0 - (cache_snapshot.size / cache_snapshot.capacity))

def update_after_not_admit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after it decides **not** to admit an object into the cache.
    If not admitted, the replication factor remains unchanged, the consistency score is slightly decreased, the failure detection count is incremented, and the resource allocation priority is lowered.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just denied admission to the cache.
    - Return: `None`
    '''
    obj_metadata = metadata[obj.key]
    obj_metadata['consistency_score'] = max(0.0, obj_metadata['consistency_score'] - 0.1)
    obj_metadata['failure_detection_count'] += 1
    obj_metadata['resource_allocation_priority'] = max(0.0, obj_metadata['resource_allocation_priority'] - 0.1)

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after a cache hit.
    On a cache hit, the replication factor is incremented, the consistency score is boosted, the failure detection count is reset, and the resource allocation priority is increased.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    obj_metadata = metadata[obj.key]
    obj_metadata['replication_factor'] += 1
    obj_metadata['consistency_score'] = min(1.0, obj_metadata['consistency_score'] + 0.2)
    obj_metadata['failure_detection_count'] = 0
    obj_metadata['resource_allocation_priority'] = min(1.0, obj_metadata['resource_allocation_priority'] + 0.1)