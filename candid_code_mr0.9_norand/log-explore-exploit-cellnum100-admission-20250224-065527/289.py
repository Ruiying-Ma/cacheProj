# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
HIGH_TRAFFIC_THRESHOLD = 1000  # Example threshold for high traffic load
MAX_SYSTEM_LOAD = 0.8  # Example maximum system load (80% of capacity)

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for traffic load (current request rate), database replication status (whether the data is replicated), integrity check status (whether the data has passed integrity checks), and system scalability (current system load and capacity).
traffic_load = 0
is_data_replicated = True
integrity_check_passed = True
system_load = 0

def admit(cache_snapshot, obj, key_to_be_evicted):
    '''
    This function defines how the policy determines whether an object should be admitted into the cache.
    The policy admits an object into the cache if the traffic load is high, the data is replicated, the integrity check is passed, and the system scalability is within acceptable limits. If any of these conditions are not met, the object is not admitted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object being requested.
        - `key_to_be_evicted`: The key of the object in the cache that may be evicted if the currently requested object is admitted and triggers an eviction. If no admission occurs or if admission does not cause an eviction, this is set to `None`.
    - Return:
        - `should_admit`: A boolean value indicating whether the requested object should be admitted into the cache. If `True`, the object is admitted; if `False`, it is not.
    '''
    global traffic_load, is_data_replicated, integrity_check_passed, system_load

    # Check if the traffic load is high
    if traffic_load < HIGH_TRAFFIC_THRESHOLD:
        return False

    # Check if the data is replicated
    if not is_data_replicated:
        return False

    # Check if the integrity check is passed
    if not integrity_check_passed:
        return False

    # Check if the system scalability is within acceptable limits
    new_system_load = (cache_snapshot.size + obj.size) / cache_snapshot.capacity
    if new_system_load > MAX_SYSTEM_LOAD:
        return False

    return True

def update_after_admit(cache_snapshot, obj):
    '''
    This function defines how the policy update **each** of the metadata it maintains immediately after it decides to admit an object into the cache.
    Upon admitting an object, the traffic load metadata is updated to reflect the new request rate, the database replication status is confirmed, the integrity check status is marked as passed, and the system scalability is recalculated to account for the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just admitted into the cache.
    - Return: `None`
    '''
    global traffic_load, is_data_replicated, integrity_check_passed, system_load

    # Update traffic load metadata
    traffic_load = cache_snapshot.access_count

    # Confirm database replication status
    is_data_replicated = True

    # Mark integrity check status as passed
    integrity_check_passed = True

    # Recalculate system scalability
    system_load = (cache_snapshot.size + obj.size) / cache_snapshot.capacity

def update_after_not_admit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after it decides **not** to admit an object into the cache.
    If an object is not admitted, the traffic load metadata is updated to reflect the new request rate, the database replication status is checked for any changes, the integrity check status is noted, and the system scalability is recalculated to ensure it remains within limits.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just denied admission to the cache.
    - Return: `None`
    '''
    global traffic_load, is_data_replicated, integrity_check_passed, system_load

    # Update traffic load metadata
    traffic_load = cache_snapshot.access_count

    # Check database replication status
    is_data_replicated = True

    # Note integrity check status
    integrity_check_passed = True

    # Recalculate system scalability
    system_load = cache_snapshot.size / cache_snapshot.capacity

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the traffic load metadata is updated to reflect the new request rate, the database replication status is confirmed, the integrity check status is re-verified, and the system scalability is recalculated to ensure it remains within acceptable limits.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    global traffic_load, is_data_replicated, integrity_check_passed, system_load

    # Update traffic load metadata
    traffic_load = cache_snapshot.access_count

    # Confirm database replication status
    is_data_replicated = True

    # Re-verify integrity check status
    integrity_check_passed = True

    # Recalculate system scalability
    system_load = cache_snapshot.size / cache_snapshot.capacity