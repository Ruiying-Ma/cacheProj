# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
REDUNDANCY_SCORE_INCREMENT = 1
REDUNDANCY_SCORE_DECREMENT = 0.1
RELIABILITY_THRESHOLD = 0.5

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including a redundancy score for each object, a fault tolerance level, a synchronization timestamp, and a reliability index for the system.
redundancy_scores = {}
fault_tolerance_level = 0
synchronization_timestamp = 0
reliability_index = 0

def admit(cache_snapshot, obj, key_to_be_evicted):
    '''
    This function defines how the policy determines whether an object should be admitted into the cache.
    The policy admits an object into the cache if its redundancy score is low, indicating it is not frequently duplicated, and if the system's reliability index is below a certain threshold, suggesting the need for more reliable data.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object being requested.
        - `key_to_be_evicted`: The key of the object in the cache that may be evicted if the currently requested object is admitted and triggers an eviction. If no admission occurs or if admission does not cause an eviction, this is set to `None`.
    - Return:
        - `should_admit`: A boolean value indicating whether the requested object should be admitted into the cache. If `True`, the object is admitted; if `False`, it is not.
    '''
    should_admit = None
    
    # Your code below
    global redundancy_scores, reliability_index

    redundancy_score = redundancy_scores.get(obj.key, 0)
    if redundancy_score < RELIABILITY_THRESHOLD and reliability_index < RELIABILITY_THRESHOLD:
        should_admit = True
    else:
        should_admit = False
    
    return should_admit

def update_after_admit(cache_snapshot, obj):
    '''
    This function defines how the policy update **each** of the metadata it maintains immediately after it decides to admit an object into the cache.
    Upon admitting an object, the redundancy score for the object is increased, the fault tolerance level is recalculated based on the new object, the synchronization timestamp is updated to the current time, and the reliability index is adjusted to reflect the new state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just admitted into the cache.
    - Return: `None`
    '''
    # Your code below
    global redundancy_scores, fault_tolerance_level, synchronization_timestamp, reliability_index

    redundancy_scores[obj.key] = redundancy_scores.get(obj.key, 0) + REDUNDANCY_SCORE_INCREMENT
    fault_tolerance_level = calculate_fault_tolerance_level(cache_snapshot, obj)
    synchronization_timestamp = cache_snapshot.access_count
    reliability_index = calculate_reliability_index(cache_snapshot)

def update_after_not_admit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after it decides **not** to admit an object into the cache.
    If an object is not admitted, the redundancy score for the object is slightly decreased, the fault tolerance level remains unchanged, the synchronization timestamp is updated to the current time, and the reliability index is recalculated to ensure it reflects the current state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just denied admission to the cache.
    - Return: `None`
    '''
    # Your code below
    global redundancy_scores, synchronization_timestamp, reliability_index

    redundancy_scores[obj.key] = max(0, redundancy_scores.get(obj.key, 0) - REDUNDANCY_SCORE_DECREMENT)
    synchronization_timestamp = cache_snapshot.access_count
    reliability_index = calculate_reliability_index(cache_snapshot)

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after a cache hit.
    After a cache hit, the redundancy score for the object is increased, the fault tolerance level is recalculated to reflect the accessed object, the synchronization timestamp is updated to the current time, and the reliability index is adjusted to reflect the increased reliability due to the hit.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Your code below
    global redundancy_scores, fault_tolerance_level, synchronization_timestamp, reliability_index

    redundancy_scores[obj.key] = redundancy_scores.get(obj.key, 0) + REDUNDANCY_SCORE_INCREMENT
    fault_tolerance_level = calculate_fault_tolerance_level(cache_snapshot, obj)
    synchronization_timestamp = cache_snapshot.access_count
    reliability_index = calculate_reliability_index(cache_snapshot)

def calculate_fault_tolerance_level(cache_snapshot, obj):
    '''
    This function calculates the fault tolerance level based on the current cache state and the new object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object being considered.
    - Return:
        - `fault_tolerance_level`: The recalculated fault tolerance level.
    '''
    # Placeholder implementation
    return len(cache_snapshot.cache) / cache_snapshot.capacity

def calculate_reliability_index(cache_snapshot):
    '''
    This function calculates the reliability index based on the current cache state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
    - Return:
        - `reliability_index`: The recalculated reliability index.
    '''
    # Placeholder implementation
    return cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)