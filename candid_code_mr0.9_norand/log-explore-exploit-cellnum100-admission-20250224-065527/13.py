# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_ADMISSION_PROBABILITY = 0.5
INITIAL_GHOST_LRU_CAPACITY = 100

# Put the metadata specifically maintained by the policy below. The policy maintains a ghost LRU queue with a limited and dynamically adjustable capacity to track recently requested objects.
ghost_lru_queue = []
ghost_lru_capacity = INITIAL_GHOST_LRU_CAPACITY
admission_probability = INITIAL_ADMISSION_PROBABILITY

def admit(cache_snapshot, obj, key_to_be_evicted):
    '''
    This function defines how the policy determines whether an object should be admitted into the cache.
    The policy admits an object into the cache if it is recorded in the ghost LRU queue. If the object is not in the ghost LRU queue, it is admitted with a certain probability, which can be dynamically adjusted based on the hit rate or other performance metrics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object being requested.
        - `key_to_be_evicted`: The key of the object in the cache that may be evicted if the currently requested object is admitted and triggers an eviction. If no admission occurs or if admission does not cause an eviction, this is set to `None`.
    - Return:
        - `should_admit`: A boolean value indicating whether the requested object should be admitted into the cache. If `True`, the object is admitted; if `False`, it is not.
    '''
    should_admit = None
    
    # Check if the object is in the ghost LRU queue
    if obj.key in ghost_lru_queue:
        should_admit = True
    else:
        # Determine admission based on the current probability
        should_admit = cache_snapshot.access_count % int(1 / admission_probability) == 0
    
    return should_admit

def update_after_admit(cache_snapshot, obj):
    '''
    This function defines how the policy update **each** of the metadata it maintains immediately after it decides to admit an object into the cache.
    After admitting an object, remove it from the ghost LRU queue if it exists there. Optionally, adjust the probability of admitting new objects based on recent cache performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just admitted into the cache.
    - Return: `None`
    '''
    global ghost_lru_queue, admission_probability
    
    # Remove the object from the ghost LRU queue if it exists
    if obj.key in ghost_lru_queue:
        ghost_lru_queue.remove(obj.key)
    
    # Optionally adjust the admission probability based on recent cache performance
    if cache_snapshot.hit_count + cache_snapshot.miss_count > 0:
        hit_rate = cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)
        admission_probability = min(1.0, max(0.1, hit_rate))

def update_after_not_admit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after it decides **not** to admit an object into the cache.
    After deciding not to admit an object, add the requested object to the MRU end of the ghost LRU queue. If this exceeds the queue's capacity, remove the LRU object. Optionally, increase the ghost LRU queue's capacity based on recent cache performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just denied admission to the cache.
    - Return: `None`
    '''
    global ghost_lru_queue, ghost_lru_capacity
    
    # Add the object to the MRU end of the ghost LRU queue
    if obj.key in ghost_lru_queue:
        ghost_lru_queue.remove(obj.key)
    ghost_lru_queue.append(obj.key)
    
    # If the queue exceeds its capacity, remove the LRU object
    if len(ghost_lru_queue) > ghost_lru_capacity:
        ghost_lru_queue.pop(0)
    
    # Optionally increase the ghost LRU queue's capacity based on recent cache performance
    if cache_snapshot.hit_count + cache_snapshot.miss_count > 0:
        miss_rate = cache_snapshot.miss_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)
        ghost_lru_capacity = min(2 * INITIAL_GHOST_LRU_CAPACITY, int(INITIAL_GHOST_LRU_CAPACITY * (1 + miss_rate)))

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after a cache hit.
    After a cache hit, decrease the capacity of the ghost LRU queue. Optionally, adjust the probability of admitting new objects based on recent cache performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    global ghost_lru_capacity, admission_probability
    
    # Decrease the capacity of the ghost LRU queue
    ghost_lru_capacity = max(INITIAL_GHOST_LRU_CAPACITY, ghost_lru_capacity - 1)
    
    # Optionally adjust the admission probability based on recent cache performance
    if cache_snapshot.hit_count + cache_snapshot.miss_count > 0:
        hit_rate = cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)
        admission_probability = min(1.0, max(0.1, hit_rate))