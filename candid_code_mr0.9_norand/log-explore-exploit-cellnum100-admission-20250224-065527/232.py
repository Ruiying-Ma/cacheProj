# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
FREQUENT_NODE_THRESHOLD = 10
HIGH_COMPRESSION_RATIO = 0.8
FREQUENT_ACCESS_THRESHOLD = 5
SESSION_TIMEOUT_THRESHOLD = 100

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including network topology information, data compression ratios, an audit log of access patterns, and session timeout durations.
network_topology = {}
compression_ratios = {}
audit_log = {}
session_timeouts = {}

def admit(cache_snapshot, obj, key_to_be_evicted):
    '''
    This function defines how the policy determines whether an object should be admitted into the cache.
    The policy admits an object into the cache if it is accessed from a frequently used network node, has a high compression ratio, is frequently accessed as per the audit log, and the session timeout is not imminent.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object being requested.
        - `key_to_be_evicted`: The key of the object in the cache that may be evicted if the currently requested object is admitted and triggers an eviction. If no admission occurs or if admission does not cause an eviction, this is set to `None`.
    - Return:
        - `should_admit`: A boolean value indicating whether the requested object should be admitted into the cache. If `True`, the object is admitted; if `False`, it is not.
    '''
    should_admit = False
    
    # Check network topology
    node_access_count = network_topology.get(obj.key, 0)
    if node_access_count < FREQUENT_NODE_THRESHOLD:
        return should_admit
    
    # Check compression ratio
    compression_ratio = compression_ratios.get(obj.key, 1.0)
    if compression_ratio < HIGH_COMPRESSION_RATIO:
        return should_admit
    
    # Check audit log for frequent access
    access_count = audit_log.get(obj.key, 0)
    if access_count < FREQUENT_ACCESS_THRESHOLD:
        return should_admit
    
    # Check session timeout
    session_timeout = session_timeouts.get(obj.key, 0)
    if session_timeout > SESSION_TIMEOUT_THRESHOLD:
        return should_admit
    
    should_admit = True
    return should_admit

def update_after_admit(cache_snapshot, obj):
    '''
    This function defines how the policy update **each** of the metadata it maintains immediately after it decides to admit an object into the cache.
    Upon admitting an object, the policy updates the network topology metadata to reflect the new access, recalculates the average data compression ratio, logs the access in the audit log, and resets the session timeout for the object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just admitted into the cache.
    - Return: `None`
    '''
    # Update network topology
    network_topology[obj.key] = network_topology.get(obj.key, 0) + 1
    
    # Recalculate average data compression ratio
    compression_ratios[obj.key] = (compression_ratios.get(obj.key, 1.0) + obj.size) / 2
    
    # Log the access in the audit log
    audit_log[obj.key] = audit_log.get(obj.key, 0) + 1
    
    # Reset the session timeout for the object
    session_timeouts[obj.key] = 0

def update_after_not_admit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after it decides **not** to admit an object into the cache.
    If an object is not admitted, the policy updates the audit log to reflect the access attempt, adjusts the network topology metadata to note the access from the node, and leaves the data compression and session timeout metadata unchanged.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just denied admission to the cache.
    - Return: `None`
    '''
    # Update the audit log to reflect the access attempt
    audit_log[obj.key] = audit_log.get(obj.key, 0) + 1
    
    # Adjust the network topology metadata to note the access from the node
    network_topology[obj.key] = network_topology.get(obj.key, 0) + 1

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the audit log to reflect the access, recalculates the average data compression ratio if the object is modified, updates the network topology metadata to reflect the access, and resets the session timeout for the object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Update the audit log to reflect the access
    audit_log[obj.key] = audit_log.get(obj.key, 0) + 1
    
    # Recalculate the average data compression ratio if the object is modified
    compression_ratios[obj.key] = (compression_ratios.get(obj.key, 1.0) + obj.size) / 2
    
    # Update the network topology metadata to reflect the access
    network_topology[obj.key] = network_topology.get(obj.key, 0) + 1
    
    # Reset the session timeout for the object
    session_timeouts[obj.key] = 0