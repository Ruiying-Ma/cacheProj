# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
DYNAMIC_THRESHOLD_FACTOR = 0.8
FREQUENCY_THRESHOLD = 5
DISK_ACCESS_LIMIT = 10
HIGH_ACCESS_SHARD_THRESHOLD = 10

# Put the metadata specifically maintained by the policy below. The policy maintains load metrics (current load, peak load), system throughput, efficiency ratio, operational metrics (average response time, cache occupancy rate), a hash map with data block identifiers, frequency of access, timestamp of last access, shard identifier, total disk accesses, shard-specific access frequencies, and resource usage statistics.
metadata = {
    'current_load': 0,
    'peak_load': 0,
    'system_throughput': 0,
    'efficiency_ratio': 0,
    'average_response_time': 0,
    'cache_occupancy_rate': 0,
    'frequency_of_access': {},
    'timestamp_of_last_access': {},
    'shard_identifier': {},
    'total_disk_accesses': 0,
    'shard_specific_access_frequencies': {},
    'resource_usage_statistics': {}
}

def admit(cache_snapshot, obj, key_to_be_evicted):
    '''
    This function defines how the policy determines whether an object should be admitted into the cache.
    The policy admits an object into the cache if the current load is below a dynamic threshold based on peak load and system throughput, or if its frequency of access exceeds a threshold, the total number of disk accesses since the last admission exceeds a limit, or if it belongs to a high-access shard and contributes to query optimization without significantly increasing resource usage.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object being requested.
        - `key_to_be_evicted`: The key of the object in the cache that may be evicted if the currently requested object is admitted and triggers an eviction. If no admission occurs or if admission does not cause an eviction, this is set to `None`.
    - Return:
        - `should_admit`: A boolean value indicating whether the requested object should be admitted into the cache. If `True`, the object is admitted; if `False`, it is not.
    '''
    should_admit = False
    
    dynamic_threshold = DYNAMIC_THRESHOLD_FACTOR * metadata['peak_load']
    current_load = metadata['current_load']
    obj_frequency = metadata['frequency_of_access'].get(obj.key, 0)
    total_disk_accesses = metadata['total_disk_accesses']
    shard_id = metadata['shard_identifier'].get(obj.key, None)
    shard_access_frequency = metadata['shard_specific_access_frequencies'].get(shard_id, 0)
    
    if current_load < dynamic_threshold:
        should_admit = True
    elif obj_frequency > FREQUENCY_THRESHOLD:
        should_admit = True
    elif total_disk_accesses > DISK_ACCESS_LIMIT:
        should_admit = True
    elif shard_access_frequency > HIGH_ACCESS_SHARD_THRESHOLD:
        should_admit = True
    
    return should_admit

def update_after_admit(cache_snapshot, obj):
    '''
    This function defines how the policy update **each** of the metadata it maintains immediately after it decides to admit an object into the cache.
    Upon admitting an object, the policy increments the current load, recalculates the efficiency ratio, updates the average response time and cache occupancy rate, sets the frequency of access to 1, updates the timestamp, resets the disk access counter, increments the shard's access frequency, updates the average query response time, and adjusts resource usage statistics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just admitted into the cache.
    - Return: `None`
    '''
    metadata['current_load'] += obj.size
    metadata['peak_load'] = max(metadata['peak_load'], metadata['current_load'])
    metadata['efficiency_ratio'] = cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)
    metadata['average_response_time'] = (metadata['average_response_time'] * cache_snapshot.access_count + 1) / (cache_snapshot.access_count + 1)
    metadata['cache_occupancy_rate'] = cache_snapshot.size / cache_snapshot.capacity
    metadata['frequency_of_access'][obj.key] = 1
    metadata['timestamp_of_last_access'][obj.key] = cache_snapshot.access_count
    metadata['total_disk_accesses'] = 0
    shard_id = metadata['shard_identifier'].get(obj.key, None)
    if shard_id:
        metadata['shard_specific_access_frequencies'][shard_id] = metadata['shard_specific_access_frequencies'].get(shard_id, 0) + 1
    metadata['resource_usage_statistics'][obj.key] = metadata['resource_usage_statistics'].get(obj.key, 0) + 1

def update_after_not_admit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after it decides **not** to admit an object into the cache.
    If an object is not admitted, the policy keeps the current load constant, recalculates the efficiency ratio, updates the average response time, increments the disk access counter, updates the hash map to increment the frequency of access for the data block identifier if it exists, updates the shard's access frequency, and logs the query response time.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just denied admission to the cache.
    - Return: `None`
    '''
    metadata['efficiency_ratio'] = cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)
    metadata['average_response_time'] = (metadata['average_response_time'] * cache_snapshot.access_count + 1) / (cache_snapshot.access_count + 1)
    metadata['total_disk_accesses'] += 1
    if obj.key in metadata['frequency_of_access']:
        metadata['frequency_of_access'][obj.key] += 1
    shard_id = metadata['shard_identifier'].get(obj.key, None)
    if shard_id:
        metadata['shard_specific_access_frequencies'][shard_id] = metadata['shard_specific_access_frequencies'].get(shard_id, 0) + 1
    metadata['resource_usage_statistics'][obj.key] = metadata['resource_usage_statistics'].get(obj.key, 0) + 1

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the hit count for the efficiency ratio, updates the average response time, updates the cache occupancy rate if necessary, increments the frequency of access for the data block identifier, updates the timestamp, increases the shard's access frequency, recalculates the average query response time, and updates resource usage statistics.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata['efficiency_ratio'] = cache_snapshot.hit_count / (cache_snapshot.hit_count + cache_snapshot.miss_count)
    metadata['average_response_time'] = (metadata['average_response_time'] * cache_snapshot.access_count + 1) / (cache_snapshot.access_count + 1)
    metadata['cache_occupancy_rate'] = cache_snapshot.size / cache_snapshot.capacity
    metadata['frequency_of_access'][obj.key] = metadata['frequency_of_access'].get(obj.key, 0) + 1
    metadata['timestamp_of_last_access'][obj.key] = cache_snapshot.access_count
    shard_id = metadata['shard_identifier'].get(obj.key, None)
    if shard_id:
        metadata['shard_specific_access_frequencies'][shard_id] = metadata['shard_specific_access_frequencies'].get(shard_id, 0) + 1
    metadata['resource_usage_statistics'][obj.key] = metadata['resource_usage_statistics'].get(obj.key, 0) + 1