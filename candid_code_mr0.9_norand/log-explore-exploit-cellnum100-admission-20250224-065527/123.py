# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ACCESS_THRESHOLD = 3
DISK_ACCESS_LIMIT = 5

# Put the metadata specifically maintained by the policy below. The policy maintains a hash map where keys are data block identifiers and values are tuples containing the frequency of access and the timestamp of the last access. It also keeps a counter for the total number of disk accesses.
metadata = {}
disk_access_counter = 0

def admit(cache_snapshot, obj, key_to_be_evicted):
    '''
    This function defines how the policy determines whether an object should be admitted into the cache.
    The policy admits an object into the cache if its frequency of access exceeds a certain threshold or if the total number of disk accesses since the last admission exceeds a predefined limit. If neither condition is met, the object is not admitted.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object being requested.
        - `key_to_be_evicted`: The key of the object in the cache that may be evicted if the currently requested object is admitted and triggers an eviction. If no admission occurs or if admission does not cause an eviction, this is set to `None`.
    - Return:
        - `should_admit`: A boolean value indicating whether the requested object should be admitted into the cache. If `True`, the object is admitted; if `False`, it is not.
    '''
    global disk_access_counter
    should_admit = False
    
    if obj.key in metadata:
        frequency, _ = metadata[obj.key]
    else:
        frequency = 0
    
    if frequency >= ACCESS_THRESHOLD or disk_access_counter >= DISK_ACCESS_LIMIT:
        should_admit = True
    
    return should_admit

def update_after_admit(cache_snapshot, obj):
    '''
    This function defines how the policy update **each** of the metadata it maintains immediately after it decides to admit an object into the cache.
    Upon admitting an object, the policy updates the hash map to set the frequency of access to 1 and the timestamp to the current time. It also resets the disk access counter to zero.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just admitted into the cache.
    - Return: `None`
    '''
    global metadata, disk_access_counter
    metadata[obj.key] = (1, cache_snapshot.access_count)
    disk_access_counter = 0

def update_after_not_admit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after it decides **not** to admit an object into the cache.
    If an object is not admitted, the policy increments the disk access counter by one and updates the hash map to increment the frequency of access for the data block identifier, if it exists.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just denied admission to the cache.
    - Return: `None`
    '''
    global metadata, disk_access_counter
    disk_access_counter += 1
    if obj.key in metadata:
        frequency, timestamp = metadata[obj.key]
        metadata[obj.key] = (frequency + 1, timestamp)

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the hash map to increment the frequency of access for the data block identifier and updates the timestamp to the current time.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    global metadata
    if obj.key in metadata:
        frequency, _ = metadata[obj.key]
        metadata[obj.key] = (frequency + 1, cache_snapshot.access_count)