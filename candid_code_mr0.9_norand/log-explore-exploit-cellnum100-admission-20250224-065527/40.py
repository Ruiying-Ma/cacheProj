# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
INITIAL_ADAPTIVE_THRESHOLD = 0.8
DENIED_ADMISSION_THRESHOLD = 10
HIT_RATE_THRESHOLD = 0.7

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including an adaptive threshold value, a load factor indicating current cache usage, a hit counter for cache efficiency, and a storage allocation tracker for each object type.
adaptive_threshold = INITIAL_ADAPTIVE_THRESHOLD
load_factor = 0
hit_counter = 0
denied_admission_counter = 0
storage_allocation_tracker = {}

def admit(cache_snapshot, obj, key_to_be_evicted):
    '''
    This function defines how the policy determines whether an object should be admitted into the cache.
    The policy admits an object if the current load factor is below the adaptive threshold and the object's type has not exceeded its allocated storage quota. The adaptive threshold is dynamically adjusted based on recent cache efficiency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object being requested.
        - `key_to_be_evicted`: The key of the object in the cache that may be evicted if the currently requested object is admitted and triggers an eviction. If no admission occurs or if admission does not cause an eviction, this is set to `None`.
    - Return:
        - `should_admit`: A boolean value indicating whether the requested object should be admitted into the cache. If `True`, the object is admitted; if `False`, it is not.
    '''
    global load_factor, adaptive_threshold, storage_allocation_tracker

    current_load_factor = cache_snapshot.size / cache_snapshot.capacity
    obj_type = type(obj).__name__
    obj_size = obj.size

    if obj_type not in storage_allocation_tracker:
        storage_allocation_tracker[obj_type] = 0

    if current_load_factor < adaptive_threshold and storage_allocation_tracker[obj_type] + obj_size <= cache_snapshot.capacity:
        should_admit = True
    else:
        should_admit = False
    
    return should_admit

def update_after_admit(cache_snapshot, obj):
    '''
    This function defines how the policy update **each** of the metadata it maintains immediately after it decides to admit an object into the cache.
    After admitting an object, the load factor is incremented, the storage allocation for the object's type is updated, and the adaptive threshold is recalibrated based on the new load factor and recent hit rates.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just admitted into the cache.
    - Return: `None`
    '''
    global load_factor, adaptive_threshold, storage_allocation_tracker, hit_counter

    load_factor = cache_snapshot.size / cache_snapshot.capacity
    obj_type = type(obj).__name__
    obj_size = obj.size

    storage_allocation_tracker[obj_type] += obj_size

    hit_rate = cache_snapshot.hit_count / cache_snapshot.access_count if cache_snapshot.access_count > 0 else 0
    if hit_rate > HIT_RATE_THRESHOLD:
        adaptive_threshold = min(1.0, adaptive_threshold + 0.05)
    else:
        adaptive_threshold = max(0.0, adaptive_threshold - 0.05)

def update_after_not_admit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after it decides **not** to admit an object into the cache.
    If an object is not admitted, the policy increments a counter for denied admissions and adjusts the adaptive threshold to be more lenient if the denied admissions are high, indicating potential underutilization.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just denied admission to the cache.
    - Return: `None`
    '''
    global denied_admission_counter, adaptive_threshold

    denied_admission_counter += 1

    if denied_admission_counter > DENIED_ADMISSION_THRESHOLD:
        adaptive_threshold = min(1.0, adaptive_threshold + 0.05)
        denied_admission_counter = 0

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the hit counter is incremented, and the adaptive threshold is adjusted to be more stringent if the hit rate is high, ensuring efficient use of cache space. The storage allocation tracker is also updated to reflect the continued relevance of the object's type.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    global hit_counter, adaptive_threshold, storage_allocation_tracker

    hit_counter += 1

    hit_rate = cache_snapshot.hit_count / cache_snapshot.access_count if cache_snapshot.access_count > 0 else 0
    if hit_rate > HIT_RATE_THRESHOLD:
        adaptive_threshold = max(0.0, adaptive_threshold - 0.05)
    else:
        adaptive_threshold = min(1.0, adaptive_threshold + 0.05)

    obj_type = type(obj).__name__
    if obj_type not in storage_allocation_tracker:
        storage_allocation_tracker[obj_type] = 0
    storage_allocation_tracker[obj_type] += obj.size