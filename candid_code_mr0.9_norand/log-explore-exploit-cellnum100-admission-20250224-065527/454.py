# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
MAX_CPU_UTILIZATION = 0.8  # Example threshold for CPU utilization
MAX_BANDWIDTH_USAGE = 0.8  # Example threshold for bandwidth usage

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each object including its size, access frequency, and last access timestamp. Additionally, it tracks overall cache bandwidth usage and CPU utilization metrics.
metadata = {
    'access_frequency': {},  # Dictionary to store access frequency of objects
    'last_access_timestamp': {},  # Dictionary to store last access timestamp of objects
    'denied_admissions': 0,  # Counter for tracking denied admissions
    'cpu_utilization': 0.0,  # Current CPU utilization
    'bandwidth_usage': 0.0,  # Current bandwidth usage
}

def admit(cache_snapshot, obj, key_to_be_evicted):
    '''
    This function defines how the policy determines whether an object should be admitted into the cache.
    An object is admitted if it optimizes bandwidth usage and does not significantly increase CPU utilization. Objects with higher access frequency and smaller size are prioritized to reduce system latency.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object being requested.
        - `key_to_be_evicted`: The key of the object in the cache that may be evicted if the currently requested object is admitted and triggers an eviction. If no admission occurs or if admission does not cause an eviction, this is set to `None`.
    - Return:
        - `should_admit`: A boolean value indicating whether the requested object should be admitted into the cache. If `True`, the object is admitted; if `False`, it is not.
    '''
    should_admit = False
    
    # Calculate the potential new size of the cache if the object is admitted
    new_cache_size = cache_snapshot.size + obj.size
    if key_to_be_evicted:
        new_cache_size -= cache_snapshot.cache[key_to_be_evicted].size
    
    # Check if the new size exceeds the cache capacity
    if new_cache_size > cache_snapshot.capacity:
        return False
    
    # Check if admitting the object would exceed CPU utilization or bandwidth usage thresholds
    if metadata['cpu_utilization'] > MAX_CPU_UTILIZATION or metadata['bandwidth_usage'] > MAX_BANDWIDTH_USAGE:
        return False
    
    # Prioritize objects with higher access frequency and smaller size
    if obj.size <= cache_snapshot.capacity and (obj.key not in metadata['access_frequency'] or metadata['access_frequency'][obj.key] > 1):
        should_admit = True
    
    return should_admit

def update_after_admit(cache_snapshot, obj):
    '''
    This function defines how the policy update **each** of the metadata it maintains immediately after it decides to admit an object into the cache.
    Upon admitting an object, the policy updates its size, sets its access frequency to 1, and records the current timestamp. It also recalculates the overall cache bandwidth usage and CPU utilization.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just admitted into the cache.
    - Return: `None`
    '''
    metadata['access_frequency'][obj.key] = 1
    metadata['last_access_timestamp'][obj.key] = cache_snapshot.access_count
    # Recalculate overall cache bandwidth usage and CPU utilization
    metadata['bandwidth_usage'] = (cache_snapshot.size + obj.size) / cache_snapshot.capacity
    metadata['cpu_utilization'] = min(1.0, metadata['cpu_utilization'] + 0.1)  # Example increment

def update_after_not_admit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after it decides **not** to admit an object into the cache.
    If an object is not admitted, the policy increments a counter for tracking denied admissions and updates the overall cache bandwidth usage and CPU utilization metrics to reflect the decision.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just denied admission to the cache.
    - Return: `None`
    '''
    metadata['denied_admissions'] += 1
    # Recalculate overall cache bandwidth usage and CPU utilization
    metadata['bandwidth_usage'] = cache_snapshot.size / cache_snapshot.capacity
    metadata['cpu_utilization'] = max(0.0, metadata['cpu_utilization'] - 0.05)  # Example decrement

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after a cache hit.
    When a cache hit occurs, the policy increments the access frequency of the object, updates its last access timestamp, and recalculates the overall cache bandwidth usage and CPU utilization to ensure optimal performance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    if obj.key in metadata['access_frequency']:
        metadata['access_frequency'][obj.key] += 1
    else:
        metadata['access_frequency'][obj.key] = 1
    metadata['last_access_timestamp'][obj.key] = cache_snapshot.access_count
    # Recalculate overall cache bandwidth usage and CPU utilization
    metadata['bandwidth_usage'] = cache_snapshot.size / cache_snapshot.capacity
    metadata['cpu_utilization'] = min(1.0, metadata['cpu_utilization'] + 0.05)  # Example increment