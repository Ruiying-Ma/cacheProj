# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
WEIGHT_QUERY_FREQUENCY = 0.4
WEIGHT_AVG_RESPONSE_TIME = 0.3
WEIGHT_REPLICA_COUNT = 0.2
WEIGHT_CONNECTION_SUCCESS_RATE = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for adaptive latency (average response time), query optimization (query frequency), data replication (replica count), and connection stability (connection success rate).
metadata = {
    'query_frequency': {},  # {obj.key: frequency}
    'avg_response_time': {},  # {obj.key: avg_response_time}
    'replica_count': {},  # {obj.key: replica_count}
    'connection_success_rate': {}  # {obj.key: success_rate}
}

def admit(cache_snapshot, obj, key_to_be_evicted):
    '''
    This function defines how the policy determines whether an object should be admitted into the cache.
    The policy admits an object if it has a high query frequency, low average response time, a low replica count, and a high connection success rate. The decision is based on a weighted score derived from these factors.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object being requested.
        - `key_to_be_evicted`: The key of the object in the cache that may be evicted if the currently requested object is admitted and triggers an eviction. If no admission occurs or if admission does not cause an eviction, this is set to `None`.
    - Return:
        - `should_admit`: A boolean value indicating whether the requested object should be admitted into the cache. If `True`, the object is admitted; if `False`, it is not.
    '''
    should_admit = None
    
    # Calculate the weighted score for the object
    query_frequency = metadata['query_frequency'].get(obj.key, 0)
    avg_response_time = metadata['avg_response_time'].get(obj.key, float('inf'))
    replica_count = metadata['replica_count'].get(obj.key, 0)
    connection_success_rate = metadata['connection_success_rate'].get(obj.key, 0)
    
    score = (WEIGHT_QUERY_FREQUENCY * query_frequency -
             WEIGHT_AVG_RESPONSE_TIME * avg_response_time -
             WEIGHT_REPLICA_COUNT * replica_count +
             WEIGHT_CONNECTION_SUCCESS_RATE * connection_success_rate)
    
    # Determine if the object should be admitted based on the score
    should_admit = score > 0
    
    return should_admit

def update_after_admit(cache_snapshot, obj):
    '''
    This function defines how the policy update **each** of the metadata it maintains immediately after it decides to admit an object into the cache.
    Upon admitting an object, the policy updates the average response time by incorporating the new object's response time, increments the query frequency for the object, adjusts the replica count, and updates the connection success rate based on recent connection attempts.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just admitted into the cache.
    - Return: `None`
    '''
    # Update query frequency
    metadata['query_frequency'][obj.key] = metadata['query_frequency'].get(obj.key, 0) + 1
    
    # Update average response time
    current_avg_response_time = metadata['avg_response_time'].get(obj.key, 0)
    new_avg_response_time = (current_avg_response_time * (metadata['query_frequency'][obj.key] - 1) + obj.size) / metadata['query_frequency'][obj.key]
    metadata['avg_response_time'][obj.key] = new_avg_response_time
    
    # Update replica count
    metadata['replica_count'][obj.key] = metadata['replica_count'].get(obj.key, 0) + 1
    
    # Update connection success rate
    metadata['connection_success_rate'][obj.key] = metadata['connection_success_rate'].get(obj.key, 0.9)  # Assume a default success rate

def update_after_not_admit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after it decides **not** to admit an object into the cache.
    If an object is not admitted, the policy still updates the query frequency for the object, recalculates the average response time excluding the object's response time, and adjusts the connection success rate based on recent connection attempts.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just denied admission to the cache.
    - Return: `None`
    '''
    # Update query frequency
    metadata['query_frequency'][obj.key] = metadata['query_frequency'].get(obj.key, 0) + 1
    
    # Update average response time
    if metadata['query_frequency'][obj.key] > 1:
        current_avg_response_time = metadata['avg_response_time'].get(obj.key, 0)
        new_avg_response_time = (current_avg_response_time * metadata['query_frequency'][obj.key] - obj.size) / (metadata['query_frequency'][obj.key] - 1)
        metadata['avg_response_time'][obj.key] = new_avg_response_time
    
    # Update connection success rate
    metadata['connection_success_rate'][obj.key] = metadata['connection_success_rate'].get(obj.key, 0.9)  # Assume a default success rate

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy updates the query frequency by incrementing it for the accessed object, recalculates the average response time based on the latest access time, and updates the connection success rate based on the success of the current connection.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Update query frequency
    metadata['query_frequency'][obj.key] = metadata['query_frequency'].get(obj.key, 0) + 1
    
    # Update average response time
    current_avg_response_time = metadata['avg_response_time'].get(obj.key, 0)
    new_avg_response_time = (current_avg_response_time * (metadata['query_frequency'][obj.key] - 1) + obj.size) / metadata['query_frequency'][obj.key]
    metadata['avg_response_time'][obj.key] = new_avg_response_time
    
    # Update connection success rate
    metadata['connection_success_rate'][obj.key] = metadata['connection_success_rate'].get(obj.key, 0.9)  # Assume a default success rate