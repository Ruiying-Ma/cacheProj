# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
HIGH_ARCHIVE_RETRIEVAL_COUNT_THRESHOLD = 10

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each object including a mirroring flag, a backup synchronization timestamp, a snapshot version, and an archive retrieval count.
metadata = {}

def admit(cache_snapshot, obj, key_to_be_evicted):
    '''
    This function defines how the policy determines whether an object should be admitted into the cache.
    An object is admitted into the cache if it has a high archive retrieval count or if its snapshot version is newer than the versions of objects currently in the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object being requested.
        - `key_to_be_evicted`: The key of the object in the cache that may be evicted if the currently requested object is admitted and triggers an eviction. If no admission occurs or if admission does not cause an eviction, this is set to `None`.
    - Return:
        - `should_admit`: A boolean value indicating whether the requested object should be admitted into the cache. If `True`, the object is admitted; if `False`, it is not.
    '''
    should_admit = False
    
    # Initialize metadata for the object if not already present
    if obj.key not in metadata:
        metadata[obj.key] = {
            'mirroring_flag': False,
            'backup_sync_timestamp': 0,
            'snapshot_version': 0,
            'archive_retrieval_count': 0
        }
    
    obj_metadata = metadata[obj.key]
    
    # Check if the object has a high archive retrieval count
    if obj_metadata['archive_retrieval_count'] >= HIGH_ARCHIVE_RETRIEVAL_COUNT_THRESHOLD:
        should_admit = True
    else:
        # Check if the object's snapshot version is newer than any in the cache
        for cached_obj in cache_snapshot.cache.values():
            cached_obj_metadata = metadata[cached_obj.key]
            if obj_metadata['snapshot_version'] > cached_obj_metadata['snapshot_version']:
                should_admit = True
                break
    
    return should_admit

def update_after_admit(cache_snapshot, obj):
    '''
    This function defines how the policy update **each** of the metadata it maintains immediately after it decides to admit an object into the cache.
    Upon admitting an object, the mirroring flag is set to true, the backup synchronization timestamp is updated to the current time, the snapshot version is recorded, and the archive retrieval count is incremented.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just admitted into the cache.
    - Return: `None`
    '''
    obj_metadata = metadata[obj.key]
    obj_metadata['mirroring_flag'] = True
    obj_metadata['backup_sync_timestamp'] = cache_snapshot.access_count
    obj_metadata['snapshot_version'] += 1
    obj_metadata['archive_retrieval_count'] += 1

def update_after_not_admit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after it decides **not** to admit an object into the cache.
    If an object is not admitted, the archive retrieval count is incremented, and the backup synchronization timestamp is updated to the current time to reflect the access attempt.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just denied admission to the cache.
    - Return: `None`
    '''
    obj_metadata = metadata[obj.key]
    obj_metadata['archive_retrieval_count'] += 1
    obj_metadata['backup_sync_timestamp'] = cache_snapshot.access_count

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after a cache hit.
    When a cache hit occurs, the mirroring flag is checked and updated if necessary, the backup synchronization timestamp is refreshed to the current time, the snapshot version is verified and updated if a newer version is available, and the archive retrieval count is incremented.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    obj_metadata = metadata[obj.key]
    if not obj_metadata['mirroring_flag']:
        obj_metadata['mirroring_flag'] = True
    obj_metadata['backup_sync_timestamp'] = cache_snapshot.access_count
    obj_metadata['snapshot_version'] += 1
    obj_metadata['archive_retrieval_count'] += 1