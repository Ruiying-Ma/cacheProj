# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
HIGH_ACCESS_FREQUENCY_THRESHOLD = 10
MAX_RESOURCE_USAGE_INCREASE = 0.1

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including shard-specific access frequencies, query response times, and resource usage statistics for each shard.
shard_access_frequency = {}
shard_response_time = {}
shard_resource_usage = {}

def admit(cache_snapshot, obj, key_to_be_evicted):
    '''
    This function defines how the policy determines whether an object should be admitted into the cache.
    The policy admits an object into the cache if it belongs to a shard with high access frequency, contributes to query optimization by reducing response time, and does not significantly increase resource usage.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object being requested.
        - `key_to_be_evicted`: The key of the object in the cache that may be evicted if the currently requested object is admitted and triggers an eviction. If no admission occurs or if admission does not cause an eviction, this is set to `None`.
    - Return:
        - `should_admit`: A boolean value indicating whether the requested object should be admitted into the cache. If `True`, the object is admitted; if `False`, it is not.
    '''
    should_admit = False
    
    shard = obj.key.split(':')[0]  # Assuming shard is determined by the prefix of the key
    current_frequency = shard_access_frequency.get(shard, 0)
    current_response_time = shard_response_time.get(shard, float('inf'))
    current_resource_usage = shard_resource_usage.get(shard, 0)
    
    if current_frequency >= HIGH_ACCESS_FREQUENCY_THRESHOLD:
        if obj.size + cache_snapshot.size <= cache_snapshot.capacity:
            if (obj.size / cache_snapshot.capacity) <= MAX_RESOURCE_USAGE_INCREASE:
                should_admit = True
    
    return should_admit

def update_after_admit(cache_snapshot, obj):
    '''
    This function defines how the policy update **each** of the metadata it maintains immediately after it decides to admit an object into the cache.
    Upon admitting an object, the policy increments the access frequency for the corresponding shard, updates the average query response time, and adjusts the resource usage statistics to reflect the new state.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just admitted into the cache.
    - Return: `None`
    '''
    shard = obj.key.split(':')[0]
    
    # Update access frequency
    shard_access_frequency[shard] = shard_access_frequency.get(shard, 0) + 1
    
    # Update response time (assuming a fixed response time reduction for simplicity)
    shard_response_time[shard] = (shard_response_time.get(shard, float('inf')) + 1) / 2
    
    # Update resource usage
    shard_resource_usage[shard] = shard_resource_usage.get(shard, 0) + (obj.size / cache_snapshot.capacity)

def update_after_not_admit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after it decides **not** to admit an object into the cache.
    If an object is not admitted, the policy still updates the access frequency for the corresponding shard and logs the query response time to monitor potential future changes in access patterns.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just denied admission to the cache.
    - Return: `None`
    '''
    shard = obj.key.split(':')[0]
    
    # Update access frequency
    shard_access_frequency[shard] = shard_access_frequency.get(shard, 0) + 1
    
    # Log response time (assuming a fixed response time for simplicity)
    shard_response_time[shard] = (shard_response_time.get(shard, float('inf')) + 1) / 2

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increases the access frequency for the shard, recalculates the average query response time to reflect the faster access, and updates resource usage statistics to ensure optimal allocation.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    shard = obj.key.split(':')[0]
    
    # Update access frequency
    shard_access_frequency[shard] = shard_access_frequency.get(shard, 0) + 1
    
    # Update response time (assuming a fixed response time reduction for simplicity)
    shard_response_time[shard] = (shard_response_time.get(shard, float('inf')) + 1) / 2
    
    # Update resource usage (assuming no change in resource usage on hit)
    shard_resource_usage[shard] = shard_resource_usage.get(shard, 0)