# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
FREQUENCY_THRESHOLD = 2
MAX_SIZE_LIMIT = 1024  # Example size limit in bytes
LOW_SERIALIZATION_SCORE = 5
LOW_INDEX_RECONSTRUCTION_SCORE = 5

# Put the metadata specifically maintained by the policy below. The policy maintains metadata including the frequency of access for each object, the size of each object, and a serialization score that indicates the complexity of serializing the object. It also keeps an index reconstruction score that measures the cost of reconstructing the index if the object is evicted.
metadata = {
    'frequency': {},  # key -> frequency of access
    'size': {},  # key -> size of the object
    'serialization_score': {},  # key -> serialization score
    'index_reconstruction_score': {}  # key -> index reconstruction score
}

def admit(cache_snapshot, obj, key_to_be_evicted):
    '''
    This function defines how the policy determines whether an object should be admitted into the cache.
    The policy admits an object into the cache if its frequency of access is above a certain threshold, its size is below a maximum limit, and its serialization score is low. Additionally, the index reconstruction score should be low to moderate to ensure efficient cache management.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object being requested.
        - `key_to_be_evicted`: The key of the object in the cache that may be evicted if the currently requested object is admitted and triggers an eviction. If no admission occurs or if admission does not cause an eviction, this is set to `None`.
    - Return:
        - `should_admit`: A boolean value indicating whether the requested object should be admitted into the cache. If `True`, the object is admitted; if `False`, it is not.
    '''
    should_admit = False
    
    # Check if the object meets the admission criteria
    frequency = metadata['frequency'].get(obj.key, 0)
    size = obj.size
    serialization_score = metadata['serialization_score'].get(obj.key, 0)
    index_reconstruction_score = metadata['index_reconstruction_score'].get(obj.key, 0)
    
    if (frequency >= FREQUENCY_THRESHOLD and
        size <= MAX_SIZE_LIMIT and
        serialization_score <= LOW_SERIALIZATION_SCORE and
        index_reconstruction_score <= LOW_INDEX_RECONSTRUCTION_SCORE):
        should_admit = True
    
    return should_admit

def update_after_admit(cache_snapshot, obj):
    '''
    This function defines how the policy update **each** of the metadata it maintains immediately after it decides to admit an object into the cache.
    Upon admitting an object, the policy updates the frequency of access to 1, records the size of the object, calculates and stores the serialization score, and updates the index reconstruction score based on the current state of the cache.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just admitted into the cache.
    - Return: `None`
    '''
    metadata['frequency'][obj.key] = 1
    metadata['size'][obj.key] = obj.size
    metadata['serialization_score'][obj.key] = calculate_serialization_score(obj)
    metadata['index_reconstruction_score'][obj.key] = calculate_index_reconstruction_score(cache_snapshot, obj)

def update_after_not_admit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after it decides **not** to admit an object into the cache.
    If an object is not admitted, the policy increments the frequency of access metadata for the object, recalculates the serialization score to reflect the potential future cost, and adjusts the index reconstruction score to account for the object's absence.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just denied admission to the cache.
    - Return: `None`
    '''
    metadata['frequency'][obj.key] = metadata['frequency'].get(obj.key, 0) + 1
    metadata['serialization_score'][obj.key] = calculate_serialization_score(obj)
    metadata['index_reconstruction_score'][obj.key] = calculate_index_reconstruction_score(cache_snapshot, obj)

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after a cache hit.
    After a cache hit, the policy increments the frequency of access for the object, re-evaluates the serialization score to ensure it remains accurate, and updates the index reconstruction score to reflect the current cache state, ensuring efficient future evictions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata['frequency'][obj.key] = metadata['frequency'].get(obj.key, 0) + 1
    metadata['serialization_score'][obj.key] = calculate_serialization_score(obj)
    metadata['index_reconstruction_score'][obj.key] = calculate_index_reconstruction_score(cache_snapshot, obj)

def calculate_serialization_score(obj):
    '''
    This function calculates the serialization score for an object.
    - Args:
        - `obj`: The object for which the serialization score is calculated.
    - Return:
        - `serialization_score`: An integer representing the serialization score of the object.
    '''
    # Example calculation (this should be replaced with the actual logic)
    return len(obj.key)  # Simplified example based on key length

def calculate_index_reconstruction_score(cache_snapshot, obj):
    '''
    This function calculates the index reconstruction score for an object.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object for which the index reconstruction score is calculated.
    - Return:
        - `index_reconstruction_score`: An integer representing the index reconstruction score of the object.
    '''
    # Example calculation (this should be replaced with the actual logic)
    return len(cache_snapshot.cache)  # Simplified example based on cache size