# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
COMPRESSION_RATIO_THRESHOLD = 0.5
API_REQUEST_RATE_LIMIT = 100  # Example limit, can be tuned

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for compression ratios, encryption key usage counts, session activity timestamps, and API request counts per session.
compression_ratios = {}
encryption_key_usage_counts = {}
session_activity_timestamps = {}
api_request_counts = {}

def admit(cache_snapshot, obj, key_to_be_evicted):
    '''
    This function defines how the policy determines whether an object should be admitted into the cache.
    The policy admits an object if its compression ratio is above a certain threshold, it belongs to an active session, and the API request rate for the session is within limits.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object being requested.
        - `key_to_be_evicted`: The key of the object in the cache that may be evicted if the currently requested object is admitted and triggers an eviction. If no admission occurs or if admission does not cause an eviction, this is set to `None`.
    - Return:
        - `should_admit`: A boolean value indicating whether the requested object should be admitted into the cache. If `True`, the object is admitted; if `False`, it is not.
    '''
    should_admit = False
    
    # Check compression ratio
    compression_ratio = compression_ratios.get(obj.key, 1.0)  # Default to 1.0 if not found
    if compression_ratio < COMPRESSION_RATIO_THRESHOLD:
        return False
    
    # Check session activity
    session_id = obj.key.split('-')[0]  # Assuming session_id is part of the key
    current_time = cache_snapshot.access_count
    last_activity = session_activity_timestamps.get(session_id, 0)
    if current_time - last_activity > API_REQUEST_RATE_LIMIT:
        return False
    
    # Check API request rate
    request_count = api_request_counts.get(session_id, 0)
    if request_count >= API_REQUEST_RATE_LIMIT:
        return False
    
    should_admit = True
    return should_admit

def update_after_admit(cache_snapshot, obj):
    '''
    This function defines how the policy update **each** of the metadata it maintains immediately after it decides to admit an object into the cache.
    Upon admitting an object, the policy updates the compression ratio metadata, increments the encryption key usage count, records the current timestamp for the session, and increments the API request count for the session.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just admitted into the cache.
    - Return: `None`
    '''
    # Update compression ratio metadata
    compression_ratios[obj.key] = 1.0  # Example update, should be based on actual compression logic
    
    # Increment encryption key usage count
    encryption_key_usage_counts[obj.key] = encryption_key_usage_counts.get(obj.key, 0) + 1
    
    # Record current timestamp for the session
    session_id = obj.key.split('-')[0]
    session_activity_timestamps[session_id] = cache_snapshot.access_count
    
    # Increment API request count for the session
    api_request_counts[session_id] = api_request_counts.get(session_id, 0) + 1

def update_after_not_admit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after it decides **not** to admit an object into the cache.
    If an object is not admitted, the policy updates the compression ratio metadata to reflect the attempted compression, increments the encryption key usage count, and logs the attempt in the session activity without incrementing the API request count.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just denied admission to the cache.
    - Return: `None`
    '''
    # Update compression ratio metadata
    compression_ratios[obj.key] = 1.0  # Example update, should be based on actual compression logic
    
    # Increment encryption key usage count
    encryption_key_usage_counts[obj.key] = encryption_key_usage_counts.get(obj.key, 0) + 1
    
    # Log the attempt in the session activity
    session_id = obj.key.split('-')[0]
    session_activity_timestamps[session_id] = cache_snapshot.access_count

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after a cache hit.
    Upon a cache hit, the policy updates the session activity timestamp to the current time, increments the API request count for the session, and updates the encryption key usage count.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    # Update session activity timestamp to the current time
    session_id = obj.key.split('-')[0]
    session_activity_timestamps[session_id] = cache_snapshot.access_count
    
    # Increment API request count for the session
    api_request_counts[session_id] = api_request_counts.get(session_id, 0) + 1
    
    # Update encryption key usage count
    encryption_key_usage_counts[obj.key] = encryption_key_usage_counts.get(obj.key, 0) + 1