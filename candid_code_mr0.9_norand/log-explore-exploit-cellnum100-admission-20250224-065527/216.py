# Import anything you need below. You must not use any randomness. For example, you cannot `import random`. Also, you cannot use any function in `numpy` that uses randomness, such as the functions in `numpy.random`.

# Put tunable constant parameters below
ACCESS_FREQUENCY_THRESHOLD = 5
REPLICATION_FACTOR_THRESHOLD = 2

# Put the metadata specifically maintained by the policy below. The policy maintains metadata for each object including access frequency, last access timestamp, and a replication factor indicating the number of times the object is replicated across different nodes for fault tolerance.
metadata = {}

def admit(cache_snapshot, obj, key_to_be_evicted):
    '''
    This function defines how the policy determines whether an object should be admitted into the cache.
    An object is admitted into the cache if its access frequency exceeds a predefined threshold or if it is not already replicated sufficiently across nodes. This ensures that frequently accessed objects and those critical for fault tolerance are prioritized.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object being requested.
        - `key_to_be_evicted`: The key of the object in the cache that may be evicted if the currently requested object is admitted and triggers an eviction. If no admission occurs or if admission does not cause an eviction, this is set to `None`.
    - Return:
        - `should_admit`: A boolean value indicating whether the requested object should be admitted into the cache. If `True`, the object is admitted; if `False`, it is not.
    '''
    should_admit = False
    
    # Initialize metadata for the object if it doesn't exist
    if obj.key not in metadata:
        metadata[obj.key] = {
            'access_frequency': 0,
            'last_access_timestamp': 0,
            'replication_factor': 1
        }
    
    # Check if the object should be admitted based on access frequency or replication factor
    if (metadata[obj.key]['access_frequency'] > ACCESS_FREQUENCY_THRESHOLD or
        metadata[obj.key]['replication_factor'] < REPLICATION_FACTOR_THRESHOLD):
        should_admit = True
    
    return should_admit

def update_after_admit(cache_snapshot, obj):
    '''
    This function defines how the policy update **each** of the metadata it maintains immediately after it decides to admit an object into the cache.
    Upon admitting an object, the access frequency is incremented, the last access timestamp is updated to the current time, and the replication factor is checked and updated if necessary to ensure fault tolerance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just admitted into the cache.
    - Return: `None`
    '''
    metadata[obj.key]['access_frequency'] += 1
    metadata[obj.key]['last_access_timestamp'] = cache_snapshot.access_count
    # Ensure replication factor meets the required level for fault tolerance
    if metadata[obj.key]['replication_factor'] < REPLICATION_FACTOR_THRESHOLD:
        metadata[obj.key]['replication_factor'] = REPLICATION_FACTOR_THRESHOLD

def update_after_not_admit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after it decides **not** to admit an object into the cache.
    If an object is not admitted, its access frequency is still incremented and the last access timestamp is updated. This allows the policy to track its access pattern for future admission decisions.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object that was just denied admission to the cache.
    - Return: `None`
    '''
    metadata[obj.key]['access_frequency'] += 1
    metadata[obj.key]['last_access_timestamp'] = cache_snapshot.access_count

def update_after_hit(cache_snapshot, obj):
    '''
    This function defines how the policy updates **each** of the metadata it maintains immediately after a cache hit.
    When a cache hit occurs, the access frequency of the object is incremented, and the last access timestamp is updated to the current time. The replication factor is also checked to ensure it meets the required level for fault tolerance.
    - Args:
        - `cache_snapshot`: A snapshot of the current cache state.
        - `obj`: The object accessed during the cache hit.
    - Return: `None`
    '''
    metadata[obj.key]['access_frequency'] += 1
    metadata[obj.key]['last_access_timestamp'] = cache_snapshot.access_count
    # Ensure replication factor meets the required level for fault tolerance
    if metadata[obj.key]['replication_factor'] < REPLICATION_FACTOR_THRESHOLD:
        metadata[obj.key]['replication_factor'] = REPLICATION_FACTOR_THRESHOLD